// swiftlint:disable collection_alignment

internal struct FactorCount {
  /// Upper 4 bits = count 5.
  /// Lower 4 bits = count 2.
  fileprivate let count25: UInt8

  internal var count2: Int {
    let u8 = self.count25 & 0b1111
    return Int(truncatingIfNeeded: u8)
  }

  internal var count5: Int {
    let u8 = (self.count25 >> 4) & 0b1111
    return Int(truncatingIfNeeded: u8)
  }
}

extension Tables {

  /// Prime factorization.
  /// Returns the count for each factor.
  /// `bid_factors` in Intel.
  internal static func getFactorCount<T: BinaryIntegerDecimal>(
    lessEqual1024: T
  ) -> FactorCount {
    let index = Int(lessEqual1024)
    let d = data[index]
    return FactorCount(count25: d)
  }
}

// Use following code to generate:
//
// func countFactor(_ n: UInt32, factor: UInt32) -> Int {
//   var n = n
//   var result = 0
//
//   while n != 0 && n.isMultiple(of: factor) {
//     n /= factor
//     result += 1
//   }
//
//   return result
// }
//
// for n: UInt32 in 0...1024 {
//   let count2 = countFactor(n, factor: 2)
//   let count5 = countFactor(n, factor: 5)
//
//   assert(count2 < 16 && count5 < 16, "How? We are up to 1024.")
//   let u8 = (UInt8(count5) << 4) | UInt8(count2)
//
//   print("\(u8), ", terminator: "")
//   if (n+1) % 10 == 0 {
//     print("// \(n-9)-\(n)")
//   }
// }

private let data: [UInt8] = [
   0, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 0-9
  17, 0, 2, 0, 1, 16, 4, 0, 1, 0, // 10-19
  18, 0, 1, 0, 3, 32, 1, 0, 2, 0, // 20-29
  17, 0, 5, 0, 1, 16, 2, 0, 1, 0, // 30-39
  19, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 40-49
  33, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 50-59
  18, 0, 1, 0, 6, 16, 1, 0, 2, 0, // 60-69
  17, 0, 3, 0, 1, 32, 2, 0, 1, 0, // 70-79
  20, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 80-89
  17, 0, 2, 0, 1, 16, 5, 0, 1, 0, // 90-99
  34, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 100-109
  17, 0, 4, 0, 1, 16, 2, 0, 1, 0, // 110-119
  19, 0, 1, 0, 2, 48, 1, 0, 7, 0, // 120-129
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 130-139
  18, 0, 1, 0, 4, 16, 1, 0, 2, 0, // 140-149
  33, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 150-159
  21, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 160-169
  17, 0, 2, 0, 1, 32, 4, 0, 1, 0, // 170-179
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 180-189
  17, 0, 6, 0, 1, 16, 2, 0, 1, 0, // 190-199
  35, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 200-209
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 210-219
  18, 0, 1, 0, 5, 32, 1, 0, 2, 0, // 220-229
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 230-239
  20, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 240-249
  49, 0, 2, 0, 1, 16, 8, 0, 1, 0, // 250-259
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 260-269
  17, 0, 4, 0, 1, 32, 2, 0, 1, 0, // 270-279
  19, 0, 1, 0, 2, 16, 1, 0, 5, 0, // 280-289
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 290-299
  34, 0, 1, 0, 4, 16, 1, 0, 2, 0, // 300-309
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 310-319
  22, 0, 1, 0, 2, 32, 1, 0, 3, 0, // 320-329
  17, 0, 2, 0, 1, 16, 4, 0, 1, 0, // 330-339
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 340-349
  33, 0, 5, 0, 1, 16, 2, 0, 1, 0, // 350-359
  19, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 360-369
  17, 0, 2, 0, 1, 48, 3, 0, 1, 0, // 370-379
  18, 0, 1, 0, 7, 16, 1, 0, 2, 0, // 380-389
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 390-399
  36, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 400-409
  17, 0, 2, 0, 1, 16, 5, 0, 1, 0, // 410-419
  18, 0, 1, 0, 3, 32, 1, 0, 2, 0, // 420-429
  17, 0, 4, 0, 1, 16, 2, 0, 1, 0, // 430-439
  19, 0, 1, 0, 2, 16, 1, 0, 6, 0, // 440-449
  33, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 450-459
  18, 0, 1, 0, 4, 16, 1, 0, 2, 0, // 460-469
  17, 0, 3, 0, 1, 32, 2, 0, 1, 0, // 470-479
  21, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 480-489
  17, 0, 2, 0, 1, 16, 4, 0, 1, 0, // 490-499
  50, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 500-509
  17, 0, 9, 0, 1, 16, 2, 0, 1, 0, // 510-519
  19, 0, 1, 0, 2, 32, 1, 0, 4, 0, // 520-529
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 530-539
  18, 0, 1, 0, 5, 16, 1, 0, 2, 0, // 540-549
  33, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 550-559
  20, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 560-569
  17, 0, 2, 0, 1, 32, 6, 0, 1, 0, // 570-579
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 580-589
  17, 0, 4, 0, 1, 16, 2, 0, 1, 0, // 590-599
  35, 0, 1, 0, 2, 16, 1, 0, 5, 0, // 600-609
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 610-619
  18, 0, 1, 0, 4, 64, 1, 0, 2, 0, // 620-629
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 630-639
  23, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 640-649
  33, 0, 2, 0, 1, 16, 4, 0, 1, 0, // 650-659
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 660-669
  17, 0, 5, 0, 1, 32, 2, 0, 1, 0, // 670-679
  19, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 680-689
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 690-699
  34, 0, 1, 0, 6, 16, 1, 0, 2, 0, // 700-709
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 710-719
  20, 0, 1, 0, 2, 32, 1, 0, 3, 0, // 720-729
  17, 0, 2, 0, 1, 16, 5, 0, 1, 0, // 730-739
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 740-749
  49, 0, 4, 0, 1, 16, 2, 0, 1, 0, // 750-759
  19, 0, 1, 0, 2, 16, 1, 0, 8, 0, // 760-769
  17, 0, 2, 0, 1, 32, 3, 0, 1, 0, // 770-779
  18, 0, 1, 0, 4, 16, 1, 0, 2, 0, // 780-789
  17, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 790-799
  37, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 800-809
  17, 0, 2, 0, 1, 16, 4, 0, 1, 0, // 810-819
  18, 0, 1, 0, 3, 32, 1, 0, 2, 0, // 820-829
  17, 0, 6, 0, 1, 16, 2, 0, 1, 0, // 830-839
  19, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 840-849
  33, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 850-859
  18, 0, 1, 0, 5, 16, 1, 0, 2, 0, // 860-869
  17, 0, 3, 0, 1, 48, 2, 0, 1, 0, // 870-879
  20, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 880-889
  17, 0, 2, 0, 1, 16, 7, 0, 1, 0, // 890-899
  34, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 900-909
  17, 0, 4, 0, 1, 16, 2, 0, 1, 0, // 910-919
  19, 0, 1, 0, 2, 32, 1, 0, 5, 0, // 920-929
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 930-939
  18, 0, 1, 0, 4, 16, 1, 0, 2, 0, // 940-949
  33, 0, 3, 0, 1, 16, 2, 0, 1, 0, // 950-959
  22, 0, 1, 0, 2, 16, 1, 0, 3, 0, // 960-969
  17, 0, 2, 0, 1, 32, 4, 0, 1, 0, // 970-979
  18, 0, 1, 0, 3, 16, 1, 0, 2, 0, // 980-989
  17, 0, 5, 0, 1, 16, 2, 0, 1, 0, // 990-999
  51, 0, 1, 0, 2, 16, 1, 0, 4, 0, // 1000-1009
  17, 0, 2, 0, 1, 16, 3, 0, 1, 0, // 1010-1019
  18, 0, 1, 0, 10,
]
