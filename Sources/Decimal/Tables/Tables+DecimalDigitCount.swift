// swiftlint:disable line_length

extension Tables {

  internal static let zeroDecimalDigitCount = 1

  /// Number of decimal digits in the provided value.
  ///
  /// - 0 -> 1
  /// - 1 -> 1
  /// - 2 -> 1
  /// - 10 -> 2
  internal static func getDecimalDigitCount<T: FixedWidthInteger & UnsignedInteger>(_ n: T) -> Int {
    if n == 0 {
      return Self.zeroDecimalDigitCount
    }

    let index = log2(nonZero: n)

    if index < data64.count {
      let d = data64[index]
      return d.digitCount + (n < d.threshold ? 0 : 1)
    }

    let index128 = index - data64.count

    if index128 < data128.count {
      let d = data128[index128]
      return d.digitCount + (n < d.threshold ? 0 : 1)
    }

    let index256 = index128 - data128.count
    let d = data256[index256]
    return d.digitCount + (n < d.threshold ? 0 : 1)
  }
}

// Use the following code to re-generate:
//
// var pow2 = UInt256(0, 0, 0, 1)
// var pow10 = UInt256(0, 0, 0, 10)
//
// while true {
//   let digitCount = pow10.description.count - 1
//
//   // 'pow2.isZero' is a check for overflow.
//   while pow2 < pow10 && !pow2.isZero {
//     let nextPow2 = pow2 &<< 1
//     defer { pow2 = nextPow2 }
//
//     let width: Int
//     let pow10String: String
//
//     if pow10.w0 == 0 && pow10.w1 == 0 && pow10.w2 == 0 {
//       width = 64
//       pow10String = hex(pow10.w3)
//     } else if pow10.w0 == 0 && pow10.w1 == 0 {
//       width = 128
//       pow10String = "UInt128(\(hex(pow10.w2)), \(hex(pow10.w3)))"
//     } else {
//       width = 256
//       pow10String = "UInt256(\(hex(pow10.w0)), \(hex(pow10.w1)), \(hex(pow10.w2)), \(hex(pow10.w3)))"
//     }
//
//     let log2 = UInt256.bitWidth - pow2.leadingZeroBitCount - 1
//
//     if nextPow2 < pow10 {
//       print("  Count\(width)(\(digitCount), \(pow10String)), // \(log2)")
//     } else {
//       // Somewhere in our exponent the digit count changes
//       print("  Count\(width)(\(digitCount), \(pow10String)), // \(log2), \(pow2)..<\(nextPow2), \(digitCount) or \(digitCount+1) digits")
//     }
//   }
//
//   let mul = pow10.multipliedReportingOverflow(by: 10 as UInt64)
//   if mul.overflow { print("UInt256 overflow"); break }
//   pow10 = mul.partialValue
// }
//
// func hex(_ n: UInt64) -> String {
//   let s = String(n, radix: 16)
//   let pad = String(repeating: "0", count: 16 - s.count)
//   return "0x" + pad + s
// }

// Add 1 digit if value is above `threshold`.
private struct Count64 {
  fileprivate let digitCount: Int
  fileprivate let threshold: UInt64

  fileprivate init(_ digitCount: Int, _ threshold: UInt64) {
    self.digitCount = digitCount
    self.threshold = threshold
  }
}

// Add 1 digit if value is above `threshold`.
private struct Count128 {
  fileprivate let digitCount: Int
  fileprivate let threshold: UInt128

  fileprivate init(_ digitCount: Int, _ threshold: UInt128) {
    self.digitCount = digitCount
    self.threshold = threshold
  }
}

// Add 1 digit if value is above `threshold`.
private struct Count256 {
  fileprivate let digitCount: Int
  fileprivate let threshold: UInt256

  fileprivate init(_ digitCount: Int, _ threshold: UInt256) {
    self.digitCount = digitCount
    self.threshold = threshold
  }
}

private let data64: [Count64] = [
  Count64(1, 0x000000000000000a), // 0
  Count64(1, 0x000000000000000a), // 1
  Count64(1, 0x000000000000000a), // 2
  Count64(1, 0x000000000000000a), // 3, 8..<16, 1 or 2 digits
  Count64(2, 0x0000000000000064), // 4
  Count64(2, 0x0000000000000064), // 5
  Count64(2, 0x0000000000000064), // 6, 64..<128, 2 or 3 digits
  Count64(3, 0x00000000000003e8), // 7
  Count64(3, 0x00000000000003e8), // 8
  Count64(3, 0x00000000000003e8), // 9, 512..<1024, 3 or 4 digits
  Count64(4, 0x0000000000002710), // 10
  Count64(4, 0x0000000000002710), // 11
  Count64(4, 0x0000000000002710), // 12
  Count64(4, 0x0000000000002710), // 13, 8192..<16384, 4 or 5 digits
  Count64(5, 0x00000000000186a0), // 14
  Count64(5, 0x00000000000186a0), // 15
  Count64(5, 0x00000000000186a0), // 16, 65536..<131072, 5 or 6 digits
  Count64(6, 0x00000000000f4240), // 17
  Count64(6, 0x00000000000f4240), // 18
  Count64(6, 0x00000000000f4240), // 19, 524288..<1048576, 6 or 7 digits
  Count64(7, 0x0000000000989680), // 20
  Count64(7, 0x0000000000989680), // 21
  Count64(7, 0x0000000000989680), // 22
  Count64(7, 0x0000000000989680), // 23, 8388608..<16777216, 7 or 8 digits
  Count64(8, 0x0000000005f5e100), // 24
  Count64(8, 0x0000000005f5e100), // 25
  Count64(8, 0x0000000005f5e100), // 26, 67108864..<134217728, 8 or 9 digits
  Count64(9, 0x000000003b9aca00), // 27
  Count64(9, 0x000000003b9aca00), // 28
  Count64(9, 0x000000003b9aca00), // 29, 536870912..<1073741824, 9 or 10 digits
  Count64(10, 0x00000002540be400), // 30
  Count64(10, 0x00000002540be400), // 31
  Count64(10, 0x00000002540be400), // 32
  Count64(10, 0x00000002540be400), // 33, 8589934592..<17179869184, 10 or 11 digits
  Count64(11, 0x000000174876e800), // 34
  Count64(11, 0x000000174876e800), // 35
  Count64(11, 0x000000174876e800), // 36, 68719476736..<137438953472, 11 or 12 digits
  Count64(12, 0x000000e8d4a51000), // 37
  Count64(12, 0x000000e8d4a51000), // 38
  Count64(12, 0x000000e8d4a51000), // 39, 549755813888..<1099511627776, 12 or 13 digits
  Count64(13, 0x000009184e72a000), // 40
  Count64(13, 0x000009184e72a000), // 41
  Count64(13, 0x000009184e72a000), // 42
  Count64(13, 0x000009184e72a000), // 43, 8796093022208..<17592186044416, 13 or 14 digits
  Count64(14, 0x00005af3107a4000), // 44
  Count64(14, 0x00005af3107a4000), // 45
  Count64(14, 0x00005af3107a4000), // 46, 70368744177664..<140737488355328, 14 or 15 digits
  Count64(15, 0x00038d7ea4c68000), // 47
  Count64(15, 0x00038d7ea4c68000), // 48
  Count64(15, 0x00038d7ea4c68000), // 49, 562949953421312..<1125899906842624, 15 or 16 digits
  Count64(16, 0x002386f26fc10000), // 50
  Count64(16, 0x002386f26fc10000), // 51
  Count64(16, 0x002386f26fc10000), // 52
  Count64(16, 0x002386f26fc10000), // 53, 9007199254740992..<18014398509481984, 16 or 17 digits
  Count64(17, 0x016345785d8a0000), // 54
  Count64(17, 0x016345785d8a0000), // 55
  Count64(17, 0x016345785d8a0000), // 56, 72057594037927936..<144115188075855872, 17 or 18 digits
  Count64(18, 0x0de0b6b3a7640000), // 57
  Count64(18, 0x0de0b6b3a7640000), // 58
  Count64(18, 0x0de0b6b3a7640000), // 59, 576460752303423488..<1152921504606846976, 18 or 19 digits
  Count64(19, 0x8ac7230489e80000), // 60
  Count64(19, 0x8ac7230489e80000), // 61
  Count64(19, 0x8ac7230489e80000), // 62
  Count64(19, 0x8ac7230489e80000), // 63, 9223372036854775808..<18446744073709551616, 19 or 20 digits
]

private let data128: [Count128] = [
  Count128(20, UInt128(0x0000000000000005, 0x6bc75e2d63100000)), // 64
  Count128(20, UInt128(0x0000000000000005, 0x6bc75e2d63100000)), // 65
  Count128(20, UInt128(0x0000000000000005, 0x6bc75e2d63100000)), // 66, 73786976294838206464..<147573952589676412928, 20 or 21 digits
  Count128(21, UInt128(0x0000000000000036, 0x35c9adc5dea00000)), // 67
  Count128(21, UInt128(0x0000000000000036, 0x35c9adc5dea00000)), // 68
  Count128(21, UInt128(0x0000000000000036, 0x35c9adc5dea00000)), // 69, 590295810358705651712..<1180591620717411303424, 21 or 22 digits
  Count128(22, UInt128(0x000000000000021e, 0x19e0c9bab2400000)), // 70
  Count128(22, UInt128(0x000000000000021e, 0x19e0c9bab2400000)), // 71
  Count128(22, UInt128(0x000000000000021e, 0x19e0c9bab2400000)), // 72
  Count128(22, UInt128(0x000000000000021e, 0x19e0c9bab2400000)), // 73, 9444732965739290427392..<18889465931478580854784, 22 or 23 digits
  Count128(23, UInt128(0x000000000000152d, 0x02c7e14af6800000)), // 74
  Count128(23, UInt128(0x000000000000152d, 0x02c7e14af6800000)), // 75
  Count128(23, UInt128(0x000000000000152d, 0x02c7e14af6800000)), // 76, 75557863725914323419136..<151115727451828646838272, 23 or 24 digits
  Count128(24, UInt128(0x000000000000d3c2, 0x1bcecceda1000000)), // 77
  Count128(24, UInt128(0x000000000000d3c2, 0x1bcecceda1000000)), // 78
  Count128(24, UInt128(0x000000000000d3c2, 0x1bcecceda1000000)), // 79, 604462909807314587353088..<1208925819614629174706176, 24 or 25 digits
  Count128(25, UInt128(0x0000000000084595, 0x161401484a000000)), // 80
  Count128(25, UInt128(0x0000000000084595, 0x161401484a000000)), // 81
  Count128(25, UInt128(0x0000000000084595, 0x161401484a000000)), // 82
  Count128(25, UInt128(0x0000000000084595, 0x161401484a000000)), // 83, 9671406556917033397649408..<19342813113834066795298816, 25 or 26 digits
  Count128(26, UInt128(0x000000000052b7d2, 0xdcc80cd2e4000000)), // 84
  Count128(26, UInt128(0x000000000052b7d2, 0xdcc80cd2e4000000)), // 85
  Count128(26, UInt128(0x000000000052b7d2, 0xdcc80cd2e4000000)), // 86, 77371252455336267181195264..<154742504910672534362390528, 26 or 27 digits
  Count128(27, UInt128(0x00000000033b2e3c, 0x9fd0803ce8000000)), // 87
  Count128(27, UInt128(0x00000000033b2e3c, 0x9fd0803ce8000000)), // 88
  Count128(27, UInt128(0x00000000033b2e3c, 0x9fd0803ce8000000)), // 89, 618970019642690137449562112..<1237940039285380274899124224, 27 or 28 digits
  Count128(28, UInt128(0x00000000204fce5e, 0x3e25026110000000)), // 90
  Count128(28, UInt128(0x00000000204fce5e, 0x3e25026110000000)), // 91
  Count128(28, UInt128(0x00000000204fce5e, 0x3e25026110000000)), // 92
  Count128(28, UInt128(0x00000000204fce5e, 0x3e25026110000000)), // 93, 9903520314283042199192993792..<19807040628566084398385987584, 28 or 29 digits
  Count128(29, UInt128(0x00000001431e0fae, 0x6d7217caa0000000)), // 94
  Count128(29, UInt128(0x00000001431e0fae, 0x6d7217caa0000000)), // 95
  Count128(29, UInt128(0x00000001431e0fae, 0x6d7217caa0000000)), // 96, 79228162514264337593543950336..<158456325028528675187087900672, 29 or 30 digits
  Count128(30, UInt128(0x0000000c9f2c9cd0, 0x4674edea40000000)), // 97
  Count128(30, UInt128(0x0000000c9f2c9cd0, 0x4674edea40000000)), // 98
  Count128(30, UInt128(0x0000000c9f2c9cd0, 0x4674edea40000000)), // 99, 633825300114114700748351602688..<1267650600228229401496703205376, 30 or 31 digits
  Count128(31, UInt128(0x0000007e37be2022, 0xc0914b2680000000)), // 100
  Count128(31, UInt128(0x0000007e37be2022, 0xc0914b2680000000)), // 101
  Count128(31, UInt128(0x0000007e37be2022, 0xc0914b2680000000)), // 102, 5070602400912917605986812821504..<10141204801825835211973625643008, 31 or 32 digits
  Count128(32, UInt128(0x000004ee2d6d415b, 0x85acef8100000000)), // 103
  Count128(32, UInt128(0x000004ee2d6d415b, 0x85acef8100000000)), // 104
  Count128(32, UInt128(0x000004ee2d6d415b, 0x85acef8100000000)), // 105
  Count128(32, UInt128(0x000004ee2d6d415b, 0x85acef8100000000)), // 106, 81129638414606681695789005144064..<162259276829213363391578010288128, 32 or 33 digits
  Count128(33, UInt128(0x0000314dc6448d93, 0x38c15b0a00000000)), // 107
  Count128(33, UInt128(0x0000314dc6448d93, 0x38c15b0a00000000)), // 108
  Count128(33, UInt128(0x0000314dc6448d93, 0x38c15b0a00000000)), // 109, 649037107316853453566312041152512..<1298074214633706907132624082305024, 33 or 34 digits
  Count128(34, UInt128(0x0001ed09bead87c0, 0x378d8e6400000000)), // 110
  Count128(34, UInt128(0x0001ed09bead87c0, 0x378d8e6400000000)), // 111
  Count128(34, UInt128(0x0001ed09bead87c0, 0x378d8e6400000000)), // 112, 5192296858534827628530496329220096..<10384593717069655257060992658440192, 34 or 35 digits
  Count128(35, UInt128(0x0013426172c74d82, 0x2b878fe800000000)), // 113
  Count128(35, UInt128(0x0013426172c74d82, 0x2b878fe800000000)), // 114
  Count128(35, UInt128(0x0013426172c74d82, 0x2b878fe800000000)), // 115
  Count128(35, UInt128(0x0013426172c74d82, 0x2b878fe800000000)), // 116, 83076749736557242056487941267521536..<166153499473114484112975882535043072, 35 or 36 digits
  Count128(36, UInt128(0x00c097ce7bc90715, 0xb34b9f1000000000)), // 117
  Count128(36, UInt128(0x00c097ce7bc90715, 0xb34b9f1000000000)), // 118
  Count128(36, UInt128(0x00c097ce7bc90715, 0xb34b9f1000000000)), // 119, 664613997892457936451903530140172288..<1329227995784915872903807060280344576, 36 or 37 digits
  Count128(37, UInt128(0x0785ee10d5da46d9, 0x00f436a000000000)), // 120
  Count128(37, UInt128(0x0785ee10d5da46d9, 0x00f436a000000000)), // 121
  Count128(37, UInt128(0x0785ee10d5da46d9, 0x00f436a000000000)), // 122, 5316911983139663491615228241121378304..<10633823966279326983230456482242756608, 37 or 38 digits
  Count128(38, UInt128(0x4b3b4ca85a86c47a, 0x098a224000000000)), // 123
  Count128(38, UInt128(0x4b3b4ca85a86c47a, 0x098a224000000000)), // 124
  Count128(38, UInt128(0x4b3b4ca85a86c47a, 0x098a224000000000)), // 125
  Count128(38, UInt128(0x4b3b4ca85a86c47a, 0x098a224000000000)), // 126, 85070591730234615865843651857942052864..<170141183460469231731687303715884105728, 38 or 39 digits
]

private let data256: [Count256] = [
  Count256(39, UInt256(0x0000000000000000, 0x0000000000000002, 0xf050fe938943acc4, 0x5f65568000000000)), // 127
  Count256(39, UInt256(0x0000000000000000, 0x0000000000000002, 0xf050fe938943acc4, 0x5f65568000000000)), // 128
  Count256(39, UInt256(0x0000000000000000, 0x0000000000000002, 0xf050fe938943acc4, 0x5f65568000000000)), // 129, 680564733841876926926749214863536422912..<1361129467683753853853498429727072845824, 39 or 40 digits
  Count256(40, UInt256(0x0000000000000000, 0x000000000000001d, 0x6329f1c35ca4bfab, 0xb9f5610000000000)), // 130
  Count256(40, UInt256(0x0000000000000000, 0x000000000000001d, 0x6329f1c35ca4bfab, 0xb9f5610000000000)), // 131
  Count256(40, UInt256(0x0000000000000000, 0x000000000000001d, 0x6329f1c35ca4bfab, 0xb9f5610000000000)), // 132, 5444517870735015415413993718908291383296..<10889035741470030830827987437816582766592, 40 or 41 digits
  Count256(41, UInt256(0x0000000000000000, 0x0000000000000125, 0xdfa371a19e6f7cb5, 0x4395ca0000000000)), // 133
  Count256(41, UInt256(0x0000000000000000, 0x0000000000000125, 0xdfa371a19e6f7cb5, 0x4395ca0000000000)), // 134
  Count256(41, UInt256(0x0000000000000000, 0x0000000000000125, 0xdfa371a19e6f7cb5, 0x4395ca0000000000)), // 135
  Count256(41, UInt256(0x0000000000000000, 0x0000000000000125, 0xdfa371a19e6f7cb5, 0x4395ca0000000000)), // 136, 87112285931760246646623899502532662132736..<174224571863520493293247799005065324265472, 41 or 42 digits
  Count256(42, UInt256(0x0000000000000000, 0x0000000000000b7a, 0xbc627050305adf14, 0xa3d9e40000000000)), // 137
  Count256(42, UInt256(0x0000000000000000, 0x0000000000000b7a, 0xbc627050305adf14, 0xa3d9e40000000000)), // 138
  Count256(42, UInt256(0x0000000000000000, 0x0000000000000b7a, 0xbc627050305adf14, 0xa3d9e40000000000)), // 139, 696898287454081973172991196020261297061888..<1393796574908163946345982392040522594123776, 42 or 43 digits
  Count256(43, UInt256(0x0000000000000000, 0x00000000000072cb, 0x5bd86321e38cb6ce, 0x6682e80000000000)), // 140
  Count256(43, UInt256(0x0000000000000000, 0x00000000000072cb, 0x5bd86321e38cb6ce, 0x6682e80000000000)), // 141
  Count256(43, UInt256(0x0000000000000000, 0x00000000000072cb, 0x5bd86321e38cb6ce, 0x6682e80000000000)), // 142, 5575186299632655785383929568162090376495104..<11150372599265311570767859136324180752990208, 43 or 44 digits
  Count256(44, UInt256(0x0000000000000000, 0x0000000000047bf1, 0x9673df52e37f2410, 0x011d100000000000)), // 143
  Count256(44, UInt256(0x0000000000000000, 0x0000000000047bf1, 0x9673df52e37f2410, 0x011d100000000000)), // 144
  Count256(44, UInt256(0x0000000000000000, 0x0000000000047bf1, 0x9673df52e37f2410, 0x011d100000000000)), // 145
  Count256(44, UInt256(0x0000000000000000, 0x0000000000047bf1, 0x9673df52e37f2410, 0x011d100000000000)), // 146, 89202980794122492566142873090593446023921664..<178405961588244985132285746181186892047843328, 44 or 45 digits
  Count256(45, UInt256(0x0000000000000000, 0x00000000002cd76f, 0xe086b93ce2f768a0, 0x0b22a00000000000)), // 147
  Count256(45, UInt256(0x0000000000000000, 0x00000000002cd76f, 0xe086b93ce2f768a0, 0x0b22a00000000000)), // 148
  Count256(45, UInt256(0x0000000000000000, 0x00000000002cd76f, 0xe086b93ce2f768a0, 0x0b22a00000000000)), // 149, 713623846352979940529142984724747568191373312..<1427247692705959881058285969449495136382746624, 45 or 46 digits
  Count256(46, UInt256(0x0000000000000000, 0x0000000001c06a5e, 0xc5433c60ddaa1640, 0x6f5a400000000000)), // 150
  Count256(46, UInt256(0x0000000000000000, 0x0000000001c06a5e, 0xc5433c60ddaa1640, 0x6f5a400000000000)), // 151
  Count256(46, UInt256(0x0000000000000000, 0x0000000001c06a5e, 0xc5433c60ddaa1640, 0x6f5a400000000000)), // 152, 5708990770823839524233143877797980545530986496..<11417981541647679048466287755595961091061972992, 46 or 47 digits
  Count256(47, UInt256(0x0000000000000000, 0x00000000118427b3, 0xb4a05bc8a8a4de84, 0x5986800000000000)), // 153
  Count256(47, UInt256(0x0000000000000000, 0x00000000118427b3, 0xb4a05bc8a8a4de84, 0x5986800000000000)), // 154
  Count256(47, UInt256(0x0000000000000000, 0x00000000118427b3, 0xb4a05bc8a8a4de84, 0x5986800000000000)), // 155
  Count256(47, UInt256(0x0000000000000000, 0x00000000118427b3, 0xb4a05bc8a8a4de84, 0x5986800000000000)), // 156, 91343852333181432387730302044767688728495783936..<182687704666362864775460604089535377456991567872, 47 or 48 digits
  Count256(48, UInt256(0x0000000000000000, 0x00000000af298d05, 0x0e4395d69670b12b, 0x7f41000000000000)), // 157
  Count256(48, UInt256(0x0000000000000000, 0x00000000af298d05, 0x0e4395d69670b12b, 0x7f41000000000000)), // 158
  Count256(48, UInt256(0x0000000000000000, 0x00000000af298d05, 0x0e4395d69670b12b, 0x7f41000000000000)), // 159, 730750818665451459101842416358141509827966271488..<1461501637330902918203684832716283019655932542976, 48 or 49 digits
  Count256(49, UInt256(0x0000000000000000, 0x00000006d79f8232, 0x8ea3da61e066ebb2, 0xf88a000000000000)), // 160
  Count256(49, UInt256(0x0000000000000000, 0x00000006d79f8232, 0x8ea3da61e066ebb2, 0xf88a000000000000)), // 161
  Count256(49, UInt256(0x0000000000000000, 0x00000006d79f8232, 0x8ea3da61e066ebb2, 0xf88a000000000000)), // 162, 5846006549323611672814739330865132078623730171904..<11692013098647223345629478661730264157247460343808, 49 or 50 digits
  Count256(50, UInt256(0x0000000000000000, 0x000000446c3b15f9, 0x926687d2c40534fd, 0xb564000000000000)), // 163
  Count256(50, UInt256(0x0000000000000000, 0x000000446c3b15f9, 0x926687d2c40534fd, 0xb564000000000000)), // 164
  Count256(50, UInt256(0x0000000000000000, 0x000000446c3b15f9, 0x926687d2c40534fd, 0xb564000000000000)), // 165
  Count256(50, UInt256(0x0000000000000000, 0x000000446c3b15f9, 0x926687d2c40534fd, 0xb564000000000000)), // 166, 93536104789177786765035829293842113257979682750464..<187072209578355573530071658587684226515959365500928, 50 or 51 digits
  Count256(51, UInt256(0x0000000000000000, 0x000002ac3a4edbbf, 0xb8014e3ba83411e9, 0x15e8000000000000)), // 167
  Count256(51, UInt256(0x0000000000000000, 0x000002ac3a4edbbf, 0xb8014e3ba83411e9, 0x15e8000000000000)), // 168
  Count256(51, UInt256(0x0000000000000000, 0x000002ac3a4edbbf, 0xb8014e3ba83411e9, 0x15e8000000000000)), // 169, 748288838313422294120286634350736906063837462003712..<1496577676626844588240573268701473812127674924007424, 51 or 52 digits
  Count256(52, UInt256(0x0000000000000000, 0x00001aba4714957d, 0x300d0e549208b31a, 0xdb10000000000000)), // 170
  Count256(52, UInt256(0x0000000000000000, 0x00001aba4714957d, 0x300d0e549208b31a, 0xdb10000000000000)), // 171
  Count256(52, UInt256(0x0000000000000000, 0x00001aba4714957d, 0x300d0e549208b31a, 0xdb10000000000000)), // 172, 5986310706507378352962293074805895248510699696029696..<11972621413014756705924586149611790497021399392059392, 52 or 53 digits
  Count256(53, UInt256(0x0000000000000000, 0x00010b46c6cdd6e3, 0xe0828f4db456ff0c, 0x8ea0000000000000)), // 173
  Count256(53, UInt256(0x0000000000000000, 0x00010b46c6cdd6e3, 0xe0828f4db456ff0c, 0x8ea0000000000000)), // 174
  Count256(53, UInt256(0x0000000000000000, 0x00010b46c6cdd6e3, 0xe0828f4db456ff0c, 0x8ea0000000000000)), // 175
  Count256(53, UInt256(0x0000000000000000, 0x00010b46c6cdd6e3, 0xe0828f4db456ff0c, 0x8ea0000000000000)), // 176, 95780971304118053647396689196894323976171195136475136..<191561942608236107294793378393788647952342390272950272, 53 or 54 digits
  Count256(54, UInt256(0x0000000000000000, 0x000a70c3c40a64e6, 0xc51999090b65f67d, 0x9240000000000000)), // 177
  Count256(54, UInt256(0x0000000000000000, 0x000a70c3c40a64e6, 0xc51999090b65f67d, 0x9240000000000000)), // 178
  Count256(54, UInt256(0x0000000000000000, 0x000a70c3c40a64e6, 0xc51999090b65f67d, 0x9240000000000000)), // 179, 766247770432944429179173513575154591809369561091801088..<1532495540865888858358347027150309183618739122183602176, 54 or 55 digits
  Count256(55, UInt256(0x0000000000000000, 0x006867a5a867f103, 0xb2fffa5a71fba0e7, 0xb680000000000000)), // 180
  Count256(55, UInt256(0x0000000000000000, 0x006867a5a867f103, 0xb2fffa5a71fba0e7, 0xb680000000000000)), // 181
  Count256(55, UInt256(0x0000000000000000, 0x006867a5a867f103, 0xb2fffa5a71fba0e7, 0xb680000000000000)), // 182, 6129982163463555433433388108601236734474956488734408704..<12259964326927110866866776217202473468949912977468817408, 55 or 56 digits
  Count256(56, UInt256(0x0000000000000000, 0x04140c78940f6a24, 0xfdffc78873d4490d, 0x2100000000000000)), // 183
  Count256(56, UInt256(0x0000000000000000, 0x04140c78940f6a24, 0xfdffc78873d4490d, 0x2100000000000000)), // 184
  Count256(56, UInt256(0x0000000000000000, 0x04140c78940f6a24, 0xfdffc78873d4490d, 0x2100000000000000)), // 185
  Count256(56, UInt256(0x0000000000000000, 0x04140c78940f6a24, 0xfdffc78873d4490d, 0x2100000000000000)), // 186, 98079714615416886934934209737619787751599303819750539264..<196159429230833773869868419475239575503198607639501078528, 56 or 57 digits
  Count256(57, UInt256(0x0000000000000000, 0x28c87cb5c89a2571, 0xebfdcb54864ada83, 0x4a00000000000000)), // 187
  Count256(57, UInt256(0x0000000000000000, 0x28c87cb5c89a2571, 0xebfdcb54864ada83, 0x4a00000000000000)), // 188
  Count256(57, UInt256(0x0000000000000000, 0x28c87cb5c89a2571, 0xebfdcb54864ada83, 0x4a00000000000000)), // 189, 784637716923335095479473677900958302012794430558004314112..<1569275433846670190958947355801916604025588861116008628224, 57 or 58 digits
  Count256(58, UInt256(0x0000000000000001, 0x97d4df19d6057673, 0x37e9f14d3eec8920, 0xe400000000000000)), // 190
  Count256(58, UInt256(0x0000000000000001, 0x97d4df19d6057673, 0x37e9f14d3eec8920, 0xe400000000000000)), // 191
  Count256(58, UInt256(0x0000000000000001, 0x97d4df19d6057673, 0x37e9f14d3eec8920, 0xe400000000000000)), // 192, 6277101735386680763835789423207666416102355444464034512896..<12554203470773361527671578846415332832204710888928069025792, 58 or 59 digits
  Count256(59, UInt256(0x000000000000000f, 0xee50b7025c36a080, 0x2f236d04753d5b48, 0xe800000000000000)), // 193
  Count256(59, UInt256(0x000000000000000f, 0xee50b7025c36a080, 0x2f236d04753d5b48, 0xe800000000000000)), // 194
  Count256(59, UInt256(0x000000000000000f, 0xee50b7025c36a080, 0x2f236d04753d5b48, 0xe800000000000000)), // 195, 50216813883093446110686315385661331328818843555712276103168..<100433627766186892221372630771322662657637687111424552206336, 59 or 60 digits
  Count256(60, UInt256(0x000000000000009f, 0x4f2726179a224501, 0xd762422c946590d9, 0x1000000000000000)), // 196
  Count256(60, UInt256(0x000000000000009f, 0x4f2726179a224501, 0xd762422c946590d9, 0x1000000000000000)), // 197
  Count256(60, UInt256(0x000000000000009f, 0x4f2726179a224501, 0xd762422c946590d9, 0x1000000000000000)), // 198
  Count256(60, UInt256(0x000000000000009f, 0x4f2726179a224501, 0xd762422c946590d9, 0x1000000000000000)), // 199, 803469022129495137770981046170581301261101496891396417650688..<1606938044258990275541962092341162602522202993782792835301376, 60 or 61 digits
  Count256(61, UInt256(0x0000000000000639, 0x17877cec0556b212, 0x69d695bdcbf7a87a, 0xa000000000000000)), // 200
  Count256(61, UInt256(0x0000000000000639, 0x17877cec0556b212, 0x69d695bdcbf7a87a, 0xa000000000000000)), // 201
  Count256(61, UInt256(0x0000000000000639, 0x17877cec0556b212, 0x69d695bdcbf7a87a, 0xa000000000000000)), // 202, 6427752177035961102167848369364650410088811975131171341205504..<12855504354071922204335696738729300820177623950262342682411008, 61 or 62 digits
  Count256(62, UInt256(0x0000000000003e3a, 0xeb4ae1383562f4b8, 0x2261d969f7ac94ca, 0x4000000000000000)), // 203
  Count256(62, UInt256(0x0000000000003e3a, 0xeb4ae1383562f4b8, 0x2261d969f7ac94ca, 0x4000000000000000)), // 204
  Count256(62, UInt256(0x0000000000003e3a, 0xeb4ae1383562f4b8, 0x2261d969f7ac94ca, 0x4000000000000000)), // 205, 51422017416287688817342786954917203280710495801049370729644032..<102844034832575377634685573909834406561420991602098741459288064, 62 or 63 digits
  Count256(63, UInt256(0x0000000000026e4d, 0x30eccc3215dd8f31, 0x57d27e23acbdcfe6, 0x8000000000000000)), // 206
  Count256(63, UInt256(0x0000000000026e4d, 0x30eccc3215dd8f31, 0x57d27e23acbdcfe6, 0x8000000000000000)), // 207
  Count256(63, UInt256(0x0000000000026e4d, 0x30eccc3215dd8f31, 0x57d27e23acbdcfe6, 0x8000000000000000)), // 208
  Count256(63, UInt256(0x0000000000026e4d, 0x30eccc3215dd8f31, 0x57d27e23acbdcfe6, 0x8000000000000000)), // 209, 822752278660603021077484591278675252491367932816789931674304512..<1645504557321206042154969182557350504982735865633579863348609024, 63 or 64 digits
  Count256(64, UInt256(0x0000000000184f03, 0xe93ff9f4daa797ed, 0x6e38ed64bf6a1f01, 0x0000000000000000)), // 210
  Count256(64, UInt256(0x0000000000184f03, 0xe93ff9f4daa797ed, 0x6e38ed64bf6a1f01, 0x0000000000000000)), // 211
  Count256(64, UInt256(0x0000000000184f03, 0xe93ff9f4daa797ed, 0x6e38ed64bf6a1f01, 0x0000000000000000)), // 212, 6582018229284824168619876730229402019930943462534319453394436096..<13164036458569648337239753460458804039861886925068638906788872192, 64 or 65 digits
  Count256(65, UInt256(0x0000000000f31627, 0x1c7fc3908a8bef46, 0x4e3945ef7a25360a, 0x0000000000000000)), // 213
  Count256(65, UInt256(0x0000000000f31627, 0x1c7fc3908a8bef46, 0x4e3945ef7a25360a, 0x0000000000000000)), // 214
  Count256(65, UInt256(0x0000000000f31627, 0x1c7fc3908a8bef46, 0x4e3945ef7a25360a, 0x0000000000000000)), // 215, 52656145834278593348959013841835216159447547700274555627155488768..<105312291668557186697918027683670432318895095400549111254310977536, 65 or 66 digits
  Count256(66, UInt256(0x00000000097edd87, 0x1cfda3a5697758bf, 0x0e3cbb5ac5741c64, 0x0000000000000000)), // 216
  Count256(66, UInt256(0x00000000097edd87, 0x1cfda3a5697758bf, 0x0e3cbb5ac5741c64, 0x0000000000000000)), // 217
  Count256(66, UInt256(0x00000000097edd87, 0x1cfda3a5697758bf, 0x0e3cbb5ac5741c64, 0x0000000000000000)), // 218
  Count256(66, UInt256(0x00000000097edd87, 0x1cfda3a5697758bf, 0x0e3cbb5ac5741c64, 0x0000000000000000)), // 219, 842498333348457493583344221469363458551160763204392890034487820288..<1684996666696914987166688442938726917102321526408785780068975640576, 66 or 67 digits
  Count256(67, UInt256(0x000000005ef4a747, 0x21e864761ea97776, 0x8e5f518bb6891be8, 0x0000000000000000)), // 220
  Count256(67, UInt256(0x000000005ef4a747, 0x21e864761ea97776, 0x8e5f518bb6891be8, 0x0000000000000000)), // 221
  Count256(67, UInt256(0x000000005ef4a747, 0x21e864761ea97776, 0x8e5f518bb6891be8, 0x0000000000000000)), // 222, 6739986666787659948666753771754907668409286105635143120275902562304..<13479973333575319897333507543509815336818572211270286240551805124608, 67 or 68 digits
  Count256(68, UInt256(0x00000003b58e88c7, 0x5313ec9d329eaaa1, 0x8fb92f75215b1710, 0x0000000000000000)), // 223
  Count256(68, UInt256(0x00000003b58e88c7, 0x5313ec9d329eaaa1, 0x8fb92f75215b1710, 0x0000000000000000)), // 224
  Count256(68, UInt256(0x00000003b58e88c7, 0x5313ec9d329eaaa1, 0x8fb92f75215b1710, 0x0000000000000000)), // 225, 53919893334301279589334030174039261347274288845081144962207220498432..<107839786668602559178668060348078522694548577690162289924414440996864, 68 or 69 digits
  Count256(69, UInt256(0x00000025179157c9, 0x3ec73e23fa32aa4f, 0x9d3bda934d8ee6a0, 0x0000000000000000)), // 226
  Count256(69, UInt256(0x00000025179157c9, 0x3ec73e23fa32aa4f, 0x9d3bda934d8ee6a0, 0x0000000000000000)), // 227
  Count256(69, UInt256(0x00000025179157c9, 0x3ec73e23fa32aa4f, 0x9d3bda934d8ee6a0, 0x0000000000000000)), // 228
  Count256(69, UInt256(0x00000025179157c9, 0x3ec73e23fa32aa4f, 0x9d3bda934d8ee6a0, 0x0000000000000000)), // 229, 862718293348820473429344482784628181556388621521298319395315527974912..<1725436586697640946858688965569256363112777243042596638790631055949824, 69 or 70 digits
  Count256(70, UInt256(0x00000172ebad6ddc, 0x73c86d67c5faa71c, 0x245689c107950240, 0x0000000000000000)), // 230
  Count256(70, UInt256(0x00000172ebad6ddc, 0x73c86d67c5faa71c, 0x245689c107950240, 0x0000000000000000)), // 231
  Count256(70, UInt256(0x00000172ebad6ddc, 0x73c86d67c5faa71c, 0x245689c107950240, 0x0000000000000000)), // 232, 6901746346790563787434755862277025452451108972170386555162524223799296..<13803492693581127574869511724554050904902217944340773110325048447598592, 70 or 71 digits
  Count256(71, UInt256(0x00000e7d34c64a9c, 0x85d4460dbbca8719, 0x6b61618a4bd21680, 0x0000000000000000)), // 233
  Count256(71, UInt256(0x00000e7d34c64a9c, 0x85d4460dbbca8719, 0x6b61618a4bd21680, 0x0000000000000000)), // 234
  Count256(71, UInt256(0x00000e7d34c64a9c, 0x85d4460dbbca8719, 0x6b61618a4bd21680, 0x0000000000000000)), // 235, 55213970774324510299478046898216203619608871777363092441300193790394368..<110427941548649020598956093796432407239217743554726184882600387580788736, 71 or 72 digits
  Count256(72, UInt256(0x000090e40fbeea1d, 0x3a4abc8955e946fe, 0x31cdcf66f634e100, 0x0000000000000000)), // 236
  Count256(72, UInt256(0x000090e40fbeea1d, 0x3a4abc8955e946fe, 0x31cdcf66f634e100, 0x0000000000000000)), // 237
  Count256(72, UInt256(0x000090e40fbeea1d, 0x3a4abc8955e946fe, 0x31cdcf66f634e100, 0x0000000000000000)), // 238
  Count256(72, UInt256(0x000090e40fbeea1d, 0x3a4abc8955e946fe, 0x31cdcf66f634e100, 0x0000000000000000)), // 239, 883423532389192164791648750371459257913741948437809479060803100646309888..<1766847064778384329583297500742918515827483896875618958121606201292619776, 72 or 73 digits
  Count256(73, UInt256(0x0005a8e89d752524, 0x46eb5d5d5b1cc5ed, 0xf20a1a059e10ca00, 0x0000000000000000)), // 240
  Count256(73, UInt256(0x0005a8e89d752524, 0x46eb5d5d5b1cc5ed, 0xf20a1a059e10ca00, 0x0000000000000000)), // 241
  Count256(73, UInt256(0x0005a8e89d752524, 0x46eb5d5d5b1cc5ed, 0xf20a1a059e10ca00, 0x0000000000000000)), // 242, 7067388259113537318333190002971674063309935587502475832486424805170479104..<14134776518227074636666380005943348126619871175004951664972849610340958208, 73 or 74 digits
  Count256(74, UInt256(0x003899162693736a, 0xc531a5a58f1fbb4b, 0x746504382ca7e400, 0x0000000000000000)), // 243
  Count256(74, UInt256(0x003899162693736a, 0xc531a5a58f1fbb4b, 0x746504382ca7e400, 0x0000000000000000)), // 244
  Count256(74, UInt256(0x003899162693736a, 0xc531a5a58f1fbb4b, 0x746504382ca7e400, 0x0000000000000000)), // 245, 56539106072908298546665520023773392506479484700019806659891398441363832832..<113078212145816597093331040047546785012958969400039613319782796882727665664, 74 or 75 digits
  Count256(75, UInt256(0x0235fadd81c2822b, 0xb3f07877973d50f2, 0x8bf22a31be8ee800, 0x0000000000000000)), // 246
  Count256(75, UInt256(0x0235fadd81c2822b, 0xb3f07877973d50f2, 0x8bf22a31be8ee800, 0x0000000000000000)), // 247
  Count256(75, UInt256(0x0235fadd81c2822b, 0xb3f07877973d50f2, 0x8bf22a31be8ee800, 0x0000000000000000)), // 248
  Count256(75, UInt256(0x0235fadd81c2822b, 0xb3f07877973d50f2, 0x8bf22a31be8ee800, 0x0000000000000000)), // 249, 904625697166532776746648320380374280103671755200316906558262375061821325312..<1809251394333065553493296640760748560207343510400633813116524750123642650624, 75 or 76 digits
  Count256(76, UInt256(0x161bcca7119915b5, 0x0764b4abe8652979, 0x7775a5f171951000, 0x0000000000000000)), // 250
  Count256(76, UInt256(0x161bcca7119915b5, 0x0764b4abe8652979, 0x7775a5f171951000, 0x0000000000000000)), // 251
  Count256(76, UInt256(0x161bcca7119915b5, 0x0764b4abe8652979, 0x7775a5f171951000, 0x0000000000000000)), // 252, 7237005577332262213973186563042994240829374041602535252466099000494570602496..<14474011154664524427946373126085988481658748083205070504932198000989141204992, 76 or 77 digits
  Count256(77, UInt256(0xdd15fe86affad912, 0x49ef0eb713f39ebe, 0xaa987b6e6fd2a000, 0x0000000000000000)), // 253
  Count256(77, UInt256(0xdd15fe86affad912, 0x49ef0eb713f39ebe, 0xaa987b6e6fd2a000, 0x0000000000000000)), // 254
  Count256(77, UInt256(0xdd15fe86affad912, 0x49ef0eb713f39ebe, 0xaa987b6e6fd2a000, 0x0000000000000000)), // 255
]
