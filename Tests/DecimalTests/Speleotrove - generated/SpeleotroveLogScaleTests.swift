// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class SpeleotroveLogScaleTests: XCTestCase, SpeleotroveMixin {

  // MARK: - Logb

  func test_logb64() {
    /* ddlogb000 */ self.logb64("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb001 */ self.logb64("1E-398", "-398", .toNearestOrEven)
    /* ddlogb002 */ self.logb64("1E-383", "-383", .toNearestOrEven)
    /* ddlogb003 */ self.logb64("0.001", "-3", .toNearestOrEven)
    /* ddlogb004 */ self.logb64("0.03", "-2", .toNearestOrEven)
    /* ddlogb005 */ self.logb64("1", "0", .toNearestOrEven)
    /* ddlogb006 */ self.logb64("2", "0", .toNearestOrEven)
    /* ddlogb0061 */ self.logb64("1", "0", .toNearestOrEven)
    /* ddlogb0062 */ self.logb64("1.0", "0", .toNearestOrEven)
    /* ddlogb0063 */ self.logb64("1.000000000000000", "0", .toNearestOrEven)
    /* ddlogb007 */ self.logb64("2.5", "0", .toNearestOrEven)
    /* ddlogb008 */ self.logb64("2.500", "0", .toNearestOrEven)
    /* ddlogb009 */ self.logb64("10", "1", .toNearestOrEven)
    /* ddlogb010 */ self.logb64("70", "1", .toNearestOrEven)
    /* ddlogb011 */ self.logb64("100", "2", .toNearestOrEven)
    /* ddlogb012 */ self.logb64("333", "2", .toNearestOrEven)
    /* ddlogb013 */ self.logb64("9E+384", "384", .toNearestOrEven)
    /* ddlogb014 */ self.logb64("+Infinity", "Infinity", .toNearestOrEven)
    /* ddlogb021 */ self.logb64("-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb022 */ self.logb64("-1E-398", "-398", .toNearestOrEven)
    /* ddlogb023 */ self.logb64("-9E-383", "-383", .toNearestOrEven)
    /* ddlogb024 */ self.logb64("-0.001", "-3", .toNearestOrEven)
    /* ddlogb025 */ self.logb64("-1", "0", .toNearestOrEven)
    /* ddlogb026 */ self.logb64("-2", "0", .toNearestOrEven)
    /* ddlogb027 */ self.logb64("-10", "1", .toNearestOrEven)
    /* ddlogb028 */ self.logb64("-70", "1", .toNearestOrEven)
    /* ddlogb029 */ self.logb64("-100", "2", .toNearestOrEven)
    /* ddlogb030 */ self.logb64("-9E+384", "384", .toNearestOrEven)
    /* ddlogb031 */ self.logb64("-Infinity", "Infinity", .toNearestOrEven)
    /* ddlogb1100 */ self.logb64("1", "0", .toNearestOrEven)
    /* ddlogb1101 */ self.logb64("10", "1", .toNearestOrEven)
    /* ddlogb1102 */ self.logb64("100", "2", .toNearestOrEven)
    /* ddlogb1103 */ self.logb64("1000", "3", .toNearestOrEven)
    /* ddlogb1104 */ self.logb64("10000", "4", .toNearestOrEven)
    /* ddlogb1105 */ self.logb64("100000", "5", .toNearestOrEven)
    /* ddlogb1106 */ self.logb64("1000000", "6", .toNearestOrEven)
    /* ddlogb1107 */ self.logb64("10000000", "7", .toNearestOrEven)
    /* ddlogb1108 */ self.logb64("100000000", "8", .toNearestOrEven)
    /* ddlogb1109 */ self.logb64("1000000000", "9", .toNearestOrEven)
    /* ddlogb111 */ self.logb64("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb1110 */ self.logb64("10000000000", "10", .toNearestOrEven)
    /* ddlogb1111 */ self.logb64("100000000000", "11", .toNearestOrEven)
    /* ddlogb1112 */ self.logb64("1000000000000", "12", .toNearestOrEven)
    /* ddlogb1113 */ self.logb64("0.00000000001", "-11", .toNearestOrEven)
    /* ddlogb1114 */ self.logb64("0.0000000001", "-10", .toNearestOrEven)
    /* ddlogb1115 */ self.logb64("0.000000001", "-9", .toNearestOrEven)
    /* ddlogb1116 */ self.logb64("0.00000001", "-8", .toNearestOrEven)
    /* ddlogb1117 */ self.logb64("0.0000001", "-7", .toNearestOrEven)
    /* ddlogb1118 */ self.logb64("0.000001", "-6", .toNearestOrEven)
    /* ddlogb1119 */ self.logb64("0.00001", "-5", .toNearestOrEven)
    /* ddlogb112 */ self.logb64("-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb1120 */ self.logb64("0.0001", "-4", .toNearestOrEven)
    /* ddlogb1121 */ self.logb64("0.001", "-3", .toNearestOrEven)
    /* ddlogb1122 */ self.logb64("0.01", "-2", .toNearestOrEven)
    /* ddlogb1123 */ self.logb64("0.1", "-1", .toNearestOrEven)
    /* ddlogb1124 */ self.logb64("1E-99", "-99", .toNearestOrEven)
    /* ddlogb1125 */ self.logb64("1E-100", "-100", .toNearestOrEven)
    /* ddlogb1126 */ self.logb64("1E-383", "-383", .toNearestOrEven)
    /* ddlogb1127 */ self.logb64("1E-299", "-299", .toNearestOrEven)
    /* ddlogb113 */ self.logb64("0E+4", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb114 */ self.logb64("-0E+4", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb115 */ self.logb64("0.0000", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb116 */ self.logb64("-0.0000", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb117 */ self.logb64("0E-141", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb118 */ self.logb64("-0E-141", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb121 */ self.logb64("268268268", "8", .toNearestOrEven)
    /* ddlogb122 */ self.logb64("-268268268", "8", .toNearestOrEven)
    /* ddlogb123 */ self.logb64("134134134", "8", .toNearestOrEven)
    /* ddlogb124 */ self.logb64("-134134134", "8", .toNearestOrEven)
    /* ddlogb131 */ self.logb64("9.999999999999999E+384", "384", .toNearestOrEven)
    /* ddlogb132 */ self.logb64("1E-383", "-383", .toNearestOrEven)
    /* ddlogb133 */ self.logb64("1.000000000000000E-383", "-383", .toNearestOrEven)
    /* ddlogb134 */ self.logb64("1E-398", "-398", .toNearestOrEven)
    /* ddlogb135 */ self.logb64("-1E-398", "-398", .toNearestOrEven)
    /* ddlogb136 */ self.logb64("-1.000000000000000E-383", "-383", .toNearestOrEven)
    /* ddlogb137 */ self.logb64("-1E-383", "-383", .toNearestOrEven)
    /* ddlogb138 */ self.logb64("-9.999999999999999E+384", "384", .toNearestOrEven)
    /* ddlogb1400 */ self.logb64("10E-3", "-2", .toNearestOrEven)
    /* ddlogb1401 */ self.logb64("10E-2", "-1", .toNearestOrEven)
    /* ddlogb1402 */ self.logb64("100E-2", "0", .toNearestOrEven)
    /* ddlogb1403 */ self.logb64("1000E-2", "1", .toNearestOrEven)
    /* ddlogb1404 */ self.logb64("10000E-2", "2", .toNearestOrEven)
    /* ddlogb1405 */ self.logb64("10E-1", "0", .toNearestOrEven)
    /* ddlogb1406 */ self.logb64("100E-1", "1", .toNearestOrEven)
    /* ddlogb1407 */ self.logb64("1000E-1", "2", .toNearestOrEven)
    /* ddlogb1408 */ self.logb64("10000E-1", "3", .toNearestOrEven)
    /* ddlogb1409 */ self.logb64("10E0", "1", .toNearestOrEven)
    /* ddlogb1410 */ self.logb64("100E0", "2", .toNearestOrEven)
    /* ddlogb1411 */ self.logb64("1000E0", "3", .toNearestOrEven)
    /* ddlogb1412 */ self.logb64("10000E0", "4", .toNearestOrEven)
    /* ddlogb1413 */ self.logb64("10E1", "2", .toNearestOrEven)
    /* ddlogb1414 */ self.logb64("100E1", "3", .toNearestOrEven)
    /* ddlogb1415 */ self.logb64("1000E1", "4", .toNearestOrEven)
    /* ddlogb1416 */ self.logb64("10000E1", "5", .toNearestOrEven)
    /* ddlogb1417 */ self.logb64("10E2", "3", .toNearestOrEven)
    /* ddlogb1418 */ self.logb64("100E2", "4", .toNearestOrEven)
    /* ddlogb1419 */ self.logb64("1000E2", "5", .toNearestOrEven)
    /* ddlogb1420 */ self.logb64("10000E2", "6", .toNearestOrEven)
    /* ddlogb820 */ self.logb64("Infinity", "Infinity", .toNearestOrEven)
    /* ddlogb821 */ self.logb64("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* ddlogb822 */ self.logb64("NaN", "NaN", .toNearestOrEven)
    /* ddlogb823 */ self.logb64("sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddlogb824 */ self.logb64("sNaN(0x7b)", "NaN(0x7b)", .toNearestOrEven, .isInvalidOperation)
    /* ddlogb825 */ self.logb64("-sNaN(0x141)", "-NaN(0x141)", .toNearestOrEven, .isInvalidOperation)
    /* ddlogb826 */ self.logb64("NaN(0x1c8)", "NaN(0x1c8)", .toNearestOrEven)
    /* ddlogb827 */ self.logb64("-NaN(0x28e)", "-NaN(0x28e)", .toNearestOrEven)
    /* ddlogb828 */ self.logb64("NaN(0x1)", "NaN(0x1)", .toNearestOrEven)
  }

  private func logb64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = self.logB(arg0, status: &status)
    self.assertEqual(result, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }

  func test_logb128() {
    /* dqlogb000 */ self.logb128("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb001 */ self.logb128("1E-6176", "-6176", .toNearestOrEven)
    /* dqlogb002 */ self.logb128("1E-6143", "-6143", .toNearestOrEven)
    /* dqlogb003 */ self.logb128("0.001", "-3", .toNearestOrEven)
    /* dqlogb004 */ self.logb128("0.03", "-2", .toNearestOrEven)
    /* dqlogb005 */ self.logb128("1", "0", .toNearestOrEven)
    /* dqlogb006 */ self.logb128("2", "0", .toNearestOrEven)
    /* dqlogb0061 */ self.logb128("1", "0", .toNearestOrEven)
    /* dqlogb0062 */ self.logb128("1.0", "0", .toNearestOrEven)
    /* dqlogb0063 */ self.logb128("1.000000000000000", "0", .toNearestOrEven)
    /* dqlogb007 */ self.logb128("2.5", "0", .toNearestOrEven)
    /* dqlogb008 */ self.logb128("2.50", "0", .toNearestOrEven)
    /* dqlogb009 */ self.logb128("2.500", "0", .toNearestOrEven)
    /* dqlogb010 */ self.logb128("10", "1", .toNearestOrEven)
    /* dqlogb011 */ self.logb128("70", "1", .toNearestOrEven)
    /* dqlogb012 */ self.logb128("100", "2", .toNearestOrEven)
    /* dqlogb013 */ self.logb128("250", "2", .toNearestOrEven)
    /* dqlogb014 */ self.logb128("9E+6144", "6144", .toNearestOrEven)
    /* dqlogb015 */ self.logb128("+Infinity", "Infinity", .toNearestOrEven)
    /* dqlogb021 */ self.logb128("-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb022 */ self.logb128("-1E-6176", "-6176", .toNearestOrEven)
    /* dqlogb023 */ self.logb128("-9E-6143", "-6143", .toNearestOrEven)
    /* dqlogb024 */ self.logb128("-0.001", "-3", .toNearestOrEven)
    /* dqlogb025 */ self.logb128("-1", "0", .toNearestOrEven)
    /* dqlogb026 */ self.logb128("-2", "0", .toNearestOrEven)
    /* dqlogb027 */ self.logb128("-10", "1", .toNearestOrEven)
    /* dqlogb028 */ self.logb128("-70", "1", .toNearestOrEven)
    /* dqlogb029 */ self.logb128("-100", "2", .toNearestOrEven)
    /* dqlogb030 */ self.logb128("-9E+6144", "6144", .toNearestOrEven)
    /* dqlogb031 */ self.logb128("-Infinity", "Infinity", .toNearestOrEven)
    /* dqlogb1100 */ self.logb128("1", "0", .toNearestOrEven)
    /* dqlogb1101 */ self.logb128("10", "1", .toNearestOrEven)
    /* dqlogb1102 */ self.logb128("100", "2", .toNearestOrEven)
    /* dqlogb1103 */ self.logb128("1000", "3", .toNearestOrEven)
    /* dqlogb1104 */ self.logb128("10000", "4", .toNearestOrEven)
    /* dqlogb1105 */ self.logb128("100000", "5", .toNearestOrEven)
    /* dqlogb1106 */ self.logb128("1000000", "6", .toNearestOrEven)
    /* dqlogb1107 */ self.logb128("10000000", "7", .toNearestOrEven)
    /* dqlogb1108 */ self.logb128("100000000", "8", .toNearestOrEven)
    /* dqlogb1109 */ self.logb128("1000000000", "9", .toNearestOrEven)
    /* dqlogb111 */ self.logb128("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb1110 */ self.logb128("10000000000", "10", .toNearestOrEven)
    /* dqlogb1111 */ self.logb128("100000000000", "11", .toNearestOrEven)
    /* dqlogb1112 */ self.logb128("1000000000000", "12", .toNearestOrEven)
    /* dqlogb1113 */ self.logb128("0.00000000001", "-11", .toNearestOrEven)
    /* dqlogb1114 */ self.logb128("0.0000000001", "-10", .toNearestOrEven)
    /* dqlogb1115 */ self.logb128("0.000000001", "-9", .toNearestOrEven)
    /* dqlogb1116 */ self.logb128("0.00000001", "-8", .toNearestOrEven)
    /* dqlogb1117 */ self.logb128("0.0000001", "-7", .toNearestOrEven)
    /* dqlogb1118 */ self.logb128("0.000001", "-6", .toNearestOrEven)
    /* dqlogb1119 */ self.logb128("0.00001", "-5", .toNearestOrEven)
    /* dqlogb112 */ self.logb128("-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb1120 */ self.logb128("0.0001", "-4", .toNearestOrEven)
    /* dqlogb1121 */ self.logb128("0.001", "-3", .toNearestOrEven)
    /* dqlogb1122 */ self.logb128("0.01", "-2", .toNearestOrEven)
    /* dqlogb1123 */ self.logb128("0.1", "-1", .toNearestOrEven)
    /* dqlogb1124 */ self.logb128("1E-99", "-99", .toNearestOrEven)
    /* dqlogb1125 */ self.logb128("1E-100", "-100", .toNearestOrEven)
    /* dqlogb1126 */ self.logb128("1E-6143", "-6143", .toNearestOrEven)
    /* dqlogb1127 */ self.logb128("1E-299", "-299", .toNearestOrEven)
    /* dqlogb113 */ self.logb128("0E+4", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb114 */ self.logb128("-0E+4", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb115 */ self.logb128("0.0000", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb116 */ self.logb128("-0.0000", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb117 */ self.logb128("0E-141", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb118 */ self.logb128("-0E-141", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb121 */ self.logb128("268268268", "8", .toNearestOrEven)
    /* dqlogb122 */ self.logb128("-268268268", "8", .toNearestOrEven)
    /* dqlogb123 */ self.logb128("134134134", "8", .toNearestOrEven)
    /* dqlogb124 */ self.logb128("-134134134", "8", .toNearestOrEven)
    /* dqlogb131 */ self.logb128("9.999999999999999999999999999999999E+6144", "6144", .toNearestOrEven)
    /* dqlogb132 */ self.logb128("1E-6143", "-6143", .toNearestOrEven)
    /* dqlogb133 */ self.logb128("1.000000000000000000000000000000000E-6143", "-6143", .toNearestOrEven)
    /* dqlogb134 */ self.logb128("1E-6176", "-6176", .toNearestOrEven)
    /* dqlogb135 */ self.logb128("-1E-6176", "-6176", .toNearestOrEven)
    /* dqlogb136 */ self.logb128("-1.000000000000000000000000000000000E-6143", "-6143", .toNearestOrEven)
    /* dqlogb137 */ self.logb128("-1E-6143", "-6143", .toNearestOrEven)
    /* dqlogb1400 */ self.logb128("10E-3", "-2", .toNearestOrEven)
    /* dqlogb1401 */ self.logb128("10E-2", "-1", .toNearestOrEven)
    /* dqlogb1402 */ self.logb128("100E-2", "0", .toNearestOrEven)
    /* dqlogb1403 */ self.logb128("1000E-2", "1", .toNearestOrEven)
    /* dqlogb1404 */ self.logb128("10000E-2", "2", .toNearestOrEven)
    /* dqlogb1405 */ self.logb128("10E-1", "0", .toNearestOrEven)
    /* dqlogb1406 */ self.logb128("100E-1", "1", .toNearestOrEven)
    /* dqlogb1407 */ self.logb128("1000E-1", "2", .toNearestOrEven)
    /* dqlogb1408 */ self.logb128("10000E-1", "3", .toNearestOrEven)
    /* dqlogb1409 */ self.logb128("10E0", "1", .toNearestOrEven)
    /* dqlogb1410 */ self.logb128("100E0", "2", .toNearestOrEven)
    /* dqlogb1411 */ self.logb128("1000E0", "3", .toNearestOrEven)
    /* dqlogb1412 */ self.logb128("10000E0", "4", .toNearestOrEven)
    /* dqlogb1413 */ self.logb128("10E1", "2", .toNearestOrEven)
    /* dqlogb1414 */ self.logb128("100E1", "3", .toNearestOrEven)
    /* dqlogb1415 */ self.logb128("1000E1", "4", .toNearestOrEven)
    /* dqlogb1416 */ self.logb128("10000E1", "5", .toNearestOrEven)
    /* dqlogb1417 */ self.logb128("10E2", "3", .toNearestOrEven)
    /* dqlogb1418 */ self.logb128("100E2", "4", .toNearestOrEven)
    /* dqlogb1419 */ self.logb128("1000E2", "5", .toNearestOrEven)
    /* dqlogb1420 */ self.logb128("10000E2", "6", .toNearestOrEven)
    /* dqlogb1614 */ self.logb128("-9.999999999999999999999999999999999E+6144", "6144", .toNearestOrEven)
    /* dqlogb820 */ self.logb128("Infinity", "Infinity", .toNearestOrEven)
    /* dqlogb821 */ self.logb128("0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqlogb822 */ self.logb128("NaN", "NaN", .toNearestOrEven)
    /* dqlogb823 */ self.logb128("sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqlogb824 */ self.logb128("sNaN(0x7b)", "NaN(0x7b)", .toNearestOrEven, .isInvalidOperation)
    /* dqlogb825 */ self.logb128("-sNaN(0x141)", "-NaN(0x141)", .toNearestOrEven, .isInvalidOperation)
    /* dqlogb826 */ self.logb128("NaN(0x1c8)", "NaN(0x1c8)", .toNearestOrEven)
    /* dqlogb827 */ self.logb128("-NaN(0x28e)", "-NaN(0x28e)", .toNearestOrEven)
    /* dqlogb828 */ self.logb128("NaN(0x1)", "NaN(0x1)", .toNearestOrEven)
  }

  private func logb128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = self.logB(arg0, status: &status)
    self.assertEqual(result, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }

  // MARK: - Scaleb

  func test_scaleb64() {
    /* ddscb001 */ self.scaleb64("7.50", "10", "7.50E+10", .toNearestOrEven)
    /* ddscb002 */ self.scaleb64("7.50", "3", "7.50E+3", .toNearestOrEven)
    /* ddscb003 */ self.scaleb64("7.50", "2", "750", .toNearestOrEven)
    /* ddscb004 */ self.scaleb64("7.50", "1", "75.0", .toNearestOrEven)
    /* ddscb005 */ self.scaleb64("7.50", "0", "7.50", .toNearestOrEven)
    /* ddscb006 */ self.scaleb64("7.50", "-1", "0.750", .toNearestOrEven)
    /* ddscb007 */ self.scaleb64("7.50", "-2", "0.0750", .toNearestOrEven)
    /* ddscb008 */ self.scaleb64("7.50", "-10", "7.50E-10", .toNearestOrEven)
    /* ddscb009 */ self.scaleb64("-7.50", "3", "-7.50E+3", .toNearestOrEven)
    /* ddscb010 */ self.scaleb64("-7.50", "2", "-750", .toNearestOrEven)
    /* ddscb011 */ self.scaleb64("-7.50", "1", "-75.0", .toNearestOrEven)
    /* ddscb012 */ self.scaleb64("-7.50", "0", "-7.50", .toNearestOrEven)
    /* ddscb013 */ self.scaleb64("-7.50", "-1", "-0.750", .toNearestOrEven)
    /* ddscb014 */ self.scaleb64("Infinity", "1", "Infinity", .toNearestOrEven)
    /* ddscb015 */ self.scaleb64("-Infinity", "2", "-Infinity", .toNearestOrEven)
    /* ddscb016 */ self.scaleb64("Infinity", "-1", "Infinity", .toNearestOrEven)
    /* ddscb017 */ self.scaleb64("-Infinity", "-2", "-Infinity", .toNearestOrEven)
    /* ddscb018 */ self.scaleb64("10", "Infinity", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb019 */ self.scaleb64("10", "-Infinity", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb021 */ self.scaleb64("NaN", "1", "NaN", .toNearestOrEven)
    /* ddscb022 */ self.scaleb64("-NaN", "-1", "-NaN", .toNearestOrEven)
    /* ddscb023 */ self.scaleb64("sNaN", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb024 */ self.scaleb64("-sNaN", "1", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb025 */ self.scaleb64("4", "NaN", "NaN", .toNearestOrEven)
    /* ddscb026 */ self.scaleb64("-Inf", "-NaN", "-NaN", .toNearestOrEven)
    /* ddscb027 */ self.scaleb64("4", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb028 */ self.scaleb64("Inf", "-sNaN", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb030 */ self.scaleb64("1.23", "1", "12.3", .toNearestOrEven)
    /* ddscb031 */ self.scaleb64("1.23", "1.00", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb032 */ self.scaleb64("1.23", "1.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb033 */ self.scaleb64("1.23", "1.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb034 */ self.scaleb64("1.23", "0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb035 */ self.scaleb64("1.23", "0.11", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb036 */ self.scaleb64("1.23", "0.999999999", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb037 */ self.scaleb64("1.23", "-1", "0.123", .toNearestOrEven)
    /* ddscb038 */ self.scaleb64("1.23", "-1.00", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb039 */ self.scaleb64("1.23", "-1.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb040 */ self.scaleb64("1.23", "-1.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb041 */ self.scaleb64("1.23", "-0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb042 */ self.scaleb64("1.23", "-0.11", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb043 */ self.scaleb64("1.23", "-0.999999999", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb044 */ self.scaleb64("1.23", "0.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb045 */ self.scaleb64("1.23", "1E+1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb046 */ self.scaleb64("1.23", "1.1234E+6", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb047 */ self.scaleb64("1.23", "1.123E+4", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb051 */ self.scaleb64("7", "-2", "0.07", .toNearestOrEven)
    /* ddscb052 */ self.scaleb64("-7", "-2", "-0.07", .toNearestOrEven)
    /* ddscb053 */ self.scaleb64("75", "-2", "0.75", .toNearestOrEven)
    /* ddscb054 */ self.scaleb64("-75", "-2", "-0.75", .toNearestOrEven)
    /* ddscb055 */ self.scaleb64("7.50", "-2", "0.0750", .toNearestOrEven)
    /* ddscb056 */ self.scaleb64("-7.50", "-2", "-0.0750", .toNearestOrEven)
    /* ddscb057 */ self.scaleb64("7.500", "-2", "0.07500", .toNearestOrEven)
    /* ddscb058 */ self.scaleb64("-7.500", "-2", "-0.07500", .toNearestOrEven)
    /* ddscb061 */ self.scaleb64("7", "-1", "0.7", .toNearestOrEven)
    /* ddscb062 */ self.scaleb64("-7", "-1", "-0.7", .toNearestOrEven)
    /* ddscb063 */ self.scaleb64("75", "-1", "7.5", .toNearestOrEven)
    /* ddscb064 */ self.scaleb64("-75", "-1", "-7.5", .toNearestOrEven)
    /* ddscb065 */ self.scaleb64("7.50", "-1", "0.750", .toNearestOrEven)
    /* ddscb066 */ self.scaleb64("-7.50", "-1", "-0.750", .toNearestOrEven)
    /* ddscb067 */ self.scaleb64("7.500", "-1", "0.7500", .toNearestOrEven)
    /* ddscb068 */ self.scaleb64("-7.500", "-1", "-0.7500", .toNearestOrEven)
    /* ddscb071 */ self.scaleb64("7", "0", "7", .toNearestOrEven)
    /* ddscb072 */ self.scaleb64("-7", "0", "-7", .toNearestOrEven)
    /* ddscb073 */ self.scaleb64("75", "0", "75", .toNearestOrEven)
    /* ddscb074 */ self.scaleb64("-75", "0", "-75", .toNearestOrEven)
    /* ddscb075 */ self.scaleb64("7.50", "0", "7.50", .toNearestOrEven)
    /* ddscb076 */ self.scaleb64("-7.50", "0", "-7.50", .toNearestOrEven)
    /* ddscb077 */ self.scaleb64("7.500", "0", "7.500", .toNearestOrEven)
    /* ddscb078 */ self.scaleb64("-7.500", "0", "-7.500", .toNearestOrEven)
    /* ddscb081 */ self.scaleb64("7", "1", "7E+1", .toNearestOrEven)
    /* ddscb082 */ self.scaleb64("-7", "1", "-7E+1", .toNearestOrEven)
    /* ddscb083 */ self.scaleb64("75", "1", "7.5E+2", .toNearestOrEven)
    /* ddscb084 */ self.scaleb64("-75", "1", "-7.5E+2", .toNearestOrEven)
    /* ddscb085 */ self.scaleb64("7.50", "1", "75.0", .toNearestOrEven)
    /* ddscb086 */ self.scaleb64("-7.50", "1", "-75.0", .toNearestOrEven)
    /* ddscb087 */ self.scaleb64("7.500", "1", "75.00", .toNearestOrEven)
    /* ddscb088 */ self.scaleb64("-7.500", "1", "-75.00", .toNearestOrEven)
    /* ddscb091 */ self.scaleb64("7", "2", "7E+2", .toNearestOrEven)
    /* ddscb092 */ self.scaleb64("-7", "2", "-7E+2", .toNearestOrEven)
    /* ddscb093 */ self.scaleb64("75", "2", "7.5E+3", .toNearestOrEven)
    /* ddscb094 */ self.scaleb64("-75", "2", "-7.5E+3", .toNearestOrEven)
    /* ddscb095 */ self.scaleb64("7.50", "2", "750", .toNearestOrEven)
    /* ddscb096 */ self.scaleb64("-7.50", "2", "-750", .toNearestOrEven)
    /* ddscb097 */ self.scaleb64("7.500", "2", "750.0", .toNearestOrEven)
    /* ddscb098 */ self.scaleb64("-7.500", "2", "-750.0", .toNearestOrEven)
    /* ddscb111 */ self.scaleb64("0", "1", "0E+1", .toNearestOrEven)
    /* ddscb112 */ self.scaleb64("-0", "2", "-0E+2", .toNearestOrEven)
    /* ddscb113 */ self.scaleb64("0E+4", "3", "0E+7", .toNearestOrEven)
    /* ddscb114 */ self.scaleb64("-0E+4", "4", "-0E+8", .toNearestOrEven)
    /* ddscb115 */ self.scaleb64("0.0000", "5", "0E+1", .toNearestOrEven)
    /* ddscb116 */ self.scaleb64("-0.0000", "6", "-0E+2", .toNearestOrEven)
    /* ddscb117 */ self.scaleb64("0E-141", "7", "0E-134", .toNearestOrEven)
    /* ddscb118 */ self.scaleb64("-0E-141", "8", "-0E-133", .toNearestOrEven)
    /* ddscb120 */ self.scaleb64("1.23", "799", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb121 */ self.scaleb64("1.23", "800", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb122 */ self.scaleb64("1.23", "801", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb123 */ self.scaleb64("1.23", "802", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb124 */ self.scaleb64("1.23", "-799", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb125 */ self.scaleb64("1.23", "-800", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb126 */ self.scaleb64("1.23", "-801", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb127 */ self.scaleb64("1.23", "-802", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddscb132 */ self.scaleb64("9.999999999999999E+384", "+384", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb133 */ self.scaleb64("9.999999999999999E+384", "+10", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb134 */ self.scaleb64("9.999999999999999E+384", "+1", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb135 */ self.scaleb64("9.999999999999999E+384", "0", "9.999999999999999E+384", .toNearestOrEven)
    /* ddscb136 */ self.scaleb64("9.999999999999999E+384", "-1", "9.999999999999999E+383", .toNearestOrEven)
    /* ddscb137 */ self.scaleb64("1E-383", "+1", "1E-382", .toNearestOrEven)
    /* ddscb138 */ self.scaleb64("1E-383", "-0", "1E-383", .toNearestOrEven)
    /* ddscb139 */ self.scaleb64("1E-383", "-1", "1E-384", .toNearestOrEven)
    /* ddscb140 */ self.scaleb64("1.000000000000000E-383", "+1", "1.000000000000000E-382", .toNearestOrEven)
    /* ddscb141 */ self.scaleb64("1.000000000000000E-383", "0", "1.000000000000000E-383", .toNearestOrEven)
    /* ddscb142 */ self.scaleb64("1.000000000000000E-383", "-1", "1.00000000000000E-384", .toNearestOrEven)
    /* ddscb143 */ self.scaleb64("1E-398", "+1", "1E-397", .toNearestOrEven)
    /* ddscb144 */ self.scaleb64("1E-398", "-0", "1E-398", .toNearestOrEven)
    /* ddscb145 */ self.scaleb64("1E-398", "-1", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb150 */ self.scaleb64("-1E-398", "+1", "-1E-397", .toNearestOrEven)
    /* ddscb151 */ self.scaleb64("-1E-398", "-0", "-1E-398", .toNearestOrEven)
    /* ddscb152 */ self.scaleb64("-1E-398", "-1", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb153 */ self.scaleb64("-1.000000000000000E-383", "+1", "-1.000000000000000E-382", .toNearestOrEven)
    /* ddscb154 */ self.scaleb64("-1.000000000000000E-383", "+0", "-1.000000000000000E-383", .toNearestOrEven)
    /* ddscb155 */ self.scaleb64("-1.000000000000000E-383", "-1", "-1.00000000000000E-384", .toNearestOrEven)
    /* ddscb156 */ self.scaleb64("-1E-383", "+1", "-1E-382", .toNearestOrEven)
    /* ddscb157 */ self.scaleb64("-1E-383", "-0", "-1E-383", .toNearestOrEven)
    /* ddscb158 */ self.scaleb64("-1E-383", "-1", "-1E-384", .toNearestOrEven)
    /* ddscb159 */ self.scaleb64("-9.999999999999999E+384", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb160 */ self.scaleb64("-9.999999999999999E+384", "+0", "-9.999999999999999E+384", .toNearestOrEven)
    /* ddscb161 */ self.scaleb64("-9.999999999999999E+384", "-1", "-9.999999999999999E+383", .toNearestOrEven)
    /* ddscb162 */ self.scaleb64("-9E+384", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb163 */ self.scaleb64("-1E+384", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb171 */ self.scaleb64("1000E+365", "+1", "1.000E+369", .toNearestOrEven)
    /* ddscb172 */ self.scaleb64("1000E+366", "+1", "1.000E+370", .toNearestOrEven)
    /* ddscb173 */ self.scaleb64("1000E+367", "+1", "1.000E+371", .toNearestOrEven)
    /* ddscb174 */ self.scaleb64("1000E+368", "+1", "1.000E+372", .toNearestOrEven)
    /* ddscb175 */ self.scaleb64("1000E+369", "+1", "1.0000E+373", .toNearestOrEven)
    /* ddscb176 */ self.scaleb64("1000E+370", "+1", "1.00000E+374", .toNearestOrEven)
    /* ddscb177 */ self.scaleb64("1000E+371", "+1", "1.000000E+375", .toNearestOrEven)
    /* ddscb178 */ self.scaleb64("1000E+372", "+1", "1.0000000E+376", .toNearestOrEven)
    /* ddscb179 */ self.scaleb64("1000E+373", "+1", "1.00000000E+377", .toNearestOrEven)
    /* ddscb180 */ self.scaleb64("1000E+374", "+1", "1.000000000E+378", .toNearestOrEven)
    /* ddscb181 */ self.scaleb64("1000E+375", "+1", "1.0000000000E+379", .toNearestOrEven)
    /* ddscb182 */ self.scaleb64("1000E+376", "+1", "1.00000000000E+380", .toNearestOrEven)
    /* ddscb183 */ self.scaleb64("1000E+377", "+1", "1.000000000000E+381", .toNearestOrEven)
    /* ddscb184 */ self.scaleb64("1000E+378", "+1", "1.0000000000000E+382", .toNearestOrEven)
    /* ddscb185 */ self.scaleb64("1000E+379", "+1", "1.00000000000000E+383", .toNearestOrEven)
    /* ddscb186 */ self.scaleb64("1000E+380", "+1", "1.000000000000000E+384", .toNearestOrEven)
    /* ddscb187 */ self.scaleb64("1000E+381", "+1", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* ddscb201 */ self.scaleb64("1.000000000000000E-383", "0", "1.000000000000000E-383", .toNearestOrEven)
    /* ddscb202 */ self.scaleb64("1.000000000000000E-383", "-1", "1.00000000000000E-384", .toNearestOrEven)
    /* ddscb203 */ self.scaleb64("1.000000000000000E-383", "-2", "1.0000000000000E-385", .toNearestOrEven)
    /* ddscb204 */ self.scaleb64("1.000000000000000E-383", "-3", "1.000000000000E-386", .toNearestOrEven)
    /* ddscb205 */ self.scaleb64("1.000000000000000E-383", "-4", "1.00000000000E-387", .toNearestOrEven)
    /* ddscb206 */ self.scaleb64("1.000000000000000E-383", "-5", "1.0000000000E-388", .toNearestOrEven)
    /* ddscb207 */ self.scaleb64("1.000000000000000E-383", "-6", "1.000000000E-389", .toNearestOrEven)
    /* ddscb208 */ self.scaleb64("1.000000000000000E-383", "-7", "1.00000000E-390", .toNearestOrEven)
    /* ddscb209 */ self.scaleb64("1.000000000000000E-383", "-8", "1.0000000E-391", .toNearestOrEven)
    /* ddscb210 */ self.scaleb64("1.000000000000000E-383", "-9", "1.000000E-392", .toNearestOrEven)
    /* ddscb211 */ self.scaleb64("1.000000000000000E-383", "-10", "1.00000E-393", .toNearestOrEven)
    /* ddscb212 */ self.scaleb64("1.000000000000000E-383", "-11", "1.0000E-394", .toNearestOrEven)
    /* ddscb213 */ self.scaleb64("1.000000000000000E-383", "-12", "1.000E-395", .toNearestOrEven)
    /* ddscb214 */ self.scaleb64("1.000000000000000E-383", "-13", "1.00E-396", .toNearestOrEven)
    /* ddscb215 */ self.scaleb64("1.000000000000000E-383", "-14", "1.0E-397", .toNearestOrEven)
    /* ddscb216 */ self.scaleb64("1.000000000000000E-383", "-15", "1E-398", .toNearestOrEven)
    /* ddscb217 */ self.scaleb64("1.000000000000000E-383", "-16", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb218 */ self.scaleb64("1.000000000000000E-383", "-17", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* ddscb861 */ self.scaleb64("NaN(0x1)", "-Inf", "NaN(0x1)", .toNearestOrEven)
    /* ddscb862 */ self.scaleb64("-NaN(0x2)", "-1000", "-NaN(0x2)", .toNearestOrEven)
    /* ddscb863 */ self.scaleb64("NaN(0x3)", "1000", "NaN(0x3)", .toNearestOrEven)
    /* ddscb864 */ self.scaleb64("NaN(0x4)", "Inf", "NaN(0x4)", .toNearestOrEven)
    /* ddscb865 */ self.scaleb64("NaN(0x5)", "NaN(0x3d)", "NaN(0x5)", .toNearestOrEven)
    /* ddscb866 */ self.scaleb64("-Inf", "-NaN(0x47)", "-NaN(0x47)", .toNearestOrEven)
    /* ddscb867 */ self.scaleb64("-1000", "NaN(0x51)", "NaN(0x51)", .toNearestOrEven)
    /* ddscb868 */ self.scaleb64("1000", "NaN(0x5b)", "NaN(0x5b)", .toNearestOrEven)
    /* ddscb869 */ self.scaleb64("Inf", "NaN(0x65)", "NaN(0x65)", .toNearestOrEven)
    /* ddscb871 */ self.scaleb64("sNaN(0xb)", "-Inf", "NaN(0xb)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb872 */ self.scaleb64("sNaN(0xc)", "-1000", "NaN(0xc)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb873 */ self.scaleb64("-sNaN(0xd)", "1000", "-NaN(0xd)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb874 */ self.scaleb64("sNaN(0xe)", "NaN(0xab)", "NaN(0xe)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb875 */ self.scaleb64("sNaN(0xf)", "sNaN(0xb5)", "NaN(0xf)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb876 */ self.scaleb64("NaN(0x10)", "sNaN(0xbf)", "NaN(0xbf)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb877 */ self.scaleb64("-Inf", "sNaN(0xc9)", "NaN(0xc9)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb878 */ self.scaleb64("-1000", "sNaN(0xd3)", "NaN(0xd3)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb879 */ self.scaleb64("1000", "-sNaN(0xdd)", "-NaN(0xdd)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb880 */ self.scaleb64("Inf", "sNaN(0xe7)", "NaN(0xe7)", .toNearestOrEven, .isInvalidOperation)
    /* ddscb881 */ self.scaleb64("NaN(0x19)", "sNaN(0xf1)", "NaN(0xf1)", .toNearestOrEven, .isInvalidOperation)
  }

  private func scaleb64(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = self.scaleB(arg0, arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }

  func test_scaleb128() {
    /* dqscb001 */ self.scaleb128("7.50", "10", "7.50E+10", .toNearestOrEven)
    /* dqscb002 */ self.scaleb128("7.50", "3", "7.50E+3", .toNearestOrEven)
    /* dqscb003 */ self.scaleb128("7.50", "2", "750", .toNearestOrEven)
    /* dqscb004 */ self.scaleb128("7.50", "1", "75.0", .toNearestOrEven)
    /* dqscb005 */ self.scaleb128("7.50", "0", "7.50", .toNearestOrEven)
    /* dqscb006 */ self.scaleb128("7.50", "-1", "0.750", .toNearestOrEven)
    /* dqscb007 */ self.scaleb128("7.50", "-2", "0.0750", .toNearestOrEven)
    /* dqscb008 */ self.scaleb128("7.50", "-10", "7.50E-10", .toNearestOrEven)
    /* dqscb009 */ self.scaleb128("-7.50", "3", "-7.50E+3", .toNearestOrEven)
    /* dqscb010 */ self.scaleb128("-7.50", "2", "-750", .toNearestOrEven)
    /* dqscb011 */ self.scaleb128("-7.50", "1", "-75.0", .toNearestOrEven)
    /* dqscb012 */ self.scaleb128("-7.50", "0", "-7.50", .toNearestOrEven)
    /* dqscb013 */ self.scaleb128("-7.50", "-1", "-0.750", .toNearestOrEven)
    /* dqscb014 */ self.scaleb128("Infinity", "1", "Infinity", .toNearestOrEven)
    /* dqscb015 */ self.scaleb128("-Infinity", "2", "-Infinity", .toNearestOrEven)
    /* dqscb016 */ self.scaleb128("Infinity", "-1", "Infinity", .toNearestOrEven)
    /* dqscb017 */ self.scaleb128("-Infinity", "-2", "-Infinity", .toNearestOrEven)
    /* dqscb018 */ self.scaleb128("10", "Infinity", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb019 */ self.scaleb128("10", "-Infinity", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb021 */ self.scaleb128("NaN", "1", "NaN", .toNearestOrEven)
    /* dqscb022 */ self.scaleb128("-NaN", "-1", "-NaN", .toNearestOrEven)
    /* dqscb023 */ self.scaleb128("sNaN", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb024 */ self.scaleb128("-sNaN", "1", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb025 */ self.scaleb128("4", "NaN", "NaN", .toNearestOrEven)
    /* dqscb026 */ self.scaleb128("-Inf", "-NaN", "-NaN", .toNearestOrEven)
    /* dqscb027 */ self.scaleb128("4", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb028 */ self.scaleb128("Inf", "-sNaN", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb030 */ self.scaleb128("1.23", "1", "12.3", .toNearestOrEven)
    /* dqscb031 */ self.scaleb128("1.23", "1.00", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb032 */ self.scaleb128("1.23", "1.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb033 */ self.scaleb128("1.23", "1.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb034 */ self.scaleb128("1.23", "0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb035 */ self.scaleb128("1.23", "0.11", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb036 */ self.scaleb128("1.23", "0.999999999", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb037 */ self.scaleb128("1.23", "-1", "0.123", .toNearestOrEven)
    /* dqscb039 */ self.scaleb128("1.23", "-1.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb040 */ self.scaleb128("1.23", "-1.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb041 */ self.scaleb128("1.23", "-0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb042 */ self.scaleb128("1.23", "-0.11", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb043 */ self.scaleb128("1.23", "-0.999999999", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb044 */ self.scaleb128("1.23", "0.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb045 */ self.scaleb128("1.23", "1E+1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb046 */ self.scaleb128("1.23", "1.1234E+6", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb047 */ self.scaleb128("1.23", "1.123E+4", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb051 */ self.scaleb128("7", "-2", "0.07", .toNearestOrEven)
    /* dqscb052 */ self.scaleb128("-7", "-2", "-0.07", .toNearestOrEven)
    /* dqscb053 */ self.scaleb128("75", "-2", "0.75", .toNearestOrEven)
    /* dqscb054 */ self.scaleb128("-75", "-2", "-0.75", .toNearestOrEven)
    /* dqscb055 */ self.scaleb128("7.50", "-2", "0.0750", .toNearestOrEven)
    /* dqscb056 */ self.scaleb128("-7.50", "-2", "-0.0750", .toNearestOrEven)
    /* dqscb057 */ self.scaleb128("7.500", "-2", "0.07500", .toNearestOrEven)
    /* dqscb058 */ self.scaleb128("-7.500", "-2", "-0.07500", .toNearestOrEven)
    /* dqscb061 */ self.scaleb128("7", "-1", "0.7", .toNearestOrEven)
    /* dqscb0614 */ self.scaleb128("1.23", "-1.00", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb062 */ self.scaleb128("-7", "-1", "-0.7", .toNearestOrEven)
    /* dqscb063 */ self.scaleb128("75", "-1", "7.5", .toNearestOrEven)
    /* dqscb064 */ self.scaleb128("-75", "-1", "-7.5", .toNearestOrEven)
    /* dqscb065 */ self.scaleb128("7.50", "-1", "0.750", .toNearestOrEven)
    /* dqscb066 */ self.scaleb128("-7.50", "-1", "-0.750", .toNearestOrEven)
    /* dqscb067 */ self.scaleb128("7.500", "-1", "0.7500", .toNearestOrEven)
    /* dqscb068 */ self.scaleb128("-7.500", "-1", "-0.7500", .toNearestOrEven)
    /* dqscb071 */ self.scaleb128("7", "0", "7", .toNearestOrEven)
    /* dqscb072 */ self.scaleb128("-7", "0", "-7", .toNearestOrEven)
    /* dqscb073 */ self.scaleb128("75", "0", "75", .toNearestOrEven)
    /* dqscb074 */ self.scaleb128("-75", "0", "-75", .toNearestOrEven)
    /* dqscb075 */ self.scaleb128("7.50", "0", "7.50", .toNearestOrEven)
    /* dqscb076 */ self.scaleb128("-7.50", "0", "-7.50", .toNearestOrEven)
    /* dqscb077 */ self.scaleb128("7.500", "0", "7.500", .toNearestOrEven)
    /* dqscb078 */ self.scaleb128("-7.500", "0", "-7.500", .toNearestOrEven)
    /* dqscb081 */ self.scaleb128("7", "1", "7E+1", .toNearestOrEven)
    /* dqscb082 */ self.scaleb128("-7", "1", "-7E+1", .toNearestOrEven)
    /* dqscb083 */ self.scaleb128("75", "1", "7.5E+2", .toNearestOrEven)
    /* dqscb084 */ self.scaleb128("-75", "1", "-7.5E+2", .toNearestOrEven)
    /* dqscb085 */ self.scaleb128("7.50", "1", "75.0", .toNearestOrEven)
    /* dqscb086 */ self.scaleb128("-7.50", "1", "-75.0", .toNearestOrEven)
    /* dqscb087 */ self.scaleb128("7.500", "1", "75.00", .toNearestOrEven)
    /* dqscb088 */ self.scaleb128("-7.500", "1", "-75.00", .toNearestOrEven)
    /* dqscb091 */ self.scaleb128("7", "2", "7E+2", .toNearestOrEven)
    /* dqscb092 */ self.scaleb128("-7", "2", "-7E+2", .toNearestOrEven)
    /* dqscb093 */ self.scaleb128("75", "2", "7.5E+3", .toNearestOrEven)
    /* dqscb094 */ self.scaleb128("-75", "2", "-7.5E+3", .toNearestOrEven)
    /* dqscb095 */ self.scaleb128("7.50", "2", "750", .toNearestOrEven)
    /* dqscb096 */ self.scaleb128("-7.50", "2", "-750", .toNearestOrEven)
    /* dqscb097 */ self.scaleb128("7.500", "2", "750.0", .toNearestOrEven)
    /* dqscb098 */ self.scaleb128("-7.500", "2", "-750.0", .toNearestOrEven)
    /* dqscb111 */ self.scaleb128("0", "1", "0E+1", .toNearestOrEven)
    /* dqscb112 */ self.scaleb128("-0", "2", "-0E+2", .toNearestOrEven)
    /* dqscb113 */ self.scaleb128("0E+4", "3", "0E+7", .toNearestOrEven)
    /* dqscb114 */ self.scaleb128("-0E+4", "4", "-0E+8", .toNearestOrEven)
    /* dqscb115 */ self.scaleb128("0.0000", "5", "0E+1", .toNearestOrEven)
    /* dqscb116 */ self.scaleb128("-0.0000", "6", "-0E+2", .toNearestOrEven)
    /* dqscb117 */ self.scaleb128("0E-141", "7", "0E-134", .toNearestOrEven)
    /* dqscb118 */ self.scaleb128("-0E-141", "8", "-0E-133", .toNearestOrEven)
    /* dqscb120 */ self.scaleb128("1.23", "12355", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb121 */ self.scaleb128("1.23", "12356", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb122 */ self.scaleb128("1.23", "12357", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb123 */ self.scaleb128("1.23", "12358", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb124 */ self.scaleb128("1.23", "-12355", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb125 */ self.scaleb128("1.23", "-12356", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb126 */ self.scaleb128("1.23", "-12357", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb127 */ self.scaleb128("1.23", "-12358", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqscb132 */ self.scaleb128("9.999999999999999999999999999999999E+6144", "+6144", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb133 */ self.scaleb128("9.999999999999999999999999999999999E+6144", "+10", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb134 */ self.scaleb128("9.999999999999999999999999999999999E+6144", "+1", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb135 */ self.scaleb128("9.999999999999999999999999999999999E+6144", "0", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqscb136 */ self.scaleb128("9.999999999999999999999999999999999E+6144", "-1", "9.999999999999999999999999999999999E+6143", .toNearestOrEven)
    /* dqscb137 */ self.scaleb128("1E-6143", "+1", "1E-6142", .toNearestOrEven)
    /* dqscb139 */ self.scaleb128("1E-6143", "-1", "1E-6144", .toNearestOrEven)
    /* dqscb140 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "+1", "1.000000000000000000000000000000000E-6142", .toNearestOrEven)
    /* dqscb141 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "0", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqscb142 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-1", "1.00000000000000000000000000000000E-6144", .toNearestOrEven)
    /* dqscb143 */ self.scaleb128("1E-6176", "+1", "1E-6175", .toNearestOrEven)
    /* dqscb144 */ self.scaleb128("1E-6176", "-0", "1E-6176", .toNearestOrEven)
    /* dqscb145 */ self.scaleb128("1E-6176", "-1", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb150 */ self.scaleb128("-1E-6176", "+1", "-1E-6175", .toNearestOrEven)
    /* dqscb151 */ self.scaleb128("-1E-6176", "-0", "-1E-6176", .toNearestOrEven)
    /* dqscb152 */ self.scaleb128("-1E-6176", "-1", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb153 */ self.scaleb128("-1.000000000000000000000000000000000E-6143", "+1", "-1.000000000000000000000000000000000E-6142", .toNearestOrEven)
    /* dqscb154 */ self.scaleb128("-1.000000000000000000000000000000000E-6143", "+0", "-1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqscb155 */ self.scaleb128("-1.000000000000000000000000000000000E-6143", "-1", "-1.00000000000000000000000000000000E-6144", .toNearestOrEven)
    /* dqscb156 */ self.scaleb128("-1E-6143", "+1", "-1E-6142", .toNearestOrEven)
    /* dqscb157 */ self.scaleb128("-1E-6143", "-0", "-1E-6143", .toNearestOrEven)
    /* dqscb158 */ self.scaleb128("-1E-6143", "-1", "-1E-6144", .toNearestOrEven)
    /* dqscb159 */ self.scaleb128("-9.999999999999999999999999999999999E+6144", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb160 */ self.scaleb128("-9.999999999999999999999999999999999E+6144", "+0", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqscb161 */ self.scaleb128("-9.999999999999999999999999999999999E+6144", "-1", "-9.999999999999999999999999999999999E+6143", .toNearestOrEven)
    /* dqscb1614 */ self.scaleb128("1E-6143", "-0", "1E-6143", .toNearestOrEven)
    /* dqscb162 */ self.scaleb128("-9E+6144", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb163 */ self.scaleb128("-1E+6144", "+1", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb171 */ self.scaleb128("1000E+6109", "+1", "1.000E+6113", .toNearestOrEven)
    /* dqscb172 */ self.scaleb128("1000E+6110", "+1", "1.000E+6114", .toNearestOrEven)
    /* dqscb173 */ self.scaleb128("1000E+6111", "+1", "1.0000E+6115", .toNearestOrEven)
    /* dqscb174 */ self.scaleb128("1000E+6112", "+1", "1.00000E+6116", .toNearestOrEven)
    /* dqscb175 */ self.scaleb128("1000E+6113", "+1", "1.000000E+6117", .toNearestOrEven)
    /* dqscb176 */ self.scaleb128("1000E+6114", "+1", "1.0000000E+6118", .toNearestOrEven)
    /* dqscb177 */ self.scaleb128("1000E+6131", "+1", "1.000000000000000000000000E+6135", .toNearestOrEven)
    /* dqscb178 */ self.scaleb128("1000E+6132", "+1", "1.0000000000000000000000000E+6136", .toNearestOrEven)
    /* dqscb179 */ self.scaleb128("1000E+6133", "+1", "1.00000000000000000000000000E+6137", .toNearestOrEven)
    /* dqscb180 */ self.scaleb128("1000E+6134", "+1", "1.000000000000000000000000000E+6138", .toNearestOrEven)
    /* dqscb181 */ self.scaleb128("1000E+6135", "+1", "1.0000000000000000000000000000E+6139", .toNearestOrEven)
    /* dqscb182 */ self.scaleb128("1000E+6136", "+1", "1.00000000000000000000000000000E+6140", .toNearestOrEven)
    /* dqscb183 */ self.scaleb128("1000E+6137", "+1", "1.000000000000000000000000000000E+6141", .toNearestOrEven)
    /* dqscb184 */ self.scaleb128("1000E+6138", "+1", "1.0000000000000000000000000000000E+6142", .toNearestOrEven)
    /* dqscb185 */ self.scaleb128("1000E+6139", "+1", "1.00000000000000000000000000000000E+6143", .toNearestOrEven)
    /* dqscb186 */ self.scaleb128("1000E+6140", "+1", "1.000000000000000000000000000000000E+6144", .toNearestOrEven)
    /* dqscb187 */ self.scaleb128("1000E+6141", "+1", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqscb202 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-19", "1.00000000000000E-6162", .toNearestOrEven)
    /* dqscb203 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-20", "1.0000000000000E-6163", .toNearestOrEven)
    /* dqscb204 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-21", "1.000000000000E-6164", .toNearestOrEven)
    /* dqscb205 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-22", "1.00000000000E-6165", .toNearestOrEven)
    /* dqscb206 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-23", "1.0000000000E-6166", .toNearestOrEven)
    /* dqscb207 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-24", "1.000000000E-6167", .toNearestOrEven)
    /* dqscb208 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-25", "1.00000000E-6168", .toNearestOrEven)
    /* dqscb209 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-26", "1.0000000E-6169", .toNearestOrEven)
    /* dqscb210 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-27", "1.000000E-6170", .toNearestOrEven)
    /* dqscb211 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-28", "1.00000E-6171", .toNearestOrEven)
    /* dqscb212 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-29", "1.0000E-6172", .toNearestOrEven)
    /* dqscb213 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-30", "1.000E-6173", .toNearestOrEven)
    /* dqscb214 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-31", "1.00E-6174", .toNearestOrEven)
    /* dqscb215 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-32", "1.0E-6175", .toNearestOrEven)
    /* dqscb216 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-33", "1E-6176", .toNearestOrEven)
    /* dqscb217 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-34", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb218 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-35", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqscb221 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "0", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqscb222 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-1", "1.00000000000000000000000000000000E-6144", .toNearestOrEven)
    /* dqscb223 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-2", "1.0000000000000000000000000000000E-6145", .toNearestOrEven)
    /* dqscb224 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-3", "1.000000000000000000000000000000E-6146", .toNearestOrEven)
    /* dqscb225 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-4", "1.00000000000000000000000000000E-6147", .toNearestOrEven)
    /* dqscb226 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-5", "1.0000000000000000000000000000E-6148", .toNearestOrEven)
    /* dqscb227 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-6", "1.000000000000000000000000000E-6149", .toNearestOrEven)
    /* dqscb228 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-7", "1.00000000000000000000000000E-6150", .toNearestOrEven)
    /* dqscb229 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-8", "1.0000000000000000000000000E-6151", .toNearestOrEven)
    /* dqscb230 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-9", "1.000000000000000000000000E-6152", .toNearestOrEven)
    /* dqscb231 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-10", "1.00000000000000000000000E-6153", .toNearestOrEven)
    /* dqscb232 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-11", "1.0000000000000000000000E-6154", .toNearestOrEven)
    /* dqscb233 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-12", "1.000000000000000000000E-6155", .toNearestOrEven)
    /* dqscb234 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-13", "1.00000000000000000000E-6156", .toNearestOrEven)
    /* dqscb235 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-14", "1.0000000000000000000E-6157", .toNearestOrEven)
    /* dqscb236 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-15", "1.000000000000000000E-6158", .toNearestOrEven)
    /* dqscb237 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-16", "1.00000000000000000E-6159", .toNearestOrEven)
    /* dqscb238 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-17", "1.0000000000000000E-6160", .toNearestOrEven)
    /* dqscb239 */ self.scaleb128("1.000000000000000000000000000000000E-6143", "-18", "1.000000000000000E-6161", .toNearestOrEven)
    /* dqscb861 */ self.scaleb128("NaN(0x1)", "-Inf", "NaN(0x1)", .toNearestOrEven)
    /* dqscb862 */ self.scaleb128("-NaN(0x2)", "-1000", "-NaN(0x2)", .toNearestOrEven)
    /* dqscb863 */ self.scaleb128("NaN(0x3)", "1000", "NaN(0x3)", .toNearestOrEven)
    /* dqscb864 */ self.scaleb128("NaN(0x4)", "Inf", "NaN(0x4)", .toNearestOrEven)
    /* dqscb865 */ self.scaleb128("NaN(0x5)", "NaN(0x3d)", "NaN(0x5)", .toNearestOrEven)
    /* dqscb866 */ self.scaleb128("-Inf", "-NaN(0x47)", "-NaN(0x47)", .toNearestOrEven)
    /* dqscb867 */ self.scaleb128("-1000", "NaN(0x51)", "NaN(0x51)", .toNearestOrEven)
    /* dqscb868 */ self.scaleb128("1000", "NaN(0x5b)", "NaN(0x5b)", .toNearestOrEven)
    /* dqscb869 */ self.scaleb128("Inf", "NaN(0x65)", "NaN(0x65)", .toNearestOrEven)
    /* dqscb871 */ self.scaleb128("sNaN(0xb)", "-Inf", "NaN(0xb)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb872 */ self.scaleb128("sNaN(0xc)", "-1000", "NaN(0xc)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb873 */ self.scaleb128("-sNaN(0xd)", "1000", "-NaN(0xd)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb874 */ self.scaleb128("sNaN(0xe)", "NaN(0xab)", "NaN(0xe)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb875 */ self.scaleb128("sNaN(0xf)", "sNaN(0xb5)", "NaN(0xf)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb876 */ self.scaleb128("NaN(0x10)", "sNaN(0xbf)", "NaN(0xbf)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb877 */ self.scaleb128("-Inf", "sNaN(0xc9)", "NaN(0xc9)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb878 */ self.scaleb128("-1000", "sNaN(0xd3)", "NaN(0xd3)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb879 */ self.scaleb128("1000", "-sNaN(0xdd)", "-NaN(0xdd)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb880 */ self.scaleb128("Inf", "sNaN(0xe7)", "NaN(0xe7)", .toNearestOrEven, .isInvalidOperation)
    /* dqscb881 */ self.scaleb128("NaN(0x19)", "sNaN(0xf1)", "NaN(0xf1)", .toNearestOrEven, .isInvalidOperation)
  }

  private func scaleb128(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal128(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = self.scaleB(arg0, arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }
}
