// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class SpeleotroveOtherTests: XCTestCase, SpeleotroveMixin {

  // MARK: - Canonical

  func test_canonical64() {
    /* ddcan021 */ self.canonical64("#77fcff3fcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan022 */ self.canonical64("#77fcff3fcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan023 */ self.canonical64("#77ffff3fcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan024 */ self.canonical64("#77ffff3fcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan025 */ self.canonical64("#77fcffffcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan026 */ self.canonical64("#77fcffffcff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan027 */ self.canonical64("#77fcff3ffff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan028 */ self.canonical64("#77fcff3ffff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan030 */ self.canonical64("#77fcff3fcffffcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan031 */ self.canonical64("#77fcff3fcffffcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan032 */ self.canonical64("#77fcff3fcff3ffff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan033 */ self.canonical64("#77fcff3fcff3ffff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan035 */ self.canonical64("#77fcff3fdff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan036 */ self.canonical64("#77fcff3feff3fcff", "#77fcff3fcff3fcff", .toNearestOrEven)
    /* ddcan100 */ self.canonical64("NaN(0x38d7ea4c67fff)", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan101 */ self.canonical64("#7c00ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan102 */ self.canonical64("#7c03ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan103 */ self.canonical64("#7c00ffffcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan104 */ self.canonical64("#7c00ff3ffff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan105 */ self.canonical64("#7c00ff3fcffffcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan106 */ self.canonical64("#7c00ff3fcff3ffff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan107 */ self.canonical64("#7c00ff3fcff3ffff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan110 */ self.canonical64("#7c00ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan112 */ self.canonical64("#7d00ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan113 */ self.canonical64("#7c80ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan114 */ self.canonical64("#7c40ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan115 */ self.canonical64("#7c20ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan116 */ self.canonical64("#7c10ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan117 */ self.canonical64("#7c08ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan118 */ self.canonical64("#7c04ff3fcff3fcff", "#7c00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan120 */ self.canonical64("sNaN(0x38d7ea4c67fff)", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan121 */ self.canonical64("#7e00ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan122 */ self.canonical64("#7e03ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan123 */ self.canonical64("#7e00ffffcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan124 */ self.canonical64("#7e00ff3ffff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan125 */ self.canonical64("#7e00ff3fcffffcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan126 */ self.canonical64("#7e00ff3fcff3ffff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan127 */ self.canonical64("#7e00ff3fcff3ffff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan130 */ self.canonical64("#7e00ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan132 */ self.canonical64("#7f00ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan133 */ self.canonical64("#7e80ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan134 */ self.canonical64("#7e40ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan135 */ self.canonical64("#7e20ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan136 */ self.canonical64("#7e10ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan137 */ self.canonical64("#7e08ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan138 */ self.canonical64("#7e04ff3fcff3fcff", "#7e00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan140 */ self.canonical64("#7800000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan141 */ self.canonical64("#7900000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan142 */ self.canonical64("#7a00000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan143 */ self.canonical64("#7880000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan144 */ self.canonical64("#7840000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan145 */ self.canonical64("#7820000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan146 */ self.canonical64("#7810000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan147 */ self.canonical64("#7808000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan148 */ self.canonical64("#7804000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan150 */ self.canonical64("#7800000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan151 */ self.canonical64("#7802000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan152 */ self.canonical64("#7800000000000001", "#7800000000000000", .toNearestOrEven)
    /* ddcan153 */ self.canonical64("#7801000000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan154 */ self.canonical64("#7800200000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan155 */ self.canonical64("#7800080000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan156 */ self.canonical64("#7800002000000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan157 */ self.canonical64("#7800000400000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan158 */ self.canonical64("#7800000040000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan159 */ self.canonical64("#7800000008000000", "#7800000000000000", .toNearestOrEven)
    /* ddcan160 */ self.canonical64("#7800000000400000", "#7800000000000000", .toNearestOrEven)
    /* ddcan161 */ self.canonical64("#7800000000020000", "#7800000000000000", .toNearestOrEven)
    /* ddcan162 */ self.canonical64("#7800000000008000", "#7800000000000000", .toNearestOrEven)
    /* ddcan163 */ self.canonical64("#7800000000000200", "#7800000000000000", .toNearestOrEven)
    /* ddcan164 */ self.canonical64("#7800000000000040", "#7800000000000000", .toNearestOrEven)
    /* ddcan165 */ self.canonical64("#7800000000000008", "#7800000000000000", .toNearestOrEven)
  }

  private func canonical64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = self.canonical(arg0)
    self.assertEqual(result, expected, file, line)
  }

  func test_canonical128() {
    /* dqcan021 */ self.canonical128("#77ffcff3fcff3fcff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan022 */ self.canonical128("#77fffff3fcff3fcff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan023 */ self.canonical128("#77ffcffffcff3fcff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan024 */ self.canonical128("#77ffcff3ffff3fcff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan025 */ self.canonical128("#77ffcff3fcffffcff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan026 */ self.canonical128("#77ffcff3fcff3ffff3fcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan027 */ self.canonical128("#77ffcff3fcff3fcffffcff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan028 */ self.canonical128("#77ffcff3fcff3fcff3ffff3fcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan029 */ self.canonical128("#77ffcff3fcff3fcff3fcffffcff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan030 */ self.canonical128("#77ffcff3fcff3fcff3fcff3ffff3fcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan031 */ self.canonical128("#77ffcff3fcff3fcff3fcff3fcffffcff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan032 */ self.canonical128("#77ffcff3fcff3fcff3fcff3fcff3ffff", "#77ffcff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan061 */ self.canonical128("#7c000ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan062 */ self.canonical128("#7c000ffffcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan063 */ self.canonical128("#7c000ff3ffff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan064 */ self.canonical128("#7c000ff3fcffffcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan065 */ self.canonical128("#7c000ff3fcff3ffff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan066 */ self.canonical128("#7c000ff3fcff3fcffffcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan067 */ self.canonical128("#7c000ff3fcff3fcff3ffff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan068 */ self.canonical128("#7c000ff3fcff3fcff3fcffffcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan069 */ self.canonical128("#7c000ff3fcff3fcff3fcff3ffff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan070 */ self.canonical128("#7c000ff3fcff3fcff3fcff3fcffffcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan071 */ self.canonical128("#7c000ff3fcff3fcff3fcff3fcff3ffff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan081 */ self.canonical128("#7d000ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan082 */ self.canonical128("#7c800ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan083 */ self.canonical128("#7c400ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan084 */ self.canonical128("#7c200ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan085 */ self.canonical128("#7c100ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan086 */ self.canonical128("#7c080ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan087 */ self.canonical128("#7c040ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan088 */ self.canonical128("#7c020ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan089 */ self.canonical128("#7c010ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan090 */ self.canonical128("#7c008ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan091 */ self.canonical128("#7c004ff3fcff3fcff3fcff3fcff3fcff", "#7c000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan100 */ self.canonical128("#7e000ff3fcff3fcff3fcff3fcffffcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan101 */ self.canonical128("#7e000ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan102 */ self.canonical128("#7e000ffffcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan103 */ self.canonical128("#7e000ff3ffff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan104 */ self.canonical128("#7e000ff3fcffffcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan105 */ self.canonical128("#7e000ff3fcff3ffff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan106 */ self.canonical128("#7e000ff3fcff3fcffffcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan107 */ self.canonical128("#7e000ff3fcff3fcff3ffff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan108 */ self.canonical128("#7e000ff3fcff3fcff3fcffffcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan109 */ self.canonical128("#7e000ff3fcff3fcff3fcff3ffff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan111 */ self.canonical128("#7e000ff3fcff3fcff3fcff3fcff3ffff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan121 */ self.canonical128("#7f000ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan122 */ self.canonical128("#7e800ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan123 */ self.canonical128("#7e400ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan124 */ self.canonical128("#7e200ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan125 */ self.canonical128("#7e100ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan126 */ self.canonical128("#7e080ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan127 */ self.canonical128("#7e040ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan128 */ self.canonical128("#7e020ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan129 */ self.canonical128("#7e010ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan130 */ self.canonical128("#7e008ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan131 */ self.canonical128("#7e004ff3fcff3fcff3fcff3fcff3fcff", "#7e000ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan137 */ self.canonical128("#78000000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan138 */ self.canonical128("#79000000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan139 */ self.canonical128("#7a000000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan140 */ self.canonical128("#78800000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan141 */ self.canonical128("#78400000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan142 */ self.canonical128("#78200000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan143 */ self.canonical128("#78100000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan144 */ self.canonical128("#78080000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan145 */ self.canonical128("#78040000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan146 */ self.canonical128("#78020000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan147 */ self.canonical128("#78010000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan148 */ self.canonical128("#78008000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan149 */ self.canonical128("#78004000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan150 */ self.canonical128("#78000000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan151 */ self.canonical128("#78020000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan152 */ self.canonical128("#78000000000000000000000000000001", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan153 */ self.canonical128("#78010000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan154 */ self.canonical128("#78002000000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan155 */ self.canonical128("#78000800000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan156 */ self.canonical128("#78000020000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan157 */ self.canonical128("#78000004000000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan158 */ self.canonical128("#78000000400000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan159 */ self.canonical128("#78000000080000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan160 */ self.canonical128("#78000000004000000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan161 */ self.canonical128("#78000000000200000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan162 */ self.canonical128("#78000000000080000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan163 */ self.canonical128("#78000000000002000000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan164 */ self.canonical128("#78000000000000400000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan165 */ self.canonical128("#78000000000000080000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan166 */ self.canonical128("#78000000000000001000000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan167 */ self.canonical128("#78000000000000000200000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan168 */ self.canonical128("#78000000000000000080000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan169 */ self.canonical128("#78000000000000000004000000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan170 */ self.canonical128("#78000000000000000000400000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan171 */ self.canonical128("#78000000000000000000010000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan172 */ self.canonical128("#78000000000000000000002000000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan173 */ self.canonical128("#78000000000000000000000400000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan174 */ self.canonical128("#78000000000000000000000080000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan175 */ self.canonical128("#78000000000000000000000002000000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan176 */ self.canonical128("#78000000000000000000000000400000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan177 */ self.canonical128("#78000000000000000000000000020000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan178 */ self.canonical128("#78000000000000000000000000001000", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan179 */ self.canonical128("#78000000000000000000000000000400", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan180 */ self.canonical128("#78000000000000000000000000000020", "#78000000000000000000000000000000", .toNearestOrEven)
    /* dqcan181 */ self.canonical128("#78000000000000000000000000000008", "#78000000000000000000000000000000", .toNearestOrEven)
  }

  private func canonical128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = self.canonical(arg0)
    self.assertEqual(result, expected, file, line)
  }

  // MARK: - Copy

  func test_copy64() {
    /* ddcan250 */ self.copy64("#77ffff3fcff3fcff", "#77ffff3fcff3fcff", .toNearestOrEven)
    /* ddcan251 */ self.copy64("#77fcff3fdff3fcff", "#77fcff3fdff3fcff", .toNearestOrEven)
    /* ddcan252 */ self.copy64("#7c03ff3fcff3fcff", "#7c03ff3fcff3fcff", .toNearestOrEven)
    /* ddcan253 */ self.copy64("#7c00ff3fcff3ffff", "#7c00ff3fcff3ffff", .toNearestOrEven)
    /* ddcan254 */ self.copy64("#7d00ff3fcff3fcff", "#7d00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan255 */ self.copy64("#7c04ff3fcff3fcff", "#7c04ff3fcff3fcff", .toNearestOrEven)
    /* ddcan256 */ self.copy64("#7e00ff3fcffffcff", "#7e00ff3fcffffcff", .toNearestOrEven)
    /* ddcan257 */ self.copy64("#7e40ff3fcff3fcff", "#7e40ff3fcff3fcff", .toNearestOrEven)
    /* ddcan258 */ self.copy64("#7a00000000000000", "#7a00000000000000", .toNearestOrEven)
    /* ddcan259 */ self.copy64("#7800200000000000", "#7800200000000000", .toNearestOrEven)
    /* ddcpy001 */ self.copy64("+7.50", "7.50", .toNearestOrEven)
    /* ddcpy011 */ self.copy64("Infinity", "Infinity", .toNearestOrEven)
    /* ddcpy012 */ self.copy64("-Infinity", "-Infinity", .toNearestOrEven)
    /* ddcpy021 */ self.copy64("NaN", "NaN", .toNearestOrEven)
    /* ddcpy022 */ self.copy64("-NaN", "-NaN", .toNearestOrEven)
    /* ddcpy023 */ self.copy64("sNaN", "sNaN", .toNearestOrEven)
    /* ddcpy024 */ self.copy64("-sNaN", "-sNaN", .toNearestOrEven)
    /* ddcpy031 */ self.copy64("NaN(0xa)", "NaN(0xa)", .toNearestOrEven)
    /* ddcpy032 */ self.copy64("-NaN(0xa)", "-NaN(0xa)", .toNearestOrEven)
    /* ddcpy033 */ self.copy64("sNaN(0xa)", "sNaN(0xa)", .toNearestOrEven)
    /* ddcpy034 */ self.copy64("-sNaN(0xa)", "-sNaN(0xa)", .toNearestOrEven)
    /* ddcpy035 */ self.copy64("NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* ddcpy036 */ self.copy64("-NaN(0x7)", "-NaN(0x7)", .toNearestOrEven)
    /* ddcpy037 */ self.copy64("sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* ddcpy038 */ self.copy64("-sNaN(0x65)", "-sNaN(0x65)", .toNearestOrEven)
    /* ddcpy101 */ self.copy64("7", "7", .toNearestOrEven)
    /* ddcpy102 */ self.copy64("-7", "-7", .toNearestOrEven)
    /* ddcpy103 */ self.copy64("75", "75", .toNearestOrEven)
    /* ddcpy104 */ self.copy64("-75", "-75", .toNearestOrEven)
    /* ddcpy105 */ self.copy64("7.50", "7.50", .toNearestOrEven)
    /* ddcpy106 */ self.copy64("-7.50", "-7.50", .toNearestOrEven)
    /* ddcpy107 */ self.copy64("7.500", "7.500", .toNearestOrEven)
    /* ddcpy108 */ self.copy64("-7.500", "-7.500", .toNearestOrEven)
    /* ddcpy111 */ self.copy64("0", "0", .toNearestOrEven)
    /* ddcpy112 */ self.copy64("-0", "-0", .toNearestOrEven)
    /* ddcpy113 */ self.copy64("0E+4", "0E+4", .toNearestOrEven)
    /* ddcpy114 */ self.copy64("-0E+4", "-0E+4", .toNearestOrEven)
    /* ddcpy115 */ self.copy64("0.0000", "0.0000", .toNearestOrEven)
    /* ddcpy116 */ self.copy64("-0.0000", "-0.0000", .toNearestOrEven)
    /* ddcpy117 */ self.copy64("0E-141", "0E-141", .toNearestOrEven)
    /* ddcpy118 */ self.copy64("-0E-141", "-0E-141", .toNearestOrEven)
    /* ddcpy121 */ self.copy64("2682682682682682", "2682682682682682", .toNearestOrEven)
    /* ddcpy122 */ self.copy64("-2682682682682682", "-2682682682682682", .toNearestOrEven)
    /* ddcpy123 */ self.copy64("1341341341341341", "1341341341341341", .toNearestOrEven)
    /* ddcpy124 */ self.copy64("-1341341341341341", "-1341341341341341", .toNearestOrEven)
    /* ddcpy131 */ self.copy64("9.999999999999999E+384", "9.999999999999999E+384", .toNearestOrEven)
    /* ddcpy132 */ self.copy64("1E-383", "1E-383", .toNearestOrEven)
    /* ddcpy133 */ self.copy64("1.000000000000000E-383", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcpy134 */ self.copy64("1E-398", "1E-398", .toNearestOrEven)
    /* ddcpy135 */ self.copy64("-1E-398", "-1E-398", .toNearestOrEven)
    /* ddcpy136 */ self.copy64("-1.000000000000000E-383", "-1.000000000000000E-383", .toNearestOrEven)
    /* ddcpy137 */ self.copy64("-1E-383", "-1E-383", .toNearestOrEven)
    /* ddcpy138 */ self.copy64("-9.999999999999999E+384", "-9.999999999999999E+384", .toNearestOrEven)
  }

  private func copy64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = arg0
    self.assertEqual(result, expected, file, line)
  }

  func test_copy128() {
    /* dqcan250 */ self.copy128("#6e080ff3fcff3fcfffffff3fcfffffff", "#6e080ff3fcff3fcfffffff3fcfffffff", .toNearestOrEven)
    /* dqcan251 */ self.copy128("#ee080ff3fcff3ffff3fcff3ffff3fcff", "#ee080ff3fcff3ffff3fcff3ffff3fcff", .toNearestOrEven)
    /* dqcan252 */ self.copy128("#7c000ff3fcffffffffffffffcff3fcff", "#7c000ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan253 */ self.copy128("#7c080ff3fcff3fcff3fcff3fcff3fcff", "#7c080ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan254 */ self.copy128("#7e003ff3fcffffffffffffffcff3fcff", "#7e003ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan255 */ self.copy128("#7e100ff3fcff3fcff3fcff3fcff3fcff", "#7e100ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan258 */ self.copy128("#78002000000000000000000000000000", "#78002000000000000000000000000000", .toNearestOrEven)
    /* dqcan259 */ self.copy128("#78000000000010000000000000100000", "#78000000000010000000000000100000", .toNearestOrEven)
    /* dqcpy001 */ self.copy128("+7.50", "7.50", .toNearestOrEven)
    /* dqcpy011 */ self.copy128("Infinity", "Infinity", .toNearestOrEven)
    /* dqcpy012 */ self.copy128("-Infinity", "-Infinity", .toNearestOrEven)
    /* dqcpy021 */ self.copy128("NaN", "NaN", .toNearestOrEven)
    /* dqcpy022 */ self.copy128("-NaN", "-NaN", .toNearestOrEven)
    /* dqcpy023 */ self.copy128("sNaN", "sNaN", .toNearestOrEven)
    /* dqcpy024 */ self.copy128("-sNaN", "-sNaN", .toNearestOrEven)
    /* dqcpy031 */ self.copy128("NaN(0xa)", "NaN(0xa)", .toNearestOrEven)
    /* dqcpy032 */ self.copy128("-NaN(0xa)", "-NaN(0xa)", .toNearestOrEven)
    /* dqcpy033 */ self.copy128("sNaN(0xa)", "sNaN(0xa)", .toNearestOrEven)
    /* dqcpy034 */ self.copy128("-sNaN(0xa)", "-sNaN(0xa)", .toNearestOrEven)
    /* dqcpy035 */ self.copy128("NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* dqcpy036 */ self.copy128("-NaN(0x7)", "-NaN(0x7)", .toNearestOrEven)
    /* dqcpy037 */ self.copy128("sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* dqcpy038 */ self.copy128("-sNaN(0x65)", "-sNaN(0x65)", .toNearestOrEven)
    /* dqcpy101 */ self.copy128("7", "7", .toNearestOrEven)
    /* dqcpy102 */ self.copy128("-7", "-7", .toNearestOrEven)
    /* dqcpy103 */ self.copy128("75", "75", .toNearestOrEven)
    /* dqcpy104 */ self.copy128("-75", "-75", .toNearestOrEven)
    /* dqcpy105 */ self.copy128("7.50", "7.50", .toNearestOrEven)
    /* dqcpy106 */ self.copy128("-7.50", "-7.50", .toNearestOrEven)
    /* dqcpy107 */ self.copy128("7.500", "7.500", .toNearestOrEven)
    /* dqcpy108 */ self.copy128("-7.500", "-7.500", .toNearestOrEven)
    /* dqcpy111 */ self.copy128("0", "0", .toNearestOrEven)
    /* dqcpy112 */ self.copy128("-0", "-0", .toNearestOrEven)
    /* dqcpy113 */ self.copy128("0E+4", "0E+4", .toNearestOrEven)
    /* dqcpy114 */ self.copy128("-0E+4", "-0E+4", .toNearestOrEven)
    /* dqcpy115 */ self.copy128("0.0000", "0.0000", .toNearestOrEven)
    /* dqcpy116 */ self.copy128("-0.0000", "-0.0000", .toNearestOrEven)
    /* dqcpy117 */ self.copy128("0E-141", "0E-141", .toNearestOrEven)
    /* dqcpy118 */ self.copy128("-0E-141", "-0E-141", .toNearestOrEven)
    /* dqcpy121 */ self.copy128("2682682682682682682682682682682682", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpy122 */ self.copy128("-2682682682682682682682682682682682", "-2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpy123 */ self.copy128("1341341341341341341341341341341341", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpy124 */ self.copy128("-1341341341341341341341341341341341", "-1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpy131 */ self.copy128("9.999999999999999999999999999999999E+6144", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcpy132 */ self.copy128("1E-6143", "1E-6143", .toNearestOrEven)
    /* dqcpy133 */ self.copy128("1.000000000000000000000000000000000E-6143", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpy134 */ self.copy128("1E-6176", "1E-6176", .toNearestOrEven)
    /* dqcpy135 */ self.copy128("-1E-6176", "-1E-6176", .toNearestOrEven)
    /* dqcpy136 */ self.copy128("-1.000000000000000000000000000000000E-6143", "-1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpy137 */ self.copy128("-1E-6143", "-1E-6143", .toNearestOrEven)
    /* dqcpy138 */ self.copy128("-9.999999999999999999999999999999999E+6144", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
  }

  private func copy128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = arg0
    self.assertEqual(result, expected, file, line)
  }

  // MARK: - Copyabs

  func test_copyabs64() {
    /* ddcan260 */ self.copyabs64("#f7ffff3fcff3fcff", "#77ffff3fcff3fcff", .toNearestOrEven)
    /* ddcan261 */ self.copyabs64("#f7fcff3fdff3fcff", "#77fcff3fdff3fcff", .toNearestOrEven)
    /* ddcan262 */ self.copyabs64("#fc03ff3fcff3fcff", "#7c03ff3fcff3fcff", .toNearestOrEven)
    /* ddcan263 */ self.copyabs64("#fc00ff3fcff3ffff", "#7c00ff3fcff3ffff", .toNearestOrEven)
    /* ddcan264 */ self.copyabs64("#fd00ff3fcff3fcff", "#7d00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan265 */ self.copyabs64("#fc04ff3fcff3fcff", "#7c04ff3fcff3fcff", .toNearestOrEven)
    /* ddcan266 */ self.copyabs64("#fe00ff3fcffffcff", "#7e00ff3fcffffcff", .toNearestOrEven)
    /* ddcan267 */ self.copyabs64("#fe40ff3fcff3fcff", "#7e40ff3fcff3fcff", .toNearestOrEven)
    /* ddcan268 */ self.copyabs64("#fa00000000000000", "#7a00000000000000", .toNearestOrEven)
    /* ddcan269 */ self.copyabs64("#f800200000000000", "#7800200000000000", .toNearestOrEven)
    /* ddcpa001 */ self.copyabs64("+7.50", "7.50", .toNearestOrEven)
    /* ddcpa011 */ self.copyabs64("Infinity", "Infinity", .toNearestOrEven)
    /* ddcpa012 */ self.copyabs64("-Infinity", "Infinity", .toNearestOrEven)
    /* ddcpa021 */ self.copyabs64("NaN", "NaN", .toNearestOrEven)
    /* ddcpa022 */ self.copyabs64("-NaN", "NaN", .toNearestOrEven)
    /* ddcpa023 */ self.copyabs64("sNaN", "sNaN", .toNearestOrEven)
    /* ddcpa024 */ self.copyabs64("-sNaN", "sNaN", .toNearestOrEven)
    /* ddcpa031 */ self.copyabs64("NaN(0xa)", "NaN(0xa)", .toNearestOrEven)
    /* ddcpa032 */ self.copyabs64("-NaN(0xf)", "NaN(0xf)", .toNearestOrEven)
    /* ddcpa033 */ self.copyabs64("sNaN(0xf)", "sNaN(0xf)", .toNearestOrEven)
    /* ddcpa034 */ self.copyabs64("-sNaN(0xa)", "sNaN(0xa)", .toNearestOrEven)
    /* ddcpa035 */ self.copyabs64("NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* ddcpa036 */ self.copyabs64("-NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* ddcpa037 */ self.copyabs64("sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* ddcpa038 */ self.copyabs64("-sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* ddcpa101 */ self.copyabs64("7", "7", .toNearestOrEven)
    /* ddcpa102 */ self.copyabs64("-7", "7", .toNearestOrEven)
    /* ddcpa103 */ self.copyabs64("75", "75", .toNearestOrEven)
    /* ddcpa104 */ self.copyabs64("-75", "75", .toNearestOrEven)
    /* ddcpa105 */ self.copyabs64("7.10", "7.10", .toNearestOrEven)
    /* ddcpa106 */ self.copyabs64("-7.10", "7.10", .toNearestOrEven)
    /* ddcpa107 */ self.copyabs64("7.500", "7.500", .toNearestOrEven)
    /* ddcpa108 */ self.copyabs64("-7.500", "7.500", .toNearestOrEven)
    /* ddcpa111 */ self.copyabs64("0", "0", .toNearestOrEven)
    /* ddcpa112 */ self.copyabs64("-0", "0", .toNearestOrEven)
    /* ddcpa113 */ self.copyabs64("0E+6", "0E+6", .toNearestOrEven)
    /* ddcpa114 */ self.copyabs64("-0E+6", "0E+6", .toNearestOrEven)
    /* ddcpa115 */ self.copyabs64("0.0000", "0.0000", .toNearestOrEven)
    /* ddcpa116 */ self.copyabs64("-0.0000", "0.0000", .toNearestOrEven)
    /* ddcpa117 */ self.copyabs64("0E-141", "0E-141", .toNearestOrEven)
    /* ddcpa118 */ self.copyabs64("-0E-141", "0E-141", .toNearestOrEven)
    /* ddcpa121 */ self.copyabs64("2682682682682682", "2682682682682682", .toNearestOrEven)
    /* ddcpa122 */ self.copyabs64("-2682682682682682", "2682682682682682", .toNearestOrEven)
    /* ddcpa123 */ self.copyabs64("1341341341341341", "1341341341341341", .toNearestOrEven)
    /* ddcpa124 */ self.copyabs64("-1341341341341341", "1341341341341341", .toNearestOrEven)
    /* ddcpa131 */ self.copyabs64("9.999999999999999E+384", "9.999999999999999E+384", .toNearestOrEven)
    /* ddcpa132 */ self.copyabs64("1E-383", "1E-383", .toNearestOrEven)
    /* ddcpa133 */ self.copyabs64("1.000000000000000E-383", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcpa134 */ self.copyabs64("1E-398", "1E-398", .toNearestOrEven)
    /* ddcpa135 */ self.copyabs64("-1E-398", "1E-398", .toNearestOrEven)
    /* ddcpa136 */ self.copyabs64("-1.000000000000000E-383", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcpa137 */ self.copyabs64("-1E-383", "1E-383", .toNearestOrEven)
    /* ddcpa138 */ self.copyabs64("-9.999999999999999E+384", "9.999999999999999E+384", .toNearestOrEven)
  }

  private func copyabs64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = self.copyAbs(arg0)
    self.assertEqual(result, expected, file, line)
  }

  func test_copyabs128() {
    /* dqcan260 */ self.copyabs128("#6e080ff3fcff3fcfffffff3fcfffffff", "#6e080ff3fcff3fcfffffff3fcfffffff", .toNearestOrEven)
    /* dqcan261 */ self.copyabs128("#ee080ff3fcff3ffff3fcff3ffff3fcff", "#6e080ff3fcff3ffff3fcff3ffff3fcff", .toNearestOrEven)
    /* dqcan262 */ self.copyabs128("#fc000ff3fcffffffffffffffcff3fcff", "#7c000ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan263 */ self.copyabs128("#fc080ff3fcff3fcff3fcff3fcff3fcff", "#7c080ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan264 */ self.copyabs128("#fe003ff3fcffffffffffffffcff3fcff", "#7e003ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan265 */ self.copyabs128("#fe100ff3fcff3fcff3fcff3fcff3fcff", "#7e100ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan268 */ self.copyabs128("#f8002000000000000000000000000000", "#78002000000000000000000000000000", .toNearestOrEven)
    /* dqcan269 */ self.copyabs128("#f8000000000000700700700000000000", "#78000000000000700700700000000000", .toNearestOrEven)
    /* dqcpa001 */ self.copyabs128("+7.50", "7.50", .toNearestOrEven)
    /* dqcpa011 */ self.copyabs128("Infinity", "Infinity", .toNearestOrEven)
    /* dqcpa012 */ self.copyabs128("-Infinity", "Infinity", .toNearestOrEven)
    /* dqcpa021 */ self.copyabs128("NaN", "NaN", .toNearestOrEven)
    /* dqcpa022 */ self.copyabs128("-NaN", "NaN", .toNearestOrEven)
    /* dqcpa023 */ self.copyabs128("sNaN", "sNaN", .toNearestOrEven)
    /* dqcpa024 */ self.copyabs128("-sNaN", "sNaN", .toNearestOrEven)
    /* dqcpa031 */ self.copyabs128("NaN(0xa)", "NaN(0xa)", .toNearestOrEven)
    /* dqcpa032 */ self.copyabs128("-NaN(0xf)", "NaN(0xf)", .toNearestOrEven)
    /* dqcpa033 */ self.copyabs128("sNaN(0xf)", "sNaN(0xf)", .toNearestOrEven)
    /* dqcpa034 */ self.copyabs128("-sNaN(0xa)", "sNaN(0xa)", .toNearestOrEven)
    /* dqcpa035 */ self.copyabs128("NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* dqcpa036 */ self.copyabs128("-NaN(0x7)", "NaN(0x7)", .toNearestOrEven)
    /* dqcpa037 */ self.copyabs128("sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* dqcpa038 */ self.copyabs128("-sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* dqcpa101 */ self.copyabs128("7", "7", .toNearestOrEven)
    /* dqcpa102 */ self.copyabs128("-7", "7", .toNearestOrEven)
    /* dqcpa103 */ self.copyabs128("75", "75", .toNearestOrEven)
    /* dqcpa104 */ self.copyabs128("-75", "75", .toNearestOrEven)
    /* dqcpa105 */ self.copyabs128("7.10", "7.10", .toNearestOrEven)
    /* dqcpa106 */ self.copyabs128("-7.10", "7.10", .toNearestOrEven)
    /* dqcpa107 */ self.copyabs128("7.500", "7.500", .toNearestOrEven)
    /* dqcpa108 */ self.copyabs128("-7.500", "7.500", .toNearestOrEven)
    /* dqcpa111 */ self.copyabs128("0", "0", .toNearestOrEven)
    /* dqcpa112 */ self.copyabs128("-0", "0", .toNearestOrEven)
    /* dqcpa113 */ self.copyabs128("0E+6", "0E+6", .toNearestOrEven)
    /* dqcpa114 */ self.copyabs128("-0E+6", "0E+6", .toNearestOrEven)
    /* dqcpa115 */ self.copyabs128("0.0000", "0.0000", .toNearestOrEven)
    /* dqcpa116 */ self.copyabs128("-0.0000", "0.0000", .toNearestOrEven)
    /* dqcpa117 */ self.copyabs128("0E-141", "0E-141", .toNearestOrEven)
    /* dqcpa118 */ self.copyabs128("-0E-141", "0E-141", .toNearestOrEven)
    /* dqcpa121 */ self.copyabs128("2682682682682682682682682682682682", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpa122 */ self.copyabs128("-2682682682682682682682682682682682", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpa123 */ self.copyabs128("1341341341341341341341341341341341", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpa124 */ self.copyabs128("-1341341341341341341341341341341341", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpa131 */ self.copyabs128("9.999999999999999999999999999999999E+6144", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcpa132 */ self.copyabs128("1E-6143", "1E-6143", .toNearestOrEven)
    /* dqcpa133 */ self.copyabs128("1.000000000000000000000000000000000E-6143", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpa134 */ self.copyabs128("1E-6176", "1E-6176", .toNearestOrEven)
    /* dqcpa135 */ self.copyabs128("-1E-6176", "1E-6176", .toNearestOrEven)
    /* dqcpa136 */ self.copyabs128("-1.000000000000000000000000000000000E-6143", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpa137 */ self.copyabs128("-1E-6143", "1E-6143", .toNearestOrEven)
    /* dqcpa138 */ self.copyabs128("-9.999999999999999999999999999999999E+6144", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
  }

  private func copyabs128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = self.copyAbs(arg0)
    self.assertEqual(result, expected, file, line)
  }

  // MARK: - Copynegate

  func test_copynegate64() {
    /* ddcan270 */ self.copynegate64("#77ffff3fcff3fcff", "#f7ffff3fcff3fcff", .toNearestOrEven)
    /* ddcan271 */ self.copynegate64("#77fcff3fdff3fcff", "#f7fcff3fdff3fcff", .toNearestOrEven)
    /* ddcan272 */ self.copynegate64("#7c03ff3fcff3fcff", "#fc03ff3fcff3fcff", .toNearestOrEven)
    /* ddcan273 */ self.copynegate64("#7c00ff3fcff3ffff", "#fc00ff3fcff3ffff", .toNearestOrEven)
    /* ddcan274 */ self.copynegate64("#7d00ff3fcff3fcff", "#fd00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan275 */ self.copynegate64("#7c04ff3fcff3fcff", "#fc04ff3fcff3fcff", .toNearestOrEven)
    /* ddcan276 */ self.copynegate64("#7e00ff3fcffffcff", "#fe00ff3fcffffcff", .toNearestOrEven)
    /* ddcan277 */ self.copynegate64("#7e40ff3fcff3fcff", "#fe40ff3fcff3fcff", .toNearestOrEven)
    /* ddcan278 */ self.copynegate64("#7a00000000000000", "#fa00000000000000", .toNearestOrEven)
    /* ddcan279 */ self.copynegate64("#7800200000000000", "#f800200000000000", .toNearestOrEven)
    /* ddcpn001 */ self.copynegate64("+7.50", "-7.50", .toNearestOrEven)
    /* ddcpn011 */ self.copynegate64("Infinity", "-Infinity", .toNearestOrEven)
    /* ddcpn012 */ self.copynegate64("-Infinity", "Infinity", .toNearestOrEven)
    /* ddcpn021 */ self.copynegate64("NaN", "-NaN", .toNearestOrEven)
    /* ddcpn022 */ self.copynegate64("-NaN", "NaN", .toNearestOrEven)
    /* ddcpn023 */ self.copynegate64("sNaN", "-sNaN", .toNearestOrEven)
    /* ddcpn024 */ self.copynegate64("-sNaN", "sNaN", .toNearestOrEven)
    /* ddcpn031 */ self.copynegate64("NaN(0xd)", "-NaN(0xd)", .toNearestOrEven)
    /* ddcpn032 */ self.copynegate64("-NaN(0xd)", "NaN(0xd)", .toNearestOrEven)
    /* ddcpn033 */ self.copynegate64("sNaN(0xd)", "-sNaN(0xd)", .toNearestOrEven)
    /* ddcpn034 */ self.copynegate64("-sNaN(0xd)", "sNaN(0xd)", .toNearestOrEven)
    /* ddcpn035 */ self.copynegate64("NaN(0x46)", "-NaN(0x46)", .toNearestOrEven)
    /* ddcpn036 */ self.copynegate64("-NaN(0x46)", "NaN(0x46)", .toNearestOrEven)
    /* ddcpn037 */ self.copynegate64("sNaN(0x65)", "-sNaN(0x65)", .toNearestOrEven)
    /* ddcpn038 */ self.copynegate64("-sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* ddcpn101 */ self.copynegate64("7", "-7", .toNearestOrEven)
    /* ddcpn102 */ self.copynegate64("-7", "7", .toNearestOrEven)
    /* ddcpn103 */ self.copynegate64("75", "-75", .toNearestOrEven)
    /* ddcpn104 */ self.copynegate64("-75", "75", .toNearestOrEven)
    /* ddcpn105 */ self.copynegate64("7.50", "-7.50", .toNearestOrEven)
    /* ddcpn106 */ self.copynegate64("-7.50", "7.50", .toNearestOrEven)
    /* ddcpn107 */ self.copynegate64("7.500", "-7.500", .toNearestOrEven)
    /* ddcpn108 */ self.copynegate64("-7.500", "7.500", .toNearestOrEven)
    /* ddcpn111 */ self.copynegate64("0", "-0", .toNearestOrEven)
    /* ddcpn112 */ self.copynegate64("-0", "0", .toNearestOrEven)
    /* ddcpn113 */ self.copynegate64("0E+4", "-0E+4", .toNearestOrEven)
    /* ddcpn114 */ self.copynegate64("-0E+4", "0E+4", .toNearestOrEven)
    /* ddcpn115 */ self.copynegate64("0.0000", "-0.0000", .toNearestOrEven)
    /* ddcpn116 */ self.copynegate64("-0.0000", "0.0000", .toNearestOrEven)
    /* ddcpn117 */ self.copynegate64("0E-141", "-0E-141", .toNearestOrEven)
    /* ddcpn118 */ self.copynegate64("-0E-141", "0E-141", .toNearestOrEven)
    /* ddcpn121 */ self.copynegate64("2682682682682682", "-2682682682682682", .toNearestOrEven)
    /* ddcpn122 */ self.copynegate64("-2682682682682682", "2682682682682682", .toNearestOrEven)
    /* ddcpn123 */ self.copynegate64("1341341341341341", "-1341341341341341", .toNearestOrEven)
    /* ddcpn124 */ self.copynegate64("-1341341341341341", "1341341341341341", .toNearestOrEven)
    /* ddcpn131 */ self.copynegate64("9.999999999999999E+384", "-9.999999999999999E+384", .toNearestOrEven)
    /* ddcpn132 */ self.copynegate64("1E-383", "-1E-383", .toNearestOrEven)
    /* ddcpn133 */ self.copynegate64("1.000000000000000E-383", "-1.000000000000000E-383", .toNearestOrEven)
    /* ddcpn134 */ self.copynegate64("1E-398", "-1E-398", .toNearestOrEven)
    /* ddcpn135 */ self.copynegate64("-1E-398", "1E-398", .toNearestOrEven)
    /* ddcpn136 */ self.copynegate64("-1.000000000000000E-383", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcpn137 */ self.copynegate64("-1E-383", "1E-383", .toNearestOrEven)
    /* ddcpn138 */ self.copynegate64("-9.999999999999999E+384", "9.999999999999999E+384", .toNearestOrEven)
  }

  private func copynegate64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = self.copyNegate(arg0)
    self.assertEqual(result, expected, file, line)
  }

  func test_copynegate128() {
    /* dqcan270 */ self.copynegate128("#6e080ff3fcff3fcfffffff3fcfffffff", "#ee080ff3fcff3fcfffffff3fcfffffff", .toNearestOrEven)
    /* dqcan271 */ self.copynegate128("#ee080ff3fcff3ffff3fcff3ffff3fcff", "#6e080ff3fcff3ffff3fcff3ffff3fcff", .toNearestOrEven)
    /* dqcan272 */ self.copynegate128("#7c000ff3fcffffffffffff3fcff3fcff", "#fc000ff3fcffffffffffff3fcff3fcff", .toNearestOrEven)
    /* dqcan273 */ self.copynegate128("#7c080ff3fcff3fcff3fcff3fcff3fcff", "#fc080ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan274 */ self.copynegate128("#7e003ff3fcffffffffffffffcff3fcff", "#fe003ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan275 */ self.copynegate128("#7e100ff3fcff3fcff3fcff3fcff3fcff", "#fe100ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan278 */ self.copynegate128("#78002000000000000000000000000000", "#f8002000000000000000000000000000", .toNearestOrEven)
    /* dqcan279 */ self.copynegate128("#78000000000010000000000000100000", "#f8000000000010000000000000100000", .toNearestOrEven)
    /* dqcpn001 */ self.copynegate128("+7.50", "-7.50", .toNearestOrEven)
    /* dqcpn011 */ self.copynegate128("Infinity", "-Infinity", .toNearestOrEven)
    /* dqcpn012 */ self.copynegate128("-Infinity", "Infinity", .toNearestOrEven)
    /* dqcpn021 */ self.copynegate128("NaN", "-NaN", .toNearestOrEven)
    /* dqcpn022 */ self.copynegate128("-NaN", "NaN", .toNearestOrEven)
    /* dqcpn023 */ self.copynegate128("sNaN", "-sNaN", .toNearestOrEven)
    /* dqcpn024 */ self.copynegate128("-sNaN", "sNaN", .toNearestOrEven)
    /* dqcpn031 */ self.copynegate128("NaN(0xd)", "-NaN(0xd)", .toNearestOrEven)
    /* dqcpn032 */ self.copynegate128("-NaN(0xd)", "NaN(0xd)", .toNearestOrEven)
    /* dqcpn033 */ self.copynegate128("sNaN(0xd)", "-sNaN(0xd)", .toNearestOrEven)
    /* dqcpn034 */ self.copynegate128("-sNaN(0xd)", "sNaN(0xd)", .toNearestOrEven)
    /* dqcpn035 */ self.copynegate128("NaN(0x46)", "-NaN(0x46)", .toNearestOrEven)
    /* dqcpn036 */ self.copynegate128("-NaN(0x46)", "NaN(0x46)", .toNearestOrEven)
    /* dqcpn037 */ self.copynegate128("sNaN(0x65)", "-sNaN(0x65)", .toNearestOrEven)
    /* dqcpn038 */ self.copynegate128("-sNaN(0x65)", "sNaN(0x65)", .toNearestOrEven)
    /* dqcpn101 */ self.copynegate128("7", "-7", .toNearestOrEven)
    /* dqcpn102 */ self.copynegate128("-7", "7", .toNearestOrEven)
    /* dqcpn103 */ self.copynegate128("75", "-75", .toNearestOrEven)
    /* dqcpn104 */ self.copynegate128("-75", "75", .toNearestOrEven)
    /* dqcpn105 */ self.copynegate128("7.50", "-7.50", .toNearestOrEven)
    /* dqcpn106 */ self.copynegate128("-7.50", "7.50", .toNearestOrEven)
    /* dqcpn107 */ self.copynegate128("7.500", "-7.500", .toNearestOrEven)
    /* dqcpn108 */ self.copynegate128("-7.500", "7.500", .toNearestOrEven)
    /* dqcpn111 */ self.copynegate128("0", "-0", .toNearestOrEven)
    /* dqcpn112 */ self.copynegate128("-0", "0", .toNearestOrEven)
    /* dqcpn113 */ self.copynegate128("0E+4", "-0E+4", .toNearestOrEven)
    /* dqcpn114 */ self.copynegate128("-0E+4", "0E+4", .toNearestOrEven)
    /* dqcpn115 */ self.copynegate128("0.0000", "-0.0000", .toNearestOrEven)
    /* dqcpn116 */ self.copynegate128("-0.0000", "0.0000", .toNearestOrEven)
    /* dqcpn117 */ self.copynegate128("0E-141", "-0E-141", .toNearestOrEven)
    /* dqcpn118 */ self.copynegate128("-0E-141", "0E-141", .toNearestOrEven)
    /* dqcpn121 */ self.copynegate128("2682682682682682682682682682682682", "-2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpn122 */ self.copynegate128("-2682682682682682682682682682682682", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcpn123 */ self.copynegate128("1341341341341341341341341341341341", "-1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpn124 */ self.copynegate128("-1341341341341341341341341341341341", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcpn131 */ self.copynegate128("9.999999999999999999999999999999999E+6144", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcpn132 */ self.copynegate128("1E-6143", "-1E-6143", .toNearestOrEven)
    /* dqcpn133 */ self.copynegate128("1.000000000000000000000000000000000E-6143", "-1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpn134 */ self.copynegate128("1E-6176", "-1E-6176", .toNearestOrEven)
    /* dqcpn135 */ self.copynegate128("-1E-6176", "1E-6176", .toNearestOrEven)
    /* dqcpn136 */ self.copynegate128("-1.000000000000000000000000000000000E-6143", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcpn137 */ self.copynegate128("-1E-6143", "1E-6143", .toNearestOrEven)
    /* dqcpn138 */ self.copynegate128("-9.999999999999999999999999999999999E+6144", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
  }

  private func copynegate128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = self.copyNegate(arg0)
    self.assertEqual(result, expected, file, line)
  }

  // MARK: - Copysign

  func test_copysign64() {
    /* ddcan280 */ self.copysign64("#77ffff3fcff3fcff", "-1", "#f7ffff3fcff3fcff", .toNearestOrEven)
    /* ddcan281 */ self.copysign64("#77fcff3fdff3fcff", "1", "#77fcff3fdff3fcff", .toNearestOrEven)
    /* ddcan282 */ self.copysign64("#7c03ff3fcff3fcff", "-1", "#fc03ff3fcff3fcff", .toNearestOrEven)
    /* ddcan283 */ self.copysign64("#7c00ff3fcff3ffff", "1", "#7c00ff3fcff3ffff", .toNearestOrEven)
    /* ddcan284 */ self.copysign64("#7d00ff3fcff3fcff", "-1", "#fd00ff3fcff3fcff", .toNearestOrEven)
    /* ddcan285 */ self.copysign64("#7c04ff3fcff3fcff", "1", "#7c04ff3fcff3fcff", .toNearestOrEven)
    /* ddcan286 */ self.copysign64("#7e00ff3fcffffcff", "-1", "#fe00ff3fcffffcff", .toNearestOrEven)
    /* ddcan287 */ self.copysign64("#7e40ff3fcff3fcff", "1", "#7e40ff3fcff3fcff", .toNearestOrEven)
    /* ddcan288 */ self.copysign64("#7a00000000000000", "-1", "#fa00000000000000", .toNearestOrEven)
    /* ddcan289 */ self.copysign64("#7800200000000000", "1", "#7800200000000000", .toNearestOrEven)
    /* ddcps001 */ self.copysign64("+7.50", "11", "7.50", .toNearestOrEven)
    /* ddcps011 */ self.copysign64("Infinity", "11", "Infinity", .toNearestOrEven)
    /* ddcps012 */ self.copysign64("-Infinity", "11", "Infinity", .toNearestOrEven)
    /* ddcps021 */ self.copysign64("NaN", "11", "NaN", .toNearestOrEven)
    /* ddcps022 */ self.copysign64("-NaN", "11", "NaN", .toNearestOrEven)
    /* ddcps023 */ self.copysign64("sNaN", "11", "sNaN", .toNearestOrEven)
    /* ddcps024 */ self.copysign64("-sNaN", "11", "sNaN", .toNearestOrEven)
    /* ddcps031 */ self.copysign64("NaN(0xa)", "11", "NaN(0xa)", .toNearestOrEven)
    /* ddcps032 */ self.copysign64("-NaN(0xa)", "11", "NaN(0xa)", .toNearestOrEven)
    /* ddcps033 */ self.copysign64("sNaN(0xa)", "11", "sNaN(0xa)", .toNearestOrEven)
    /* ddcps034 */ self.copysign64("-sNaN(0xa)", "11", "sNaN(0xa)", .toNearestOrEven)
    /* ddcps035 */ self.copysign64("NaN(0x7)", "11", "NaN(0x7)", .toNearestOrEven)
    /* ddcps036 */ self.copysign64("-NaN(0x7)", "11", "NaN(0x7)", .toNearestOrEven)
    /* ddcps037 */ self.copysign64("sNaN(0x65)", "11", "sNaN(0x65)", .toNearestOrEven)
    /* ddcps038 */ self.copysign64("-sNaN(0x65)", "11", "sNaN(0x65)", .toNearestOrEven)
    /* ddcps101 */ self.copysign64("7", "11", "7", .toNearestOrEven)
    /* ddcps102 */ self.copysign64("-7", "11", "7", .toNearestOrEven)
    /* ddcps103 */ self.copysign64("75", "11", "75", .toNearestOrEven)
    /* ddcps104 */ self.copysign64("-75", "11", "75", .toNearestOrEven)
    /* ddcps105 */ self.copysign64("7.50", "11", "7.50", .toNearestOrEven)
    /* ddcps106 */ self.copysign64("-7.50", "11", "7.50", .toNearestOrEven)
    /* ddcps107 */ self.copysign64("7.500", "11", "7.500", .toNearestOrEven)
    /* ddcps108 */ self.copysign64("-7.500", "11", "7.500", .toNearestOrEven)
    /* ddcps111 */ self.copysign64("0", "11", "0", .toNearestOrEven)
    /* ddcps112 */ self.copysign64("-0", "11", "0", .toNearestOrEven)
    /* ddcps113 */ self.copysign64("0E+4", "11", "0E+4", .toNearestOrEven)
    /* ddcps114 */ self.copysign64("-0E+4", "11", "0E+4", .toNearestOrEven)
    /* ddcps115 */ self.copysign64("0.0000", "11", "0.0000", .toNearestOrEven)
    /* ddcps116 */ self.copysign64("-0.0000", "11", "0.0000", .toNearestOrEven)
    /* ddcps117 */ self.copysign64("0E-141", "11", "0E-141", .toNearestOrEven)
    /* ddcps118 */ self.copysign64("-0E-141", "11", "0E-141", .toNearestOrEven)
    /* ddcps121 */ self.copysign64("2682682682682682", "11", "2682682682682682", .toNearestOrEven)
    /* ddcps122 */ self.copysign64("-2682682682682682", "11", "2682682682682682", .toNearestOrEven)
    /* ddcps123 */ self.copysign64("1341341341341341", "11", "1341341341341341", .toNearestOrEven)
    /* ddcps124 */ self.copysign64("-1341341341341341", "11", "1341341341341341", .toNearestOrEven)
    /* ddcps131 */ self.copysign64("9.999999999999999E+384", "11", "9.999999999999999E+384", .toNearestOrEven)
    /* ddcps132 */ self.copysign64("1E-383", "11", "1E-383", .toNearestOrEven)
    /* ddcps133 */ self.copysign64("1.000000000000000E-383", "11", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcps134 */ self.copysign64("1E-398", "11", "1E-398", .toNearestOrEven)
    /* ddcps135 */ self.copysign64("-1E-398", "11", "1E-398", .toNearestOrEven)
    /* ddcps136 */ self.copysign64("-1.000000000000000E-383", "11", "1.000000000000000E-383", .toNearestOrEven)
    /* ddcps137 */ self.copysign64("-1E-383", "11", "1E-383", .toNearestOrEven)
    /* ddcps138 */ self.copysign64("-9.999999999999999E+384", "11", "9.999999999999999E+384", .toNearestOrEven)
    /* ddcps211 */ self.copysign64("Infinity", "-34", "-Infinity", .toNearestOrEven)
    /* ddcps212 */ self.copysign64("-Infinity", "-34", "-Infinity", .toNearestOrEven)
    /* ddcps221 */ self.copysign64("NaN", "-34", "-NaN", .toNearestOrEven)
    /* ddcps222 */ self.copysign64("-NaN", "-34", "-NaN", .toNearestOrEven)
    /* ddcps223 */ self.copysign64("sNaN", "-34", "-sNaN", .toNearestOrEven)
    /* ddcps224 */ self.copysign64("-sNaN", "-34", "-sNaN", .toNearestOrEven)
    /* ddcps231 */ self.copysign64("NaN(0xa)", "-34", "-NaN(0xa)", .toNearestOrEven)
    /* ddcps232 */ self.copysign64("-NaN(0xa)", "-34", "-NaN(0xa)", .toNearestOrEven)
    /* ddcps233 */ self.copysign64("sNaN(0xa)", "-34", "-sNaN(0xa)", .toNearestOrEven)
    /* ddcps234 */ self.copysign64("-sNaN(0xa)", "-34", "-sNaN(0xa)", .toNearestOrEven)
    /* ddcps235 */ self.copysign64("NaN(0x7)", "-34", "-NaN(0x7)", .toNearestOrEven)
    /* ddcps236 */ self.copysign64("-NaN(0x7)", "-34", "-NaN(0x7)", .toNearestOrEven)
    /* ddcps237 */ self.copysign64("sNaN(0x65)", "-34", "-sNaN(0x65)", .toNearestOrEven)
    /* ddcps238 */ self.copysign64("-sNaN(0x65)", "-34", "-sNaN(0x65)", .toNearestOrEven)
    /* ddcps301 */ self.copysign64("7", "-34", "-7", .toNearestOrEven)
    /* ddcps302 */ self.copysign64("-7", "-34", "-7", .toNearestOrEven)
    /* ddcps303 */ self.copysign64("75", "-34", "-75", .toNearestOrEven)
    /* ddcps304 */ self.copysign64("-75", "-34", "-75", .toNearestOrEven)
    /* ddcps305 */ self.copysign64("7.50", "-34", "-7.50", .toNearestOrEven)
    /* ddcps306 */ self.copysign64("-7.50", "-34", "-7.50", .toNearestOrEven)
    /* ddcps307 */ self.copysign64("7.500", "-34", "-7.500", .toNearestOrEven)
    /* ddcps308 */ self.copysign64("-7.500", "-34", "-7.500", .toNearestOrEven)
    /* ddcps311 */ self.copysign64("0", "-34", "-0", .toNearestOrEven)
    /* ddcps312 */ self.copysign64("-0", "-34", "-0", .toNearestOrEven)
    /* ddcps313 */ self.copysign64("0E+4", "-34", "-0E+4", .toNearestOrEven)
    /* ddcps314 */ self.copysign64("-0E+4", "-34", "-0E+4", .toNearestOrEven)
    /* ddcps315 */ self.copysign64("0.0000", "-34", "-0.0000", .toNearestOrEven)
    /* ddcps316 */ self.copysign64("-0.0000", "-34", "-0.0000", .toNearestOrEven)
    /* ddcps317 */ self.copysign64("0E-141", "-34", "-0E-141", .toNearestOrEven)
    /* ddcps318 */ self.copysign64("-0E-141", "-34", "-0E-141", .toNearestOrEven)
    /* ddcps321 */ self.copysign64("2682682682682682", "-34", "-2682682682682682", .toNearestOrEven)
    /* ddcps322 */ self.copysign64("-2682682682682682", "-34", "-2682682682682682", .toNearestOrEven)
    /* ddcps323 */ self.copysign64("1341341341341341", "-34", "-1341341341341341", .toNearestOrEven)
    /* ddcps324 */ self.copysign64("-1341341341341341", "-34", "-1341341341341341", .toNearestOrEven)
    /* ddcps331 */ self.copysign64("9.999999999999999E+384", "-34", "-9.999999999999999E+384", .toNearestOrEven)
    /* ddcps332 */ self.copysign64("1E-383", "-34", "-1E-383", .toNearestOrEven)
    /* ddcps333 */ self.copysign64("1.000000000000000E-383", "-34", "-1.000000000000000E-383", .toNearestOrEven)
    /* ddcps334 */ self.copysign64("1E-398", "-34", "-1E-398", .toNearestOrEven)
    /* ddcps335 */ self.copysign64("-1E-398", "-34", "-1E-398", .toNearestOrEven)
    /* ddcps336 */ self.copysign64("-1.000000000000000E-383", "-34", "-1.000000000000000E-383", .toNearestOrEven)
    /* ddcps337 */ self.copysign64("-1E-383", "-34", "-1E-383", .toNearestOrEven)
    /* ddcps338 */ self.copysign64("-9.999999999999999E+384", "-34", "-9.999999999999999E+384", .toNearestOrEven)
    /* ddcps401 */ self.copysign64("701", "-34", "-701", .toNearestOrEven)
    /* ddcps402 */ self.copysign64("-720", "-34", "-720", .toNearestOrEven)
    /* ddcps403 */ self.copysign64("701", "-0", "-701", .toNearestOrEven)
    /* ddcps404 */ self.copysign64("-720", "-0", "-720", .toNearestOrEven)
    /* ddcps405 */ self.copysign64("701", "+0", "701", .toNearestOrEven)
    /* ddcps406 */ self.copysign64("-720", "+0", "720", .toNearestOrEven)
    /* ddcps407 */ self.copysign64("701", "+34", "701", .toNearestOrEven)
    /* ddcps408 */ self.copysign64("-720", "+34", "720", .toNearestOrEven)
    /* ddcps413 */ self.copysign64("701", "-Inf", "-701", .toNearestOrEven)
    /* ddcps414 */ self.copysign64("-720", "-Inf", "-720", .toNearestOrEven)
    /* ddcps415 */ self.copysign64("701", "+Inf", "701", .toNearestOrEven)
    /* ddcps416 */ self.copysign64("-720", "+Inf", "720", .toNearestOrEven)
    /* ddcps420 */ self.copysign64("701", "-NaN", "-701", .toNearestOrEven)
    /* ddcps421 */ self.copysign64("-720", "-NaN", "-720", .toNearestOrEven)
    /* ddcps422 */ self.copysign64("701", "+NaN", "701", .toNearestOrEven)
    /* ddcps423 */ self.copysign64("-720", "+NaN", "720", .toNearestOrEven)
    /* ddcps425 */ self.copysign64("-720", "+NaN(0x8)", "720", .toNearestOrEven)
    /* ddcps426 */ self.copysign64("701", "-sNaN", "-701", .toNearestOrEven)
    /* ddcps427 */ self.copysign64("-720", "-sNaN", "-720", .toNearestOrEven)
    /* ddcps428 */ self.copysign64("701", "+sNaN", "701", .toNearestOrEven)
    /* ddcps429 */ self.copysign64("-720", "+sNaN", "720", .toNearestOrEven)
    /* ddcps430 */ self.copysign64("-720", "+sNaN(0x3)", "720", .toNearestOrEven)
  }

  private func copysign64(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(signOf: arg1, magnitudeOf: arg0)
    self.assertEqual(result, expected, file, line)
  }

  func test_copysign128() {
    /* dqcan280 */ self.copysign128("#6e080ff3fcff3fcfffffff3fcfffffff", "-1", "#ee080ff3fcff3fcfffffff3fcfffffff", .toNearestOrEven)
    /* dqcan281 */ self.copysign128("#ee080ff3fcff3ffff3fcff3ffff3fcff", "1", "#6e080ff3fcff3ffff3fcff3ffff3fcff", .toNearestOrEven)
    /* dqcan282 */ self.copysign128("#7c000ff3fcffffffffffffffcff3fcff", "-1", "#fc000ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan283 */ self.copysign128("#7c080ff3fcff3fcff3fcff3fcff3fcff", "1", "#7c080ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan284 */ self.copysign128("#7e003ff3fcffffffffffffffcff3fcff", "-1", "#fe003ff3fcffffffffffffffcff3fcff", .toNearestOrEven)
    /* dqcan285 */ self.copysign128("#7e100ff3fcff3fcff3fcff3fcff3fcff", "1", "#7e100ff3fcff3fcff3fcff3fcff3fcff", .toNearestOrEven)
    /* dqcan288 */ self.copysign128("#78002000000000000000000000000000", "-1", "#f8002000000000000000000000000000", .toNearestOrEven)
    /* dqcan289 */ self.copysign128("#78000000000010000000000000100000", "1", "#78000000000010000000000000100000", .toNearestOrEven)
    /* dqcps001 */ self.copysign128("+7.50", "11", "7.50", .toNearestOrEven)
    /* dqcps011 */ self.copysign128("Infinity", "11", "Infinity", .toNearestOrEven)
    /* dqcps012 */ self.copysign128("-Infinity", "11", "Infinity", .toNearestOrEven)
    /* dqcps021 */ self.copysign128("NaN", "11", "NaN", .toNearestOrEven)
    /* dqcps022 */ self.copysign128("-NaN", "11", "NaN", .toNearestOrEven)
    /* dqcps023 */ self.copysign128("sNaN", "11", "sNaN", .toNearestOrEven)
    /* dqcps024 */ self.copysign128("-sNaN", "11", "sNaN", .toNearestOrEven)
    /* dqcps031 */ self.copysign128("NaN(0xa)", "11", "NaN(0xa)", .toNearestOrEven)
    /* dqcps032 */ self.copysign128("-NaN(0xa)", "11", "NaN(0xa)", .toNearestOrEven)
    /* dqcps033 */ self.copysign128("sNaN(0xa)", "11", "sNaN(0xa)", .toNearestOrEven)
    /* dqcps034 */ self.copysign128("-sNaN(0xa)", "11", "sNaN(0xa)", .toNearestOrEven)
    /* dqcps035 */ self.copysign128("NaN(0x7)", "11", "NaN(0x7)", .toNearestOrEven)
    /* dqcps036 */ self.copysign128("-NaN(0x7)", "11", "NaN(0x7)", .toNearestOrEven)
    /* dqcps037 */ self.copysign128("sNaN(0x65)", "11", "sNaN(0x65)", .toNearestOrEven)
    /* dqcps038 */ self.copysign128("-sNaN(0x65)", "11", "sNaN(0x65)", .toNearestOrEven)
    /* dqcps101 */ self.copysign128("7", "11", "7", .toNearestOrEven)
    /* dqcps102 */ self.copysign128("-7", "11", "7", .toNearestOrEven)
    /* dqcps103 */ self.copysign128("75", "11", "75", .toNearestOrEven)
    /* dqcps104 */ self.copysign128("-75", "11", "75", .toNearestOrEven)
    /* dqcps105 */ self.copysign128("7.50", "11", "7.50", .toNearestOrEven)
    /* dqcps106 */ self.copysign128("-7.50", "11", "7.50", .toNearestOrEven)
    /* dqcps107 */ self.copysign128("7.500", "11", "7.500", .toNearestOrEven)
    /* dqcps108 */ self.copysign128("-7.500", "11", "7.500", .toNearestOrEven)
    /* dqcps111 */ self.copysign128("0", "11", "0", .toNearestOrEven)
    /* dqcps112 */ self.copysign128("-0", "11", "0", .toNearestOrEven)
    /* dqcps113 */ self.copysign128("0E+4", "11", "0E+4", .toNearestOrEven)
    /* dqcps114 */ self.copysign128("-0E+4", "11", "0E+4", .toNearestOrEven)
    /* dqcps115 */ self.copysign128("0.0000", "11", "0.0000", .toNearestOrEven)
    /* dqcps116 */ self.copysign128("-0.0000", "11", "0.0000", .toNearestOrEven)
    /* dqcps117 */ self.copysign128("0E-141", "11", "0E-141", .toNearestOrEven)
    /* dqcps118 */ self.copysign128("-0E-141", "11", "0E-141", .toNearestOrEven)
    /* dqcps121 */ self.copysign128("2682682682682682682682682682682682", "8", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcps122 */ self.copysign128("-2682682682682682682682682682682682", "8", "2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcps123 */ self.copysign128("1341341341341341341341341341341341", "8", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcps124 */ self.copysign128("-1341341341341341341341341341341341", "8", "1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcps131 */ self.copysign128("9.999999999999999999999999999999999E+6144", "8", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcps132 */ self.copysign128("1E-6143", "8", "1E-6143", .toNearestOrEven)
    /* dqcps133 */ self.copysign128("1.000000000000000000000000000000000E-6143", "8", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcps134 */ self.copysign128("1E-6176", "8", "1E-6176", .toNearestOrEven)
    /* dqcps135 */ self.copysign128("-1E-6176", "8", "1E-6176", .toNearestOrEven)
    /* dqcps136 */ self.copysign128("-1.000000000000000000000000000000000E-6143", "8", "1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcps137 */ self.copysign128("-1E-6143", "8", "1E-6143", .toNearestOrEven)
    /* dqcps138 */ self.copysign128("-9.999999999999999999999999999999999E+6144", "8", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcps211 */ self.copysign128("Infinity", "-34", "-Infinity", .toNearestOrEven)
    /* dqcps212 */ self.copysign128("-Infinity", "-34", "-Infinity", .toNearestOrEven)
    /* dqcps221 */ self.copysign128("NaN", "-34", "-NaN", .toNearestOrEven)
    /* dqcps222 */ self.copysign128("-NaN", "-34", "-NaN", .toNearestOrEven)
    /* dqcps223 */ self.copysign128("sNaN", "-34", "-sNaN", .toNearestOrEven)
    /* dqcps224 */ self.copysign128("-sNaN", "-34", "-sNaN", .toNearestOrEven)
    /* dqcps231 */ self.copysign128("NaN(0xa)", "-34", "-NaN(0xa)", .toNearestOrEven)
    /* dqcps232 */ self.copysign128("-NaN(0xa)", "-34", "-NaN(0xa)", .toNearestOrEven)
    /* dqcps233 */ self.copysign128("sNaN(0xa)", "-34", "-sNaN(0xa)", .toNearestOrEven)
    /* dqcps234 */ self.copysign128("-sNaN(0xa)", "-34", "-sNaN(0xa)", .toNearestOrEven)
    /* dqcps235 */ self.copysign128("NaN(0x7)", "-34", "-NaN(0x7)", .toNearestOrEven)
    /* dqcps236 */ self.copysign128("-NaN(0x7)", "-34", "-NaN(0x7)", .toNearestOrEven)
    /* dqcps237 */ self.copysign128("sNaN(0x65)", "-34", "-sNaN(0x65)", .toNearestOrEven)
    /* dqcps238 */ self.copysign128("-sNaN(0x65)", "-34", "-sNaN(0x65)", .toNearestOrEven)
    /* dqcps301 */ self.copysign128("7", "-34", "-7", .toNearestOrEven)
    /* dqcps302 */ self.copysign128("-7", "-34", "-7", .toNearestOrEven)
    /* dqcps303 */ self.copysign128("75", "-34", "-75", .toNearestOrEven)
    /* dqcps304 */ self.copysign128("-75", "-34", "-75", .toNearestOrEven)
    /* dqcps305 */ self.copysign128("7.50", "-34", "-7.50", .toNearestOrEven)
    /* dqcps306 */ self.copysign128("-7.50", "-34", "-7.50", .toNearestOrEven)
    /* dqcps307 */ self.copysign128("7.500", "-34", "-7.500", .toNearestOrEven)
    /* dqcps308 */ self.copysign128("-7.500", "-34", "-7.500", .toNearestOrEven)
    /* dqcps311 */ self.copysign128("0", "-34", "-0", .toNearestOrEven)
    /* dqcps312 */ self.copysign128("-0", "-34", "-0", .toNearestOrEven)
    /* dqcps313 */ self.copysign128("0E+4", "-34", "-0E+4", .toNearestOrEven)
    /* dqcps314 */ self.copysign128("-0E+4", "-34", "-0E+4", .toNearestOrEven)
    /* dqcps315 */ self.copysign128("0.0000", "-34", "-0.0000", .toNearestOrEven)
    /* dqcps316 */ self.copysign128("-0.0000", "-34", "-0.0000", .toNearestOrEven)
    /* dqcps317 */ self.copysign128("0E-141", "-34", "-0E-141", .toNearestOrEven)
    /* dqcps318 */ self.copysign128("-0E-141", "-34", "-0E-141", .toNearestOrEven)
    /* dqcps321 */ self.copysign128("2682682682682682682682682682682682", "-9", "-2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcps322 */ self.copysign128("-2682682682682682682682682682682682", "-9", "-2682682682682682682682682682682682", .toNearestOrEven)
    /* dqcps323 */ self.copysign128("1341341341341341341341341341341341", "-9", "-1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcps324 */ self.copysign128("-1341341341341341341341341341341341", "-9", "-1341341341341341341341341341341341", .toNearestOrEven)
    /* dqcps331 */ self.copysign128("9.999999999999999999999999999999999E+6144", "-1", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcps332 */ self.copysign128("1E-6143", "-1", "-1E-6143", .toNearestOrEven)
    /* dqcps333 */ self.copysign128("1.000000000000000000000000000000000E-6143", "-1", "-1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcps334 */ self.copysign128("1E-6176", "-1", "-1E-6176", .toNearestOrEven)
    /* dqcps335 */ self.copysign128("-1E-6176", "-3", "-1E-6176", .toNearestOrEven)
    /* dqcps336 */ self.copysign128("-1.000000000000000000000000000000000E-6143", "-3", "-1.000000000000000000000000000000000E-6143", .toNearestOrEven)
    /* dqcps337 */ self.copysign128("-1E-6143", "-3", "-1E-6143", .toNearestOrEven)
    /* dqcps338 */ self.copysign128("-9.999999999999999999999999999999999E+6144", "-3", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqcps401 */ self.copysign128("701", "-34", "-701", .toNearestOrEven)
    /* dqcps402 */ self.copysign128("-720", "-34", "-720", .toNearestOrEven)
    /* dqcps403 */ self.copysign128("701", "-0", "-701", .toNearestOrEven)
    /* dqcps404 */ self.copysign128("-720", "-0", "-720", .toNearestOrEven)
    /* dqcps405 */ self.copysign128("701", "+0", "701", .toNearestOrEven)
    /* dqcps406 */ self.copysign128("-720", "+0", "720", .toNearestOrEven)
    /* dqcps407 */ self.copysign128("701", "+34", "701", .toNearestOrEven)
    /* dqcps408 */ self.copysign128("-720", "+34", "720", .toNearestOrEven)
    /* dqcps413 */ self.copysign128("701", "-Inf", "-701", .toNearestOrEven)
    /* dqcps414 */ self.copysign128("-720", "-Inf", "-720", .toNearestOrEven)
    /* dqcps415 */ self.copysign128("701", "+Inf", "701", .toNearestOrEven)
    /* dqcps416 */ self.copysign128("-720", "+Inf", "720", .toNearestOrEven)
    /* dqcps420 */ self.copysign128("701", "-NaN", "-701", .toNearestOrEven)
    /* dqcps421 */ self.copysign128("-720", "-NaN", "-720", .toNearestOrEven)
    /* dqcps422 */ self.copysign128("701", "+NaN", "701", .toNearestOrEven)
    /* dqcps423 */ self.copysign128("-720", "+NaN", "720", .toNearestOrEven)
    /* dqcps425 */ self.copysign128("-720", "+NaN(0x8)", "720", .toNearestOrEven)
    /* dqcps426 */ self.copysign128("701", "-sNaN", "-701", .toNearestOrEven)
    /* dqcps427 */ self.copysign128("-720", "-sNaN", "-720", .toNearestOrEven)
    /* dqcps428 */ self.copysign128("701", "+sNaN", "701", .toNearestOrEven)
    /* dqcps429 */ self.copysign128("-720", "+sNaN", "720", .toNearestOrEven)
    /* dqcps430 */ self.copysign128("-720", "+sNaN(0x3)", "720", .toNearestOrEven)
  }

  private func copysign128(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal128(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = Decimal128(signOf: arg1, magnitudeOf: arg0)
    self.assertEqual(result, expected, file, line)
  }

  // MARK: - Reduce

  func test_reduce64() {
    /* ddred001 */ self.reduce64("1", "1", .toNearestOrEven)
    /* ddred002 */ self.reduce64("-1", "-1", .toNearestOrEven)
    /* ddred003 */ self.reduce64("1.00", "1", .toNearestOrEven)
    /* ddred004 */ self.reduce64("-1.00", "-1", .toNearestOrEven)
    /* ddred005 */ self.reduce64("0", "0", .toNearestOrEven)
    /* ddred006 */ self.reduce64("0.00", "0", .toNearestOrEven)
    /* ddred007 */ self.reduce64("00.0", "0", .toNearestOrEven)
    /* ddred008 */ self.reduce64("00.00", "0", .toNearestOrEven)
    /* ddred009 */ self.reduce64("00", "0", .toNearestOrEven)
    /* ddred010 */ self.reduce64("0E+1", "0", .toNearestOrEven)
    /* ddred011 */ self.reduce64("0E+5", "0", .toNearestOrEven)
    /* ddred012 */ self.reduce64("-2", "-2", .toNearestOrEven)
    /* ddred013 */ self.reduce64("2", "2", .toNearestOrEven)
    /* ddred014 */ self.reduce64("-2.00", "-2", .toNearestOrEven)
    /* ddred015 */ self.reduce64("2.00", "2", .toNearestOrEven)
    /* ddred016 */ self.reduce64("-0", "-0", .toNearestOrEven)
    /* ddred017 */ self.reduce64("-0.00", "-0", .toNearestOrEven)
    /* ddred018 */ self.reduce64("-00.0", "-0", .toNearestOrEven)
    /* ddred019 */ self.reduce64("-00.00", "-0", .toNearestOrEven)
    /* ddred020 */ self.reduce64("-00", "-0", .toNearestOrEven)
    /* ddred021 */ self.reduce64("-0E+5", "-0", .toNearestOrEven)
    /* ddred022 */ self.reduce64("-0E+1", "-0", .toNearestOrEven)
    /* ddred030 */ self.reduce64("+0.1", "0.1", .toNearestOrEven)
    /* ddred031 */ self.reduce64("-0.1", "-0.1", .toNearestOrEven)
    /* ddred032 */ self.reduce64("+0.01", "0.01", .toNearestOrEven)
    /* ddred033 */ self.reduce64("-0.01", "-0.01", .toNearestOrEven)
    /* ddred034 */ self.reduce64("+0.001", "0.001", .toNearestOrEven)
    /* ddred035 */ self.reduce64("-0.001", "-0.001", .toNearestOrEven)
    /* ddred036 */ self.reduce64("+0.000001", "0.000001", .toNearestOrEven)
    /* ddred037 */ self.reduce64("-0.000001", "-0.000001", .toNearestOrEven)
    /* ddred038 */ self.reduce64("+0.000000000001", "1E-12", .toNearestOrEven)
    /* ddred039 */ self.reduce64("-0.000000000001", "-1E-12", .toNearestOrEven)
    /* ddred041 */ self.reduce64("1.1", "1.1", .toNearestOrEven)
    /* ddred042 */ self.reduce64("1.10", "1.1", .toNearestOrEven)
    /* ddred043 */ self.reduce64("1.100", "1.1", .toNearestOrEven)
    /* ddred044 */ self.reduce64("1.110", "1.11", .toNearestOrEven)
    /* ddred045 */ self.reduce64("-1.1", "-1.1", .toNearestOrEven)
    /* ddred046 */ self.reduce64("-1.10", "-1.1", .toNearestOrEven)
    /* ddred047 */ self.reduce64("-1.100", "-1.1", .toNearestOrEven)
    /* ddred048 */ self.reduce64("-1.110", "-1.11", .toNearestOrEven)
    /* ddred049 */ self.reduce64("9.9", "9.9", .toNearestOrEven)
    /* ddred050 */ self.reduce64("9.90", "9.9", .toNearestOrEven)
    /* ddred051 */ self.reduce64("9.900", "9.9", .toNearestOrEven)
    /* ddred052 */ self.reduce64("9.990", "9.99", .toNearestOrEven)
    /* ddred053 */ self.reduce64("-9.9", "-9.9", .toNearestOrEven)
    /* ddred054 */ self.reduce64("-9.90", "-9.9", .toNearestOrEven)
    /* ddred055 */ self.reduce64("-9.900", "-9.9", .toNearestOrEven)
    /* ddred056 */ self.reduce64("-9.990", "-9.99", .toNearestOrEven)
    /* ddred060 */ self.reduce64("10.0", "1E+1", .toNearestOrEven)
    /* ddred061 */ self.reduce64("10.00", "1E+1", .toNearestOrEven)
    /* ddred062 */ self.reduce64("100.0", "1E+2", .toNearestOrEven)
    /* ddred063 */ self.reduce64("100.00", "1E+2", .toNearestOrEven)
    /* ddred064 */ self.reduce64("1.1000E+3", "1.1E+3", .toNearestOrEven)
    /* ddred065 */ self.reduce64("1.10000E+3", "1.1E+3", .toNearestOrEven)
    /* ddred066 */ self.reduce64("-10.0", "-1E+1", .toNearestOrEven)
    /* ddred067 */ self.reduce64("-10.00", "-1E+1", .toNearestOrEven)
    /* ddred068 */ self.reduce64("-100.0", "-1E+2", .toNearestOrEven)
    /* ddred069 */ self.reduce64("-100.00", "-1E+2", .toNearestOrEven)
    /* ddred070 */ self.reduce64("-1.1000E+3", "-1.1E+3", .toNearestOrEven)
    /* ddred071 */ self.reduce64("-1.10000E+3", "-1.1E+3", .toNearestOrEven)
    /* ddred080 */ self.reduce64("10E+1", "1E+2", .toNearestOrEven)
    /* ddred081 */ self.reduce64("100E+1", "1E+3", .toNearestOrEven)
    /* ddred082 */ self.reduce64("1.0E+2", "1E+2", .toNearestOrEven)
    /* ddred083 */ self.reduce64("1.0E+3", "1E+3", .toNearestOrEven)
    /* ddred084 */ self.reduce64("1.1E+3", "1.1E+3", .toNearestOrEven)
    /* ddred085 */ self.reduce64("1.00E+3", "1E+3", .toNearestOrEven)
    /* ddred086 */ self.reduce64("1.10E+3", "1.1E+3", .toNearestOrEven)
    /* ddred087 */ self.reduce64("-10E+1", "-1E+2", .toNearestOrEven)
    /* ddred088 */ self.reduce64("-100E+1", "-1E+3", .toNearestOrEven)
    /* ddred089 */ self.reduce64("-1.0E+2", "-1E+2", .toNearestOrEven)
    /* ddred090 */ self.reduce64("-1.0E+3", "-1E+3", .toNearestOrEven)
    /* ddred091 */ self.reduce64("-1.1E+3", "-1.1E+3", .toNearestOrEven)
    /* ddred092 */ self.reduce64("-1.00E+3", "-1E+3", .toNearestOrEven)
    /* ddred093 */ self.reduce64("-1.10E+3", "-1.1E+3", .toNearestOrEven)
    /* ddred100 */ self.reduce64("11", "11", .toNearestOrEven)
    /* ddred101 */ self.reduce64("10", "1E+1", .toNearestOrEven)
    /* ddred102 */ self.reduce64("10.", "1E+1", .toNearestOrEven)
    /* ddred103 */ self.reduce64("1.1E+1", "11", .toNearestOrEven)
    /* ddred104 */ self.reduce64("1.0E+1", "1E+1", .toNearestOrEven)
    /* ddred105 */ self.reduce64("1.10E+2", "1.1E+2", .toNearestOrEven)
    /* ddred106 */ self.reduce64("1.00E+2", "1E+2", .toNearestOrEven)
    /* ddred107 */ self.reduce64("1.100E+3", "1.1E+3", .toNearestOrEven)
    /* ddred108 */ self.reduce64("1.000E+3", "1E+3", .toNearestOrEven)
    /* ddred109 */ self.reduce64("1.000000E+6", "1E+6", .toNearestOrEven)
    /* ddred110 */ self.reduce64("-11", "-11", .toNearestOrEven)
    /* ddred111 */ self.reduce64("-10", "-1E+1", .toNearestOrEven)
    /* ddred112 */ self.reduce64("-10.", "-1E+1", .toNearestOrEven)
    /* ddred113 */ self.reduce64("-1.1E+1", "-11", .toNearestOrEven)
    /* ddred114 */ self.reduce64("-1.0E+1", "-1E+1", .toNearestOrEven)
    /* ddred115 */ self.reduce64("-1.10E+2", "-1.1E+2", .toNearestOrEven)
    /* ddred116 */ self.reduce64("-1.00E+2", "-1E+2", .toNearestOrEven)
    /* ddred117 */ self.reduce64("-1.100E+3", "-1.1E+3", .toNearestOrEven)
    /* ddred118 */ self.reduce64("-1.000E+3", "-1E+3", .toNearestOrEven)
    /* ddred119 */ self.reduce64("-1.00000E+5", "-1E+5", .toNearestOrEven)
    /* ddred120 */ self.reduce64("-1.000000E+6", "-1E+6", .toNearestOrEven)
    /* ddred121 */ self.reduce64("-10.00000E+6", "-1E+7", .toNearestOrEven)
    /* ddred122 */ self.reduce64("-100.0000E+6", "-1E+8", .toNearestOrEven)
    /* ddred123 */ self.reduce64("-1000.000E+6", "-1E+9", .toNearestOrEven)
    /* ddred124 */ self.reduce64("-10000.00E+6", "-1E+10", .toNearestOrEven)
    /* ddred125 */ self.reduce64("-100000.0E+6", "-1E+11", .toNearestOrEven)
    /* ddred126 */ self.reduce64("-1000000.E+6", "-1E+12", .toNearestOrEven)
    /* ddred140 */ self.reduce64("2.1", "2.1", .toNearestOrEven)
    /* ddred141 */ self.reduce64("-2.0", "-2", .toNearestOrEven)
    /* ddred142 */ self.reduce64("1.200", "1.2", .toNearestOrEven)
    /* ddred143 */ self.reduce64("-120", "-1.2E+2", .toNearestOrEven)
    /* ddred144 */ self.reduce64("120.00", "1.2E+2", .toNearestOrEven)
    /* ddred145 */ self.reduce64("0.00", "0", .toNearestOrEven)
    /* ddred151 */ self.reduce64("9.999999999999999E+384", "9.999999999999999E+384", .toNearestOrEven)
    /* ddred152 */ self.reduce64("9.999999000000000E+380", "9.99999900000E+380", .toNearestOrEven)
    /* ddred153 */ self.reduce64("9.999999999990000E+384", "9.999999999990000E+384", .toNearestOrEven)
    /* ddred154 */ self.reduce64("1E-383", "1E-383", .toNearestOrEven)
    /* ddred155 */ self.reduce64("1.000000000000000E-383", "1E-383", .toNearestOrEven)
    /* ddred156 */ self.reduce64("2.000E-395", "2E-395", .toNearestOrEven)
    /* ddred157 */ self.reduce64("1E-398", "1E-398", .toNearestOrEven)
    /* ddred161 */ self.reduce64("-1E-398", "-1E-398", .toNearestOrEven)
    /* ddred162 */ self.reduce64("-2.000E-395", "-2E-395", .toNearestOrEven)
    /* ddred163 */ self.reduce64("-1.000000000000000E-383", "-1E-383", .toNearestOrEven)
    /* ddred164 */ self.reduce64("-1E-383", "-1E-383", .toNearestOrEven)
    /* ddred165 */ self.reduce64("-9.999999000000000E+380", "-9.99999900000E+380", .toNearestOrEven)
    /* ddred166 */ self.reduce64("-9.999999999990000E+384", "-9.999999999990000E+384", .toNearestOrEven)
    /* ddred167 */ self.reduce64("-9.999999999999990E+384", "-9.999999999999990E+384", .toNearestOrEven)
    /* ddred168 */ self.reduce64("-9.999999999999999E+384", "-9.999999999999999E+384", .toNearestOrEven)
    /* ddred169 */ self.reduce64("-9.999999999999990E+384", "-9.999999999999990E+384", .toNearestOrEven)
    /* ddred820 */ self.reduce64("Inf", "Infinity", .toNearestOrEven)
    /* ddred821 */ self.reduce64("-Inf", "-Infinity", .toNearestOrEven)
    /* ddred822 */ self.reduce64("NaN", "NaN", .toNearestOrEven)
    /* ddred823 */ self.reduce64("sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddred824 */ self.reduce64("NaN(0x65)", "NaN(0x65)", .toNearestOrEven)
    /* ddred825 */ self.reduce64("sNaN(0xa)", "NaN(0xa)", .toNearestOrEven, .isInvalidOperation)
    /* ddred827 */ self.reduce64("-NaN", "-NaN", .toNearestOrEven)
    /* ddred828 */ self.reduce64("-sNaN", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* ddred829 */ self.reduce64("-NaN(0x65)", "-NaN(0x65)", .toNearestOrEven)
    /* ddred830 */ self.reduce64("-sNaN(0xa)", "-NaN(0xa)", .toNearestOrEven, .isInvalidOperation)
  }

  private func reduce64(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = self.reduce(arg0, expected: expected)
    self.assertEqual(result, expected, file, line)
  }

  func test_reduce128() {
    /* dqred001 */ self.reduce128("1", "1", .toNearestOrEven)
    /* dqred002 */ self.reduce128("-1", "-1", .toNearestOrEven)
    /* dqred003 */ self.reduce128("1.00", "1", .toNearestOrEven)
    /* dqred004 */ self.reduce128("-1.00", "-1", .toNearestOrEven)
    /* dqred005 */ self.reduce128("0", "0", .toNearestOrEven)
    /* dqred006 */ self.reduce128("0.00", "0", .toNearestOrEven)
    /* dqred007 */ self.reduce128("00.0", "0", .toNearestOrEven)
    /* dqred008 */ self.reduce128("00.00", "0", .toNearestOrEven)
    /* dqred009 */ self.reduce128("00", "0", .toNearestOrEven)
    /* dqred010 */ self.reduce128("0E+1", "0", .toNearestOrEven)
    /* dqred011 */ self.reduce128("0E+5", "0", .toNearestOrEven)
    /* dqred012 */ self.reduce128("-2", "-2", .toNearestOrEven)
    /* dqred013 */ self.reduce128("2", "2", .toNearestOrEven)
    /* dqred014 */ self.reduce128("-2.00", "-2", .toNearestOrEven)
    /* dqred015 */ self.reduce128("2.00", "2", .toNearestOrEven)
    /* dqred016 */ self.reduce128("-0", "-0", .toNearestOrEven)
    /* dqred017 */ self.reduce128("-0.00", "-0", .toNearestOrEven)
    /* dqred018 */ self.reduce128("-00.0", "-0", .toNearestOrEven)
    /* dqred019 */ self.reduce128("-00.00", "-0", .toNearestOrEven)
    /* dqred020 */ self.reduce128("-00", "-0", .toNearestOrEven)
    /* dqred021 */ self.reduce128("-0E+5", "-0", .toNearestOrEven)
    /* dqred022 */ self.reduce128("-0E+1", "-0", .toNearestOrEven)
    /* dqred030 */ self.reduce128("+0.1", "0.1", .toNearestOrEven)
    /* dqred031 */ self.reduce128("-0.1", "-0.1", .toNearestOrEven)
    /* dqred032 */ self.reduce128("+0.01", "0.01", .toNearestOrEven)
    /* dqred033 */ self.reduce128("-0.01", "-0.01", .toNearestOrEven)
    /* dqred034 */ self.reduce128("+0.001", "0.001", .toNearestOrEven)
    /* dqred035 */ self.reduce128("-0.001", "-0.001", .toNearestOrEven)
    /* dqred036 */ self.reduce128("+0.000001", "0.000001", .toNearestOrEven)
    /* dqred037 */ self.reduce128("-0.000001", "-0.000001", .toNearestOrEven)
    /* dqred038 */ self.reduce128("+0.000000000001", "1E-12", .toNearestOrEven)
    /* dqred039 */ self.reduce128("-0.000000000001", "-1E-12", .toNearestOrEven)
    /* dqred041 */ self.reduce128("1.1", "1.1", .toNearestOrEven)
    /* dqred042 */ self.reduce128("1.10", "1.1", .toNearestOrEven)
    /* dqred043 */ self.reduce128("1.100", "1.1", .toNearestOrEven)
    /* dqred044 */ self.reduce128("1.110", "1.11", .toNearestOrEven)
    /* dqred045 */ self.reduce128("-1.1", "-1.1", .toNearestOrEven)
    /* dqred046 */ self.reduce128("-1.10", "-1.1", .toNearestOrEven)
    /* dqred047 */ self.reduce128("-1.100", "-1.1", .toNearestOrEven)
    /* dqred048 */ self.reduce128("-1.110", "-1.11", .toNearestOrEven)
    /* dqred049 */ self.reduce128("9.9", "9.9", .toNearestOrEven)
    /* dqred050 */ self.reduce128("9.90", "9.9", .toNearestOrEven)
    /* dqred051 */ self.reduce128("9.900", "9.9", .toNearestOrEven)
    /* dqred052 */ self.reduce128("9.990", "9.99", .toNearestOrEven)
    /* dqred053 */ self.reduce128("-9.9", "-9.9", .toNearestOrEven)
    /* dqred054 */ self.reduce128("-9.90", "-9.9", .toNearestOrEven)
    /* dqred055 */ self.reduce128("-9.900", "-9.9", .toNearestOrEven)
    /* dqred056 */ self.reduce128("-9.990", "-9.99", .toNearestOrEven)
    /* dqred060 */ self.reduce128("10.0", "1E+1", .toNearestOrEven)
    /* dqred061 */ self.reduce128("10.00", "1E+1", .toNearestOrEven)
    /* dqred062 */ self.reduce128("100.0", "1E+2", .toNearestOrEven)
    /* dqred063 */ self.reduce128("100.00", "1E+2", .toNearestOrEven)
    /* dqred064 */ self.reduce128("1.1000E+3", "1.1E+3", .toNearestOrEven)
    /* dqred065 */ self.reduce128("1.10000E+3", "1.1E+3", .toNearestOrEven)
    /* dqred066 */ self.reduce128("-10.0", "-1E+1", .toNearestOrEven)
    /* dqred067 */ self.reduce128("-10.00", "-1E+1", .toNearestOrEven)
    /* dqred068 */ self.reduce128("-100.0", "-1E+2", .toNearestOrEven)
    /* dqred069 */ self.reduce128("-100.00", "-1E+2", .toNearestOrEven)
    /* dqred070 */ self.reduce128("-1.1000E+3", "-1.1E+3", .toNearestOrEven)
    /* dqred071 */ self.reduce128("-1.10000E+3", "-1.1E+3", .toNearestOrEven)
    /* dqred080 */ self.reduce128("10E+1", "1E+2", .toNearestOrEven)
    /* dqred081 */ self.reduce128("100E+1", "1E+3", .toNearestOrEven)
    /* dqred082 */ self.reduce128("1.0E+2", "1E+2", .toNearestOrEven)
    /* dqred083 */ self.reduce128("1.0E+3", "1E+3", .toNearestOrEven)
    /* dqred084 */ self.reduce128("1.1E+3", "1.1E+3", .toNearestOrEven)
    /* dqred085 */ self.reduce128("1.00E+3", "1E+3", .toNearestOrEven)
    /* dqred086 */ self.reduce128("1.10E+3", "1.1E+3", .toNearestOrEven)
    /* dqred087 */ self.reduce128("-10E+1", "-1E+2", .toNearestOrEven)
    /* dqred088 */ self.reduce128("-100E+1", "-1E+3", .toNearestOrEven)
    /* dqred089 */ self.reduce128("-1.0E+2", "-1E+2", .toNearestOrEven)
    /* dqred090 */ self.reduce128("-1.0E+3", "-1E+3", .toNearestOrEven)
    /* dqred091 */ self.reduce128("-1.1E+3", "-1.1E+3", .toNearestOrEven)
    /* dqred092 */ self.reduce128("-1.00E+3", "-1E+3", .toNearestOrEven)
    /* dqred093 */ self.reduce128("-1.10E+3", "-1.1E+3", .toNearestOrEven)
    /* dqred100 */ self.reduce128("11", "11", .toNearestOrEven)
    /* dqred101 */ self.reduce128("10", "1E+1", .toNearestOrEven)
    /* dqred102 */ self.reduce128("10.", "1E+1", .toNearestOrEven)
    /* dqred103 */ self.reduce128("1.1E+1", "11", .toNearestOrEven)
    /* dqred104 */ self.reduce128("1.0E+1", "1E+1", .toNearestOrEven)
    /* dqred105 */ self.reduce128("1.10E+2", "1.1E+2", .toNearestOrEven)
    /* dqred106 */ self.reduce128("1.00E+2", "1E+2", .toNearestOrEven)
    /* dqred107 */ self.reduce128("1.100E+3", "1.1E+3", .toNearestOrEven)
    /* dqred108 */ self.reduce128("1.000E+3", "1E+3", .toNearestOrEven)
    /* dqred109 */ self.reduce128("1.000000E+6", "1E+6", .toNearestOrEven)
    /* dqred110 */ self.reduce128("-11", "-11", .toNearestOrEven)
    /* dqred111 */ self.reduce128("-10", "-1E+1", .toNearestOrEven)
    /* dqred112 */ self.reduce128("-10.", "-1E+1", .toNearestOrEven)
    /* dqred113 */ self.reduce128("-1.1E+1", "-11", .toNearestOrEven)
    /* dqred114 */ self.reduce128("-1.0E+1", "-1E+1", .toNearestOrEven)
    /* dqred115 */ self.reduce128("-1.10E+2", "-1.1E+2", .toNearestOrEven)
    /* dqred116 */ self.reduce128("-1.00E+2", "-1E+2", .toNearestOrEven)
    /* dqred117 */ self.reduce128("-1.100E+3", "-1.1E+3", .toNearestOrEven)
    /* dqred118 */ self.reduce128("-1.000E+3", "-1E+3", .toNearestOrEven)
    /* dqred119 */ self.reduce128("-1.00000E+5", "-1E+5", .toNearestOrEven)
    /* dqred120 */ self.reduce128("-1.000000E+6", "-1E+6", .toNearestOrEven)
    /* dqred121 */ self.reduce128("-10.00000E+6", "-1E+7", .toNearestOrEven)
    /* dqred122 */ self.reduce128("-100.0000E+6", "-1E+8", .toNearestOrEven)
    /* dqred123 */ self.reduce128("-1000.000E+6", "-1E+9", .toNearestOrEven)
    /* dqred124 */ self.reduce128("-10000.00E+6", "-1E+10", .toNearestOrEven)
    /* dqred125 */ self.reduce128("-100000.0E+6", "-1E+11", .toNearestOrEven)
    /* dqred126 */ self.reduce128("-1000000.E+6", "-1E+12", .toNearestOrEven)
    /* dqred140 */ self.reduce128("2.1", "2.1", .toNearestOrEven)
    /* dqred141 */ self.reduce128("-2.0", "-2", .toNearestOrEven)
    /* dqred142 */ self.reduce128("1.200", "1.2", .toNearestOrEven)
    /* dqred143 */ self.reduce128("-120", "-1.2E+2", .toNearestOrEven)
    /* dqred144 */ self.reduce128("120.00", "1.2E+2", .toNearestOrEven)
    /* dqred145 */ self.reduce128("0.00", "0", .toNearestOrEven)
    /* dqred151 */ self.reduce128("9.999999999999999999999999999999999E+6144", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqred152 */ self.reduce128("9.999999999999999999999999000000000E+6140", "9.99999999999999999999999900000E+6140", .toNearestOrEven)
    /* dqred153 */ self.reduce128("9.999999999999999999999999999990000E+6144", "9.999999999999999999999999999990000E+6144", .toNearestOrEven)
    /* dqred154 */ self.reduce128("1E-6143", "1E-6143", .toNearestOrEven)
    /* dqred155 */ self.reduce128("1.000000000000000000000000000000000E-6143", "1E-6143", .toNearestOrEven)
    /* dqred156 */ self.reduce128("2.000E-6173", "2E-6173", .toNearestOrEven)
    /* dqred157 */ self.reduce128("1E-6176", "1E-6176", .toNearestOrEven)
    /* dqred161 */ self.reduce128("-1E-6176", "-1E-6176", .toNearestOrEven)
    /* dqred162 */ self.reduce128("-2.000E-6173", "-2E-6173", .toNearestOrEven)
    /* dqred163 */ self.reduce128("-1.000000000000000000000000000000000E-6143", "-1E-6143", .toNearestOrEven)
    /* dqred164 */ self.reduce128("-1E-6143", "-1E-6143", .toNearestOrEven)
    /* dqred165 */ self.reduce128("-9.999999999999999999999999000000000E+6140", "-9.99999999999999999999999900000E+6140", .toNearestOrEven)
    /* dqred166 */ self.reduce128("-9.999999999999999999999999999990000E+6144", "-9.999999999999999999999999999990000E+6144", .toNearestOrEven)
    /* dqred167 */ self.reduce128("-9.999999999999999999999999999999990E+6144", "-9.999999999999999999999999999999990E+6144", .toNearestOrEven)
    /* dqred168 */ self.reduce128("-9.999999999999999999999999999999999E+6144", "-9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqred169 */ self.reduce128("-9.999999999999999999999999999999990E+6144", "-9.999999999999999999999999999999990E+6144", .toNearestOrEven)
    /* dqred820 */ self.reduce128("Inf", "Infinity", .toNearestOrEven)
    /* dqred821 */ self.reduce128("-Inf", "-Infinity", .toNearestOrEven)
    /* dqred822 */ self.reduce128("NaN", "NaN", .toNearestOrEven)
    /* dqred823 */ self.reduce128("sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqred824 */ self.reduce128("NaN(0x65)", "NaN(0x65)", .toNearestOrEven)
    /* dqred825 */ self.reduce128("sNaN(0xa)", "NaN(0xa)", .toNearestOrEven, .isInvalidOperation)
    /* dqred827 */ self.reduce128("-NaN", "-NaN", .toNearestOrEven)
    /* dqred828 */ self.reduce128("-sNaN", "-NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqred829 */ self.reduce128("-NaN(0x65)", "-NaN(0x65)", .toNearestOrEven)
    /* dqred830 */ self.reduce128("-sNaN(0xa)", "-NaN(0xa)", .toNearestOrEven, .isInvalidOperation)
  }

  private func reduce128(
    _ _arg0: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = self.reduce(arg0, expected: expected)
    self.assertEqual(result, expected, file, line)
  }
}
