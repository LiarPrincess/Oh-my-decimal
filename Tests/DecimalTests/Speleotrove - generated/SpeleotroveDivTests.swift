// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class SpeleotroveDivTests: XCTestCase, SpeleotroveMixin {

  // MARK: - Divide

  func test_divide64() {
    /* dddiv001 */ self.divide64("1", "1", "1", .toNearestOrEven)
    /* dddiv002 */ self.divide64("2", "1", "2", .toNearestOrEven)
    /* dddiv003 */ self.divide64("1", "2", "0.5", .toNearestOrEven)
    /* dddiv004 */ self.divide64("2", "2", "1", .toNearestOrEven)
    /* dddiv005 */ self.divide64("0", "1", "0", .toNearestOrEven)
    /* dddiv006 */ self.divide64("0", "2", "0", .toNearestOrEven)
    /* dddiv007 */ self.divide64("1", "3", "0.3333333333333333", .toNearestOrEven, .isInexact)
    /* dddiv008 */ self.divide64("2", "3", "0.6666666666666667", .toNearestOrEven, .isInexact)
    /* dddiv009 */ self.divide64("3", "3", "1", .toNearestOrEven)
    /* dddiv010 */ self.divide64("2.4", "1", "2.4", .toNearestOrEven)
    /* dddiv011 */ self.divide64("2.4", "-1", "-2.4", .toNearestOrEven)
    /* dddiv012 */ self.divide64("-2.4", "1", "-2.4", .toNearestOrEven)
    /* dddiv013 */ self.divide64("-2.4", "-1", "2.4", .toNearestOrEven)
    /* dddiv014 */ self.divide64("2.40", "1", "2.40", .toNearestOrEven)
    /* dddiv015 */ self.divide64("2.400", "1", "2.400", .toNearestOrEven)
    /* dddiv016 */ self.divide64("2.4", "2", "1.2", .toNearestOrEven)
    /* dddiv017 */ self.divide64("2.400", "2", "1.200", .toNearestOrEven)
    /* dddiv018 */ self.divide64("2.", "2", "1", .toNearestOrEven)
    /* dddiv019 */ self.divide64("20", "20", "1", .toNearestOrEven)
    /* dddiv020 */ self.divide64("187", "187", "1", .toNearestOrEven)
    /* dddiv021 */ self.divide64("5", "2", "2.5", .toNearestOrEven)
    /* dddiv022 */ self.divide64("50", "20", "2.5", .toNearestOrEven)
    /* dddiv023 */ self.divide64("500", "200", "2.5", .toNearestOrEven)
    /* dddiv024 */ self.divide64("50.0", "20.0", "2.5", .toNearestOrEven)
    /* dddiv025 */ self.divide64("5.00", "2.00", "2.5", .toNearestOrEven)
    /* dddiv026 */ self.divide64("5", "2.0", "2.5", .toNearestOrEven)
    /* dddiv027 */ self.divide64("5", "2.000", "2.5", .toNearestOrEven)
    /* dddiv028 */ self.divide64("5", "0.20", "25", .toNearestOrEven)
    /* dddiv029 */ self.divide64("5", "0.200", "25", .toNearestOrEven)
    /* dddiv030 */ self.divide64("10", "1", "10", .toNearestOrEven)
    /* dddiv031 */ self.divide64("100", "1", "100", .toNearestOrEven)
    /* dddiv032 */ self.divide64("1000", "1", "1000", .toNearestOrEven)
    /* dddiv033 */ self.divide64("1000", "100", "10", .toNearestOrEven)
    /* dddiv035 */ self.divide64("1", "2", "0.5", .toNearestOrEven)
    /* dddiv036 */ self.divide64("1", "4", "0.25", .toNearestOrEven)
    /* dddiv037 */ self.divide64("1", "8", "0.125", .toNearestOrEven)
    /* dddiv038 */ self.divide64("1", "16", "0.0625", .toNearestOrEven)
    /* dddiv039 */ self.divide64("1", "32", "0.03125", .toNearestOrEven)
    /* dddiv040 */ self.divide64("1", "64", "0.015625", .toNearestOrEven)
    /* dddiv041 */ self.divide64("1", "-2", "-0.5", .toNearestOrEven)
    /* dddiv042 */ self.divide64("1", "-4", "-0.25", .toNearestOrEven)
    /* dddiv043 */ self.divide64("1", "-8", "-0.125", .toNearestOrEven)
    /* dddiv044 */ self.divide64("1", "-16", "-0.0625", .toNearestOrEven)
    /* dddiv045 */ self.divide64("1", "-32", "-0.03125", .toNearestOrEven)
    /* dddiv046 */ self.divide64("1", "-64", "-0.015625", .toNearestOrEven)
    /* dddiv047 */ self.divide64("-1", "2", "-0.5", .toNearestOrEven)
    /* dddiv048 */ self.divide64("-1", "4", "-0.25", .toNearestOrEven)
    /* dddiv049 */ self.divide64("-1", "8", "-0.125", .toNearestOrEven)
    /* dddiv050 */ self.divide64("-1", "16", "-0.0625", .toNearestOrEven)
    /* dddiv051 */ self.divide64("-1", "32", "-0.03125", .toNearestOrEven)
    /* dddiv052 */ self.divide64("-1", "64", "-0.015625", .toNearestOrEven)
    /* dddiv053 */ self.divide64("-1", "-2", "0.5", .toNearestOrEven)
    /* dddiv054 */ self.divide64("-1", "-4", "0.25", .toNearestOrEven)
    /* dddiv055 */ self.divide64("-1", "-8", "0.125", .toNearestOrEven)
    /* dddiv056 */ self.divide64("-1", "-16", "0.0625", .toNearestOrEven)
    /* dddiv057 */ self.divide64("-1", "-32", "0.03125", .toNearestOrEven)
    /* dddiv058 */ self.divide64("-1", "-64", "0.015625", .toNearestOrEven)
    /* dddiv060 */ self.divide64("1", "7", "0.1428571428571429", .toNearestOrEven, .isInexact)
    /* dddiv061 */ self.divide64("1.2345678", "1.9876543", "0.6211179680490717", .toNearestOrEven, .isInexact)
    /* dddiv071 */ self.divide64("9999999999999999", "1", "9999999999999999", .toNearestOrEven)
    /* dddiv072 */ self.divide64("999999999999999", "1", "999999999999999", .toNearestOrEven)
    /* dddiv073 */ self.divide64("99999999999999", "1", "99999999999999", .toNearestOrEven)
    /* dddiv074 */ self.divide64("9999999999999", "1", "9999999999999", .toNearestOrEven)
    /* dddiv075 */ self.divide64("999999999999", "1", "999999999999", .toNearestOrEven)
    /* dddiv076 */ self.divide64("99999999999", "1", "99999999999", .toNearestOrEven)
    /* dddiv077 */ self.divide64("9999999999", "1", "9999999999", .toNearestOrEven)
    /* dddiv078 */ self.divide64("999999999", "1", "999999999", .toNearestOrEven)
    /* dddiv079 */ self.divide64("99999999", "1", "99999999", .toNearestOrEven)
    /* dddiv080 */ self.divide64("9999999", "1", "9999999", .toNearestOrEven)
    /* dddiv081 */ self.divide64("999999", "1", "999999", .toNearestOrEven)
    /* dddiv082 */ self.divide64("99999", "1", "99999", .toNearestOrEven)
    /* dddiv083 */ self.divide64("9999", "1", "9999", .toNearestOrEven)
    /* dddiv084 */ self.divide64("999", "1", "999", .toNearestOrEven)
    /* dddiv085 */ self.divide64("99", "1", "99", .toNearestOrEven)
    /* dddiv086 */ self.divide64("9", "1", "9", .toNearestOrEven)
    /* dddiv090 */ self.divide64("0.", "1", "0", .toNearestOrEven)
    /* dddiv091 */ self.divide64(".0", "1", "0.0", .toNearestOrEven)
    /* dddiv092 */ self.divide64("0.00", "1", "0.00", .toNearestOrEven)
    /* dddiv093 */ self.divide64("0.00E+9", "1", "0E+7", .toNearestOrEven)
    /* dddiv094 */ self.divide64("0.0000E-50", "1", "0E-54", .toNearestOrEven)
    /* dddiv095 */ self.divide64("1", "1E-8", "1E+8", .toNearestOrEven)
    /* dddiv096 */ self.divide64("1", "1E-9", "1E+9", .toNearestOrEven)
    /* dddiv097 */ self.divide64("1", "1E-10", "1E+10", .toNearestOrEven)
    /* dddiv098 */ self.divide64("1", "1E-11", "1E+11", .toNearestOrEven)
    /* dddiv099 */ self.divide64("1", "1E-12", "1E+12", .toNearestOrEven)
    /* dddiv100 */ self.divide64("1", "1", "1", .toNearestOrEven)
    /* dddiv101 */ self.divide64("1", "2", "0.5", .toNearestOrEven)
    /* dddiv102 */ self.divide64("1", "3", "0.3333333333333333", .toNearestOrEven, .isInexact)
    /* dddiv1021 */ self.divide64("1E0", "1E0", "1", .toNearestOrAwayFromZero)
    /* dddiv1022 */ self.divide64("1E0", "2E0", "0.5", .toNearestOrAwayFromZero)
    /* dddiv1023 */ self.divide64("1E0", "3E0", "0.3333333333333333", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv1024 */ self.divide64("100E-2", "1000E-3", "1", .toNearestOrAwayFromZero)
    /* dddiv1025 */ self.divide64("24E-1", "2E0", "1.2", .toNearestOrAwayFromZero)
    /* dddiv1026 */ self.divide64("2400E-3", "2E0", "1.200", .toNearestOrAwayFromZero)
    /* dddiv1027 */ self.divide64("5E0", "2E0", "2.5", .toNearestOrAwayFromZero)
    /* dddiv1028 */ self.divide64("5E0", "20E-1", "2.5", .toNearestOrAwayFromZero)
    /* dddiv1029 */ self.divide64("5E0", "2000E-3", "2.5", .toNearestOrAwayFromZero)
    /* dddiv103 */ self.divide64("1", "4", "0.25", .toNearestOrEven)
    /* dddiv1030 */ self.divide64("5E0", "2E-1", "25", .toNearestOrAwayFromZero)
    /* dddiv1031 */ self.divide64("5E0", "20E-2", "25", .toNearestOrAwayFromZero)
    /* dddiv1032 */ self.divide64("480E-2", "3E0", "1.60", .toNearestOrAwayFromZero)
    /* dddiv1033 */ self.divide64("47E-1", "2E0", "2.35", .toNearestOrAwayFromZero)
    /* dddiv104 */ self.divide64("1", "5", "0.2", .toNearestOrEven)
    /* dddiv1041 */ self.divide64("6", "11", "0.5454545454545455", .toNearestOrEven, .isInexact)
    /* dddiv105 */ self.divide64("1", "6", "0.1666666666666667", .toNearestOrEven, .isInexact)
    /* dddiv1051 */ self.divide64("1e+277", "1e-311", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1052 */ self.divide64("1e+277", "-1e-311", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1053 */ self.divide64("-1e+277", "1e-311", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1054 */ self.divide64("-1e+277", "-1e-311", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1055 */ self.divide64("1e-277", "1e+311", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1056 */ self.divide64("1e-277", "-1e+311", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1057 */ self.divide64("-1e-277", "1e+311", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1058 */ self.divide64("-1e-277", "-1e+311", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv106 */ self.divide64("1", "7", "0.1428571428571429", .toNearestOrEven, .isInexact)
    /* dddiv1060 */ self.divide64("1e-291", "1e+101", "1E-392", .toNearestOrEven)
    /* dddiv1061 */ self.divide64("1e-291", "1e+102", "1E-393", .toNearestOrEven)
    /* dddiv1062 */ self.divide64("1e-291", "1e+103", "1E-394", .toNearestOrEven)
    /* dddiv1063 */ self.divide64("1e-291", "1e+104", "1E-395", .toNearestOrEven)
    /* dddiv1064 */ self.divide64("1e-291", "1e+105", "1E-396", .toNearestOrEven)
    /* dddiv1065 */ self.divide64("1e-291", "1e+106", "1E-397", .toNearestOrEven)
    /* dddiv1066 */ self.divide64("1e-291", "1e+107", "1E-398", .toNearestOrEven)
    /* dddiv1067 */ self.divide64("1e-291", "1e+108", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1068 */ self.divide64("1e-291", "1e+109", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1069 */ self.divide64("1e-291", "1e+110", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv107 */ self.divide64("1", "8", "0.125", .toNearestOrEven)
    /* dddiv1070 */ self.divide64("1e+60", "1e-321", "1.000000000000E+381", .toNearestOrEven)
    /* dddiv1071 */ self.divide64("1e+60", "1e-322", "1.0000000000000E+382", .toNearestOrEven)
    /* dddiv1072 */ self.divide64("1e+60", "1e-323", "1.00000000000000E+383", .toNearestOrEven)
    /* dddiv1073 */ self.divide64("1e+60", "1e-324", "1.000000000000000E+384", .toNearestOrEven)
    /* dddiv1074 */ self.divide64("1e+60", "1e-325", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1075 */ self.divide64("1e+60", "1e-326", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1076 */ self.divide64("1e+60", "1e-327", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1077 */ self.divide64("1e+60", "1e-328", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1078 */ self.divide64("1e+60", "1e-329", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv1079 */ self.divide64("1e+60", "1e-330", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dddiv108 */ self.divide64("1", "9", "0.1111111111111111", .toNearestOrEven, .isInexact)
    /* dddiv109 */ self.divide64("1", "10", "0.1", .toNearestOrEven)
    /* dddiv110 */ self.divide64("1", "1", "1", .toNearestOrEven)
    /* dddiv1101 */ self.divide64("1.0000E-394", "1", "1.0000E-394", .toNearestOrEven)
    /* dddiv1102 */ self.divide64("1.000E-394", "1e+1", "1.000E-395", .toNearestOrEven)
    /* dddiv1103 */ self.divide64("1.00E-394", "1e+2", "1.00E-396", .toNearestOrEven)
    /* dddiv1104 */ self.divide64("1.0E-394", "1e+3", "1.0E-397", .toNearestOrEven)
    /* dddiv1105 */ self.divide64("1.0E-394", "1e+4", "1E-398", .toNearestOrEven)
    /* dddiv1106 */ self.divide64("1.3E-394", "1e+4", "1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1107 */ self.divide64("1.5E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1108 */ self.divide64("1.7E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1109 */ self.divide64("2.3E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv111 */ self.divide64("2", "1", "2", .toNearestOrEven)
    /* dddiv1110 */ self.divide64("2.5E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1111 */ self.divide64("2.7E-394", "1e+4", "3E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1112 */ self.divide64("1.49E-394", "1e+4", "1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1113 */ self.divide64("1.50E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1114 */ self.divide64("1.51E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1115 */ self.divide64("2.49E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1116 */ self.divide64("2.50E-394", "1e+4", "2E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1117 */ self.divide64("2.51E-394", "1e+4", "3E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1118 */ self.divide64("1E-394", "1e+4", "1E-398", .toNearestOrEven)
    /* dddiv1119 */ self.divide64("3E-394", "1e+5", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv112 */ self.divide64("3", "1", "3", .toNearestOrEven)
    /* dddiv1120 */ self.divide64("5E-394", "1e+5", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1121 */ self.divide64("7E-394", "1e+5", "1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1122 */ self.divide64("9E-394", "1e+5", "1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1123 */ self.divide64("9.9E-394", "1e+5", "1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1124 */ self.divide64("1E-394", "-1e+4", "-1E-398", .toNearestOrEven)
    /* dddiv1125 */ self.divide64("3E-394", "-1e+5", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1126 */ self.divide64("-5E-394", "1e+5", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1127 */ self.divide64("7E-394", "-1e+5", "-1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1128 */ self.divide64("-9E-394", "1e+5", "-1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1129 */ self.divide64("9.9E-394", "-1e+5", "-1E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv113 */ self.divide64("4", "1", "4", .toNearestOrEven)
    /* dddiv1130 */ self.divide64("3.0E-394", "-1e+5", "-0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1131 */ self.divide64("1.0E-199", "1e+200", "0E-398", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv1132 */ self.divide64("1.0E-199", "1e+199", "1E-398", .toNearestOrEven)
    /* dddiv1133 */ self.divide64("1.0E-199", "1e+198", "1.0E-397", .toNearestOrEven)
    /* dddiv1134 */ self.divide64("2.0E-199", "2e+198", "1.0E-397", .toNearestOrEven)
    /* dddiv1135 */ self.divide64("4.0E-199", "4e+198", "1.0E-397", .toNearestOrEven)
    /* dddiv1136 */ self.divide64("10.0E-199", "10e+198", "1.0E-397", .toNearestOrEven)
    /* dddiv1137 */ self.divide64("30.0E-199", "30e+198", "1.0E-397", .toNearestOrEven)
    /* dddiv114 */ self.divide64("5", "1", "5", .toNearestOrEven)
    /* dddiv115 */ self.divide64("6", "1", "6", .toNearestOrEven)
    /* dddiv116 */ self.divide64("7", "1", "7", .toNearestOrEven)
    /* dddiv117 */ self.divide64("8", "1", "8", .toNearestOrEven)
    /* dddiv118 */ self.divide64("9", "1", "9", .toNearestOrEven)
    /* dddiv119 */ self.divide64("10", "1", "10", .toNearestOrEven)
    /* dddiv120 */ self.divide64("3E+1", "0.001", "3E+4", .toNearestOrEven)
    /* dddiv121 */ self.divide64("2.200", "2", "1.100", .toNearestOrEven)
    /* dddiv130 */ self.divide64("12345", "4.999", "2469.493898779756", .toNearestOrEven, .isInexact)
    /* dddiv131 */ self.divide64("12345", "4.99", "2473.947895791583", .toNearestOrEven, .isInexact)
    /* dddiv132 */ self.divide64("12345", "4.9", "2519.387755102041", .toNearestOrEven, .isInexact)
    /* dddiv133 */ self.divide64("12345", "5", "2469", .toNearestOrEven)
    /* dddiv134 */ self.divide64("12345", "5.1", "2420.588235294118", .toNearestOrEven, .isInexact)
    /* dddiv135 */ self.divide64("12345", "5.01", "2464.071856287425", .toNearestOrEven, .isInexact)
    /* dddiv136 */ self.divide64("12345", "5.001", "2468.506298740252", .toNearestOrEven, .isInexact)
    /* dddiv2010 */ self.divide64("-3.303226714900711E-35", "8.796578842713183E+73", "-3.755126594058783E-109", .toNearestOrEven, .isInexact)
    /* dddiv2011 */ self.divide64("933153327821073.6", "68782181090246.25", "13.56678885475763", .toNearestOrEven, .isInexact)
    /* dddiv2012 */ self.divide64("5.04752436057906E-72", "-8.179481771238642E+64", "-6.170958627632835E-137", .toNearestOrEven, .isInexact)
    /* dddiv2013 */ self.divide64("-3707613309582318", "3394911196503.048", "-1092.109070010836", .toNearestOrEven, .isInexact)
    /* dddiv2014 */ self.divide64("99689.0555190461", "-4.735208553891464", "-21052.72753765411", .toNearestOrEven, .isInexact)
    /* dddiv2015 */ self.divide64("-1447915775613329", "269750797.8184875", "-5367605.164925653", .toNearestOrEven, .isInexact)
    /* dddiv2016 */ self.divide64("-9.394881304225258E-19", "-830585.0252671636", "1.131116143251358E-24", .toNearestOrEven, .isInexact)
    /* dddiv2017 */ self.divide64("-1.056283432738934", "88.58754555124013", "-0.01192361100159352", .toNearestOrEven, .isInexact)
    /* dddiv2018 */ self.divide64("5763220933343.081", "689089567025052.1", "0.008363529516524456", .toNearestOrEven, .isInexact)
    /* dddiv2019 */ self.divide64("873819.122103216", "9.740612494523300E-49", "8.970884763093948E+53", .toNearestOrEven, .isInexact)
    /* dddiv2020 */ self.divide64("8022914.838533576", "6178.566801742713", "1298.507420243583", .toNearestOrEven, .isInexact)
    /* dddiv2021 */ self.divide64("203982.7605650363", "-2158.283639053435", "-94.51156320422168", .toNearestOrEven, .isInexact)
    /* dddiv2022 */ self.divide64("803.6310547013030", "7101143795399.238", "1.131692411611166E-10", .toNearestOrEven, .isInexact)
    /* dddiv2023 */ self.divide64("9.251697842123399E-82", "-1.342350220606119E-7", "-6.892163982321936E-75", .toNearestOrEven, .isInexact)
    /* dddiv2024 */ self.divide64("-1.980600645637992E-53", "-5.474262753214457E+77", "3.618022617703168E-131", .toNearestOrEven, .isInexact)
    /* dddiv2025 */ self.divide64("-210.0322996351690", "-8.580951835872843E+80", "2.447657365434971E-79", .toNearestOrEven, .isInexact)
    /* dddiv2026 */ self.divide64("-1.821980314020370E+85", "-3.018915267138165", "6.035215144503042E+84", .toNearestOrEven, .isInexact)
    /* dddiv2027 */ self.divide64("-772264503601.1047", "5.158258271408988E-86", "-1.497141986630614E+97", .toNearestOrEven, .isInexact)
    /* dddiv2028 */ self.divide64("-767.0532415847106", "2.700027228028939E-59", "-2.840909282772941E+61", .toNearestOrEven, .isInexact)
    /* dddiv2029 */ self.divide64("496724.8548250093", "7.32700588163100E+66", "6.779370220929013E-62", .toNearestOrEven, .isInexact)
    /* dddiv2030 */ self.divide64("-304232651447703.9", "-108.9730808657440", "2791814721862.565", .toNearestOrEven, .isInexact)
    /* dddiv2031 */ self.divide64("-7.233817192699405E+42", "-5711302004.149411", "1.266579352211430E+33", .toNearestOrEven, .isInexact)
    /* dddiv2032 */ self.divide64("-9.999221444912745E+96", "4010569406446197", "-2.493217404202250E+81", .toNearestOrEven, .isInexact)
    /* dddiv2033 */ self.divide64("-1837272.061937622", "8.356322838066762", "-219866.0939196882", .toNearestOrEven, .isInexact)
    /* dddiv2034 */ self.divide64("2168.517555606529", "209.1910258615061", "10.36620737756784", .toNearestOrEven, .isInexact)
    /* dddiv2035 */ self.divide64("-1.884389790576371E+88", "2.95181953870583E+20", "-6.383824505079828E+67", .toNearestOrEven, .isInexact)
    /* dddiv2036 */ self.divide64("732263.6037438196", "961222.3634446889", "0.7618045850698269", .toNearestOrEven, .isInexact)
    /* dddiv2037 */ self.divide64("-813461419.0348336", "5.376293753809143E+84", "-1.513052404285927E-76", .toNearestOrEven, .isInexact)
    /* dddiv2038 */ self.divide64("-45562133508108.50", "-9.776843494690107E+51", "4.660208945029519E-39", .toNearestOrEven, .isInexact)
    /* dddiv2039 */ self.divide64("-6.489393172441016E+80", "-9101965.097852113", "7.129661674897421E+73", .toNearestOrEven, .isInexact)
    /* dddiv2040 */ self.divide64("3.694576237117349E+93", "6683512.012622003", "5.527896456443912E+86", .toNearestOrEven, .isInexact)
    /* dddiv2041 */ self.divide64("-2.252877726403272E+19", "-7451913256.181367", "3023220546.125531", .toNearestOrEven, .isInexact)
    /* dddiv2042 */ self.divide64("518303.1989111842", "50.01587020474133", "10362.77479107123", .toNearestOrEven, .isInexact)
    /* dddiv2043 */ self.divide64("2.902087881880103E+24", "33.32400992305702", "8.708699488989578E+22", .toNearestOrEven, .isInexact)
    /* dddiv2044 */ self.divide64("549619.4559510557", "1660824845196338", "3.309316196351104E-10", .toNearestOrEven, .isInexact)
    /* dddiv2045 */ self.divide64("-6775670774684043", "8292152023.077262", "-817118.4941891062", .toNearestOrEven, .isInexact)
    /* dddiv2046 */ self.divide64("-77.50923921524079", "-5.636882655425815E+74", "1.375037302588405E-73", .toNearestOrEven, .isInexact)
    /* dddiv2047 */ self.divide64("-2.984889459605149E-10", "-88106156784122.99", "3.387833005721384E-24", .toNearestOrEven, .isInexact)
    /* dddiv2048 */ self.divide64("0.949517293997085", "44767115.96450998", "2.121015110175589E-8", .toNearestOrEven, .isInexact)
    /* dddiv2049 */ self.divide64("-2760937211.084521", "-1087015876975408", "0.000002539923537057024", .toNearestOrEven, .isInexact)
    /* dddiv2050 */ self.divide64("28438351.85030536", "-4.209397904088624E-47", "-6.755919135770688E+53", .toNearestOrEven, .isInexact)
    /* dddiv2051 */ self.divide64("-85562731.6820956", "-7.166045442530185E+45", "1.194002080621542E-38", .toNearestOrEven, .isInexact)
    /* dddiv2052 */ self.divide64("2533802852165.25", "7154.119606235955", "354173957.3317501", .toNearestOrEven, .isInexact)
    /* dddiv2053 */ self.divide64("-8858831346851.474", "97.59734208801716", "-90769186509.83577", .toNearestOrEven, .isInexact)
    /* dddiv2054 */ self.divide64("176783629801387.5", "840073263.3109817", "210438.3480848206", .toNearestOrEven, .isInexact)
    /* dddiv2055 */ self.divide64("-493506471796175.6", "79733894790822.03", "-6.189418854940746", .toNearestOrEven, .isInexact)
    /* dddiv2056 */ self.divide64("790.1682542103445", "829.9449370367435", "0.9520731062371214", .toNearestOrEven, .isInexact)
    /* dddiv2057 */ self.divide64("-8920459838.583164", "-4767.889187899214", "1870945.294035581", .toNearestOrEven, .isInexact)
    /* dddiv2058 */ self.divide64("53536687164422.1", "53137.5007032689", "1007512330.385698", .toNearestOrEven, .isInexact)
    /* dddiv2059 */ self.divide64("4.051532311146561E-74", "-2.343089768972261E+94", "-1.729140882606332E-168", .toNearestOrEven, .isInexact)
    /* dddiv2060 */ self.divide64("-14847758778636.88", "3.062543516383807E-43", "-4.848178874587497E+55", .toNearestOrEven, .isInexact)
    /* dddiv220 */ self.divide64("391", "597", "0.6549413735343384", .toNearestOrEven, .isInexact)
    /* dddiv221 */ self.divide64("391", "-597", "-0.6549413735343384", .toNearestOrEven, .isInexact)
    /* dddiv222 */ self.divide64("-391", "597", "-0.6549413735343384", .toNearestOrEven, .isInexact)
    /* dddiv223 */ self.divide64("-391", "-597", "0.6549413735343384", .toNearestOrEven, .isInexact)
    /* dddiv270 */ self.divide64("1", "1e384", "1E-384", .toNearestOrEven)
    /* dddiv271 */ self.divide64("1", "0.9e384", "1.11111111111111E-384", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv272 */ self.divide64("1", "0.99e384", "1.01010101010101E-384", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv273 */ self.divide64("1", "0.9999999999999999e384", "1.00000000000000E-384", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dddiv274 */ self.divide64("9e384", "1", "9.000000000000000E+384", .toNearestOrEven)
    /* dddiv275 */ self.divide64("9.9e384", "1", "9.900000000000000E+384", .toNearestOrEven)
    /* dddiv276 */ self.divide64("9.99e384", "1", "9.990000000000000E+384", .toNearestOrEven)
    /* dddiv277 */ self.divide64("9.9999999999999e384", "1", "9.999999999999900E+384", .toNearestOrEven)
    /* dddiv278 */ self.divide64("9.99999999999999e384", "1", "9.999999999999990E+384", .toNearestOrEven)
    /* dddiv279 */ self.divide64("9.999999999999999e384", "1", "9.999999999999999E+384", .toNearestOrEven)
    /* dddiv285 */ self.divide64("9.9e384", "1.1", "9.000000000000000E+384", .toNearestOrEven)
    /* dddiv286 */ self.divide64("9.99e384", "1.1", "9.081818181818182E+384", .toNearestOrEven, .isInexact)
    /* dddiv287 */ self.divide64("9.9999999999999e384", "1.1", "9.090909090909000E+384", .toNearestOrEven)
    /* dddiv288 */ self.divide64("9.99999999999999e384", "1.1", "9.090909090909082E+384", .toNearestOrEven, .isInexact)
    /* dddiv289 */ self.divide64("9.999999999999999e384", "1.1", "9.090909090909090E+384", .toNearestOrEven)
    /* dddiv3001 */ self.divide64("1", "3", "0.3333333333333334", .up, .isInexact)
    /* dddiv3002 */ self.divide64("2", "3", "0.6666666666666667", .up, .isInexact)
    /* dddiv3003 */ self.divide64("1", "99999", "0.00001000010000100002", .up, .isInexact)
    /* dddiv3004 */ self.divide64("1", "999999", "0.000001000001000001001", .up, .isInexact)
    /* dddiv301 */ self.divide64("0", "7", "0", .toNearestOrEven)
    /* dddiv3011 */ self.divide64("1", "3", "0.3333333333333333", .down, .isInexact)
    /* dddiv3012 */ self.divide64("2", "3", "0.6666666666666666", .down, .isInexact)
    /* dddiv3013 */ self.divide64("1", "99999", "0.00001000010000100001", .down, .isInexact)
    /* dddiv3014 */ self.divide64("1", "999999", "0.000001000001000001000", .down, .isInexact)
    /* dddiv302 */ self.divide64("0", "7E-5", "0E+5", .toNearestOrEven)
    /* dddiv303 */ self.divide64("0", "7E-1", "0E+1", .toNearestOrEven)
    /* dddiv3031 */ self.divide64("1", "3", "0.3333333333333333", .towardZero, .isInexact)
    /* dddiv3032 */ self.divide64("2", "3", "0.6666666666666666", .towardZero, .isInexact)
    /* dddiv3033 */ self.divide64("1", "99999", "0.00001000010000100001", .towardZero, .isInexact)
    /* dddiv3034 */ self.divide64("1", "999999", "0.000001000001000001000", .towardZero, .isInexact)
    /* dddiv304 */ self.divide64("0", "7E+1", "0.0", .toNearestOrEven)
    /* dddiv3041 */ self.divide64("1", "3", "0.3333333333333333", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv3042 */ self.divide64("2", "3", "0.6666666666666667", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv3043 */ self.divide64("1", "99999", "0.00001000010000100001", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv3044 */ self.divide64("1", "999999", "0.000001000001000001000", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv305 */ self.divide64("0", "7E+5", "0.00000", .toNearestOrEven)
    /* dddiv306 */ self.divide64("0", "7E+6", "0.000000", .toNearestOrEven)
    /* dddiv3061 */ self.divide64("1", "3", "0.3333333333333333", .toNearestOrEven, .isInexact)
    /* dddiv3062 */ self.divide64("2", "3", "0.6666666666666667", .toNearestOrEven, .isInexact)
    /* dddiv3063 */ self.divide64("1", "99999", "0.00001000010000100001", .toNearestOrEven, .isInexact)
    /* dddiv3064 */ self.divide64("1", "999999", "0.000001000001000001000", .toNearestOrEven, .isInexact)
    /* dddiv307 */ self.divide64("0", "7E+7", "0E-7", .toNearestOrEven)
    /* dddiv308 */ self.divide64("0", "70E-5", "0E+5", .toNearestOrEven)
    /* dddiv309 */ self.divide64("0", "70E-1", "0E+1", .toNearestOrEven)
    /* dddiv310 */ self.divide64("0", "70E+0", "0", .toNearestOrEven)
    /* dddiv311 */ self.divide64("0", "70E+1", "0.0", .toNearestOrEven)
    /* dddiv312 */ self.divide64("0", "70E+5", "0.00000", .toNearestOrEven)
    /* dddiv313 */ self.divide64("0", "70E+6", "0.000000", .toNearestOrEven)
    /* dddiv314 */ self.divide64("0", "70E+7", "0E-7", .toNearestOrEven)
    /* dddiv315 */ self.divide64("0", "700E-5", "0E+5", .toNearestOrEven)
    /* dddiv316 */ self.divide64("0", "700E-1", "0E+1", .toNearestOrEven)
    /* dddiv317 */ self.divide64("0", "700E+0", "0", .toNearestOrEven)
    /* dddiv318 */ self.divide64("0", "700E+1", "0.0", .toNearestOrEven)
    /* dddiv319 */ self.divide64("0", "700E+5", "0.00000", .toNearestOrEven)
    /* dddiv320 */ self.divide64("0", "700E+6", "0.000000", .toNearestOrEven)
    /* dddiv321 */ self.divide64("0", "700E+7", "0E-7", .toNearestOrEven)
    /* dddiv322 */ self.divide64("0", "700E+77", "0E-77", .toNearestOrEven)
    /* dddiv331 */ self.divide64("0E-3", "7E-5", "0E+2", .toNearestOrEven)
    /* dddiv332 */ self.divide64("0E-3", "7E-1", "0.00", .toNearestOrEven)
    /* dddiv333 */ self.divide64("0E-3", "7E+1", "0.0000", .toNearestOrEven)
    /* dddiv334 */ self.divide64("0E-3", "7E+5", "0E-8", .toNearestOrEven)
    /* dddiv335 */ self.divide64("0E-1", "7E-5", "0E+4", .toNearestOrEven)
    /* dddiv336 */ self.divide64("0E-1", "7E-1", "0", .toNearestOrEven)
    /* dddiv337 */ self.divide64("0E-1", "7E+1", "0.00", .toNearestOrEven)
    /* dddiv338 */ self.divide64("0E-1", "7E+5", "0.000000", .toNearestOrEven)
    /* dddiv339 */ self.divide64("0E+1", "7E-5", "0E+6", .toNearestOrEven)
    /* dddiv340 */ self.divide64("0E+1", "7E-1", "0E+2", .toNearestOrEven)
    /* dddiv341 */ self.divide64("0E+1", "7E+1", "0", .toNearestOrEven)
    /* dddiv342 */ self.divide64("0E+1", "7E+5", "0.0000", .toNearestOrEven)
    /* dddiv343 */ self.divide64("0E+3", "7E-5", "0E+8", .toNearestOrEven)
    /* dddiv344 */ self.divide64("0E+3", "7E-1", "0E+4", .toNearestOrEven)
    /* dddiv345 */ self.divide64("0E+3", "7E+1", "0E+2", .toNearestOrEven)
    /* dddiv346 */ self.divide64("0E+3", "7E+5", "0.00", .toNearestOrEven)
    /* dddiv4001 */ self.divide64("3195385192916917", "3195385192946695", "0.9999999999906809", .toNearestOrEven, .isInexact)
    /* dddiv4002 */ self.divide64("1393723067526993", "1393723067519475", "1.000000000005394", .toNearestOrEven, .isInexact)
    /* dddiv4003 */ self.divide64("759985543702302", "759985543674015", "1.000000000037220", .toNearestOrEven, .isInexact)
    /* dddiv4004 */ self.divide64("9579158456027302", "9579158456036864", "0.9999999999990018", .toNearestOrEven, .isInexact)
    /* dddiv4005 */ self.divide64("7079398299143569", "7079398299156904", "0.9999999999981164", .toNearestOrEven, .isInexact)
    /* dddiv4006 */ self.divide64("6636169255366598", "6636169255336386", "1.000000000004553", .toNearestOrEven, .isInexact)
    /* dddiv4007 */ self.divide64("6964813971340090", "6964813971321554", "1.000000000002661", .toNearestOrEven, .isInexact)
    /* dddiv4008 */ self.divide64("4182275225480784", "4182275225454009", "1.000000000006402", .toNearestOrEven, .isInexact)
    /* dddiv4009 */ self.divide64("9228325124938029", "9228325124918730", "1.000000000002091", .toNearestOrEven, .isInexact)
    /* dddiv4010 */ self.divide64("3428346338630192", "3428346338609843", "1.000000000005936", .toNearestOrEven, .isInexact)
    /* dddiv4011 */ self.divide64("2143511550722893", "2143511550751754", "0.9999999999865356", .toNearestOrEven, .isInexact)
    /* dddiv4012 */ self.divide64("1672732924396785", "1672732924401811", "0.9999999999969953", .toNearestOrEven, .isInexact)
    /* dddiv4013 */ self.divide64("4190714611948216", "4190714611948664", "0.9999999999998931", .toNearestOrEven, .isInexact)
    /* dddiv4014 */ self.divide64("3942254800848877", "3942254800814556", "1.000000000008706", .toNearestOrEven, .isInexact)
    /* dddiv4015 */ self.divide64("2854459826952334", "2854459826960762", "0.9999999999970474", .toNearestOrEven, .isInexact)
    /* dddiv4016 */ self.divide64("2853258953664731", "2853258953684471", "0.9999999999930816", .toNearestOrEven, .isInexact)
    /* dddiv4017 */ self.divide64("9453512638125978", "9453512638146425", "0.9999999999978371", .toNearestOrEven, .isInexact)
    /* dddiv4018 */ self.divide64("339476633940369", "339476633912887", "1.000000000080954", .toNearestOrEven, .isInexact)
    /* dddiv4019 */ self.divide64("4542181492688467", "4542181492697735", "0.9999999999979596", .toNearestOrEven, .isInexact)
    /* dddiv4020 */ self.divide64("7312600192399197", "7312600192395424", "1.000000000000516", .toNearestOrEven, .isInexact)
    /* dddiv4021 */ self.divide64("1811674985570111", "1811674985603935", "0.9999999999813300", .toNearestOrEven, .isInexact)
    /* dddiv4022 */ self.divide64("1706462639003481", "1706462639017740", "0.9999999999916441", .toNearestOrEven, .isInexact)
    /* dddiv4023 */ self.divide64("6697052654940368", "6697052654934110", "1.000000000000934", .toNearestOrEven, .isInexact)
    /* dddiv4024 */ self.divide64("5015283664277539", "5015283664310719", "0.9999999999933842", .toNearestOrEven, .isInexact)
    /* dddiv4025 */ self.divide64("2359501561537464", "2359501561502464", "1.000000000014834", .toNearestOrEven, .isInexact)
    /* dddiv4026 */ self.divide64("2669850227909157", "2669850227901548", "1.000000000002850", .toNearestOrEven, .isInexact)
    /* dddiv4027 */ self.divide64("9329725546974648", "9329725547002445", "0.9999999999970206", .toNearestOrEven, .isInexact)
    /* dddiv4028 */ self.divide64("3228562867071248", "3228562867106206", "0.9999999999891723", .toNearestOrEven, .isInexact)
    /* dddiv4029 */ self.divide64("4862226644921175", "4862226644909380", "1.000000000002426", .toNearestOrEven, .isInexact)
    /* dddiv4030 */ self.divide64("1022267997054529", "1022267997071329", "0.9999999999835660", .toNearestOrEven, .isInexact)
    /* dddiv4031 */ self.divide64("1048777482023719", "1048777482000948", "1.000000000021712", .toNearestOrEven, .isInexact)
    /* dddiv4032 */ self.divide64("9980113777337098", "9980113777330539", "1.000000000000657", .toNearestOrEven, .isInexact)
    /* dddiv4033 */ self.divide64("7506839167963908", "7506839167942901", "1.000000000002798", .toNearestOrEven, .isInexact)
    /* dddiv4034 */ self.divide64("231119751977860", "231119751962453", "1.000000000066662", .toNearestOrEven, .isInexact)
    /* dddiv4035 */ self.divide64("4034903664762962", "4034903664795526", "0.9999999999919294", .toNearestOrEven, .isInexact)
    /* dddiv4036 */ self.divide64("5700122152274696", "5700122152251386", "1.000000000004089", .toNearestOrEven, .isInexact)
    /* dddiv4037 */ self.divide64("6869599590293110", "6869599590293495", "0.9999999999999440", .toNearestOrEven, .isInexact)
    /* dddiv4038 */ self.divide64("5576281960092797", "5576281960105579", "0.9999999999977078", .toNearestOrEven, .isInexact)
    /* dddiv4039 */ self.divide64("2304844888381318", "2304844888353073", "1.000000000012255", .toNearestOrEven, .isInexact)
    /* dddiv4040 */ self.divide64("3265933651656452", "3265933651682779", "0.9999999999919389", .toNearestOrEven, .isInexact)
    /* dddiv4041 */ self.divide64("5235714985079914", "5235714985066131", "1.000000000002632", .toNearestOrEven, .isInexact)
    /* dddiv4042 */ self.divide64("5578481572827551", "5578481572822945", "1.000000000000826", .toNearestOrEven, .isInexact)
    /* dddiv4043 */ self.divide64("4909616081396134", "4909616081373076", "1.000000000004696", .toNearestOrEven, .isInexact)
    /* dddiv4044 */ self.divide64("636447224349537", "636447224338757", "1.000000000016938", .toNearestOrEven, .isInexact)
    /* dddiv4045 */ self.divide64("1539373428396640", "1539373428364727", "1.000000000020731", .toNearestOrEven, .isInexact)
    /* dddiv4046 */ self.divide64("2028786707377893", "2028786707378866", "0.9999999999995204", .toNearestOrEven, .isInexact)
    /* dddiv4047 */ self.divide64("137643260486222", "137643260487419", "0.9999999999913036", .toNearestOrEven, .isInexact)
    /* dddiv4048 */ self.divide64("247451519746765", "247451519752267", "0.9999999999777653", .toNearestOrEven, .isInexact)
    /* dddiv4049 */ self.divide64("7877858475022054", "7877858474999794", "1.000000000002826", .toNearestOrEven, .isInexact)
    /* dddiv4050 */ self.divide64("7333242694766258", "7333242694744628", "1.000000000002950", .toNearestOrEven, .isInexact)
    /* dddiv4051 */ self.divide64("124051503698592", "124051503699397", "0.9999999999935108", .toNearestOrEven, .isInexact)
    /* dddiv4052 */ self.divide64("8944737432385188", "8944737432406860", "0.9999999999975771", .toNearestOrEven, .isInexact)
    /* dddiv4053 */ self.divide64("9883948923406874", "9883948923424843", "0.9999999999981820", .toNearestOrEven, .isInexact)
    /* dddiv4054 */ self.divide64("6829178741654284", "6829178741671973", "0.9999999999974098", .toNearestOrEven, .isInexact)
    /* dddiv4055 */ self.divide64("7342752479768122", "7342752479793385", "0.9999999999965595", .toNearestOrEven, .isInexact)
    /* dddiv4056 */ self.divide64("8066426579008783", "8066426578977563", "1.000000000003870", .toNearestOrEven, .isInexact)
    /* dddiv4057 */ self.divide64("8992775071383295", "8992775071352712", "1.000000000003401", .toNearestOrEven, .isInexact)
    /* dddiv4058 */ self.divide64("5485011755545641", "5485011755543611", "1.000000000000370", .toNearestOrEven, .isInexact)
    /* dddiv4059 */ self.divide64("5779983054353918", "5779983054365300", "0.9999999999980308", .toNearestOrEven, .isInexact)
    /* dddiv4060 */ self.divide64("9502265102713774", "9502265102735208", "0.9999999999977443", .toNearestOrEven, .isInexact)
    /* dddiv4061 */ self.divide64("2109558399130981", "2109558399116281", "1.000000000006968", .toNearestOrEven, .isInexact)
    /* dddiv4062 */ self.divide64("5296182636350471", "5296182636351521", "0.9999999999998017", .toNearestOrEven, .isInexact)
    /* dddiv4063 */ self.divide64("1440019225591883", "1440019225601844", "0.9999999999930827", .toNearestOrEven, .isInexact)
    /* dddiv4064 */ self.divide64("8182110791881341", "8182110791847174", "1.000000000004176", .toNearestOrEven, .isInexact)
    /* dddiv4065 */ self.divide64("489098235512060", "489098235534516", "0.9999999999540869", .toNearestOrEven, .isInexact)
    /* dddiv4066 */ self.divide64("6475687084782038", "6475687084756089", "1.000000000004007", .toNearestOrEven, .isInexact)
    /* dddiv4067 */ self.divide64("8094348555736948", "8094348555759236", "0.9999999999972465", .toNearestOrEven, .isInexact)
    /* dddiv4068 */ self.divide64("1982766816291543", "1982766816309463", "0.9999999999909621", .toNearestOrEven, .isInexact)
    /* dddiv4069 */ self.divide64("9277314300113251", "9277314300084467", "1.000000000003103", .toNearestOrEven, .isInexact)
    /* dddiv4070 */ self.divide64("4335532959318934", "4335532959293167", "1.000000000005943", .toNearestOrEven, .isInexact)
    /* dddiv4071 */ self.divide64("7767113032981348", "7767113032968132", "1.000000000001702", .toNearestOrEven, .isInexact)
    /* dddiv4072 */ self.divide64("1578548053342868", "1578548053370448", "0.9999999999825282", .toNearestOrEven, .isInexact)
    /* dddiv4073 */ self.divide64("3790420686666898", "3790420686636315", "1.000000000008068", .toNearestOrEven, .isInexact)
    /* dddiv4074 */ self.divide64("871682421955147", "871682421976441", "0.9999999999755714", .toNearestOrEven, .isInexact)
    /* dddiv4075 */ self.divide64("744141054479940", "744141054512329", "0.9999999999564746", .toNearestOrEven, .isInexact)
    /* dddiv4076 */ self.divide64("8956824183670735", "8956824183641741", "1.000000000003237", .toNearestOrEven, .isInexact)
    /* dddiv4077 */ self.divide64("8337291694485682", "8337291694451193", "1.000000000004137", .toNearestOrEven, .isInexact)
    /* dddiv4078 */ self.divide64("4107775944683669", "4107775944657097", "1.000000000006469", .toNearestOrEven, .isInexact)
    /* dddiv4079 */ self.divide64("8691900057964648", "8691900057997555", "0.9999999999962141", .toNearestOrEven, .isInexact)
    /* dddiv4080 */ self.divide64("2229528520536462", "2229528520502337", "1.000000000015306", .toNearestOrEven, .isInexact)
    /* dddiv4081 */ self.divide64("398442083774322", "398442083746273", "1.000000000070397", .toNearestOrEven, .isInexact)
    /* dddiv4082 */ self.divide64("5319819776808759", "5319819776838313", "0.9999999999944445", .toNearestOrEven, .isInexact)
    /* dddiv4083 */ self.divide64("7710491299066855", "7710491299041858", "1.000000000003242", .toNearestOrEven, .isInexact)
    /* dddiv4084 */ self.divide64("9083231296087266", "9083231296058160", "1.000000000003204", .toNearestOrEven, .isInexact)
    /* dddiv4085 */ self.divide64("3566873574904559", "3566873574890328", "1.000000000003990", .toNearestOrEven, .isInexact)
    /* dddiv4086 */ self.divide64("596343290550525", "596343290555614", "0.9999999999914663", .toNearestOrEven, .isInexact)
    /* dddiv4087 */ self.divide64("278227925093192", "278227925068104", "1.000000000090171", .toNearestOrEven, .isInexact)
    /* dddiv4088 */ self.divide64("3292902958490649", "3292902958519881", "0.9999999999911227", .toNearestOrEven, .isInexact)
    /* dddiv4089 */ self.divide64("5521871364245881", "5521871364229536", "1.000000000002960", .toNearestOrEven, .isInexact)
    /* dddiv4090 */ self.divide64("2406505602883617", "2406505602857997", "1.000000000010646", .toNearestOrEven, .isInexact)
    /* dddiv4091 */ self.divide64("7741146984869208", "7741146984867255", "1.000000000000252", .toNearestOrEven, .isInexact)
    /* dddiv4092 */ self.divide64("4576041832414909", "4576041832405102", "1.000000000002143", .toNearestOrEven, .isInexact)
    /* dddiv4093 */ self.divide64("9183756982878057", "9183756982901934", "0.9999999999974001", .toNearestOrEven, .isInexact)
    /* dddiv4094 */ self.divide64("6215736513855159", "6215736513870342", "0.9999999999975573", .toNearestOrEven, .isInexact)
    /* dddiv4095 */ self.divide64("248554968534533", "248554968551417", "0.9999999999320714", .toNearestOrEven, .isInexact)
    /* dddiv4096 */ self.divide64("376314165668645", "376314165659755", "1.000000000023624", .toNearestOrEven, .isInexact)
    /* dddiv4097 */ self.divide64("5513569249809718", "5513569249808906", "1.000000000000147", .toNearestOrEven, .isInexact)
    /* dddiv4098 */ self.divide64("3367992242167904", "3367992242156228", "1.000000000003467", .toNearestOrEven, .isInexact)
    /* dddiv4099 */ self.divide64("6134869538966967", "6134869538985986", "0.9999999999968999", .toNearestOrEven, .isInexact)
    /* dddiv441 */ self.divide64("12345678000", "1", "12345678000", .toNearestOrEven)
    /* dddiv442 */ self.divide64("1", "12345678000", "8.100000664200054E-11", .toNearestOrEven, .isInexact)
    /* dddiv443 */ self.divide64("1234567800", "1", "1234567800", .toNearestOrEven)
    /* dddiv444 */ self.divide64("1", "1234567800", "8.100000664200054E-10", .toNearestOrEven, .isInexact)
    /* dddiv445 */ self.divide64("1234567890", "1", "1234567890", .toNearestOrEven)
    /* dddiv446 */ self.divide64("1", "1234567890", "8.100000073710001E-10", .toNearestOrEven, .isInexact)
    /* dddiv447 */ self.divide64("1234567891", "1", "1234567891", .toNearestOrEven)
    /* dddiv448 */ self.divide64("1", "1234567891", "8.100000067149001E-10", .toNearestOrEven, .isInexact)
    /* dddiv449 */ self.divide64("12345678901", "1", "12345678901", .toNearestOrEven)
    /* dddiv450 */ self.divide64("1", "12345678901", "8.100000073053901E-11", .toNearestOrEven, .isInexact)
    /* dddiv451 */ self.divide64("1234567896", "1", "1234567896", .toNearestOrEven)
    /* dddiv452 */ self.divide64("1", "1234567896", "8.100000034344000E-10", .toNearestOrEven, .isInexact)
    /* dddiv453 */ self.divide64("1e+1", "1", "1E+1", .toNearestOrEven)
    /* dddiv454 */ self.divide64("1e+1", "1.0", "1E+1", .toNearestOrEven)
    /* dddiv455 */ self.divide64("1e+1", "1.00", "1E+1", .toNearestOrEven)
    /* dddiv456 */ self.divide64("1e+2", "2", "5E+1", .toNearestOrEven)
    /* dddiv457 */ self.divide64("1e+2", "2.0", "5E+1", .toNearestOrEven)
    /* dddiv458 */ self.divide64("1e+2", "2.00", "5E+1", .toNearestOrEven)
    /* dddiv460 */ self.divide64("3e0", "2e0", "1.5", .toNearestOrEven)
    /* dddiv461 */ self.divide64("30e-1", "2e0", "1.5", .toNearestOrEven)
    /* dddiv462 */ self.divide64("300e-2", "2e0", "1.50", .toNearestOrEven)
    /* dddiv464 */ self.divide64("3000e-3", "2e0", "1.500", .toNearestOrEven)
    /* dddiv465 */ self.divide64("3e0", "20e-1", "1.5", .toNearestOrEven)
    /* dddiv466 */ self.divide64("30e-1", "20e-1", "1.5", .toNearestOrEven)
    /* dddiv467 */ self.divide64("300e-2", "20e-1", "1.5", .toNearestOrEven)
    /* dddiv468 */ self.divide64("3000e-3", "20e-1", "1.50", .toNearestOrEven)
    /* dddiv469 */ self.divide64("3e0", "200e-2", "1.5", .toNearestOrEven)
    /* dddiv470 */ self.divide64("30e-1", "200e-2", "1.5", .toNearestOrEven)
    /* dddiv471 */ self.divide64("300e-2", "200e-2", "1.5", .toNearestOrEven)
    /* dddiv472 */ self.divide64("3000e-3", "200e-2", "1.5", .toNearestOrEven)
    /* dddiv473 */ self.divide64("3e0", "2000e-3", "1.5", .toNearestOrEven)
    /* dddiv474 */ self.divide64("30e-1", "2000e-3", "1.5", .toNearestOrEven)
    /* dddiv475 */ self.divide64("300e-2", "2000e-3", "1.5", .toNearestOrEven)
    /* dddiv476 */ self.divide64("3000e-3", "2000e-3", "1.5", .toNearestOrEven)
    /* dddiv480 */ self.divide64("1", "1.0E+33", "1E-33", .toNearestOrEven)
    /* dddiv481 */ self.divide64("1", "10E+33", "1E-34", .toNearestOrEven)
    /* dddiv482 */ self.divide64("1", "1.0E-33", "1E+33", .toNearestOrEven)
    /* dddiv483 */ self.divide64("1", "10E-33", "1E+32", .toNearestOrEven)
    /* dddiv484 */ self.divide64("0e5", "1e3", "0E+2", .toNearestOrEven)
    /* dddiv485 */ self.divide64("0e5", "2e3", "0E+2", .toNearestOrEven)
    /* dddiv486 */ self.divide64("0e5", "10e2", "0E+3", .toNearestOrEven)
    /* dddiv487 */ self.divide64("0e5", "20e2", "0E+3", .toNearestOrEven)
    /* dddiv488 */ self.divide64("0e5", "100e1", "0E+4", .toNearestOrEven)
    /* dddiv489 */ self.divide64("0e5", "200e1", "0E+4", .toNearestOrEven)
    /* dddiv491 */ self.divide64("1e5", "1e3", "1E+2", .toNearestOrEven)
    /* dddiv492 */ self.divide64("1e5", "2e3", "5E+1", .toNearestOrEven)
    /* dddiv493 */ self.divide64("1e5", "10e2", "1E+2", .toNearestOrEven)
    /* dddiv494 */ self.divide64("1e5", "20e2", "5E+1", .toNearestOrEven)
    /* dddiv495 */ self.divide64("1e5", "100e1", "1E+2", .toNearestOrEven)
    /* dddiv496 */ self.divide64("1e5", "200e1", "5E+1", .toNearestOrEven)
    /* dddiv497 */ self.divide64("0E+380", "1000E-13", "0E+369", .toNearestOrAwayFromZero)
    /* dddiv498 */ self.divide64("0E-390", "1000E+13", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv500 */ self.divide64("1", "9.9", "0.1010101010101010", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv501 */ self.divide64("1", "9.09", "0.1100110011001100", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv502 */ self.divide64("1", "9.009", "0.1110001110001110", .toNearestOrAwayFromZero, .isInexact)
    /* dddiv511 */ self.divide64("1", "2", "0.5", .toNearestOrAwayFromZero)
    /* dddiv512 */ self.divide64("1.0", "2", "0.5", .toNearestOrAwayFromZero)
    /* dddiv513 */ self.divide64("1.00", "2", "0.50", .toNearestOrAwayFromZero)
    /* dddiv514 */ self.divide64("1.000", "2", "0.500", .toNearestOrAwayFromZero)
    /* dddiv515 */ self.divide64("1.0000", "2", "0.5000", .toNearestOrAwayFromZero)
    /* dddiv516 */ self.divide64("1.00000", "2", "0.50000", .toNearestOrAwayFromZero)
    /* dddiv517 */ self.divide64("1.000000", "2", "0.500000", .toNearestOrAwayFromZero)
    /* dddiv518 */ self.divide64("1.0000000", "2", "0.5000000", .toNearestOrAwayFromZero)
    /* dddiv519 */ self.divide64("1.00", "2.00", "0.5", .toNearestOrAwayFromZero)
    /* dddiv521 */ self.divide64("2", "1", "2", .toNearestOrAwayFromZero)
    /* dddiv522 */ self.divide64("2", "1.0", "2", .toNearestOrAwayFromZero)
    /* dddiv523 */ self.divide64("2", "1.00", "2", .toNearestOrAwayFromZero)
    /* dddiv524 */ self.divide64("2", "1.000", "2", .toNearestOrAwayFromZero)
    /* dddiv525 */ self.divide64("2", "1.0000", "2", .toNearestOrAwayFromZero)
    /* dddiv526 */ self.divide64("2", "1.00000", "2", .toNearestOrAwayFromZero)
    /* dddiv527 */ self.divide64("2", "1.000000", "2", .toNearestOrAwayFromZero)
    /* dddiv528 */ self.divide64("2", "1.0000000", "2", .toNearestOrAwayFromZero)
    /* dddiv529 */ self.divide64("2.00", "1.00", "2", .toNearestOrAwayFromZero)
    /* dddiv530 */ self.divide64("2.40", "2", "1.20", .toNearestOrAwayFromZero)
    /* dddiv531 */ self.divide64("2.40", "4", "0.60", .toNearestOrAwayFromZero)
    /* dddiv532 */ self.divide64("2.40", "10", "0.24", .toNearestOrAwayFromZero)
    /* dddiv533 */ self.divide64("2.40", "2.0", "1.2", .toNearestOrAwayFromZero)
    /* dddiv534 */ self.divide64("2.40", "4.0", "0.6", .toNearestOrAwayFromZero)
    /* dddiv535 */ self.divide64("2.40", "10.0", "0.24", .toNearestOrAwayFromZero)
    /* dddiv536 */ self.divide64("2.40", "2.00", "1.2", .toNearestOrAwayFromZero)
    /* dddiv537 */ self.divide64("2.40", "4.00", "0.6", .toNearestOrAwayFromZero)
    /* dddiv538 */ self.divide64("2.40", "10.00", "0.24", .toNearestOrAwayFromZero)
    /* dddiv539 */ self.divide64("0.9", "0.1", "9", .toNearestOrAwayFromZero)
    /* dddiv540 */ self.divide64("0.9", "0.01", "9E+1", .toNearestOrAwayFromZero)
    /* dddiv541 */ self.divide64("0.9", "0.001", "9E+2", .toNearestOrAwayFromZero)
    /* dddiv542 */ self.divide64("5", "2", "2.5", .toNearestOrAwayFromZero)
    /* dddiv543 */ self.divide64("5", "2.0", "2.5", .toNearestOrAwayFromZero)
    /* dddiv544 */ self.divide64("5", "2.00", "2.5", .toNearestOrAwayFromZero)
    /* dddiv545 */ self.divide64("5", "20", "0.25", .toNearestOrAwayFromZero)
    /* dddiv546 */ self.divide64("5", "20.0", "0.25", .toNearestOrAwayFromZero)
    /* dddiv547 */ self.divide64("2.400", "2", "1.200", .toNearestOrAwayFromZero)
    /* dddiv548 */ self.divide64("2.400", "2.0", "1.20", .toNearestOrAwayFromZero)
    /* dddiv549 */ self.divide64("2.400", "2.400", "1", .toNearestOrAwayFromZero)
    /* dddiv550 */ self.divide64("240", "1", "240", .toNearestOrAwayFromZero)
    /* dddiv551 */ self.divide64("240", "10", "24", .toNearestOrAwayFromZero)
    /* dddiv552 */ self.divide64("240", "100", "2.4", .toNearestOrAwayFromZero)
    /* dddiv553 */ self.divide64("240", "1000", "0.24", .toNearestOrAwayFromZero)
    /* dddiv554 */ self.divide64("2400", "1", "2400", .toNearestOrAwayFromZero)
    /* dddiv555 */ self.divide64("2400", "10", "240", .toNearestOrAwayFromZero)
    /* dddiv556 */ self.divide64("2400", "100", "24", .toNearestOrAwayFromZero)
    /* dddiv557 */ self.divide64("2400", "1000", "2.4", .toNearestOrAwayFromZero)
    /* dddiv600 */ self.divide64("2.4E+9", "2", "1.2E+9", .toNearestOrAwayFromZero)
    /* dddiv601 */ self.divide64("2.40E+9", "2", "1.20E+9", .toNearestOrAwayFromZero)
    /* dddiv602 */ self.divide64("2.400E+9", "2", "1.200E+9", .toNearestOrAwayFromZero)
    /* dddiv603 */ self.divide64("2.4000E+9", "2", "1.2000E+9", .toNearestOrAwayFromZero)
    /* dddiv604 */ self.divide64("24E+8", "2", "1.2E+9", .toNearestOrAwayFromZero)
    /* dddiv605 */ self.divide64("240E+7", "2", "1.20E+9", .toNearestOrAwayFromZero)
    /* dddiv606 */ self.divide64("2400E+6", "2", "1.200E+9", .toNearestOrAwayFromZero)
    /* dddiv607 */ self.divide64("24000E+5", "2", "1.2000E+9", .toNearestOrAwayFromZero)
    /* dddiv731 */ self.divide64("5.00", "1E-3", "5.00E+3", .toNearestOrAwayFromZero)
    /* dddiv732 */ self.divide64("00.00", "0.000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv733 */ self.divide64("00.00", "0E-3", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv734 */ self.divide64("0", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv735 */ self.divide64("-0", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv736 */ self.divide64("-0", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv741 */ self.divide64("0", "-1", "-0", .toNearestOrAwayFromZero)
    /* dddiv742 */ self.divide64("-0", "-1", "0", .toNearestOrAwayFromZero)
    /* dddiv743 */ self.divide64("0", "1", "0", .toNearestOrAwayFromZero)
    /* dddiv744 */ self.divide64("-0", "1", "-0", .toNearestOrAwayFromZero)
    /* dddiv745 */ self.divide64("-1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv746 */ self.divide64("-1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv747 */ self.divide64("1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv748 */ self.divide64("1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv751 */ self.divide64("0.0", "-1", "-0.0", .toNearestOrAwayFromZero)
    /* dddiv752 */ self.divide64("-0.0", "-1", "0.0", .toNearestOrAwayFromZero)
    /* dddiv753 */ self.divide64("0.0", "1", "0.0", .toNearestOrAwayFromZero)
    /* dddiv754 */ self.divide64("-0.0", "1", "-0.0", .toNearestOrAwayFromZero)
    /* dddiv755 */ self.divide64("-1.0", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv756 */ self.divide64("-1.0", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv757 */ self.divide64("1.0", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv758 */ self.divide64("1.0", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv761 */ self.divide64("0", "-1.0", "-0E+1", .toNearestOrAwayFromZero)
    /* dddiv762 */ self.divide64("-0", "-1.0", "0E+1", .toNearestOrAwayFromZero)
    /* dddiv763 */ self.divide64("0", "1.0", "0E+1", .toNearestOrAwayFromZero)
    /* dddiv764 */ self.divide64("-0", "1.0", "-0E+1", .toNearestOrAwayFromZero)
    /* dddiv765 */ self.divide64("-1", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv766 */ self.divide64("-1", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv767 */ self.divide64("1", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv768 */ self.divide64("1", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv771 */ self.divide64("0.0", "-1.0", "-0", .toNearestOrAwayFromZero)
    /* dddiv772 */ self.divide64("-0.0", "-1.0", "0", .toNearestOrAwayFromZero)
    /* dddiv773 */ self.divide64("0.0", "1.0", "0", .toNearestOrAwayFromZero)
    /* dddiv774 */ self.divide64("-0.0", "1.0", "-0", .toNearestOrAwayFromZero)
    /* dddiv775 */ self.divide64("-1.0", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv776 */ self.divide64("-1.0", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv777 */ self.divide64("1.0", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv778 */ self.divide64("1.0", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv780 */ self.divide64("Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv781 */ self.divide64("Inf", "-1000", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv782 */ self.divide64("Inf", "-1", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv783 */ self.divide64("Inf", "-0", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv784 */ self.divide64("Inf", "0", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv785 */ self.divide64("Inf", "1", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv786 */ self.divide64("Inf", "1000", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv787 */ self.divide64("Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv788 */ self.divide64("-1000", "Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv789 */ self.divide64("-Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv790 */ self.divide64("-1", "Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv791 */ self.divide64("-0", "Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv792 */ self.divide64("0", "Inf", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv793 */ self.divide64("1", "Inf", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv794 */ self.divide64("1000", "Inf", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv795 */ self.divide64("Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv800 */ self.divide64("-Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv801 */ self.divide64("-Inf", "-1000", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv802 */ self.divide64("-Inf", "-1", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv803 */ self.divide64("-Inf", "-0", "Infinity", .toNearestOrAwayFromZero)
    /* dddiv804 */ self.divide64("-Inf", "0", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv805 */ self.divide64("-Inf", "1", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv806 */ self.divide64("-Inf", "1000", "-Infinity", .toNearestOrAwayFromZero)
    /* dddiv807 */ self.divide64("-Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv808 */ self.divide64("-1000", "Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv809 */ self.divide64("-Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv810 */ self.divide64("-1", "-Inf", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv811 */ self.divide64("-0", "-Inf", "0E-398", .toNearestOrAwayFromZero)
    /* dddiv812 */ self.divide64("0", "-Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv813 */ self.divide64("1", "-Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv814 */ self.divide64("1000", "-Inf", "-0E-398", .toNearestOrAwayFromZero)
    /* dddiv815 */ self.divide64("Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv821 */ self.divide64("NaN", "-Inf", "NaN", .toNearestOrAwayFromZero)
    /* dddiv822 */ self.divide64("NaN", "-1000", "NaN", .toNearestOrAwayFromZero)
    /* dddiv823 */ self.divide64("NaN", "-1", "NaN", .toNearestOrAwayFromZero)
    /* dddiv824 */ self.divide64("NaN", "-0", "NaN", .toNearestOrAwayFromZero)
    /* dddiv825 */ self.divide64("NaN", "0", "NaN", .toNearestOrAwayFromZero)
    /* dddiv826 */ self.divide64("NaN", "1", "NaN", .toNearestOrAwayFromZero)
    /* dddiv827 */ self.divide64("NaN", "1000", "NaN", .toNearestOrAwayFromZero)
    /* dddiv828 */ self.divide64("NaN", "Inf", "NaN", .toNearestOrAwayFromZero)
    /* dddiv829 */ self.divide64("NaN", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv830 */ self.divide64("-Inf", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv831 */ self.divide64("-1000", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv832 */ self.divide64("-1", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv833 */ self.divide64("-0", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv834 */ self.divide64("0", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv835 */ self.divide64("1", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv836 */ self.divide64("1000", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv837 */ self.divide64("Inf", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dddiv841 */ self.divide64("sNaN", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv842 */ self.divide64("sNaN", "-1000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv843 */ self.divide64("sNaN", "-1", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv844 */ self.divide64("sNaN", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv845 */ self.divide64("sNaN", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv846 */ self.divide64("sNaN", "1", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv847 */ self.divide64("sNaN", "1000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv848 */ self.divide64("sNaN", "NaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv849 */ self.divide64("sNaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv850 */ self.divide64("NaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv851 */ self.divide64("-Inf", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv852 */ self.divide64("-1000", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv853 */ self.divide64("-1", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv854 */ self.divide64("-0", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv855 */ self.divide64("0", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv856 */ self.divide64("1", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv857 */ self.divide64("1000", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv858 */ self.divide64("Inf", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv859 */ self.divide64("NaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv861 */ self.divide64("NaN(0x9)", "-Inf", "NaN(0x9)", .toNearestOrAwayFromZero)
    /* dddiv862 */ self.divide64("NaN(0x8)", "1000", "NaN(0x8)", .toNearestOrAwayFromZero)
    /* dddiv863 */ self.divide64("NaN(0x7)", "Inf", "NaN(0x7)", .toNearestOrAwayFromZero)
    /* dddiv864 */ self.divide64("NaN(0x6)", "NaN(0x5)", "NaN(0x6)", .toNearestOrAwayFromZero)
    /* dddiv865 */ self.divide64("-Inf", "NaN(0x4)", "NaN(0x4)", .toNearestOrAwayFromZero)
    /* dddiv866 */ self.divide64("-1000", "NaN(0x3)", "NaN(0x3)", .toNearestOrAwayFromZero)
    /* dddiv867 */ self.divide64("Inf", "NaN(0x2)", "NaN(0x2)", .toNearestOrAwayFromZero)
    /* dddiv871 */ self.divide64("sNaN(0x63)", "-Inf", "NaN(0x63)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv872 */ self.divide64("sNaN(0x62)", "-1", "NaN(0x62)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv873 */ self.divide64("sNaN(0x61)", "NaN", "NaN(0x61)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv874 */ self.divide64("sNaN(0x60)", "sNaN(0x5e)", "NaN(0x60)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv875 */ self.divide64("NaN(0x5f)", "sNaN(0x5d)", "NaN(0x5d)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv876 */ self.divide64("-Inf", "sNaN(0x5c)", "NaN(0x5c)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv877 */ self.divide64("0", "sNaN(0x5b)", "NaN(0x5b)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv878 */ self.divide64("Inf", "sNaN(0x5a)", "NaN(0x5a)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv879 */ self.divide64("NaN", "sNaN(0x59)", "NaN(0x59)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv881 */ self.divide64("-NaN(0x9)", "-Inf", "-NaN(0x9)", .toNearestOrAwayFromZero)
    /* dddiv882 */ self.divide64("-NaN(0x8)", "1000", "-NaN(0x8)", .toNearestOrAwayFromZero)
    /* dddiv883 */ self.divide64("-NaN(0x7)", "Inf", "-NaN(0x7)", .toNearestOrAwayFromZero)
    /* dddiv884 */ self.divide64("-NaN(0x6)", "-NaN(0x5)", "-NaN(0x6)", .toNearestOrAwayFromZero)
    /* dddiv885 */ self.divide64("-Inf", "-NaN(0x4)", "-NaN(0x4)", .toNearestOrAwayFromZero)
    /* dddiv886 */ self.divide64("-1000", "-NaN(0x3)", "-NaN(0x3)", .toNearestOrAwayFromZero)
    /* dddiv887 */ self.divide64("Inf", "-NaN(0x2)", "-NaN(0x2)", .toNearestOrAwayFromZero)
    /* dddiv891 */ self.divide64("-sNaN(0x63)", "-Inf", "-NaN(0x63)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv892 */ self.divide64("-sNaN(0x62)", "-1", "-NaN(0x62)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv893 */ self.divide64("-sNaN(0x61)", "NaN", "-NaN(0x61)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv894 */ self.divide64("-sNaN(0x60)", "-sNaN(0x5e)", "-NaN(0x60)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv895 */ self.divide64("-NaN(0x5f)", "-sNaN(0x5d)", "-NaN(0x5d)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv896 */ self.divide64("-Inf", "-sNaN(0x5c)", "-NaN(0x5c)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv897 */ self.divide64("0", "-sNaN(0x5b)", "-NaN(0x5b)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv898 */ self.divide64("Inf", "-sNaN(0x5a)", "-NaN(0x5a)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv899 */ self.divide64("-NaN", "-sNaN(0x59)", "-NaN(0x59)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv901 */ self.divide64("0", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv902 */ self.divide64("0.0E5", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv903 */ self.divide64("0.000", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dddiv904 */ self.divide64("0.0001", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv905 */ self.divide64("0.01", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv906 */ self.divide64("0.1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv907 */ self.divide64("1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv908 */ self.divide64("1", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv909 */ self.divide64("10", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv910 */ self.divide64("1E+100", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv911 */ self.divide64("1E+100", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv921 */ self.divide64("-0.0001", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv922 */ self.divide64("-0.01", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv923 */ self.divide64("-0.1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv924 */ self.divide64("-1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv925 */ self.divide64("-1", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv926 */ self.divide64("-10", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv927 */ self.divide64("-1E+100", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv928 */ self.divide64("-1E+100", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv931 */ self.divide64("0.0001", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv932 */ self.divide64("0.01", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv933 */ self.divide64("0.1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv934 */ self.divide64("1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv935 */ self.divide64("1", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv936 */ self.divide64("10", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv937 */ self.divide64("1E+100", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv938 */ self.divide64("1E+100", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv941 */ self.divide64("-0.0001", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv942 */ self.divide64("-0.01", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv943 */ self.divide64("-0.1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv944 */ self.divide64("-1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv945 */ self.divide64("-1", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv946 */ self.divide64("-10", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv947 */ self.divide64("-1E+100", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dddiv948 */ self.divide64("-1E+100", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
  }

  private func divide64(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = arg0.divided(by: arg1, rounding: rounding, status: &status)
    let speleotroveResult = self.toSpeleotrove_div(arg0, arg1, result: result)
    self.assertEqual(speleotroveResult, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }

  func test_divide128() {
    /* dqdiv001 */ self.divide128("1", "1", "1", .toNearestOrEven)
    /* dqdiv002 */ self.divide128("2", "1", "2", .toNearestOrEven)
    /* dqdiv003 */ self.divide128("1", "2", "0.5", .toNearestOrEven)
    /* dqdiv004 */ self.divide128("2", "2", "1", .toNearestOrEven)
    /* dqdiv005 */ self.divide128("0", "1", "0", .toNearestOrEven)
    /* dqdiv006 */ self.divide128("0", "2", "0", .toNearestOrEven)
    /* dqdiv007 */ self.divide128("1", "3", "0.3333333333333333333333333333333333", .toNearestOrEven, .isInexact)
    /* dqdiv008 */ self.divide128("2", "3", "0.6666666666666666666666666666666667", .toNearestOrEven, .isInexact)
    /* dqdiv009 */ self.divide128("3", "3", "1", .toNearestOrEven)
    /* dqdiv010 */ self.divide128("2.4", "1", "2.4", .toNearestOrEven)
    /* dqdiv011 */ self.divide128("2.4", "-1", "-2.4", .toNearestOrEven)
    /* dqdiv012 */ self.divide128("-2.4", "1", "-2.4", .toNearestOrEven)
    /* dqdiv013 */ self.divide128("-2.4", "-1", "2.4", .toNearestOrEven)
    /* dqdiv014 */ self.divide128("2.40", "1", "2.40", .toNearestOrEven)
    /* dqdiv015 */ self.divide128("2.400", "1", "2.400", .toNearestOrEven)
    /* dqdiv016 */ self.divide128("2.4", "2", "1.2", .toNearestOrEven)
    /* dqdiv017 */ self.divide128("2.400", "2", "1.200", .toNearestOrEven)
    /* dqdiv018 */ self.divide128("2.", "2", "1", .toNearestOrEven)
    /* dqdiv019 */ self.divide128("20", "20", "1", .toNearestOrEven)
    /* dqdiv020 */ self.divide128("187", "187", "1", .toNearestOrEven)
    /* dqdiv021 */ self.divide128("5", "2", "2.5", .toNearestOrEven)
    /* dqdiv022 */ self.divide128("50", "20", "2.5", .toNearestOrEven)
    /* dqdiv023 */ self.divide128("500", "200", "2.5", .toNearestOrEven)
    /* dqdiv024 */ self.divide128("50.0", "20.0", "2.5", .toNearestOrEven)
    /* dqdiv025 */ self.divide128("5.00", "2.00", "2.5", .toNearestOrEven)
    /* dqdiv026 */ self.divide128("5", "2.0", "2.5", .toNearestOrEven)
    /* dqdiv027 */ self.divide128("5", "2.000", "2.5", .toNearestOrEven)
    /* dqdiv028 */ self.divide128("5", "0.20", "25", .toNearestOrEven)
    /* dqdiv029 */ self.divide128("5", "0.200", "25", .toNearestOrEven)
    /* dqdiv030 */ self.divide128("10", "1", "10", .toNearestOrEven)
    /* dqdiv031 */ self.divide128("100", "1", "100", .toNearestOrEven)
    /* dqdiv032 */ self.divide128("1000", "1", "1000", .toNearestOrEven)
    /* dqdiv033 */ self.divide128("1000", "100", "10", .toNearestOrEven)
    /* dqdiv035 */ self.divide128("1", "2", "0.5", .toNearestOrEven)
    /* dqdiv036 */ self.divide128("1", "4", "0.25", .toNearestOrEven)
    /* dqdiv037 */ self.divide128("1", "8", "0.125", .toNearestOrEven)
    /* dqdiv038 */ self.divide128("1", "16", "0.0625", .toNearestOrEven)
    /* dqdiv039 */ self.divide128("1", "32", "0.03125", .toNearestOrEven)
    /* dqdiv040 */ self.divide128("1", "64", "0.015625", .toNearestOrEven)
    /* dqdiv041 */ self.divide128("1", "-2", "-0.5", .toNearestOrEven)
    /* dqdiv042 */ self.divide128("1", "-4", "-0.25", .toNearestOrEven)
    /* dqdiv043 */ self.divide128("1", "-8", "-0.125", .toNearestOrEven)
    /* dqdiv044 */ self.divide128("1", "-16", "-0.0625", .toNearestOrEven)
    /* dqdiv045 */ self.divide128("1", "-32", "-0.03125", .toNearestOrEven)
    /* dqdiv046 */ self.divide128("1", "-64", "-0.015625", .toNearestOrEven)
    /* dqdiv047 */ self.divide128("-1", "2", "-0.5", .toNearestOrEven)
    /* dqdiv048 */ self.divide128("-1", "4", "-0.25", .toNearestOrEven)
    /* dqdiv049 */ self.divide128("-1", "8", "-0.125", .toNearestOrEven)
    /* dqdiv050 */ self.divide128("-1", "16", "-0.0625", .toNearestOrEven)
    /* dqdiv051 */ self.divide128("-1", "32", "-0.03125", .toNearestOrEven)
    /* dqdiv052 */ self.divide128("-1", "64", "-0.015625", .toNearestOrEven)
    /* dqdiv053 */ self.divide128("-1", "-2", "0.5", .toNearestOrEven)
    /* dqdiv054 */ self.divide128("-1", "-4", "0.25", .toNearestOrEven)
    /* dqdiv055 */ self.divide128("-1", "-8", "0.125", .toNearestOrEven)
    /* dqdiv056 */ self.divide128("-1", "-16", "0.0625", .toNearestOrEven)
    /* dqdiv057 */ self.divide128("-1", "-32", "0.03125", .toNearestOrEven)
    /* dqdiv058 */ self.divide128("-1", "-64", "0.015625", .toNearestOrEven)
    /* dqdiv060 */ self.divide128("1", "7", "0.1428571428571428571428571428571429", .toNearestOrEven, .isInexact)
    /* dqdiv061 */ self.divide128("1.2345678", "1.9876543", "0.6211179680490717123193907511985359", .toNearestOrEven, .isInexact)
    /* dqdiv067 */ self.divide128("9999999999999999999999999999999999", "1", "9999999999999999999999999999999999", .toNearestOrEven)
    /* dqdiv068 */ self.divide128("999999999999999999999999999999999", "1", "999999999999999999999999999999999", .toNearestOrEven)
    /* dqdiv069 */ self.divide128("99999999999999999999999999999999", "1", "99999999999999999999999999999999", .toNearestOrEven)
    /* dqdiv070 */ self.divide128("99999999999999999", "1", "99999999999999999", .toNearestOrEven)
    /* dqdiv071 */ self.divide128("9999999999999999", "1", "9999999999999999", .toNearestOrEven)
    /* dqdiv072 */ self.divide128("999999999999999", "1", "999999999999999", .toNearestOrEven)
    /* dqdiv073 */ self.divide128("99999999999999", "1", "99999999999999", .toNearestOrEven)
    /* dqdiv074 */ self.divide128("9999999999999", "1", "9999999999999", .toNearestOrEven)
    /* dqdiv075 */ self.divide128("999999999999", "1", "999999999999", .toNearestOrEven)
    /* dqdiv076 */ self.divide128("99999999999", "1", "99999999999", .toNearestOrEven)
    /* dqdiv077 */ self.divide128("9999999999", "1", "9999999999", .toNearestOrEven)
    /* dqdiv078 */ self.divide128("999999999", "1", "999999999", .toNearestOrEven)
    /* dqdiv079 */ self.divide128("99999999", "1", "99999999", .toNearestOrEven)
    /* dqdiv080 */ self.divide128("9999999", "1", "9999999", .toNearestOrEven)
    /* dqdiv081 */ self.divide128("999999", "1", "999999", .toNearestOrEven)
    /* dqdiv082 */ self.divide128("99999", "1", "99999", .toNearestOrEven)
    /* dqdiv083 */ self.divide128("9999", "1", "9999", .toNearestOrEven)
    /* dqdiv084 */ self.divide128("999", "1", "999", .toNearestOrEven)
    /* dqdiv085 */ self.divide128("99", "1", "99", .toNearestOrEven)
    /* dqdiv086 */ self.divide128("9", "1", "9", .toNearestOrEven)
    /* dqdiv090 */ self.divide128("0.", "1", "0", .toNearestOrEven)
    /* dqdiv091 */ self.divide128(".0", "1", "0.0", .toNearestOrEven)
    /* dqdiv092 */ self.divide128("0.00", "1", "0.00", .toNearestOrEven)
    /* dqdiv093 */ self.divide128("0.00E+9", "1", "0E+7", .toNearestOrEven)
    /* dqdiv094 */ self.divide128("0.0000E-50", "1", "0E-54", .toNearestOrEven)
    /* dqdiv095 */ self.divide128("1", "1E-8", "1E+8", .toNearestOrEven)
    /* dqdiv096 */ self.divide128("1", "1E-9", "1E+9", .toNearestOrEven)
    /* dqdiv097 */ self.divide128("1", "1E-10", "1E+10", .toNearestOrEven)
    /* dqdiv098 */ self.divide128("1", "1E-11", "1E+11", .toNearestOrEven)
    /* dqdiv099 */ self.divide128("1", "1E-12", "1E+12", .toNearestOrEven)
    /* dqdiv100 */ self.divide128("1", "1", "1", .toNearestOrEven)
    /* dqdiv101 */ self.divide128("1", "2", "0.5", .toNearestOrEven)
    /* dqdiv102 */ self.divide128("1", "3", "0.3333333333333333333333333333333333", .toNearestOrEven, .isInexact)
    /* dqdiv1021 */ self.divide128("1E0", "1E0", "1", .toNearestOrAwayFromZero)
    /* dqdiv1022 */ self.divide128("1E0", "2E0", "0.5", .toNearestOrAwayFromZero)
    /* dqdiv1023 */ self.divide128("1E0", "3E0", "0.3333333333333333333333333333333333", .toNearestOrAwayFromZero, .isInexact)
    /* dqdiv1024 */ self.divide128("100E-2", "1000E-3", "1", .toNearestOrAwayFromZero)
    /* dqdiv1025 */ self.divide128("24E-1", "2E0", "1.2", .toNearestOrAwayFromZero)
    /* dqdiv1026 */ self.divide128("2400E-3", "2E0", "1.200", .toNearestOrAwayFromZero)
    /* dqdiv1027 */ self.divide128("5E0", "2E0", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv1028 */ self.divide128("5E0", "20E-1", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv1029 */ self.divide128("5E0", "2000E-3", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv103 */ self.divide128("1", "4", "0.25", .toNearestOrEven)
    /* dqdiv1030 */ self.divide128("5E0", "2E-1", "25", .toNearestOrAwayFromZero)
    /* dqdiv1031 */ self.divide128("5E0", "20E-2", "25", .toNearestOrAwayFromZero)
    /* dqdiv1032 */ self.divide128("480E-2", "3E0", "1.60", .toNearestOrAwayFromZero)
    /* dqdiv1033 */ self.divide128("47E-1", "2E0", "2.35", .toNearestOrAwayFromZero)
    /* dqdiv104 */ self.divide128("1", "5", "0.2", .toNearestOrEven)
    /* dqdiv1041 */ self.divide128("6", "11", "0.5454545454545454545454545454545455", .toNearestOrEven, .isInexact)
    /* dqdiv105 */ self.divide128("1", "6", "0.1666666666666666666666666666666667", .toNearestOrEven, .isInexact)
    /* dqdiv1050 */ self.divide128("8.336804418094040989630006819881709E-6143", "8.336804418094040989630006819889000E-6143", "0.9999999999999999999999999999991254", .toNearestOrEven, .isInexact)
    /* dqdiv106 */ self.divide128("1", "7", "0.1428571428571428571428571428571429", .toNearestOrEven, .isInexact)
    /* dqdiv107 */ self.divide128("1", "8", "0.125", .toNearestOrEven)
    /* dqdiv108 */ self.divide128("1", "9", "0.1111111111111111111111111111111111", .toNearestOrEven, .isInexact)
    /* dqdiv109 */ self.divide128("1", "10", "0.1", .toNearestOrEven)
    /* dqdiv110 */ self.divide128("1", "1", "1", .toNearestOrEven)
    /* dqdiv111 */ self.divide128("2", "1", "2", .toNearestOrEven)
    /* dqdiv112 */ self.divide128("3", "1", "3", .toNearestOrEven)
    /* dqdiv113 */ self.divide128("4", "1", "4", .toNearestOrEven)
    /* dqdiv114 */ self.divide128("5", "1", "5", .toNearestOrEven)
    /* dqdiv115 */ self.divide128("6", "1", "6", .toNearestOrEven)
    /* dqdiv116 */ self.divide128("7", "1", "7", .toNearestOrEven)
    /* dqdiv117 */ self.divide128("8", "1", "8", .toNearestOrEven)
    /* dqdiv118 */ self.divide128("9", "1", "9", .toNearestOrEven)
    /* dqdiv119 */ self.divide128("10", "1", "10", .toNearestOrEven)
    /* dqdiv120 */ self.divide128("3E+1", "0.001", "3E+4", .toNearestOrEven)
    /* dqdiv121 */ self.divide128("2.200", "2", "1.100", .toNearestOrEven)
    /* dqdiv130 */ self.divide128("12345", "4.999", "2469.493898779755951190238047609522", .toNearestOrEven, .isInexact)
    /* dqdiv131 */ self.divide128("12345", "4.99", "2473.947895791583166332665330661323", .toNearestOrEven, .isInexact)
    /* dqdiv132 */ self.divide128("12345", "4.9", "2519.387755102040816326530612244898", .toNearestOrEven, .isInexact)
    /* dqdiv133 */ self.divide128("12345", "5", "2469", .toNearestOrEven)
    /* dqdiv134 */ self.divide128("12345", "5.1", "2420.588235294117647058823529411765", .toNearestOrEven, .isInexact)
    /* dqdiv135 */ self.divide128("12345", "5.01", "2464.071856287425149700598802395210", .toNearestOrEven, .isInexact)
    /* dqdiv136 */ self.divide128("12345", "5.001", "2468.506298740251949610077984403119", .toNearestOrEven, .isInexact)
    /* dqdiv1751 */ self.divide128("1e+4277", "1e-3311", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1752 */ self.divide128("1e+4277", "-1e-3311", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1753 */ self.divide128("-1e+4277", "1e-3311", "-Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1754 */ self.divide128("-1e+4277", "-1e-3311", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1755 */ self.divide128("1e-4277", "1e+3311", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1756 */ self.divide128("1e-4277", "-1e+3311", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1757 */ self.divide128("-1e-4277", "1e+3311", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1758 */ self.divide128("-1e-4277", "-1e+3311", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1760 */ self.divide128("1e-6069", "1e+101", "1E-6170", .toNearestOrEven)
    /* dqdiv1761 */ self.divide128("1e-6069", "1e+102", "1E-6171", .toNearestOrEven)
    /* dqdiv1762 */ self.divide128("1e-6069", "1e+103", "1E-6172", .toNearestOrEven)
    /* dqdiv1763 */ self.divide128("1e-6069", "1e+104", "1E-6173", .toNearestOrEven)
    /* dqdiv1764 */ self.divide128("1e-6069", "1e+105", "1E-6174", .toNearestOrEven)
    /* dqdiv1765 */ self.divide128("1e-6069", "1e+106", "1E-6175", .toNearestOrEven)
    /* dqdiv1766 */ self.divide128("1e-6069", "1e+107", "1E-6176", .toNearestOrEven)
    /* dqdiv1767 */ self.divide128("1e-6069", "1e+108", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1768 */ self.divide128("1e-6069", "1e+109", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1769 */ self.divide128("1e-6069", "1e+110", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1770 */ self.divide128("1e+40", "1e-6101", "1.000000000000000000000000000000E+6141", .toNearestOrEven)
    /* dqdiv1771 */ self.divide128("1e+40", "1e-6102", "1.0000000000000000000000000000000E+6142", .toNearestOrEven)
    /* dqdiv1772 */ self.divide128("1e+40", "1e-6103", "1.00000000000000000000000000000000E+6143", .toNearestOrEven)
    /* dqdiv1773 */ self.divide128("1e+40", "1e-6104", "1.000000000000000000000000000000000E+6144", .toNearestOrEven)
    /* dqdiv1774 */ self.divide128("1e+40", "1e-6105", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1775 */ self.divide128("1e+40", "1e-6106", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1776 */ self.divide128("1e+40", "1e-6107", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1777 */ self.divide128("1e+40", "1e-6108", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1778 */ self.divide128("1e+40", "1e-6109", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1779 */ self.divide128("1e+40", "1e-6110", "Infinity", .toNearestOrEven, .isInexact | .isOverflow)
    /* dqdiv1801 */ self.divide128("1.0000E-6172", "1", "1.0000E-6172", .toNearestOrEven)
    /* dqdiv1802 */ self.divide128("1.000E-6172", "1e+1", "1.000E-6173", .toNearestOrEven)
    /* dqdiv1803 */ self.divide128("1.00E-6172", "1e+2", "1.00E-6174", .toNearestOrEven)
    /* dqdiv1804 */ self.divide128("1.0E-6172", "1e+3", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1805 */ self.divide128("1.0E-6172", "1e+4", "1E-6176", .toNearestOrEven)
    /* dqdiv1806 */ self.divide128("1.3E-6172", "1e+4", "1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1807 */ self.divide128("1.5E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1808 */ self.divide128("1.7E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1809 */ self.divide128("2.3E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1810 */ self.divide128("2.5E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1811 */ self.divide128("2.7E-6172", "1e+4", "3E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1812 */ self.divide128("1.49E-6172", "1e+4", "1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1813 */ self.divide128("1.50E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1814 */ self.divide128("1.51E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1815 */ self.divide128("2.49E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1816 */ self.divide128("2.50E-6172", "1e+4", "2E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1817 */ self.divide128("2.51E-6172", "1e+4", "3E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1818 */ self.divide128("1E-6172", "1e+4", "1E-6176", .toNearestOrEven)
    /* dqdiv1819 */ self.divide128("3E-6172", "1e+5", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1820 */ self.divide128("5E-6172", "1e+5", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1821 */ self.divide128("7E-6172", "1e+5", "1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1822 */ self.divide128("9E-6172", "1e+5", "1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1823 */ self.divide128("9.9E-6172", "1e+5", "1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1824 */ self.divide128("1E-6172", "-1e+4", "-1E-6176", .toNearestOrEven)
    /* dqdiv1825 */ self.divide128("3E-6172", "-1e+5", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1826 */ self.divide128("-5E-6172", "1e+5", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1827 */ self.divide128("7E-6172", "-1e+5", "-1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1828 */ self.divide128("-9E-6172", "1e+5", "-1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1829 */ self.divide128("9.9E-6172", "-1e+5", "-1E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1830 */ self.divide128("3.0E-6172", "-1e+5", "-0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1831 */ self.divide128("1.0E-5977", "1e+200", "0E-6176", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv1832 */ self.divide128("1.0E-5977", "1e+199", "1E-6176", .toNearestOrEven)
    /* dqdiv1833 */ self.divide128("1.0E-5977", "1e+198", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1834 */ self.divide128("2.0E-5977", "2e+198", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1835 */ self.divide128("4.0E-5977", "4e+198", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1836 */ self.divide128("10.0E-5977", "10e+198", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1837 */ self.divide128("30.0E-5977", "30e+198", "1.0E-6175", .toNearestOrEven)
    /* dqdiv1838 */ self.divide128("40.0E-5982", "40e+166", "1.0E-6148", .toNearestOrEven)
    /* dqdiv1839 */ self.divide128("40.0E-5982", "40e+165", "1.0E-6147", .toNearestOrEven)
    /* dqdiv1840 */ self.divide128("40.0E-5982", "40e+164", "1.0E-6146", .toNearestOrEven)
    /* dqdiv2010 */ self.divide128("-5231195652931651968034356117118850", "-7243718664422548573203260970.34995", "722169.9095831284624736051460550680", .toNearestOrEven, .isInexact)
    /* dqdiv2011 */ self.divide128("-89584669773927.82711237350022515352", "-42077943728529635884.21142627532985", "0.000002129017291146471565928125887527266", .toNearestOrEven, .isInexact)
    /* dqdiv2012 */ self.divide128("-2.828201693360723203806974891946180E-232", "812596541221823960386384403089240.9", "-3.480450075640521320040055759125120E-265", .toNearestOrEven, .isInexact)
    /* dqdiv2013 */ self.divide128("-6442775372761069267502937539408720", "24904085056.69185465145182606089196", "-258703556388226463687701.4884719589", .toNearestOrEven, .isInexact)
    /* dqdiv2014 */ self.divide128("5.535520011272625629610079879714705", "-44343664650.57203052003068113531208", "-1.248322630728089308975940533493562E-10", .toNearestOrEven, .isInexact)
    /* dqdiv2015 */ self.divide128("65919273712517865964325.99419625010", "-314733354141381737378622515.7789054", "-0.0002094448295521490616379784758911632", .toNearestOrEven, .isInexact)
    /* dqdiv2016 */ self.divide128("-7.779172568193197107115275140431129E+759", "-140453015639.3988987652895178782143", "5.538629792161641534962774244238115E+748", .toNearestOrEven, .isInexact)
    /* dqdiv2017 */ self.divide128("644314832597569.0181226067518178797", "-115024585257425.1635759521565201075", "-5.601540150356479257367687450922795", .toNearestOrEven, .isInexact)
    /* dqdiv2018 */ self.divide128("6.898640941579611450676592553286870E-47", "-11272429881407851485163914999.25943", "-6.119923578285338689371137648319280E-75", .toNearestOrEven, .isInexact)
    /* dqdiv2019 */ self.divide128("-3591344544888727133.30819750163254", "5329395.423792795661446561090331037", "-673874662941.1968525589460533725290", .toNearestOrEven, .isInexact)
    /* dqdiv2020 */ self.divide128("-7.682356781384631313156462724425838E+747", "-6.60375855512219057281922141809940E+703", "1.163330960279556016678379128875149E+44", .toNearestOrEven, .isInexact)
    /* dqdiv2021 */ self.divide128("-4511495596596941820863224.274679699", "3365395017.263329795449661616090724", "-1340554548115304.904166888018346299", .toNearestOrEven, .isInexact)
    /* dqdiv2022 */ self.divide128("5.211164127840931517263639608151299", "164.5566381356276567012533847006453", "0.03166790587655228864478260157156510", .toNearestOrEven, .isInexact)
    /* dqdiv2023 */ self.divide128("-49891.2243893458830384077684620383", "-47179.9312961860747554053371171530", "1.057467084386767291602189656430268", .toNearestOrEven, .isInexact)
    /* dqdiv2024 */ self.divide128("15065477.47214268488077415462413353", "4366211.120892953261309529740552596", "3.450469309661227984244545513441359", .toNearestOrEven, .isInexact)
    /* dqdiv2025 */ self.divide128("1.575670269440761846109602429612644E+370", "653199649324740300.006185482643439", "2.412233795700359170904588548041481E+352", .toNearestOrEven, .isInexact)
    /* dqdiv2026 */ self.divide128("-2112422311733448924573432192.620145", "-80067206.03590693153848215848613406", "26383115089417660175.20102646756574", .toNearestOrEven, .isInexact)
    /* dqdiv2027 */ self.divide128("-67096536051279809.32218611548721839", "-869685412881941081664251990181.1049", "7.715035236584805921278566365231168E-14", .toNearestOrEven, .isInexact)
    /* dqdiv2028 */ self.divide128("-58612908548962047.21866913425488972", "-978449597531.3873665583475633831644", "59903.86085991703091236507859837023", .toNearestOrEven, .isInexact)
    /* dqdiv2029 */ self.divide128("-133032412010942.1476864138213319796", "-7.882059293498670705446528648201359E-428", "1.687787506504433064549515681693715E+441", .toNearestOrEven, .isInexact)
    /* dqdiv2030 */ self.divide128("1.83746698338966029492299716360513E+977", "-9.897926608979649951672839879128603E+154", "-1.856416051542212552042390218062458E+822", .toNearestOrEven, .isInexact)
    /* dqdiv2031 */ self.divide128("-113742475841399236307128962.1507063", "8298602.203049834732657567965262989", "-13706221006665137826.16557393919929", .toNearestOrEven, .isInexact)
    /* dqdiv2032 */ self.divide128("196.4787574650754152995941808331862", "929.6553388472318094427422117172394", "0.2113458066176526651006917922814018", .toNearestOrEven, .isInexact)
    /* dqdiv2033 */ self.divide128("71931221465.43867996282803628130350", "3838685934206426257090718.402248853", "1.873850132527423413607199513324021E-14", .toNearestOrEven, .isInexact)
    /* dqdiv2034 */ self.divide128("488.4282502289651653783596246312885", "-80.68940956806634280078706577953188", "-6.053189047280693318844801899473272", .toNearestOrEven, .isInexact)
    /* dqdiv2035 */ self.divide128("9.001764344963921754981762913247394E-162", "-8.585540973667205753734967645386919E-729", "-1.048479574271827326396012573232934E+567", .toNearestOrEven, .isInexact)
    /* dqdiv2036 */ self.divide128("-7.404133959409894743706402857145471E-828", "-51.38159929460289711134684843086265", "1.441008855516029461032061785219773E-829", .toNearestOrEven, .isInexact)
    /* dqdiv2037 */ self.divide128("2.967520235574419794048994436040717E-613", "-6252513855.91394894949879262731889", "-4.746123405656409127572998751885338E-623", .toNearestOrEven, .isInexact)
    /* dqdiv2038 */ self.divide128("-18826852654824040505.83920366765051", "-6336924877942437992590557460147340", "2.970976146546494669807886278519194E-15", .toNearestOrEven, .isInexact)
    /* dqdiv2039 */ self.divide128("-8.101406784809197604949584001735949E+561", "4.823300306948942821076681658771635E+361", "-1.679639721610839204738445747238987E+200", .toNearestOrEven, .isInexact)
    /* dqdiv2040 */ self.divide128("-6.11981977773094052331062585191723E+295", "1.507610253755339328302779005586534E+238", "-4.059285058911577244044418416044763E+57", .toNearestOrEven, .isInexact)
    /* dqdiv2041 */ self.divide128("6.472638850046815880599220534274055E-596", "-4.475233712083047516933911786159972", "-1.446324207062261745520496475778879E-596", .toNearestOrEven, .isInexact)
    /* dqdiv2042 */ self.divide128("-84438593330.71277839631144509397112", "-586684596204401664208947.4054879633", "1.439250218550041228759983937772504E-13", .toNearestOrEven, .isInexact)
    /* dqdiv2043 */ self.divide128("9.354533233294022616695815656704369E-24", "405.500390626135304252144163591746", "2.306911028827774549740571229736198E-26", .toNearestOrEven, .isInexact)
    /* dqdiv2044 */ self.divide128("985606423350210.7374876650149957881", "-36811563697.41925681866694859828794", "-26774.36990864119445335813354717711", .toNearestOrEven, .isInexact)
    /* dqdiv2045 */ self.divide128("-8.187280774177715706278002247766311E-123", "-38784124393.91212870828430001300068", "2.110987653356139147357240727794365E-133", .toNearestOrEven, .isInexact)
    /* dqdiv2046 */ self.divide128("-4.612203126350070903459245798371657E+912", "7.971562182727956290901984736800519E+64", "-5.785820922708683237098826662769748E+847", .toNearestOrEven, .isInexact)
    /* dqdiv2047 */ self.divide128("4.661015909421485298247928967977089E+888", "-6.360911253323922338737311563845581E+388", "-7.327591478321365980156654539638836E+499", .toNearestOrEven, .isInexact)
    /* dqdiv2048 */ self.divide128("9156078172903.257500003260710833030", "7.189796653262147139071634237964074E-90", "1.273482215766000994365201545096026E+102", .toNearestOrEven, .isInexact)
    /* dqdiv2049 */ self.divide128("-1.710722303327476586373477781276586E-311", "-3167561628260156837329323.729380695", "5.400754599578613984875752958645655E-336", .toNearestOrEven, .isInexact)
    /* dqdiv2050 */ self.divide128("-4.647935210881806238321616345413021E-878", "209388.5431867744648177308460639582", "-2.219765771394593733140494297388140E-883", .toNearestOrEven, .isInexact)
    /* dqdiv2051 */ self.divide128("5958.694728395760992719084781582700", "4.541510156564315632536353171846096E-746", "1.312051393253638664947852693005480E+749", .toNearestOrEven, .isInexact)
    /* dqdiv2052 */ self.divide128("-7.935732544649702175256699886872093E-489", "-7.433329073664793138998765647467971E+360", "1.067587949626076917672271619664656E-849", .toNearestOrEven, .isInexact)
    /* dqdiv2053 */ self.divide128("-2746650864601157.863589959939901350", "7.016684945507647528907184694359598E+548", "-3.914456593009309529351254950429932E-534", .toNearestOrEven, .isInexact)
    /* dqdiv2054 */ self.divide128("3605149408631197365447953.994569178", "-75614025825649082.78264864428237833", "-47678315.88472693507060063188020532", .toNearestOrEven, .isInexact)
    /* dqdiv2055 */ self.divide128("788194320921798404906375214.196349", "-6.222718148433247384932573401976337E-418", "-1.266639918634671803982222244977287E+444", .toNearestOrEven, .isInexact)
    /* dqdiv2056 */ self.divide128("5620722730534752.758208943447603211", "6.843552841168538319123000917657759E-139", "8.213164800485434666629970443739554E+153", .toNearestOrEven, .isInexact)
    /* dqdiv2057 */ self.divide128("7304534676713703938102.403949019402", "-576169.3685010935108153023803590835", "-12677756014201995.31969237144394772", .toNearestOrEven, .isInexact)
    /* dqdiv2058 */ self.divide128("8067918762.134621639254916786945547", "-8.774771480055536009105596163864758E+954", "-9.194448858836332156766764605125245E-946", .toNearestOrEven, .isInexact)
    /* dqdiv2059 */ self.divide128("8.702093454123046507578256899537563E-324", "-5.875399733016018404580201176576293E-401", "-1.481106622452052581470443526957335E+77", .toNearestOrEven, .isInexact)
    /* dqdiv2060 */ self.divide128("-41426.01662518451861386352415092356", "90.00146621684478300510769802013464", "-460.2815750287318692732067709176200", .toNearestOrEven, .isInexact)
    /* dqdiv220 */ self.divide128("391", "597", "0.6549413735343383584589614740368509", .toNearestOrEven, .isInexact)
    /* dqdiv221 */ self.divide128("391", "-597", "-0.6549413735343383584589614740368509", .toNearestOrEven, .isInexact)
    /* dqdiv222 */ self.divide128("-391", "597", "-0.6549413735343383584589614740368509", .toNearestOrEven, .isInexact)
    /* dqdiv223 */ self.divide128("-391", "-597", "0.6549413735343383584589614740368509", .toNearestOrEven, .isInexact)
    /* dqdiv270 */ self.divide128("1", "1e6144", "1E-6144", .toNearestOrEven)
    /* dqdiv271 */ self.divide128("1", "0.9e6144", "1.11111111111111111111111111111111E-6144", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv272 */ self.divide128("1", "0.99e6144", "1.01010101010101010101010101010101E-6144", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv273 */ self.divide128("1", "0.9999999999999999e6144", "1.00000000000000010000000000000001E-6144", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv274 */ self.divide128("9e6144", "1", "9.000000000000000000000000000000000E+6144", .toNearestOrEven)
    /* dqdiv275 */ self.divide128("9.9e6144", "1", "9.900000000000000000000000000000000E+6144", .toNearestOrEven)
    /* dqdiv276 */ self.divide128("9.99e6144", "1", "9.990000000000000000000000000000000E+6144", .toNearestOrEven)
    /* dqdiv277 */ self.divide128("9.999999999999999e6144", "1", "9.999999999999999000000000000000000E+6144", .toNearestOrEven)
    /* dqdiv278 */ self.divide128("1", "0.9999999999999999999999999999999999e6144", "1.00000000000000000000000000000000E-6144", .toNearestOrEven, .isInexact | .isUnderflow)
    /* dqdiv279 */ self.divide128("9.999999999999999999999999999999999e6144", "1", "9.999999999999999999999999999999999E+6144", .toNearestOrEven)
    /* dqdiv301 */ self.divide128("0", "7", "0", .toNearestOrEven)
    /* dqdiv302 */ self.divide128("0", "7E-5", "0E+5", .toNearestOrEven)
    /* dqdiv303 */ self.divide128("0", "7E-1", "0E+1", .toNearestOrEven)
    /* dqdiv304 */ self.divide128("0", "7E+1", "0.0", .toNearestOrEven)
    /* dqdiv305 */ self.divide128("0", "7E+5", "0.00000", .toNearestOrEven)
    /* dqdiv306 */ self.divide128("0", "7E+6", "0.000000", .toNearestOrEven)
    /* dqdiv307 */ self.divide128("0", "7E+7", "0E-7", .toNearestOrEven)
    /* dqdiv308 */ self.divide128("0", "70E-5", "0E+5", .toNearestOrEven)
    /* dqdiv309 */ self.divide128("0", "70E-1", "0E+1", .toNearestOrEven)
    /* dqdiv310 */ self.divide128("0", "70E+0", "0", .toNearestOrEven)
    /* dqdiv311 */ self.divide128("0", "70E+1", "0.0", .toNearestOrEven)
    /* dqdiv312 */ self.divide128("0", "70E+5", "0.00000", .toNearestOrEven)
    /* dqdiv313 */ self.divide128("0", "70E+6", "0.000000", .toNearestOrEven)
    /* dqdiv314 */ self.divide128("0", "70E+7", "0E-7", .toNearestOrEven)
    /* dqdiv315 */ self.divide128("0", "700E-5", "0E+5", .toNearestOrEven)
    /* dqdiv316 */ self.divide128("0", "700E-1", "0E+1", .toNearestOrEven)
    /* dqdiv317 */ self.divide128("0", "700E+0", "0", .toNearestOrEven)
    /* dqdiv318 */ self.divide128("0", "700E+1", "0.0", .toNearestOrEven)
    /* dqdiv319 */ self.divide128("0", "700E+5", "0.00000", .toNearestOrEven)
    /* dqdiv320 */ self.divide128("0", "700E+6", "0.000000", .toNearestOrEven)
    /* dqdiv321 */ self.divide128("0", "700E+7", "0E-7", .toNearestOrEven)
    /* dqdiv322 */ self.divide128("0", "700E+77", "0E-77", .toNearestOrEven)
    /* dqdiv331 */ self.divide128("0E-3", "7E-5", "0E+2", .toNearestOrEven)
    /* dqdiv332 */ self.divide128("0E-3", "7E-1", "0.00", .toNearestOrEven)
    /* dqdiv333 */ self.divide128("0E-3", "7E+1", "0.0000", .toNearestOrEven)
    /* dqdiv334 */ self.divide128("0E-3", "7E+5", "0E-8", .toNearestOrEven)
    /* dqdiv335 */ self.divide128("0E-1", "7E-5", "0E+4", .toNearestOrEven)
    /* dqdiv336 */ self.divide128("0E-1", "7E-1", "0", .toNearestOrEven)
    /* dqdiv337 */ self.divide128("0E-1", "7E+1", "0.00", .toNearestOrEven)
    /* dqdiv338 */ self.divide128("0E-1", "7E+5", "0.000000", .toNearestOrEven)
    /* dqdiv339 */ self.divide128("0E+1", "7E-5", "0E+6", .toNearestOrEven)
    /* dqdiv340 */ self.divide128("0E+1", "7E-1", "0E+2", .toNearestOrEven)
    /* dqdiv341 */ self.divide128("0E+1", "7E+1", "0", .toNearestOrEven)
    /* dqdiv342 */ self.divide128("0E+1", "7E+5", "0.0000", .toNearestOrEven)
    /* dqdiv343 */ self.divide128("0E+3", "7E-5", "0E+8", .toNearestOrEven)
    /* dqdiv344 */ self.divide128("0E+3", "7E-1", "0E+4", .toNearestOrEven)
    /* dqdiv345 */ self.divide128("0E+3", "7E+1", "0E+2", .toNearestOrEven)
    /* dqdiv346 */ self.divide128("0E+3", "7E+5", "0.00", .toNearestOrEven)
    /* dqdiv4001 */ self.divide128("2003100352770753969878925664524900", "2003100352770753969878925664497824", "1.000000000000000000000000000013517", .toNearestOrEven, .isInexact)
    /* dqdiv4002 */ self.divide128("4817785793916490652579552318371645", "4817785793916490652579552318362097", "1.000000000000000000000000000001982", .toNearestOrEven, .isInexact)
    /* dqdiv4003 */ self.divide128("8299187410920067325648068439560282", "8299187410920067325648068439591159", "0.9999999999999999999999999999962795", .toNearestOrEven, .isInexact)
    /* dqdiv4004 */ self.divide128("5641088455897407044544461785365899", "5641088455897407044544461785389965", "0.9999999999999999999999999999957338", .toNearestOrEven, .isInexact)
    /* dqdiv4005 */ self.divide128("5752274694706545359326361313490424", "5752274694706545359326361313502723", "0.9999999999999999999999999999978619", .toNearestOrEven, .isInexact)
    /* dqdiv4006 */ self.divide128("6762079477373670594829319346099665", "6762079477373670594829319346132579", "0.9999999999999999999999999999951326", .toNearestOrEven, .isInexact)
    /* dqdiv4007 */ self.divide128("7286425153691890341633023222602916", "7286425153691890341633023222606556", "0.9999999999999999999999999999995004", .toNearestOrEven, .isInexact)
    /* dqdiv4008 */ self.divide128("9481233991901305727648306421946655", "9481233991901305727648306421919124", "1.000000000000000000000000000002904", .toNearestOrEven, .isInexact)
    /* dqdiv4009 */ self.divide128("4282053941893951742029444065614311", "4282053941893951742029444065583077", "1.000000000000000000000000000007294", .toNearestOrEven, .isInexact)
    /* dqdiv4010 */ self.divide128("626888225441250639741781850338695", "626888225441250639741781850327299", "1.000000000000000000000000000018179", .toNearestOrEven, .isInexact)
    /* dqdiv4011 */ self.divide128("3860973649222028009456598604468547", "3860973649222028009456598604476849", "0.9999999999999999999999999999978498", .toNearestOrEven, .isInexact)
    /* dqdiv4012 */ self.divide128("4753157080127468127908060607821839", "4753157080127468127908060607788379", "1.000000000000000000000000000007040", .toNearestOrEven, .isInexact)
    /* dqdiv4013 */ self.divide128("552448546203754062805706277880419", "552448546203754062805706277881903", "0.9999999999999999999999999999973138", .toNearestOrEven, .isInexact)
    /* dqdiv4014 */ self.divide128("8405954527952158455323713728917395", "8405954527952158455323713728933866", "0.9999999999999999999999999999980406", .toNearestOrEven, .isInexact)
    /* dqdiv4015 */ self.divide128("7554096502235321142555802238016116", "7554096502235321142555802238026546", "0.9999999999999999999999999999986193", .toNearestOrEven, .isInexact)
    /* dqdiv4016 */ self.divide128("4053257674127518606871054934746782", "4053257674127518606871054934767355", "0.9999999999999999999999999999949243", .toNearestOrEven, .isInexact)
    /* dqdiv4017 */ self.divide128("7112419420755090454716888844011582", "7112419420755090454716888844038105", "0.9999999999999999999999999999962709", .toNearestOrEven, .isInexact)
    /* dqdiv4018 */ self.divide128("3132302137520072728164549730911846", "3132302137520072728164549730908416", "1.000000000000000000000000000001095", .toNearestOrEven, .isInexact)
    /* dqdiv4019 */ self.divide128("4788374045841416355706715048161013", "4788374045841416355706715048190077", "0.9999999999999999999999999999939303", .toNearestOrEven, .isInexact)
    /* dqdiv4020 */ self.divide128("9466021636047630218238075099510597", "9466021636047630218238075099484053", "1.000000000000000000000000000002804", .toNearestOrEven, .isInexact)
    /* dqdiv4021 */ self.divide128("912742745646765625597399692138650", "912742745646765625597399692139042", "0.9999999999999999999999999999995705", .toNearestOrEven, .isInexact)
    /* dqdiv4022 */ self.divide128("9508402742933643208806264897188504", "9508402742933643208806264897195973", "0.9999999999999999999999999999992145", .toNearestOrEven, .isInexact)
    /* dqdiv4023 */ self.divide128("1186956795727233704962361914360895", "1186956795727233704962361914329577", "1.000000000000000000000000000026385", .toNearestOrEven, .isInexact)
    /* dqdiv4024 */ self.divide128("5972210268839014812696916170967938", "5972210268839014812696916170954974", "1.000000000000000000000000000002171", .toNearestOrEven, .isInexact)
    /* dqdiv4025 */ self.divide128("2303801625521619930894460139793140", "2303801625521619930894460139799643", "0.9999999999999999999999999999971773", .toNearestOrEven, .isInexact)
    /* dqdiv4026 */ self.divide128("6022231560002898264777393473966595", "6022231560002898264777393473947198", "1.000000000000000000000000000003221", .toNearestOrEven, .isInexact)
    /* dqdiv4027 */ self.divide128("8426148335801396199969346032210893", "8426148335801396199969346032203179", "1.000000000000000000000000000000915", .toNearestOrEven, .isInexact)
    /* dqdiv4028 */ self.divide128("8812278947028784637382847098411749", "8812278947028784637382847098385317", "1.000000000000000000000000000002999", .toNearestOrEven, .isInexact)
    /* dqdiv4029 */ self.divide128("8145282002348367383264197170116146", "8145282002348367383264197170083988", "1.000000000000000000000000000003948", .toNearestOrEven, .isInexact)
    /* dqdiv4030 */ self.divide128("6821577571876840153123510107387026", "6821577571876840153123510107418008", "0.9999999999999999999999999999954582", .toNearestOrEven, .isInexact)
    /* dqdiv4031 */ self.divide128("9018555319518966970480565482023720", "9018555319518966970480565482013346", "1.000000000000000000000000000001150", .toNearestOrEven, .isInexact)
    /* dqdiv4032 */ self.divide128("4602155712998228449640717252788864", "4602155712998228449640717252818502", "0.9999999999999999999999999999935600", .toNearestOrEven, .isInexact)
    /* dqdiv4033 */ self.divide128("6675607481522785614506828292264472", "6675607481522785614506828292277100", "0.9999999999999999999999999999981083", .toNearestOrEven, .isInexact)
    /* dqdiv4034 */ self.divide128("4015881516871833897766945836264472", "4015881516871833897766945836262645", "1.000000000000000000000000000000455", .toNearestOrEven, .isInexact)
    /* dqdiv4035 */ self.divide128("1415580205933411837595459716910365", "1415580205933411837595459716880139", "1.000000000000000000000000000021352", .toNearestOrEven, .isInexact)
    /* dqdiv4036 */ self.divide128("9432968297069542816752035276361552", "9432968297069542816752035276353054", "1.000000000000000000000000000000901", .toNearestOrEven, .isInexact)
    /* dqdiv4037 */ self.divide128("4799319591303848500532766682140658", "4799319591303848500532766682172655", "0.9999999999999999999999999999933330", .toNearestOrEven, .isInexact)
    /* dqdiv4038 */ self.divide128("316854270732839529790584284987472", "316854270732839529790584285004832", "0.9999999999999999999999999999452114", .toNearestOrEven, .isInexact)
    /* dqdiv4039 */ self.divide128("3598981300592490427826027975697415", "3598981300592490427826027975686712", "1.000000000000000000000000000002974", .toNearestOrEven, .isInexact)
    /* dqdiv4040 */ self.divide128("1664315435694461371155800682196520", "1664315435694461371155800682195617", "1.000000000000000000000000000000543", .toNearestOrEven, .isInexact)
    /* dqdiv4041 */ self.divide128("1680872316531128890102855316510581", "1680872316531128890102855316495545", "1.000000000000000000000000000008945", .toNearestOrEven, .isInexact)
    /* dqdiv4042 */ self.divide128("9881274879566405475755499281644730", "9881274879566405475755499281615743", "1.000000000000000000000000000002934", .toNearestOrEven, .isInexact)
    /* dqdiv4043 */ self.divide128("4737225957717466960447204232279216", "4737225957717466960447204232277452", "1.000000000000000000000000000000372", .toNearestOrEven, .isInexact)
    /* dqdiv4044 */ self.divide128("2482097379414867061213319346418288", "2482097379414867061213319346387936", "1.000000000000000000000000000012228", .toNearestOrEven, .isInexact)
    /* dqdiv4045 */ self.divide128("7406977595233762723576434122161868", "7406977595233762723576434122189042", "0.9999999999999999999999999999963313", .toNearestOrEven, .isInexact)
    /* dqdiv4046 */ self.divide128("228782057757566047086593281773577", "228782057757566047086593281769727", "1.000000000000000000000000000016828", .toNearestOrEven, .isInexact)
    /* dqdiv4047 */ self.divide128("2956594270240579648823270540367653", "2956594270240579648823270540368556", "0.9999999999999999999999999999996946", .toNearestOrEven, .isInexact)
    /* dqdiv4048 */ self.divide128("6326964098897620620534136767634340", "6326964098897620620534136767619339", "1.000000000000000000000000000002371", .toNearestOrEven, .isInexact)
    /* dqdiv4049 */ self.divide128("414586440456590215247002678327800", "414586440456590215247002678316922", "1.000000000000000000000000000026238", .toNearestOrEven, .isInexact)
    /* dqdiv4050 */ self.divide128("7364552208570039386220505636779125", "7364552208570039386220505636803548", "0.9999999999999999999999999999966837", .toNearestOrEven, .isInexact)
    /* dqdiv4051 */ self.divide128("5626266749902369710022824950590056", "5626266749902369710022824950591008", "0.9999999999999999999999999999998308", .toNearestOrEven, .isInexact)
    /* dqdiv4052 */ self.divide128("4863278293916197454987481343460484", "4863278293916197454987481343442522", "1.000000000000000000000000000003693", .toNearestOrEven, .isInexact)
    /* dqdiv4053 */ self.divide128("1170713582030637359713249796835483", "1170713582030637359713249796823345", "1.000000000000000000000000000010368", .toNearestOrEven, .isInexact)
    /* dqdiv4054 */ self.divide128("9838062494725965667776326556052931", "9838062494725965667776326556061002", "0.9999999999999999999999999999991796", .toNearestOrEven, .isInexact)
    /* dqdiv4055 */ self.divide128("4071388731298861093005687091498922", "4071388731298861093005687091498278", "1.000000000000000000000000000000158", .toNearestOrEven, .isInexact)
    /* dqdiv4056 */ self.divide128("8753155722324706795855038590272526", "8753155722324706795855038590276656", "0.9999999999999999999999999999995282", .toNearestOrEven, .isInexact)
    /* dqdiv4057 */ self.divide128("4399941911533273418844742658240485", "4399941911533273418844742658219891", "1.000000000000000000000000000004681", .toNearestOrEven, .isInexact)
    /* dqdiv4058 */ self.divide128("4127884159949503677776430620050269", "4127884159949503677776430620026091", "1.000000000000000000000000000005857", .toNearestOrEven, .isInexact)
    /* dqdiv4059 */ self.divide128("5536160822360800067042528317438808", "5536160822360800067042528317450687", "0.9999999999999999999999999999978543", .toNearestOrEven, .isInexact)
    /* dqdiv4060 */ self.divide128("3973234998468664936671088237710246", "3973234998468664936671088237741886", "0.9999999999999999999999999999920367", .toNearestOrEven, .isInexact)
    /* dqdiv4061 */ self.divide128("9824855935638263593410444142327358", "9824855935638263593410444142328576", "0.9999999999999999999999999999998760", .toNearestOrEven, .isInexact)
    /* dqdiv4062 */ self.divide128("5917078517340218131867327300814867", "5917078517340218131867327300788701", "1.000000000000000000000000000004422", .toNearestOrEven, .isInexact)
    /* dqdiv4063 */ self.divide128("4354236601830544882286139612521362", "4354236601830544882286139612543223", "0.9999999999999999999999999999949794", .toNearestOrEven, .isInexact)
    /* dqdiv4064 */ self.divide128("8058474772375259017342110013891294", "8058474772375259017342110013906792", "0.9999999999999999999999999999980768", .toNearestOrEven, .isInexact)
    /* dqdiv4065 */ self.divide128("5519604020981748170517093746166328", "5519604020981748170517093746181763", "0.9999999999999999999999999999972036", .toNearestOrEven, .isInexact)
    /* dqdiv4066 */ self.divide128("1502130966879805458831323782443139", "1502130966879805458831323782412213", "1.000000000000000000000000000020588", .toNearestOrEven, .isInexact)
    /* dqdiv4067 */ self.divide128("562795633719481212915159787980270", "562795633719481212915159788007066", "0.9999999999999999999999999999523877", .toNearestOrEven, .isInexact)
    /* dqdiv4068 */ self.divide128("6584743324494664273941281557268878", "6584743324494664273941281557258945", "1.000000000000000000000000000001508", .toNearestOrEven, .isInexact)
    /* dqdiv4069 */ self.divide128("3632000327285743997976431109416500", "3632000327285743997976431109408107", "1.000000000000000000000000000002311", .toNearestOrEven, .isInexact)
    /* dqdiv4070 */ self.divide128("1145827237315430089388953838561450", "1145827237315430089388953838527332", "1.000000000000000000000000000029776", .toNearestOrEven, .isInexact)
    /* dqdiv4071 */ self.divide128("8874431010357691869725372317350380", "8874431010357691869725372317316472", "1.000000000000000000000000000003821", .toNearestOrEven, .isInexact)
    /* dqdiv4072 */ self.divide128("992948718902804648119753141202196", "992948718902804648119753141235222", "0.9999999999999999999999999999667395", .toNearestOrEven, .isInexact)
    /* dqdiv4073 */ self.divide128("2522735183374218505142417265439989", "2522735183374218505142417265453779", "0.9999999999999999999999999999945337", .toNearestOrEven, .isInexact)
    /* dqdiv4074 */ self.divide128("2668419161912936508006872303501052", "2668419161912936508006872303471036", "1.000000000000000000000000000011249", .toNearestOrEven, .isInexact)
    /* dqdiv4075 */ self.divide128("3036169085665186712590941111775092", "3036169085665186712590941111808846", "0.9999999999999999999999999999888827", .toNearestOrEven, .isInexact)
    /* dqdiv4076 */ self.divide128("9441634604917231638508898934006147", "9441634604917231638508898934000288", "1.000000000000000000000000000000621", .toNearestOrEven, .isInexact)
    /* dqdiv4077 */ self.divide128("2677301353164377091111458811839190", "2677301353164377091111458811867722", "0.9999999999999999999999999999893430", .toNearestOrEven, .isInexact)
    /* dqdiv4078 */ self.divide128("6844979203112066166583765857171426", "6844979203112066166583765857189682", "0.9999999999999999999999999999973329", .toNearestOrEven, .isInexact)
    /* dqdiv4079 */ self.divide128("2220337435141796724323783960231661", "2220337435141796724323783960208778", "1.000000000000000000000000000010306", .toNearestOrEven, .isInexact)
    /* dqdiv4080 */ self.divide128("6447424700019783931569996989561380", "6447424700019783931569996989572454", "0.9999999999999999999999999999982824", .toNearestOrEven, .isInexact)
    /* dqdiv4081 */ self.divide128("7512856762696607119847092195587180", "7512856762696607119847092195557346", "1.000000000000000000000000000003971", .toNearestOrEven, .isInexact)
    /* dqdiv4082 */ self.divide128("7395261981193960399087819077237482", "7395261981193960399087819077242487", "0.9999999999999999999999999999993232", .toNearestOrEven, .isInexact)
    /* dqdiv4083 */ self.divide128("2253442467682584035792724884376735", "2253442467682584035792724884407178", "0.9999999999999999999999999999864904", .toNearestOrEven, .isInexact)
    /* dqdiv4084 */ self.divide128("8153138680300213135577336466190997", "8153138680300213135577336466220607", "0.9999999999999999999999999999963683", .toNearestOrEven, .isInexact)
    /* dqdiv4085 */ self.divide128("4668731252254148074041022681801390", "4668731252254148074041022681778101", "1.000000000000000000000000000004988", .toNearestOrEven, .isInexact)
    /* dqdiv4086 */ self.divide128("6078404557993669696040425501815056", "6078404557993669696040425501797612", "1.000000000000000000000000000002870", .toNearestOrEven, .isInexact)
    /* dqdiv4087 */ self.divide128("2306352359874261623223356878316278", "2306352359874261623223356878335612", "0.9999999999999999999999999999916171", .toNearestOrEven, .isInexact)
    /* dqdiv4088 */ self.divide128("3264842186668480362900909564091908", "3264842186668480362900909564058658", "1.000000000000000000000000000010184", .toNearestOrEven, .isInexact)
    /* dqdiv4089 */ self.divide128("6971985047279636878957959608612204", "6971985047279636878957959608615088", "0.9999999999999999999999999999995863", .toNearestOrEven, .isInexact)
    /* dqdiv4090 */ self.divide128("5262810889952721235466445973816257", "5262810889952721235466445973783077", "1.000000000000000000000000000006305", .toNearestOrEven, .isInexact)
    /* dqdiv4091 */ self.divide128("7947944731035267178548357070080288", "7947944731035267178548357070061339", "1.000000000000000000000000000002384", .toNearestOrEven, .isInexact)
    /* dqdiv4092 */ self.divide128("5071808908395375108383035800443229", "5071808908395375108383035800412429", "1.000000000000000000000000000006073", .toNearestOrEven, .isInexact)
    /* dqdiv4093 */ self.divide128("2043146542084503655511507209262969", "2043146542084503655511507209249263", "1.000000000000000000000000000006708", .toNearestOrEven, .isInexact)
    /* dqdiv4094 */ self.divide128("4097632735384534181661959731264802", "4097632735384534181661959731234499", "1.000000000000000000000000000007395", .toNearestOrEven, .isInexact)
    /* dqdiv4095 */ self.divide128("3061477642831387489729464587044430", "3061477642831387489729464587059452", "0.9999999999999999999999999999950932", .toNearestOrEven, .isInexact)
    /* dqdiv4096 */ self.divide128("3429854941039776159498802936252638", "3429854941039776159498802936246415", "1.000000000000000000000000000001814", .toNearestOrEven, .isInexact)
    /* dqdiv4097 */ self.divide128("4874324979578599700024133278284545", "4874324979578599700024133278262131", "1.000000000000000000000000000004598", .toNearestOrEven, .isInexact)
    /* dqdiv4098 */ self.divide128("5701652369691833541455978515820882", "5701652369691833541455978515834854", "0.9999999999999999999999999999975495", .toNearestOrEven, .isInexact)
    /* dqdiv4099 */ self.divide128("2928205728402945266953255632343113", "2928205728402945266953255632373794", "0.9999999999999999999999999999895223", .toNearestOrEven, .isInexact)
    /* dqdiv441 */ self.divide128("12345678000", "1", "12345678000", .toNearestOrEven)
    /* dqdiv442 */ self.divide128("1", "12345678000", "8.100000664200054464404466081166219E-11", .toNearestOrEven, .isInexact)
    /* dqdiv443 */ self.divide128("1234567800", "1", "1234567800", .toNearestOrEven)
    /* dqdiv444 */ self.divide128("1", "1234567800", "8.100000664200054464404466081166219E-10", .toNearestOrEven, .isInexact)
    /* dqdiv445 */ self.divide128("1234567890", "1", "1234567890", .toNearestOrEven)
    /* dqdiv446 */ self.divide128("1", "1234567890", "8.100000073710000670761006103925156E-10", .toNearestOrEven, .isInexact)
    /* dqdiv447 */ self.divide128("1234567891", "1", "1234567891", .toNearestOrEven)
    /* dqdiv448 */ self.divide128("1", "1234567891", "8.100000067149000556665214614754629E-10", .toNearestOrEven, .isInexact)
    /* dqdiv449 */ self.divide128("12345678901", "1", "12345678901", .toNearestOrEven)
    /* dqdiv450 */ self.divide128("1", "12345678901", "8.100000073053900658873130042376760E-11", .toNearestOrEven, .isInexact)
    /* dqdiv451 */ self.divide128("1234567896", "1", "1234567896", .toNearestOrEven)
    /* dqdiv452 */ self.divide128("1", "1234567896", "8.100000034344000145618560617422697E-10", .toNearestOrEven, .isInexact)
    /* dqdiv453 */ self.divide128("1e+1", "1", "1E+1", .toNearestOrEven)
    /* dqdiv454 */ self.divide128("1e+1", "1.0", "1E+1", .toNearestOrEven)
    /* dqdiv455 */ self.divide128("1e+1", "1.00", "1E+1", .toNearestOrEven)
    /* dqdiv456 */ self.divide128("1e+2", "2", "5E+1", .toNearestOrEven)
    /* dqdiv457 */ self.divide128("1e+2", "2.0", "5E+1", .toNearestOrEven)
    /* dqdiv458 */ self.divide128("1e+2", "2.00", "5E+1", .toNearestOrEven)
    /* dqdiv460 */ self.divide128("3e0", "2e0", "1.5", .toNearestOrEven)
    /* dqdiv461 */ self.divide128("30e-1", "2e0", "1.5", .toNearestOrEven)
    /* dqdiv462 */ self.divide128("300e-2", "2e0", "1.50", .toNearestOrEven)
    /* dqdiv464 */ self.divide128("3000e-3", "2e0", "1.500", .toNearestOrEven)
    /* dqdiv465 */ self.divide128("3e0", "20e-1", "1.5", .toNearestOrEven)
    /* dqdiv466 */ self.divide128("30e-1", "20e-1", "1.5", .toNearestOrEven)
    /* dqdiv467 */ self.divide128("300e-2", "20e-1", "1.5", .toNearestOrEven)
    /* dqdiv468 */ self.divide128("3000e-3", "20e-1", "1.50", .toNearestOrEven)
    /* dqdiv469 */ self.divide128("3e0", "200e-2", "1.5", .toNearestOrEven)
    /* dqdiv470 */ self.divide128("30e-1", "200e-2", "1.5", .toNearestOrEven)
    /* dqdiv471 */ self.divide128("300e-2", "200e-2", "1.5", .toNearestOrEven)
    /* dqdiv472 */ self.divide128("3000e-3", "200e-2", "1.5", .toNearestOrEven)
    /* dqdiv473 */ self.divide128("3e0", "2000e-3", "1.5", .toNearestOrEven)
    /* dqdiv474 */ self.divide128("30e-1", "2000e-3", "1.5", .toNearestOrEven)
    /* dqdiv475 */ self.divide128("300e-2", "2000e-3", "1.5", .toNearestOrEven)
    /* dqdiv476 */ self.divide128("3000e-3", "2000e-3", "1.5", .toNearestOrEven)
    /* dqdiv480 */ self.divide128("1", "1.0E+33", "1E-33", .toNearestOrEven)
    /* dqdiv481 */ self.divide128("1", "10E+33", "1E-34", .toNearestOrEven)
    /* dqdiv482 */ self.divide128("1", "1.0E-33", "1E+33", .toNearestOrEven)
    /* dqdiv483 */ self.divide128("1", "10E-33", "1E+32", .toNearestOrEven)
    /* dqdiv484 */ self.divide128("0e5", "1e3", "0E+2", .toNearestOrEven)
    /* dqdiv485 */ self.divide128("0e5", "2e3", "0E+2", .toNearestOrEven)
    /* dqdiv486 */ self.divide128("0e5", "10e2", "0E+3", .toNearestOrEven)
    /* dqdiv487 */ self.divide128("0e5", "20e2", "0E+3", .toNearestOrEven)
    /* dqdiv488 */ self.divide128("0e5", "100e1", "0E+4", .toNearestOrEven)
    /* dqdiv489 */ self.divide128("0e5", "200e1", "0E+4", .toNearestOrEven)
    /* dqdiv491 */ self.divide128("1e5", "1e3", "1E+2", .toNearestOrEven)
    /* dqdiv492 */ self.divide128("1e5", "2e3", "5E+1", .toNearestOrEven)
    /* dqdiv493 */ self.divide128("1e5", "10e2", "1E+2", .toNearestOrEven)
    /* dqdiv494 */ self.divide128("1e5", "20e2", "5E+1", .toNearestOrEven)
    /* dqdiv495 */ self.divide128("1e5", "100e1", "1E+2", .toNearestOrEven)
    /* dqdiv496 */ self.divide128("1e5", "200e1", "5E+1", .toNearestOrEven)
    /* dqdiv497 */ self.divide128("0E+6108", "1000E-33", "0E+6111", .toNearestOrAwayFromZero)
    /* dqdiv498 */ self.divide128("0E-6170", "1000E+33", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv500 */ self.divide128("1", "9.9", "0.1010101010101010101010101010101010", .toNearestOrAwayFromZero, .isInexact)
    /* dqdiv501 */ self.divide128("1", "9.09", "0.1100110011001100110011001100110011", .toNearestOrAwayFromZero, .isInexact)
    /* dqdiv502 */ self.divide128("1", "9.009", "0.1110001110001110001110001110001110", .toNearestOrAwayFromZero, .isInexact)
    /* dqdiv511 */ self.divide128("1", "2", "0.5", .toNearestOrAwayFromZero)
    /* dqdiv512 */ self.divide128("1.0", "2", "0.5", .toNearestOrAwayFromZero)
    /* dqdiv513 */ self.divide128("1.00", "2", "0.50", .toNearestOrAwayFromZero)
    /* dqdiv514 */ self.divide128("1.000", "2", "0.500", .toNearestOrAwayFromZero)
    /* dqdiv515 */ self.divide128("1.0000", "2", "0.5000", .toNearestOrAwayFromZero)
    /* dqdiv516 */ self.divide128("1.00000", "2", "0.50000", .toNearestOrAwayFromZero)
    /* dqdiv517 */ self.divide128("1.000000", "2", "0.500000", .toNearestOrAwayFromZero)
    /* dqdiv518 */ self.divide128("1.0000000", "2", "0.5000000", .toNearestOrAwayFromZero)
    /* dqdiv519 */ self.divide128("1.00", "2.00", "0.5", .toNearestOrAwayFromZero)
    /* dqdiv521 */ self.divide128("2", "1", "2", .toNearestOrAwayFromZero)
    /* dqdiv522 */ self.divide128("2", "1.0", "2", .toNearestOrAwayFromZero)
    /* dqdiv523 */ self.divide128("2", "1.00", "2", .toNearestOrAwayFromZero)
    /* dqdiv524 */ self.divide128("2", "1.000", "2", .toNearestOrAwayFromZero)
    /* dqdiv525 */ self.divide128("2", "1.0000", "2", .toNearestOrAwayFromZero)
    /* dqdiv526 */ self.divide128("2", "1.00000", "2", .toNearestOrAwayFromZero)
    /* dqdiv527 */ self.divide128("2", "1.000000", "2", .toNearestOrAwayFromZero)
    /* dqdiv528 */ self.divide128("2", "1.0000000", "2", .toNearestOrAwayFromZero)
    /* dqdiv529 */ self.divide128("2.00", "1.00", "2", .toNearestOrAwayFromZero)
    /* dqdiv530 */ self.divide128("2.40", "2", "1.20", .toNearestOrAwayFromZero)
    /* dqdiv531 */ self.divide128("2.40", "4", "0.60", .toNearestOrAwayFromZero)
    /* dqdiv532 */ self.divide128("2.40", "10", "0.24", .toNearestOrAwayFromZero)
    /* dqdiv533 */ self.divide128("2.40", "2.0", "1.2", .toNearestOrAwayFromZero)
    /* dqdiv534 */ self.divide128("2.40", "4.0", "0.6", .toNearestOrAwayFromZero)
    /* dqdiv535 */ self.divide128("2.40", "10.0", "0.24", .toNearestOrAwayFromZero)
    /* dqdiv536 */ self.divide128("2.40", "2.00", "1.2", .toNearestOrAwayFromZero)
    /* dqdiv537 */ self.divide128("2.40", "4.00", "0.6", .toNearestOrAwayFromZero)
    /* dqdiv538 */ self.divide128("2.40", "10.00", "0.24", .toNearestOrAwayFromZero)
    /* dqdiv539 */ self.divide128("0.9", "0.1", "9", .toNearestOrAwayFromZero)
    /* dqdiv540 */ self.divide128("0.9", "0.01", "9E+1", .toNearestOrAwayFromZero)
    /* dqdiv541 */ self.divide128("0.9", "0.001", "9E+2", .toNearestOrAwayFromZero)
    /* dqdiv542 */ self.divide128("5", "2", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv543 */ self.divide128("5", "2.0", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv544 */ self.divide128("5", "2.00", "2.5", .toNearestOrAwayFromZero)
    /* dqdiv545 */ self.divide128("5", "20", "0.25", .toNearestOrAwayFromZero)
    /* dqdiv546 */ self.divide128("5", "20.0", "0.25", .toNearestOrAwayFromZero)
    /* dqdiv547 */ self.divide128("2.400", "2", "1.200", .toNearestOrAwayFromZero)
    /* dqdiv548 */ self.divide128("2.400", "2.0", "1.20", .toNearestOrAwayFromZero)
    /* dqdiv549 */ self.divide128("2.400", "2.400", "1", .toNearestOrAwayFromZero)
    /* dqdiv550 */ self.divide128("240", "1", "240", .toNearestOrAwayFromZero)
    /* dqdiv551 */ self.divide128("240", "10", "24", .toNearestOrAwayFromZero)
    /* dqdiv552 */ self.divide128("240", "100", "2.4", .toNearestOrAwayFromZero)
    /* dqdiv553 */ self.divide128("240", "1000", "0.24", .toNearestOrAwayFromZero)
    /* dqdiv554 */ self.divide128("2400", "1", "2400", .toNearestOrAwayFromZero)
    /* dqdiv555 */ self.divide128("2400", "10", "240", .toNearestOrAwayFromZero)
    /* dqdiv556 */ self.divide128("2400", "100", "24", .toNearestOrAwayFromZero)
    /* dqdiv557 */ self.divide128("2400", "1000", "2.4", .toNearestOrAwayFromZero)
    /* dqdiv600 */ self.divide128("2.4E+9", "2", "1.2E+9", .toNearestOrAwayFromZero)
    /* dqdiv601 */ self.divide128("2.40E+9", "2", "1.20E+9", .toNearestOrAwayFromZero)
    /* dqdiv602 */ self.divide128("2.400E+9", "2", "1.200E+9", .toNearestOrAwayFromZero)
    /* dqdiv603 */ self.divide128("2.4000E+9", "2", "1.2000E+9", .toNearestOrAwayFromZero)
    /* dqdiv604 */ self.divide128("24E+8", "2", "1.2E+9", .toNearestOrAwayFromZero)
    /* dqdiv605 */ self.divide128("240E+7", "2", "1.20E+9", .toNearestOrAwayFromZero)
    /* dqdiv606 */ self.divide128("2400E+6", "2", "1.200E+9", .toNearestOrAwayFromZero)
    /* dqdiv607 */ self.divide128("24000E+5", "2", "1.2000E+9", .toNearestOrAwayFromZero)
    /* dqdiv731 */ self.divide128("5.00", "1E-3", "5.00E+3", .toNearestOrAwayFromZero)
    /* dqdiv732 */ self.divide128("00.00", "0.000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv733 */ self.divide128("00.00", "0E-3", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv734 */ self.divide128("0", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv735 */ self.divide128("-0", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv736 */ self.divide128("-0", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv741 */ self.divide128("0", "-1", "-0", .toNearestOrAwayFromZero)
    /* dqdiv742 */ self.divide128("-0", "-1", "0", .toNearestOrAwayFromZero)
    /* dqdiv743 */ self.divide128("0", "1", "0", .toNearestOrAwayFromZero)
    /* dqdiv744 */ self.divide128("-0", "1", "-0", .toNearestOrAwayFromZero)
    /* dqdiv745 */ self.divide128("-1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv746 */ self.divide128("-1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv747 */ self.divide128("1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv748 */ self.divide128("1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv751 */ self.divide128("0.0", "-1", "-0.0", .toNearestOrAwayFromZero)
    /* dqdiv752 */ self.divide128("-0.0", "-1", "0.0", .toNearestOrAwayFromZero)
    /* dqdiv753 */ self.divide128("0.0", "1", "0.0", .toNearestOrAwayFromZero)
    /* dqdiv754 */ self.divide128("-0.0", "1", "-0.0", .toNearestOrAwayFromZero)
    /* dqdiv755 */ self.divide128("-1.0", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv756 */ self.divide128("-1.0", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv757 */ self.divide128("1.0", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv758 */ self.divide128("1.0", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv761 */ self.divide128("0", "-1.0", "-0E+1", .toNearestOrAwayFromZero)
    /* dqdiv762 */ self.divide128("-0", "-1.0", "0E+1", .toNearestOrAwayFromZero)
    /* dqdiv763 */ self.divide128("0", "1.0", "0E+1", .toNearestOrAwayFromZero)
    /* dqdiv764 */ self.divide128("-0", "1.0", "-0E+1", .toNearestOrAwayFromZero)
    /* dqdiv765 */ self.divide128("-1", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv766 */ self.divide128("-1", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv767 */ self.divide128("1", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv768 */ self.divide128("1", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv771 */ self.divide128("0.0", "-1.0", "-0", .toNearestOrAwayFromZero)
    /* dqdiv772 */ self.divide128("-0.0", "-1.0", "0", .toNearestOrAwayFromZero)
    /* dqdiv773 */ self.divide128("0.0", "1.0", "0", .toNearestOrAwayFromZero)
    /* dqdiv774 */ self.divide128("-0.0", "1.0", "-0", .toNearestOrAwayFromZero)
    /* dqdiv775 */ self.divide128("-1.0", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv776 */ self.divide128("-1.0", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv777 */ self.divide128("1.0", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv778 */ self.divide128("1.0", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv780 */ self.divide128("Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv781 */ self.divide128("Inf", "-1000", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv782 */ self.divide128("Inf", "-1", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv783 */ self.divide128("Inf", "-0", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv784 */ self.divide128("Inf", "0", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv785 */ self.divide128("Inf", "1", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv786 */ self.divide128("Inf", "1000", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv787 */ self.divide128("Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv788 */ self.divide128("-1000", "Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv789 */ self.divide128("-Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv790 */ self.divide128("-1", "Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv791 */ self.divide128("-0", "Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv792 */ self.divide128("0", "Inf", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv793 */ self.divide128("1", "Inf", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv794 */ self.divide128("1000", "Inf", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv795 */ self.divide128("Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv800 */ self.divide128("-Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv801 */ self.divide128("-Inf", "-1000", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv802 */ self.divide128("-Inf", "-1", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv803 */ self.divide128("-Inf", "-0", "Infinity", .toNearestOrAwayFromZero)
    /* dqdiv804 */ self.divide128("-Inf", "0", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv805 */ self.divide128("-Inf", "1", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv806 */ self.divide128("-Inf", "1000", "-Infinity", .toNearestOrAwayFromZero)
    /* dqdiv807 */ self.divide128("-Inf", "Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv808 */ self.divide128("-1000", "Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv809 */ self.divide128("-Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv810 */ self.divide128("-1", "-Inf", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv811 */ self.divide128("-0", "-Inf", "0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv812 */ self.divide128("0", "-Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv813 */ self.divide128("1", "-Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv814 */ self.divide128("1000", "-Inf", "-0E-6176", .toNearestOrAwayFromZero)
    /* dqdiv815 */ self.divide128("Inf", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv821 */ self.divide128("NaN", "-Inf", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv822 */ self.divide128("NaN", "-1000", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv823 */ self.divide128("NaN", "-1", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv824 */ self.divide128("NaN", "-0", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv825 */ self.divide128("NaN", "0", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv826 */ self.divide128("NaN", "1", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv827 */ self.divide128("NaN", "1000", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv828 */ self.divide128("NaN", "Inf", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv829 */ self.divide128("NaN", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv830 */ self.divide128("-Inf", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv831 */ self.divide128("-1000", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv832 */ self.divide128("-1", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv833 */ self.divide128("-0", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv834 */ self.divide128("0", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv835 */ self.divide128("1", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv836 */ self.divide128("1000", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv837 */ self.divide128("Inf", "NaN", "NaN", .toNearestOrAwayFromZero)
    /* dqdiv841 */ self.divide128("sNaN", "-Inf", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv842 */ self.divide128("sNaN", "-1000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv843 */ self.divide128("sNaN", "-1", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv844 */ self.divide128("sNaN", "-0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv845 */ self.divide128("sNaN", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv846 */ self.divide128("sNaN", "1", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv847 */ self.divide128("sNaN", "1000", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv848 */ self.divide128("sNaN", "NaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv849 */ self.divide128("sNaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv850 */ self.divide128("NaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv851 */ self.divide128("-Inf", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv852 */ self.divide128("-1000", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv853 */ self.divide128("-1", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv854 */ self.divide128("-0", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv855 */ self.divide128("0", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv856 */ self.divide128("1", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv857 */ self.divide128("1000", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv858 */ self.divide128("Inf", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv859 */ self.divide128("NaN", "sNaN", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv861 */ self.divide128("NaN(0x9)", "-Inf", "NaN(0x9)", .toNearestOrAwayFromZero)
    /* dqdiv862 */ self.divide128("NaN(0x8)", "1000", "NaN(0x8)", .toNearestOrAwayFromZero)
    /* dqdiv863 */ self.divide128("NaN(0x7)", "Inf", "NaN(0x7)", .toNearestOrAwayFromZero)
    /* dqdiv864 */ self.divide128("NaN(0x6)", "NaN(0x5)", "NaN(0x6)", .toNearestOrAwayFromZero)
    /* dqdiv865 */ self.divide128("-Inf", "NaN(0x4)", "NaN(0x4)", .toNearestOrAwayFromZero)
    /* dqdiv866 */ self.divide128("-1000", "NaN(0x3)", "NaN(0x3)", .toNearestOrAwayFromZero)
    /* dqdiv867 */ self.divide128("Inf", "NaN(0x2)", "NaN(0x2)", .toNearestOrAwayFromZero)
    /* dqdiv871 */ self.divide128("sNaN(0x63)", "-Inf", "NaN(0x63)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv872 */ self.divide128("sNaN(0x62)", "-1", "NaN(0x62)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv873 */ self.divide128("sNaN(0x61)", "NaN", "NaN(0x61)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv874 */ self.divide128("sNaN(0x60)", "sNaN(0x5e)", "NaN(0x60)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv875 */ self.divide128("NaN(0x5f)", "sNaN(0x5d)", "NaN(0x5d)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv876 */ self.divide128("-Inf", "sNaN(0x5c)", "NaN(0x5c)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv877 */ self.divide128("0", "sNaN(0x5b)", "NaN(0x5b)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv878 */ self.divide128("Inf", "sNaN(0x5a)", "NaN(0x5a)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv879 */ self.divide128("NaN", "sNaN(0x59)", "NaN(0x59)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv881 */ self.divide128("-NaN(0x9)", "-Inf", "-NaN(0x9)", .toNearestOrAwayFromZero)
    /* dqdiv882 */ self.divide128("-NaN(0x8)", "1000", "-NaN(0x8)", .toNearestOrAwayFromZero)
    /* dqdiv883 */ self.divide128("-NaN(0x7)", "Inf", "-NaN(0x7)", .toNearestOrAwayFromZero)
    /* dqdiv884 */ self.divide128("-NaN(0x6)", "-NaN(0x5)", "-NaN(0x6)", .toNearestOrAwayFromZero)
    /* dqdiv885 */ self.divide128("-Inf", "-NaN(0x4)", "-NaN(0x4)", .toNearestOrAwayFromZero)
    /* dqdiv886 */ self.divide128("-1000", "-NaN(0x3)", "-NaN(0x3)", .toNearestOrAwayFromZero)
    /* dqdiv887 */ self.divide128("Inf", "-NaN(0x2)", "-NaN(0x2)", .toNearestOrAwayFromZero)
    /* dqdiv891 */ self.divide128("-sNaN(0x63)", "-Inf", "-NaN(0x63)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv892 */ self.divide128("-sNaN(0x62)", "-1", "-NaN(0x62)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv893 */ self.divide128("-sNaN(0x61)", "NaN", "-NaN(0x61)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv894 */ self.divide128("-sNaN(0x60)", "-sNaN(0x5e)", "-NaN(0x60)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv895 */ self.divide128("-NaN(0x5f)", "-sNaN(0x5d)", "-NaN(0x5d)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv896 */ self.divide128("-Inf", "-sNaN(0x5c)", "-NaN(0x5c)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv897 */ self.divide128("0", "-sNaN(0x5b)", "-NaN(0x5b)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv898 */ self.divide128("Inf", "-sNaN(0x5a)", "-NaN(0x5a)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv899 */ self.divide128("-NaN", "-sNaN(0x59)", "-NaN(0x59)", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv901 */ self.divide128("0", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv902 */ self.divide128("0.0E5", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv903 */ self.divide128("0.000", "0", "NaN", .toNearestOrAwayFromZero, .isInvalidOperation)
    /* dqdiv904 */ self.divide128("0.0001", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv905 */ self.divide128("0.01", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv906 */ self.divide128("0.1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv907 */ self.divide128("1", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv908 */ self.divide128("1", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv909 */ self.divide128("10", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv910 */ self.divide128("1E+100", "0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv911 */ self.divide128("1E+100", "0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv921 */ self.divide128("-0.0001", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv922 */ self.divide128("-0.01", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv923 */ self.divide128("-0.1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv924 */ self.divide128("-1", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv925 */ self.divide128("-1", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv926 */ self.divide128("-10", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv927 */ self.divide128("-1E+100", "0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv928 */ self.divide128("-1E+100", "0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv931 */ self.divide128("0.0001", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv932 */ self.divide128("0.01", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv933 */ self.divide128("0.1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv934 */ self.divide128("1", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv935 */ self.divide128("1", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv936 */ self.divide128("10", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv937 */ self.divide128("1E+100", "-0.0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv938 */ self.divide128("1E+100", "-0", "-Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv941 */ self.divide128("-0.0001", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv942 */ self.divide128("-0.01", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv943 */ self.divide128("-0.1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv944 */ self.divide128("-1", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv945 */ self.divide128("-1", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv946 */ self.divide128("-10", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv947 */ self.divide128("-1E+100", "-0.0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
    /* dqdiv948 */ self.divide128("-1E+100", "-0", "Infinity", .toNearestOrAwayFromZero, .isDivisionByZero)
  }

  private func divide128(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal128(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    let expectedStatus = _expectedStatus ?? DecimalStatus()

    var status = DecimalStatus()
    let result = arg0.divided(by: arg1, rounding: rounding, status: &status)
    let speleotroveResult = self.toSpeleotrove_div(arg0, arg1, result: result)
    self.assertEqual(speleotroveResult, expected, file, line)
    self.assertStatus(status, expectedStatus, file, line)
  }

  // MARK: - Divideint

  func test_divideint64() {
    /* dddvi001 */ self.divideint64("1", "1", "1", .toNearestOrEven)
    /* dddvi002 */ self.divideint64("2", "1", "2", .toNearestOrEven)
    /* dddvi003 */ self.divideint64("1", "2", "0", .toNearestOrEven)
    /* dddvi004 */ self.divideint64("2", "2", "1", .toNearestOrEven)
    /* dddvi005 */ self.divideint64("0", "1", "0", .toNearestOrEven)
    /* dddvi006 */ self.divideint64("0", "2", "0", .toNearestOrEven)
    /* dddvi007 */ self.divideint64("1", "3", "0", .toNearestOrEven)
    /* dddvi008 */ self.divideint64("2", "3", "0", .toNearestOrEven)
    /* dddvi009 */ self.divideint64("3", "3", "1", .toNearestOrEven)
    /* dddvi010 */ self.divideint64("2.4", "1", "2", .toNearestOrEven)
    /* dddvi011 */ self.divideint64("2.4", "-1", "-2", .toNearestOrEven)
    /* dddvi012 */ self.divideint64("-2.4", "1", "-2", .toNearestOrEven)
    /* dddvi013 */ self.divideint64("-2.4", "-1", "2", .toNearestOrEven)
    /* dddvi014 */ self.divideint64("2.40", "1", "2", .toNearestOrEven)
    /* dddvi015 */ self.divideint64("2.400", "1", "2", .toNearestOrEven)
    /* dddvi016 */ self.divideint64("2.4", "2", "1", .toNearestOrEven)
    /* dddvi017 */ self.divideint64("2.400", "2", "1", .toNearestOrEven)
    /* dddvi018 */ self.divideint64("2.", "2", "1", .toNearestOrEven)
    /* dddvi019 */ self.divideint64("20", "20", "1", .toNearestOrEven)
    /* dddvi020 */ self.divideint64("187", "187", "1", .toNearestOrEven)
    /* dddvi021 */ self.divideint64("5", "2", "2", .toNearestOrEven)
    /* dddvi022 */ self.divideint64("5", "2.0", "2", .toNearestOrEven)
    /* dddvi023 */ self.divideint64("5", "2.000", "2", .toNearestOrEven)
    /* dddvi024 */ self.divideint64("5", "0.200", "25", .toNearestOrEven)
    /* dddvi025 */ self.divideint64("5", "0.200", "25", .toNearestOrEven)
    /* dddvi030 */ self.divideint64("1", "2", "0", .toNearestOrEven)
    /* dddvi031 */ self.divideint64("1", "4", "0", .toNearestOrEven)
    /* dddvi032 */ self.divideint64("1", "8", "0", .toNearestOrEven)
    /* dddvi033 */ self.divideint64("1", "16", "0", .toNearestOrEven)
    /* dddvi034 */ self.divideint64("1", "32", "0", .toNearestOrEven)
    /* dddvi035 */ self.divideint64("1", "64", "0", .toNearestOrEven)
    /* dddvi040 */ self.divideint64("1", "-2", "-0", .toNearestOrEven)
    /* dddvi041 */ self.divideint64("1", "-4", "-0", .toNearestOrEven)
    /* dddvi042 */ self.divideint64("1", "-8", "-0", .toNearestOrEven)
    /* dddvi043 */ self.divideint64("1", "-16", "-0", .toNearestOrEven)
    /* dddvi044 */ self.divideint64("1", "-32", "-0", .toNearestOrEven)
    /* dddvi045 */ self.divideint64("1", "-64", "-0", .toNearestOrEven)
    /* dddvi050 */ self.divideint64("-1", "2", "-0", .toNearestOrEven)
    /* dddvi051 */ self.divideint64("-1", "4", "-0", .toNearestOrEven)
    /* dddvi052 */ self.divideint64("-1", "8", "-0", .toNearestOrEven)
    /* dddvi053 */ self.divideint64("-1", "16", "-0", .toNearestOrEven)
    /* dddvi054 */ self.divideint64("-1", "32", "-0", .toNearestOrEven)
    /* dddvi055 */ self.divideint64("-1", "64", "-0", .toNearestOrEven)
    /* dddvi060 */ self.divideint64("-1", "-2", "0", .toNearestOrEven)
    /* dddvi061 */ self.divideint64("-1", "-4", "0", .toNearestOrEven)
    /* dddvi062 */ self.divideint64("-1", "-8", "0", .toNearestOrEven)
    /* dddvi063 */ self.divideint64("-1", "-16", "0", .toNearestOrEven)
    /* dddvi064 */ self.divideint64("-1", "-32", "0", .toNearestOrEven)
    /* dddvi065 */ self.divideint64("-1", "-64", "0", .toNearestOrEven)
    /* dddvi070 */ self.divideint64("999999999", "1", "999999999", .toNearestOrEven)
    /* dddvi071 */ self.divideint64("999999999.4", "1", "999999999", .toNearestOrEven)
    /* dddvi072 */ self.divideint64("999999999.5", "1", "999999999", .toNearestOrEven)
    /* dddvi073 */ self.divideint64("999999999.9", "1", "999999999", .toNearestOrEven)
    /* dddvi074 */ self.divideint64("999999999.999", "1", "999999999", .toNearestOrEven)
    /* dddvi090 */ self.divideint64("0.", "1", "0", .toNearestOrEven)
    /* dddvi091 */ self.divideint64(".0", "1", "0", .toNearestOrEven)
    /* dddvi092 */ self.divideint64("0.00", "1", "0", .toNearestOrEven)
    /* dddvi093 */ self.divideint64("0.00E+9", "1", "0", .toNearestOrEven)
    /* dddvi094 */ self.divideint64("0.0000E-50", "1", "0", .toNearestOrEven)
    /* dddvi100 */ self.divideint64("1", "1", "1", .toNearestOrEven)
    /* dddvi101 */ self.divideint64("1", "2", "0", .toNearestOrEven)
    /* dddvi102 */ self.divideint64("1", "3", "0", .toNearestOrEven)
    /* dddvi103 */ self.divideint64("1", "4", "0", .toNearestOrEven)
    /* dddvi104 */ self.divideint64("1", "5", "0", .toNearestOrEven)
    /* dddvi105 */ self.divideint64("1", "6", "0", .toNearestOrEven)
    /* dddvi1051 */ self.divideint64("1e+277", "1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi1052 */ self.divideint64("1e+277", "-1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi1053 */ self.divideint64("-1e+277", "1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi1054 */ self.divideint64("-1e+277", "-1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi1055 */ self.divideint64("1e-277", "1e+311", "0", .toNearestOrEven)
    /* dddvi1056 */ self.divideint64("1e-277", "-1e+311", "-0", .toNearestOrEven)
    /* dddvi1057 */ self.divideint64("-1e-277", "1e+311", "-0", .toNearestOrEven)
    /* dddvi1058 */ self.divideint64("-1e-277", "-1e+311", "0", .toNearestOrEven)
    /* dddvi106 */ self.divideint64("1", "7", "0", .toNearestOrEven)
    /* dddvi1060 */ self.divideint64("1e-291", "1e+101", "0", .toNearestOrEven)
    /* dddvi1061 */ self.divideint64("1e-291", "1e+102", "0", .toNearestOrEven)
    /* dddvi1062 */ self.divideint64("1e-291", "1e+103", "0", .toNearestOrEven)
    /* dddvi1063 */ self.divideint64("1e-291", "1e+104", "0", .toNearestOrEven)
    /* dddvi1064 */ self.divideint64("1e-291", "1e+105", "0", .toNearestOrEven)
    /* dddvi1065 */ self.divideint64("1e-291", "1e+106", "0", .toNearestOrEven)
    /* dddvi1066 */ self.divideint64("1e-291", "1e+107", "0", .toNearestOrEven)
    /* dddvi1067 */ self.divideint64("1e-291", "1e+108", "0", .toNearestOrEven)
    /* dddvi1068 */ self.divideint64("1e-291", "1e+109", "0", .toNearestOrEven)
    /* dddvi1069 */ self.divideint64("1e-291", "1e+110", "0", .toNearestOrEven)
    /* dddvi107 */ self.divideint64("1", "8", "0", .toNearestOrEven)
    /* dddvi108 */ self.divideint64("1", "9", "0", .toNearestOrEven)
    /* dddvi109 */ self.divideint64("1", "10", "0", .toNearestOrEven)
    /* dddvi110 */ self.divideint64("1", "1", "1", .toNearestOrEven)
    /* dddvi1101 */ self.divideint64("1.0000E-394", "1", "0", .toNearestOrEven)
    /* dddvi1102 */ self.divideint64("1.000E-394", "1e+1", "0", .toNearestOrEven)
    /* dddvi1103 */ self.divideint64("1.00E-394", "1e+2", "0", .toNearestOrEven)
    /* dddvi111 */ self.divideint64("2", "1", "2", .toNearestOrEven)
    /* dddvi1118 */ self.divideint64("1E-394", "1e+4", "0", .toNearestOrEven)
    /* dddvi1119 */ self.divideint64("3E-394", "-1e+5", "-0", .toNearestOrEven)
    /* dddvi112 */ self.divideint64("3", "1", "3", .toNearestOrEven)
    /* dddvi1120 */ self.divideint64("5E-394", "1e+5", "0", .toNearestOrEven)
    /* dddvi1124 */ self.divideint64("1E-394", "-1e+4", "-0", .toNearestOrEven)
    /* dddvi113 */ self.divideint64("4", "1", "4", .toNearestOrEven)
    /* dddvi1130 */ self.divideint64("3.0E-394", "-1e+5", "-0", .toNearestOrEven)
    /* dddvi1131 */ self.divideint64("1.0E-199", "1e+200", "0", .toNearestOrEven)
    /* dddvi1132 */ self.divideint64("1.0E-199", "1e+199", "0", .toNearestOrEven)
    /* dddvi1133 */ self.divideint64("1.0E-199", "1e+198", "0", .toNearestOrEven)
    /* dddvi1134 */ self.divideint64("2.0E-199", "2e+198", "0", .toNearestOrEven)
    /* dddvi1135 */ self.divideint64("4.0E-199", "4e+198", "0", .toNearestOrEven)
    /* dddvi114 */ self.divideint64("5", "1", "5", .toNearestOrEven)
    /* dddvi115 */ self.divideint64("6", "1", "6", .toNearestOrEven)
    /* dddvi116 */ self.divideint64("7", "1", "7", .toNearestOrEven)
    /* dddvi117 */ self.divideint64("8", "1", "8", .toNearestOrEven)
    /* dddvi118 */ self.divideint64("9", "1", "9", .toNearestOrEven)
    /* dddvi119 */ self.divideint64("10", "1", "10", .toNearestOrEven)
    /* dddvi131 */ self.divideint64("101.3", "1", "101", .toNearestOrEven)
    /* dddvi132 */ self.divideint64("101.0", "1", "101", .toNearestOrEven)
    /* dddvi133 */ self.divideint64("101.3", "3", "33", .toNearestOrEven)
    /* dddvi134 */ self.divideint64("101.0", "3", "33", .toNearestOrEven)
    /* dddvi135 */ self.divideint64("2.4", "1", "2", .toNearestOrEven)
    /* dddvi136 */ self.divideint64("2.400", "1", "2", .toNearestOrEven)
    /* dddvi137 */ self.divideint64("18", "18", "1", .toNearestOrEven)
    /* dddvi138 */ self.divideint64("1120", "1000", "1", .toNearestOrEven)
    /* dddvi139 */ self.divideint64("2.4", "2", "1", .toNearestOrEven)
    /* dddvi140 */ self.divideint64("2.400", "2", "1", .toNearestOrEven)
    /* dddvi141 */ self.divideint64("0.5", "2.000", "0", .toNearestOrEven)
    /* dddvi142 */ self.divideint64("8.005", "7", "1", .toNearestOrEven)
    /* dddvi143 */ self.divideint64("5", "2", "2", .toNearestOrEven)
    /* dddvi144 */ self.divideint64("0", "2", "0", .toNearestOrEven)
    /* dddvi145 */ self.divideint64("0.00", "2", "0", .toNearestOrEven)
    /* dddvi150 */ self.divideint64("12345", "4.999", "2469", .toNearestOrEven)
    /* dddvi151 */ self.divideint64("12345", "4.99", "2473", .toNearestOrEven)
    /* dddvi152 */ self.divideint64("12345", "4.9", "2519", .toNearestOrEven)
    /* dddvi153 */ self.divideint64("12345", "5", "2469", .toNearestOrEven)
    /* dddvi154 */ self.divideint64("12345", "5.1", "2420", .toNearestOrEven)
    /* dddvi155 */ self.divideint64("12345", "5.01", "2464", .toNearestOrEven)
    /* dddvi156 */ self.divideint64("12345", "5.001", "2468", .toNearestOrEven)
    /* dddvi157 */ self.divideint64("101", "7.6", "13", .toNearestOrEven)
    /* dddvi160 */ self.divideint64("1", "1", "1", .toNearestOrEven)
    /* dddvi161 */ self.divideint64("1", "10", "0", .toNearestOrEven)
    /* dddvi162 */ self.divideint64("1", "100", "0", .toNearestOrEven)
    /* dddvi163 */ self.divideint64("1", "1000", "0", .toNearestOrEven)
    /* dddvi164 */ self.divideint64("1", "10000", "0", .toNearestOrEven)
    /* dddvi165 */ self.divideint64("1", "100000", "0", .toNearestOrEven)
    /* dddvi166 */ self.divideint64("1", "1000000", "0", .toNearestOrEven)
    /* dddvi167 */ self.divideint64("1", "10000000", "0", .toNearestOrEven)
    /* dddvi168 */ self.divideint64("1", "100000000", "0", .toNearestOrEven)
    /* dddvi170 */ self.divideint64("1", "-1", "-1", .toNearestOrEven)
    /* dddvi171 */ self.divideint64("1", "-10", "-0", .toNearestOrEven)
    /* dddvi172 */ self.divideint64("1", "-100", "-0", .toNearestOrEven)
    /* dddvi173 */ self.divideint64("1", "-1000", "-0", .toNearestOrEven)
    /* dddvi174 */ self.divideint64("1", "-10000", "-0", .toNearestOrEven)
    /* dddvi175 */ self.divideint64("1", "-100000", "-0", .toNearestOrEven)
    /* dddvi176 */ self.divideint64("1", "-1000000", "-0", .toNearestOrEven)
    /* dddvi177 */ self.divideint64("1", "-10000000", "-0", .toNearestOrEven)
    /* dddvi178 */ self.divideint64("1", "-100000000", "-0", .toNearestOrEven)
    /* dddvi180 */ self.divideint64("-1", "1", "-1", .toNearestOrEven)
    /* dddvi181 */ self.divideint64("-1", "10", "-0", .toNearestOrEven)
    /* dddvi182 */ self.divideint64("-1", "100", "-0", .toNearestOrEven)
    /* dddvi183 */ self.divideint64("-1", "1000", "-0", .toNearestOrEven)
    /* dddvi184 */ self.divideint64("-1", "10000", "-0", .toNearestOrEven)
    /* dddvi185 */ self.divideint64("-1", "100000", "-0", .toNearestOrEven)
    /* dddvi186 */ self.divideint64("-1", "1000000", "-0", .toNearestOrEven)
    /* dddvi187 */ self.divideint64("-1", "10000000", "-0", .toNearestOrEven)
    /* dddvi188 */ self.divideint64("-1", "100000000", "-0", .toNearestOrEven)
    /* dddvi190 */ self.divideint64("-1", "-1", "1", .toNearestOrEven)
    /* dddvi191 */ self.divideint64("-1", "-10", "0", .toNearestOrEven)
    /* dddvi192 */ self.divideint64("-1", "-100", "0", .toNearestOrEven)
    /* dddvi193 */ self.divideint64("-1", "-1000", "0", .toNearestOrEven)
    /* dddvi194 */ self.divideint64("-1", "-10000", "0", .toNearestOrEven)
    /* dddvi195 */ self.divideint64("-1", "-100000", "0", .toNearestOrEven)
    /* dddvi196 */ self.divideint64("-1", "-1000000", "0", .toNearestOrEven)
    /* dddvi197 */ self.divideint64("-1", "-10000000", "0", .toNearestOrEven)
    /* dddvi198 */ self.divideint64("-1", "-100000000", "0", .toNearestOrEven)
    /* dddvi201 */ self.divideint64("0", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi202 */ self.divideint64("0.0E5", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi203 */ self.divideint64("0.000", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi204 */ self.divideint64("0.0001", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi205 */ self.divideint64("0.01", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi206 */ self.divideint64("0.1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi207 */ self.divideint64("1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi208 */ self.divideint64("1", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi209 */ self.divideint64("10", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi210 */ self.divideint64("1E+100", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi211 */ self.divideint64("1E+380", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi214 */ self.divideint64("-0.0001", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi215 */ self.divideint64("-0.01", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi216 */ self.divideint64("-0.1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi217 */ self.divideint64("-1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi218 */ self.divideint64("-1", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi219 */ self.divideint64("-10", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi220 */ self.divideint64("-1E+100", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi221 */ self.divideint64("-1E+380", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi270 */ self.divideint64("1", "1e384", "0", .toNearestOrEven)
    /* dddvi271 */ self.divideint64("1", "0.9e384", "0", .toNearestOrEven)
    /* dddvi272 */ self.divideint64("1", "0.99e384", "0", .toNearestOrEven)
    /* dddvi273 */ self.divideint64("1", "0.9999999999999999e384", "0", .toNearestOrEven)
    /* dddvi274 */ self.divideint64("9e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi275 */ self.divideint64("9.9e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi276 */ self.divideint64("9.99e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi277 */ self.divideint64("9.999999999999999e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi280 */ self.divideint64("0.1", "9e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi281 */ self.divideint64("0.1", "99e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi282 */ self.divideint64("0.1", "999e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi283 */ self.divideint64("0.1", "9e-382", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi284 */ self.divideint64("0.1", "99e-382", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi301 */ self.divideint64("0.9", "2", "0", .toNearestOrEven)
    /* dddvi302 */ self.divideint64("0.9", "2.0", "0", .toNearestOrEven)
    /* dddvi303 */ self.divideint64("0.9", "2.1", "0", .toNearestOrEven)
    /* dddvi304 */ self.divideint64("0.9", "2.00", "0", .toNearestOrEven)
    /* dddvi305 */ self.divideint64("0.9", "2.01", "0", .toNearestOrEven)
    /* dddvi306 */ self.divideint64("0.12", "1", "0", .toNearestOrEven)
    /* dddvi307 */ self.divideint64("0.12", "1.0", "0", .toNearestOrEven)
    /* dddvi308 */ self.divideint64("0.12", "1.00", "0", .toNearestOrEven)
    /* dddvi309 */ self.divideint64("0.12", "1.0", "0", .toNearestOrEven)
    /* dddvi310 */ self.divideint64("0.12", "1.00", "0", .toNearestOrEven)
    /* dddvi311 */ self.divideint64("0.12", "2", "0", .toNearestOrEven)
    /* dddvi312 */ self.divideint64("0.12", "2.0", "0", .toNearestOrEven)
    /* dddvi313 */ self.divideint64("0.12", "2.1", "0", .toNearestOrEven)
    /* dddvi314 */ self.divideint64("0.12", "2.00", "0", .toNearestOrEven)
    /* dddvi315 */ self.divideint64("0.12", "2.01", "0", .toNearestOrEven)
    /* dddvi330 */ self.divideint64("1234567890123456", "10", "123456789012345", .toNearestOrEven)
    /* dddvi331 */ self.divideint64("1234567890123456", "1", "1234567890123456", .toNearestOrEven)
    /* dddvi332 */ self.divideint64("1234567890123456", "0.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi333 */ self.divideint64("1234567890123456", "0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi401 */ self.divideint64("12345678000", "100", "123456780", .toNearestOrEven)
    /* dddvi402 */ self.divideint64("1", "12345678000", "0", .toNearestOrEven)
    /* dddvi403 */ self.divideint64("1234567800", "10", "123456780", .toNearestOrEven)
    /* dddvi404 */ self.divideint64("1", "1234567800", "0", .toNearestOrEven)
    /* dddvi405 */ self.divideint64("1234567890", "10", "123456789", .toNearestOrEven)
    /* dddvi406 */ self.divideint64("1", "1234567890", "0", .toNearestOrEven)
    /* dddvi407 */ self.divideint64("1234567891", "10", "123456789", .toNearestOrEven)
    /* dddvi408 */ self.divideint64("1", "1234567891", "0", .toNearestOrEven)
    /* dddvi409 */ self.divideint64("12345678901", "100", "123456789", .toNearestOrEven)
    /* dddvi410 */ self.divideint64("1", "12345678901", "0", .toNearestOrEven)
    /* dddvi411 */ self.divideint64("1234567896", "10", "123456789", .toNearestOrEven)
    /* dddvi412 */ self.divideint64("1", "1234567896", "0", .toNearestOrEven)
    /* dddvi413 */ self.divideint64("12345678948", "100", "123456789", .toNearestOrEven)
    /* dddvi414 */ self.divideint64("12345678949", "100", "123456789", .toNearestOrEven)
    /* dddvi415 */ self.divideint64("12345678950", "100", "123456789", .toNearestOrEven)
    /* dddvi416 */ self.divideint64("12345678951", "100", "123456789", .toNearestOrEven)
    /* dddvi417 */ self.divideint64("12345678999", "100", "123456789", .toNearestOrEven)
    /* dddvi441 */ self.divideint64("12345678000", "1", "12345678000", .toNearestOrEven)
    /* dddvi442 */ self.divideint64("1", "12345678000", "0", .toNearestOrEven)
    /* dddvi443 */ self.divideint64("1234567800", "1", "1234567800", .toNearestOrEven)
    /* dddvi444 */ self.divideint64("1", "1234567800", "0", .toNearestOrEven)
    /* dddvi445 */ self.divideint64("1234567890", "1", "1234567890", .toNearestOrEven)
    /* dddvi446 */ self.divideint64("1", "1234567890", "0", .toNearestOrEven)
    /* dddvi447 */ self.divideint64("1234567891", "1", "1234567891", .toNearestOrEven)
    /* dddvi448 */ self.divideint64("1", "1234567891", "0", .toNearestOrEven)
    /* dddvi449 */ self.divideint64("12345678901", "1", "12345678901", .toNearestOrEven)
    /* dddvi450 */ self.divideint64("1", "12345678901", "0", .toNearestOrEven)
    /* dddvi451 */ self.divideint64("1234567896", "1", "1234567896", .toNearestOrEven)
    /* dddvi452 */ self.divideint64("1", "1234567896", "0", .toNearestOrEven)
    /* dddvi531 */ self.divideint64("5.00", "1E-3", "5000", .toNearestOrEven)
    /* dddvi532 */ self.divideint64("00.00", "0.000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi533 */ self.divideint64("00.00", "0E-3", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi534 */ self.divideint64("0", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi535 */ self.divideint64("-0", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi536 */ self.divideint64("-0", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi541 */ self.divideint64("0", "-1", "-0", .toNearestOrEven)
    /* dddvi542 */ self.divideint64("-0", "-1", "0", .toNearestOrEven)
    /* dddvi543 */ self.divideint64("0", "1", "0", .toNearestOrEven)
    /* dddvi544 */ self.divideint64("-0", "1", "-0", .toNearestOrEven)
    /* dddvi545 */ self.divideint64("-1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi546 */ self.divideint64("-1", "-0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi547 */ self.divideint64("1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi548 */ self.divideint64("1", "-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi551 */ self.divideint64("0.0", "-1", "-0", .toNearestOrEven)
    /* dddvi552 */ self.divideint64("-0.0", "-1", "0", .toNearestOrEven)
    /* dddvi553 */ self.divideint64("0.0", "1", "0", .toNearestOrEven)
    /* dddvi554 */ self.divideint64("-0.0", "1", "-0", .toNearestOrEven)
    /* dddvi555 */ self.divideint64("-1.0", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi556 */ self.divideint64("-1.0", "-0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi557 */ self.divideint64("1.0", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi558 */ self.divideint64("1.0", "-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi561 */ self.divideint64("0", "-1.0", "-0", .toNearestOrEven)
    /* dddvi562 */ self.divideint64("-0", "-1.0", "0", .toNearestOrEven)
    /* dddvi563 */ self.divideint64("0", "1.0", "0", .toNearestOrEven)
    /* dddvi564 */ self.divideint64("-0", "1.0", "-0", .toNearestOrEven)
    /* dddvi565 */ self.divideint64("-1", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi566 */ self.divideint64("-1", "-0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi567 */ self.divideint64("1", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi568 */ self.divideint64("1", "-0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi571 */ self.divideint64("0.0", "-1.0", "-0", .toNearestOrEven)
    /* dddvi572 */ self.divideint64("-0.0", "-1.0", "0", .toNearestOrEven)
    /* dddvi573 */ self.divideint64("0.0", "1.0", "0", .toNearestOrEven)
    /* dddvi574 */ self.divideint64("-0.0", "1.0", "-0", .toNearestOrEven)
    /* dddvi575 */ self.divideint64("-1.0", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi576 */ self.divideint64("-1.0", "-0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi577 */ self.divideint64("1.0", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi578 */ self.divideint64("1.0", "-0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dddvi580 */ self.divideint64("Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi581 */ self.divideint64("Inf", "-1000", "-Infinity", .toNearestOrEven)
    /* dddvi582 */ self.divideint64("Inf", "-1", "-Infinity", .toNearestOrEven)
    /* dddvi583 */ self.divideint64("Inf", "-0", "-Infinity", .toNearestOrEven)
    /* dddvi584 */ self.divideint64("Inf", "0", "Infinity", .toNearestOrEven)
    /* dddvi585 */ self.divideint64("Inf", "1", "Infinity", .toNearestOrEven)
    /* dddvi586 */ self.divideint64("Inf", "1000", "Infinity", .toNearestOrEven)
    /* dddvi587 */ self.divideint64("Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi588 */ self.divideint64("-1000", "Inf", "-0", .toNearestOrEven)
    /* dddvi589 */ self.divideint64("-Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi590 */ self.divideint64("-1", "Inf", "-0", .toNearestOrEven)
    /* dddvi591 */ self.divideint64("-0", "Inf", "-0", .toNearestOrEven)
    /* dddvi592 */ self.divideint64("0", "Inf", "0", .toNearestOrEven)
    /* dddvi593 */ self.divideint64("1", "Inf", "0", .toNearestOrEven)
    /* dddvi594 */ self.divideint64("1000", "Inf", "0", .toNearestOrEven)
    /* dddvi595 */ self.divideint64("Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi600 */ self.divideint64("-Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi601 */ self.divideint64("-Inf", "-1000", "Infinity", .toNearestOrEven)
    /* dddvi602 */ self.divideint64("-Inf", "-1", "Infinity", .toNearestOrEven)
    /* dddvi603 */ self.divideint64("-Inf", "-0", "Infinity", .toNearestOrEven)
    /* dddvi604 */ self.divideint64("-Inf", "0", "-Infinity", .toNearestOrEven)
    /* dddvi605 */ self.divideint64("-Inf", "1", "-Infinity", .toNearestOrEven)
    /* dddvi606 */ self.divideint64("-Inf", "1000", "-Infinity", .toNearestOrEven)
    /* dddvi607 */ self.divideint64("-Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi608 */ self.divideint64("-1000", "Inf", "-0", .toNearestOrEven)
    /* dddvi609 */ self.divideint64("-Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi610 */ self.divideint64("-1", "-Inf", "0", .toNearestOrEven)
    /* dddvi611 */ self.divideint64("-0", "-Inf", "0", .toNearestOrEven)
    /* dddvi612 */ self.divideint64("0", "-Inf", "-0", .toNearestOrEven)
    /* dddvi613 */ self.divideint64("1", "-Inf", "-0", .toNearestOrEven)
    /* dddvi614 */ self.divideint64("1000", "-Inf", "-0", .toNearestOrEven)
    /* dddvi615 */ self.divideint64("Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi621 */ self.divideint64("NaN", "-Inf", "NaN", .toNearestOrEven)
    /* dddvi622 */ self.divideint64("NaN", "-1000", "NaN", .toNearestOrEven)
    /* dddvi623 */ self.divideint64("NaN", "-1", "NaN", .toNearestOrEven)
    /* dddvi624 */ self.divideint64("NaN", "-0", "NaN", .toNearestOrEven)
    /* dddvi625 */ self.divideint64("NaN", "0", "NaN", .toNearestOrEven)
    /* dddvi626 */ self.divideint64("NaN", "1", "NaN", .toNearestOrEven)
    /* dddvi627 */ self.divideint64("NaN", "1000", "NaN", .toNearestOrEven)
    /* dddvi628 */ self.divideint64("NaN", "Inf", "NaN", .toNearestOrEven)
    /* dddvi629 */ self.divideint64("NaN", "NaN", "NaN", .toNearestOrEven)
    /* dddvi630 */ self.divideint64("-Inf", "NaN", "NaN", .toNearestOrEven)
    /* dddvi631 */ self.divideint64("-1000", "NaN", "NaN", .toNearestOrEven)
    /* dddvi632 */ self.divideint64("-1", "NaN", "NaN", .toNearestOrEven)
    /* dddvi633 */ self.divideint64("-0", "NaN", "NaN", .toNearestOrEven)
    /* dddvi634 */ self.divideint64("0", "NaN", "NaN", .toNearestOrEven)
    /* dddvi635 */ self.divideint64("1", "NaN", "NaN", .toNearestOrEven)
    /* dddvi636 */ self.divideint64("1000", "NaN", "NaN", .toNearestOrEven)
    /* dddvi637 */ self.divideint64("Inf", "NaN", "NaN", .toNearestOrEven)
    /* dddvi641 */ self.divideint64("sNaN", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi642 */ self.divideint64("sNaN", "-1000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi643 */ self.divideint64("sNaN", "-1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi644 */ self.divideint64("sNaN", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi645 */ self.divideint64("sNaN", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi646 */ self.divideint64("sNaN", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi647 */ self.divideint64("sNaN", "1000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi648 */ self.divideint64("sNaN", "NaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi649 */ self.divideint64("sNaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi650 */ self.divideint64("NaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi651 */ self.divideint64("-Inf", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi652 */ self.divideint64("-1000", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi653 */ self.divideint64("-1", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi654 */ self.divideint64("-0", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi655 */ self.divideint64("0", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi656 */ self.divideint64("1", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi657 */ self.divideint64("1000", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi658 */ self.divideint64("Inf", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi659 */ self.divideint64("NaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dddvi661 */ self.divideint64("NaN(0x9)", "-Inf", "NaN(0x9)", .toNearestOrEven)
    /* dddvi662 */ self.divideint64("NaN(0x8)", "1000", "NaN(0x8)", .toNearestOrEven)
    /* dddvi663 */ self.divideint64("NaN(0x7)", "Inf", "NaN(0x7)", .toNearestOrEven)
    /* dddvi664 */ self.divideint64("-NaN(0x6)", "NaN(0x5)", "-NaN(0x6)", .toNearestOrEven)
    /* dddvi665 */ self.divideint64("-Inf", "NaN(0x4)", "NaN(0x4)", .toNearestOrEven)
    /* dddvi666 */ self.divideint64("-1000", "NaN(0x3)", "NaN(0x3)", .toNearestOrEven)
    /* dddvi667 */ self.divideint64("Inf", "-NaN(0x2)", "-NaN(0x2)", .toNearestOrEven)
    /* dddvi671 */ self.divideint64("-sNaN(0x63)", "-Inf", "-NaN(0x63)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi672 */ self.divideint64("sNaN(0x62)", "-1", "NaN(0x62)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi673 */ self.divideint64("sNaN(0x61)", "NaN", "NaN(0x61)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi674 */ self.divideint64("sNaN(0x60)", "sNaN(0x5e)", "NaN(0x60)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi675 */ self.divideint64("NaN(0x5f)", "sNaN(0x5d)", "NaN(0x5d)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi676 */ self.divideint64("-Inf", "sNaN(0x5c)", "NaN(0x5c)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi677 */ self.divideint64("0", "sNaN(0x5b)", "NaN(0x5b)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi678 */ self.divideint64("Inf", "-sNaN(0x5a)", "-NaN(0x5a)", .toNearestOrEven, .isInvalidOperation)
    /* dddvi679 */ self.divideint64("NaN", "sNaN(0x59)", "NaN(0x59)", .toNearestOrEven, .isInvalidOperation)
  }

  private func divideint64(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = self.divideInt(arg0, by: arg1, rounding: rounding)
    self.assertEqualByEqualEqual(result, expected, file, line)
  }

  func test_divideint128() {
    /* dqdvi001 */ self.divideint128("1", "1", "1", .toNearestOrEven)
    /* dqdvi002 */ self.divideint128("2", "1", "2", .toNearestOrEven)
    /* dqdvi003 */ self.divideint128("1", "2", "0", .toNearestOrEven)
    /* dqdvi004 */ self.divideint128("2", "2", "1", .toNearestOrEven)
    /* dqdvi005 */ self.divideint128("0", "1", "0", .toNearestOrEven)
    /* dqdvi006 */ self.divideint128("0", "2", "0", .toNearestOrEven)
    /* dqdvi007 */ self.divideint128("1", "3", "0", .toNearestOrEven)
    /* dqdvi008 */ self.divideint128("2", "3", "0", .toNearestOrEven)
    /* dqdvi009 */ self.divideint128("3", "3", "1", .toNearestOrEven)
    /* dqdvi010 */ self.divideint128("2.4", "1", "2", .toNearestOrEven)
    /* dqdvi011 */ self.divideint128("2.4", "-1", "-2", .toNearestOrEven)
    /* dqdvi012 */ self.divideint128("-2.4", "1", "-2", .toNearestOrEven)
    /* dqdvi013 */ self.divideint128("-2.4", "-1", "2", .toNearestOrEven)
    /* dqdvi014 */ self.divideint128("2.40", "1", "2", .toNearestOrEven)
    /* dqdvi015 */ self.divideint128("2.400", "1", "2", .toNearestOrEven)
    /* dqdvi016 */ self.divideint128("2.4", "2", "1", .toNearestOrEven)
    /* dqdvi017 */ self.divideint128("2.400", "2", "1", .toNearestOrEven)
    /* dqdvi018 */ self.divideint128("2.", "2", "1", .toNearestOrEven)
    /* dqdvi019 */ self.divideint128("20", "20", "1", .toNearestOrEven)
    /* dqdvi020 */ self.divideint128("187", "187", "1", .toNearestOrEven)
    /* dqdvi021 */ self.divideint128("5", "2", "2", .toNearestOrEven)
    /* dqdvi022 */ self.divideint128("5", "2.0", "2", .toNearestOrEven)
    /* dqdvi023 */ self.divideint128("5", "2.000", "2", .toNearestOrEven)
    /* dqdvi024 */ self.divideint128("5", "0.200", "25", .toNearestOrEven)
    /* dqdvi025 */ self.divideint128("5", "0.200", "25", .toNearestOrEven)
    /* dqdvi030 */ self.divideint128("1", "2", "0", .toNearestOrEven)
    /* dqdvi031 */ self.divideint128("1", "4", "0", .toNearestOrEven)
    /* dqdvi032 */ self.divideint128("1", "8", "0", .toNearestOrEven)
    /* dqdvi033 */ self.divideint128("1", "16", "0", .toNearestOrEven)
    /* dqdvi034 */ self.divideint128("1", "32", "0", .toNearestOrEven)
    /* dqdvi035 */ self.divideint128("1", "64", "0", .toNearestOrEven)
    /* dqdvi040 */ self.divideint128("1", "-2", "-0", .toNearestOrEven)
    /* dqdvi041 */ self.divideint128("1", "-4", "-0", .toNearestOrEven)
    /* dqdvi042 */ self.divideint128("1", "-8", "-0", .toNearestOrEven)
    /* dqdvi043 */ self.divideint128("1", "-16", "-0", .toNearestOrEven)
    /* dqdvi044 */ self.divideint128("1", "-32", "-0", .toNearestOrEven)
    /* dqdvi045 */ self.divideint128("1", "-64", "-0", .toNearestOrEven)
    /* dqdvi050 */ self.divideint128("-1", "2", "-0", .toNearestOrEven)
    /* dqdvi051 */ self.divideint128("-1", "4", "-0", .toNearestOrEven)
    /* dqdvi052 */ self.divideint128("-1", "8", "-0", .toNearestOrEven)
    /* dqdvi053 */ self.divideint128("-1", "16", "-0", .toNearestOrEven)
    /* dqdvi054 */ self.divideint128("-1", "32", "-0", .toNearestOrEven)
    /* dqdvi055 */ self.divideint128("-1", "64", "-0", .toNearestOrEven)
    /* dqdvi060 */ self.divideint128("-1", "-2", "0", .toNearestOrEven)
    /* dqdvi061 */ self.divideint128("-1", "-4", "0", .toNearestOrEven)
    /* dqdvi062 */ self.divideint128("-1", "-8", "0", .toNearestOrEven)
    /* dqdvi063 */ self.divideint128("-1", "-16", "0", .toNearestOrEven)
    /* dqdvi064 */ self.divideint128("-1", "-32", "0", .toNearestOrEven)
    /* dqdvi065 */ self.divideint128("-1", "-64", "0", .toNearestOrEven)
    /* dqdvi070 */ self.divideint128("999999999", "1", "999999999", .toNearestOrEven)
    /* dqdvi071 */ self.divideint128("999999999.4", "1", "999999999", .toNearestOrEven)
    /* dqdvi072 */ self.divideint128("999999999.5", "1", "999999999", .toNearestOrEven)
    /* dqdvi073 */ self.divideint128("999999999.9", "1", "999999999", .toNearestOrEven)
    /* dqdvi074 */ self.divideint128("999999999.999", "1", "999999999", .toNearestOrEven)
    /* dqdvi090 */ self.divideint128("0.", "1", "0", .toNearestOrEven)
    /* dqdvi091 */ self.divideint128(".0", "1", "0", .toNearestOrEven)
    /* dqdvi092 */ self.divideint128("0.00", "1", "0", .toNearestOrEven)
    /* dqdvi093 */ self.divideint128("0.00E+9", "1", "0", .toNearestOrEven)
    /* dqdvi094 */ self.divideint128("0.0000E-50", "1", "0", .toNearestOrEven)
    /* dqdvi100 */ self.divideint128("1", "1", "1", .toNearestOrEven)
    /* dqdvi101 */ self.divideint128("1", "2", "0", .toNearestOrEven)
    /* dqdvi102 */ self.divideint128("1", "3", "0", .toNearestOrEven)
    /* dqdvi103 */ self.divideint128("1", "4", "0", .toNearestOrEven)
    /* dqdvi104 */ self.divideint128("1", "5", "0", .toNearestOrEven)
    /* dqdvi105 */ self.divideint128("1", "6", "0", .toNearestOrEven)
    /* dqdvi1051 */ self.divideint128("1e+277", "1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi1052 */ self.divideint128("1e+277", "-1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi1053 */ self.divideint128("-1e+277", "1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi1054 */ self.divideint128("-1e+277", "-1e-311", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi1055 */ self.divideint128("1e-277", "1e+311", "0", .toNearestOrEven)
    /* dqdvi1056 */ self.divideint128("1e-277", "-1e+311", "-0", .toNearestOrEven)
    /* dqdvi1057 */ self.divideint128("-1e-277", "1e+311", "-0", .toNearestOrEven)
    /* dqdvi1058 */ self.divideint128("-1e-277", "-1e+311", "0", .toNearestOrEven)
    /* dqdvi106 */ self.divideint128("1", "7", "0", .toNearestOrEven)
    /* dqdvi1060 */ self.divideint128("1e-291", "1e+101", "0", .toNearestOrEven)
    /* dqdvi1061 */ self.divideint128("1e-291", "1e+102", "0", .toNearestOrEven)
    /* dqdvi1062 */ self.divideint128("1e-291", "1e+103", "0", .toNearestOrEven)
    /* dqdvi1063 */ self.divideint128("1e-291", "1e+104", "0", .toNearestOrEven)
    /* dqdvi1064 */ self.divideint128("1e-291", "1e+105", "0", .toNearestOrEven)
    /* dqdvi1065 */ self.divideint128("1e-291", "1e+106", "0", .toNearestOrEven)
    /* dqdvi1066 */ self.divideint128("1e-291", "1e+107", "0", .toNearestOrEven)
    /* dqdvi1067 */ self.divideint128("1e-291", "1e+108", "0", .toNearestOrEven)
    /* dqdvi1068 */ self.divideint128("1e-291", "1e+109", "0", .toNearestOrEven)
    /* dqdvi1069 */ self.divideint128("1e-291", "1e+110", "0", .toNearestOrEven)
    /* dqdvi107 */ self.divideint128("1", "8", "0", .toNearestOrEven)
    /* dqdvi108 */ self.divideint128("1", "9", "0", .toNearestOrEven)
    /* dqdvi109 */ self.divideint128("1", "10", "0", .toNearestOrEven)
    /* dqdvi110 */ self.divideint128("1", "1", "1", .toNearestOrEven)
    /* dqdvi1101 */ self.divideint128("1.0000E-394", "1", "0", .toNearestOrEven)
    /* dqdvi1102 */ self.divideint128("1.000E-394", "1e+1", "0", .toNearestOrEven)
    /* dqdvi1103 */ self.divideint128("1.00E-394", "1e+2", "0", .toNearestOrEven)
    /* dqdvi111 */ self.divideint128("2", "1", "2", .toNearestOrEven)
    /* dqdvi1118 */ self.divideint128("1E-394", "1e+4", "0", .toNearestOrEven)
    /* dqdvi1119 */ self.divideint128("3E-394", "-1e+5", "-0", .toNearestOrEven)
    /* dqdvi112 */ self.divideint128("3", "1", "3", .toNearestOrEven)
    /* dqdvi1120 */ self.divideint128("5E-394", "1e+5", "0", .toNearestOrEven)
    /* dqdvi1124 */ self.divideint128("1E-394", "-1e+4", "-0", .toNearestOrEven)
    /* dqdvi113 */ self.divideint128("4", "1", "4", .toNearestOrEven)
    /* dqdvi1130 */ self.divideint128("3.0E-394", "-1e+5", "-0", .toNearestOrEven)
    /* dqdvi1131 */ self.divideint128("1.0E-199", "1e+200", "0", .toNearestOrEven)
    /* dqdvi1132 */ self.divideint128("1.0E-199", "1e+199", "0", .toNearestOrEven)
    /* dqdvi1133 */ self.divideint128("1.0E-199", "1e+198", "0", .toNearestOrEven)
    /* dqdvi1134 */ self.divideint128("2.0E-199", "2e+198", "0", .toNearestOrEven)
    /* dqdvi1135 */ self.divideint128("4.0E-199", "4e+198", "0", .toNearestOrEven)
    /* dqdvi114 */ self.divideint128("5", "1", "5", .toNearestOrEven)
    /* dqdvi115 */ self.divideint128("6", "1", "6", .toNearestOrEven)
    /* dqdvi116 */ self.divideint128("7", "1", "7", .toNearestOrEven)
    /* dqdvi117 */ self.divideint128("8", "1", "8", .toNearestOrEven)
    /* dqdvi118 */ self.divideint128("9", "1", "9", .toNearestOrEven)
    /* dqdvi119 */ self.divideint128("10", "1", "10", .toNearestOrEven)
    /* dqdvi131 */ self.divideint128("101.3", "1", "101", .toNearestOrEven)
    /* dqdvi132 */ self.divideint128("101.0", "1", "101", .toNearestOrEven)
    /* dqdvi133 */ self.divideint128("101.3", "3", "33", .toNearestOrEven)
    /* dqdvi134 */ self.divideint128("101.0", "3", "33", .toNearestOrEven)
    /* dqdvi135 */ self.divideint128("2.4", "1", "2", .toNearestOrEven)
    /* dqdvi136 */ self.divideint128("2.400", "1", "2", .toNearestOrEven)
    /* dqdvi137 */ self.divideint128("18", "18", "1", .toNearestOrEven)
    /* dqdvi138 */ self.divideint128("1120", "1000", "1", .toNearestOrEven)
    /* dqdvi139 */ self.divideint128("2.4", "2", "1", .toNearestOrEven)
    /* dqdvi140 */ self.divideint128("2.400", "2", "1", .toNearestOrEven)
    /* dqdvi141 */ self.divideint128("0.5", "2.000", "0", .toNearestOrEven)
    /* dqdvi142 */ self.divideint128("8.005", "7", "1", .toNearestOrEven)
    /* dqdvi143 */ self.divideint128("5", "2", "2", .toNearestOrEven)
    /* dqdvi144 */ self.divideint128("0", "2", "0", .toNearestOrEven)
    /* dqdvi145 */ self.divideint128("0.00", "2", "0", .toNearestOrEven)
    /* dqdvi150 */ self.divideint128("12345", "4.999", "2469", .toNearestOrEven)
    /* dqdvi151 */ self.divideint128("12345", "4.99", "2473", .toNearestOrEven)
    /* dqdvi152 */ self.divideint128("12345", "4.9", "2519", .toNearestOrEven)
    /* dqdvi153 */ self.divideint128("12345", "5", "2469", .toNearestOrEven)
    /* dqdvi154 */ self.divideint128("12345", "5.1", "2420", .toNearestOrEven)
    /* dqdvi155 */ self.divideint128("12345", "5.01", "2464", .toNearestOrEven)
    /* dqdvi156 */ self.divideint128("12345", "5.001", "2468", .toNearestOrEven)
    /* dqdvi157 */ self.divideint128("101", "7.6", "13", .toNearestOrEven)
    /* dqdvi160 */ self.divideint128("1", "1", "1", .toNearestOrEven)
    /* dqdvi161 */ self.divideint128("1", "10", "0", .toNearestOrEven)
    /* dqdvi162 */ self.divideint128("1", "100", "0", .toNearestOrEven)
    /* dqdvi163 */ self.divideint128("1", "1000", "0", .toNearestOrEven)
    /* dqdvi164 */ self.divideint128("1", "10000", "0", .toNearestOrEven)
    /* dqdvi165 */ self.divideint128("1", "100000", "0", .toNearestOrEven)
    /* dqdvi166 */ self.divideint128("1", "1000000", "0", .toNearestOrEven)
    /* dqdvi167 */ self.divideint128("1", "10000000", "0", .toNearestOrEven)
    /* dqdvi168 */ self.divideint128("1", "100000000", "0", .toNearestOrEven)
    /* dqdvi170 */ self.divideint128("1", "-1", "-1", .toNearestOrEven)
    /* dqdvi171 */ self.divideint128("1", "-10", "-0", .toNearestOrEven)
    /* dqdvi172 */ self.divideint128("1", "-100", "-0", .toNearestOrEven)
    /* dqdvi173 */ self.divideint128("1", "-1000", "-0", .toNearestOrEven)
    /* dqdvi174 */ self.divideint128("1", "-10000", "-0", .toNearestOrEven)
    /* dqdvi175 */ self.divideint128("1", "-100000", "-0", .toNearestOrEven)
    /* dqdvi176 */ self.divideint128("1", "-1000000", "-0", .toNearestOrEven)
    /* dqdvi177 */ self.divideint128("1", "-10000000", "-0", .toNearestOrEven)
    /* dqdvi178 */ self.divideint128("1", "-100000000", "-0", .toNearestOrEven)
    /* dqdvi180 */ self.divideint128("-1", "1", "-1", .toNearestOrEven)
    /* dqdvi181 */ self.divideint128("-1", "10", "-0", .toNearestOrEven)
    /* dqdvi182 */ self.divideint128("-1", "100", "-0", .toNearestOrEven)
    /* dqdvi183 */ self.divideint128("-1", "1000", "-0", .toNearestOrEven)
    /* dqdvi184 */ self.divideint128("-1", "10000", "-0", .toNearestOrEven)
    /* dqdvi185 */ self.divideint128("-1", "100000", "-0", .toNearestOrEven)
    /* dqdvi186 */ self.divideint128("-1", "1000000", "-0", .toNearestOrEven)
    /* dqdvi187 */ self.divideint128("-1", "10000000", "-0", .toNearestOrEven)
    /* dqdvi188 */ self.divideint128("-1", "100000000", "-0", .toNearestOrEven)
    /* dqdvi190 */ self.divideint128("-1", "-1", "1", .toNearestOrEven)
    /* dqdvi191 */ self.divideint128("-1", "-10", "0", .toNearestOrEven)
    /* dqdvi192 */ self.divideint128("-1", "-100", "0", .toNearestOrEven)
    /* dqdvi193 */ self.divideint128("-1", "-1000", "0", .toNearestOrEven)
    /* dqdvi194 */ self.divideint128("-1", "-10000", "0", .toNearestOrEven)
    /* dqdvi195 */ self.divideint128("-1", "-100000", "0", .toNearestOrEven)
    /* dqdvi196 */ self.divideint128("-1", "-1000000", "0", .toNearestOrEven)
    /* dqdvi197 */ self.divideint128("-1", "-10000000", "0", .toNearestOrEven)
    /* dqdvi198 */ self.divideint128("-1", "-100000000", "0", .toNearestOrEven)
    /* dqdvi201 */ self.divideint128("0", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi202 */ self.divideint128("0.0E5", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi203 */ self.divideint128("0.000", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi204 */ self.divideint128("0.0001", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi205 */ self.divideint128("0.01", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi206 */ self.divideint128("0.1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi207 */ self.divideint128("1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi208 */ self.divideint128("1", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi209 */ self.divideint128("10", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi210 */ self.divideint128("1E+100", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi211 */ self.divideint128("1E+380", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi214 */ self.divideint128("-0.0001", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi215 */ self.divideint128("-0.01", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi216 */ self.divideint128("-0.1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi217 */ self.divideint128("-1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi218 */ self.divideint128("-1", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi219 */ self.divideint128("-10", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi220 */ self.divideint128("-1E+100", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi221 */ self.divideint128("-1E+380", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi270 */ self.divideint128("1", "1e384", "0", .toNearestOrEven)
    /* dqdvi271 */ self.divideint128("1", "0.9e384", "0", .toNearestOrEven)
    /* dqdvi272 */ self.divideint128("1", "0.99e384", "0", .toNearestOrEven)
    /* dqdvi273 */ self.divideint128("1", "0.9999999999999999e384", "0", .toNearestOrEven)
    /* dqdvi274 */ self.divideint128("9e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi275 */ self.divideint128("9.9e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi276 */ self.divideint128("9.99e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi277 */ self.divideint128("9.999999999999999e384", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi280 */ self.divideint128("0.1", "9e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi281 */ self.divideint128("0.1", "99e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi282 */ self.divideint128("0.1", "999e-383", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi283 */ self.divideint128("0.1", "9e-382", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi284 */ self.divideint128("0.1", "99e-382", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi301 */ self.divideint128("0.9", "2", "0", .toNearestOrEven)
    /* dqdvi302 */ self.divideint128("0.9", "2.0", "0", .toNearestOrEven)
    /* dqdvi303 */ self.divideint128("0.9", "2.1", "0", .toNearestOrEven)
    /* dqdvi304 */ self.divideint128("0.9", "2.00", "0", .toNearestOrEven)
    /* dqdvi305 */ self.divideint128("0.9", "2.01", "0", .toNearestOrEven)
    /* dqdvi306 */ self.divideint128("0.12", "1", "0", .toNearestOrEven)
    /* dqdvi307 */ self.divideint128("0.12", "1.0", "0", .toNearestOrEven)
    /* dqdvi308 */ self.divideint128("0.12", "1.00", "0", .toNearestOrEven)
    /* dqdvi309 */ self.divideint128("0.12", "1.0", "0", .toNearestOrEven)
    /* dqdvi310 */ self.divideint128("0.12", "1.00", "0", .toNearestOrEven)
    /* dqdvi311 */ self.divideint128("0.12", "2", "0", .toNearestOrEven)
    /* dqdvi312 */ self.divideint128("0.12", "2.0", "0", .toNearestOrEven)
    /* dqdvi313 */ self.divideint128("0.12", "2.1", "0", .toNearestOrEven)
    /* dqdvi314 */ self.divideint128("0.12", "2.00", "0", .toNearestOrEven)
    /* dqdvi315 */ self.divideint128("0.12", "2.01", "0", .toNearestOrEven)
    /* dqdvi330 */ self.divideint128("1234567987654321987654321890123456", "10", "123456798765432198765432189012345", .toNearestOrEven)
    /* dqdvi331 */ self.divideint128("1234567987654321987654321890123456", "1", "1234567987654321987654321890123456", .toNearestOrEven)
    /* dqdvi332 */ self.divideint128("1234567987654321987654321890123456", "0.1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi333 */ self.divideint128("1234567987654321987654321890123456", "0.01", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi401 */ self.divideint128("12345678000", "100", "123456780", .toNearestOrEven)
    /* dqdvi402 */ self.divideint128("1", "12345678000", "0", .toNearestOrEven)
    /* dqdvi403 */ self.divideint128("1234567800", "10", "123456780", .toNearestOrEven)
    /* dqdvi404 */ self.divideint128("1", "1234567800", "0", .toNearestOrEven)
    /* dqdvi405 */ self.divideint128("1234567890", "10", "123456789", .toNearestOrEven)
    /* dqdvi406 */ self.divideint128("1", "1234567890", "0", .toNearestOrEven)
    /* dqdvi407 */ self.divideint128("1234567891", "10", "123456789", .toNearestOrEven)
    /* dqdvi408 */ self.divideint128("1", "1234567891", "0", .toNearestOrEven)
    /* dqdvi409 */ self.divideint128("12345678901", "100", "123456789", .toNearestOrEven)
    /* dqdvi410 */ self.divideint128("1", "12345678901", "0", .toNearestOrEven)
    /* dqdvi411 */ self.divideint128("1234567896", "10", "123456789", .toNearestOrEven)
    /* dqdvi412 */ self.divideint128("1", "1234567896", "0", .toNearestOrEven)
    /* dqdvi413 */ self.divideint128("12345678948", "100", "123456789", .toNearestOrEven)
    /* dqdvi414 */ self.divideint128("12345678949", "100", "123456789", .toNearestOrEven)
    /* dqdvi415 */ self.divideint128("12345678950", "100", "123456789", .toNearestOrEven)
    /* dqdvi416 */ self.divideint128("12345678951", "100", "123456789", .toNearestOrEven)
    /* dqdvi417 */ self.divideint128("12345678999", "100", "123456789", .toNearestOrEven)
    /* dqdvi441 */ self.divideint128("12345678000", "1", "12345678000", .toNearestOrEven)
    /* dqdvi442 */ self.divideint128("1", "12345678000", "0", .toNearestOrEven)
    /* dqdvi443 */ self.divideint128("1234567800", "1", "1234567800", .toNearestOrEven)
    /* dqdvi444 */ self.divideint128("1", "1234567800", "0", .toNearestOrEven)
    /* dqdvi445 */ self.divideint128("1234567890", "1", "1234567890", .toNearestOrEven)
    /* dqdvi446 */ self.divideint128("1", "1234567890", "0", .toNearestOrEven)
    /* dqdvi447 */ self.divideint128("1234567891", "1", "1234567891", .toNearestOrEven)
    /* dqdvi448 */ self.divideint128("1", "1234567891", "0", .toNearestOrEven)
    /* dqdvi449 */ self.divideint128("12345678901", "1", "12345678901", .toNearestOrEven)
    /* dqdvi450 */ self.divideint128("1", "12345678901", "0", .toNearestOrEven)
    /* dqdvi451 */ self.divideint128("1234567896", "1", "1234567896", .toNearestOrEven)
    /* dqdvi452 */ self.divideint128("1", "1234567896", "0", .toNearestOrEven)
    /* dqdvi531 */ self.divideint128("5.00", "1E-3", "5000", .toNearestOrEven)
    /* dqdvi532 */ self.divideint128("00.00", "0.000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi533 */ self.divideint128("00.00", "0E-3", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi534 */ self.divideint128("0", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi535 */ self.divideint128("-0", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi536 */ self.divideint128("-0", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi541 */ self.divideint128("0", "-1", "-0", .toNearestOrEven)
    /* dqdvi542 */ self.divideint128("-0", "-1", "0", .toNearestOrEven)
    /* dqdvi543 */ self.divideint128("0", "1", "0", .toNearestOrEven)
    /* dqdvi544 */ self.divideint128("-0", "1", "-0", .toNearestOrEven)
    /* dqdvi545 */ self.divideint128("-1", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi546 */ self.divideint128("-1", "-0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi547 */ self.divideint128("1", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi548 */ self.divideint128("1", "-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi551 */ self.divideint128("0.0", "-1", "-0", .toNearestOrEven)
    /* dqdvi552 */ self.divideint128("-0.0", "-1", "0", .toNearestOrEven)
    /* dqdvi553 */ self.divideint128("0.0", "1", "0", .toNearestOrEven)
    /* dqdvi554 */ self.divideint128("-0.0", "1", "-0", .toNearestOrEven)
    /* dqdvi555 */ self.divideint128("-1.0", "0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi556 */ self.divideint128("-1.0", "-0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi557 */ self.divideint128("1.0", "0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi558 */ self.divideint128("1.0", "-0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi561 */ self.divideint128("0", "-1.0", "-0", .toNearestOrEven)
    /* dqdvi562 */ self.divideint128("-0", "-1.0", "0", .toNearestOrEven)
    /* dqdvi563 */ self.divideint128("0", "1.0", "0", .toNearestOrEven)
    /* dqdvi564 */ self.divideint128("-0", "1.0", "-0", .toNearestOrEven)
    /* dqdvi565 */ self.divideint128("-1", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi566 */ self.divideint128("-1", "-0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi567 */ self.divideint128("1", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi568 */ self.divideint128("1", "-0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi571 */ self.divideint128("0.0", "-1.0", "-0", .toNearestOrEven)
    /* dqdvi572 */ self.divideint128("-0.0", "-1.0", "0", .toNearestOrEven)
    /* dqdvi573 */ self.divideint128("0.0", "1.0", "0", .toNearestOrEven)
    /* dqdvi574 */ self.divideint128("-0.0", "1.0", "-0", .toNearestOrEven)
    /* dqdvi575 */ self.divideint128("-1.0", "0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi576 */ self.divideint128("-1.0", "-0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi577 */ self.divideint128("1.0", "0.0", "Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi578 */ self.divideint128("1.0", "-0.0", "-Infinity", .toNearestOrEven, .isDivisionByZero)
    /* dqdvi580 */ self.divideint128("Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi581 */ self.divideint128("Inf", "-1000", "-Infinity", .toNearestOrEven)
    /* dqdvi582 */ self.divideint128("Inf", "-1", "-Infinity", .toNearestOrEven)
    /* dqdvi583 */ self.divideint128("Inf", "-0", "-Infinity", .toNearestOrEven)
    /* dqdvi584 */ self.divideint128("Inf", "0", "Infinity", .toNearestOrEven)
    /* dqdvi585 */ self.divideint128("Inf", "1", "Infinity", .toNearestOrEven)
    /* dqdvi586 */ self.divideint128("Inf", "1000", "Infinity", .toNearestOrEven)
    /* dqdvi587 */ self.divideint128("Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi588 */ self.divideint128("-1000", "Inf", "-0", .toNearestOrEven)
    /* dqdvi589 */ self.divideint128("-Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi590 */ self.divideint128("-1", "Inf", "-0", .toNearestOrEven)
    /* dqdvi591 */ self.divideint128("-0", "Inf", "-0", .toNearestOrEven)
    /* dqdvi592 */ self.divideint128("0", "Inf", "0", .toNearestOrEven)
    /* dqdvi593 */ self.divideint128("1", "Inf", "0", .toNearestOrEven)
    /* dqdvi594 */ self.divideint128("1000", "Inf", "0", .toNearestOrEven)
    /* dqdvi595 */ self.divideint128("Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi600 */ self.divideint128("-Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi601 */ self.divideint128("-Inf", "-1000", "Infinity", .toNearestOrEven)
    /* dqdvi602 */ self.divideint128("-Inf", "-1", "Infinity", .toNearestOrEven)
    /* dqdvi603 */ self.divideint128("-Inf", "-0", "Infinity", .toNearestOrEven)
    /* dqdvi604 */ self.divideint128("-Inf", "0", "-Infinity", .toNearestOrEven)
    /* dqdvi605 */ self.divideint128("-Inf", "1", "-Infinity", .toNearestOrEven)
    /* dqdvi606 */ self.divideint128("-Inf", "1000", "-Infinity", .toNearestOrEven)
    /* dqdvi607 */ self.divideint128("-Inf", "Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi608 */ self.divideint128("-1000", "Inf", "-0", .toNearestOrEven)
    /* dqdvi609 */ self.divideint128("-Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi610 */ self.divideint128("-1", "-Inf", "0", .toNearestOrEven)
    /* dqdvi611 */ self.divideint128("-0", "-Inf", "0", .toNearestOrEven)
    /* dqdvi612 */ self.divideint128("0", "-Inf", "-0", .toNearestOrEven)
    /* dqdvi613 */ self.divideint128("1", "-Inf", "-0", .toNearestOrEven)
    /* dqdvi614 */ self.divideint128("1000", "-Inf", "-0", .toNearestOrEven)
    /* dqdvi615 */ self.divideint128("Inf", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi621 */ self.divideint128("NaN", "-Inf", "NaN", .toNearestOrEven)
    /* dqdvi622 */ self.divideint128("NaN", "-1000", "NaN", .toNearestOrEven)
    /* dqdvi623 */ self.divideint128("NaN", "-1", "NaN", .toNearestOrEven)
    /* dqdvi624 */ self.divideint128("NaN", "-0", "NaN", .toNearestOrEven)
    /* dqdvi625 */ self.divideint128("NaN", "0", "NaN", .toNearestOrEven)
    /* dqdvi626 */ self.divideint128("NaN", "1", "NaN", .toNearestOrEven)
    /* dqdvi627 */ self.divideint128("NaN", "1000", "NaN", .toNearestOrEven)
    /* dqdvi628 */ self.divideint128("NaN", "Inf", "NaN", .toNearestOrEven)
    /* dqdvi629 */ self.divideint128("NaN", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi630 */ self.divideint128("-Inf", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi631 */ self.divideint128("-1000", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi632 */ self.divideint128("-1", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi633 */ self.divideint128("-0", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi634 */ self.divideint128("0", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi635 */ self.divideint128("1", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi636 */ self.divideint128("1000", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi637 */ self.divideint128("Inf", "NaN", "NaN", .toNearestOrEven)
    /* dqdvi641 */ self.divideint128("sNaN", "-Inf", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi642 */ self.divideint128("sNaN", "-1000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi643 */ self.divideint128("sNaN", "-1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi644 */ self.divideint128("sNaN", "-0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi645 */ self.divideint128("sNaN", "0", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi646 */ self.divideint128("sNaN", "1", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi647 */ self.divideint128("sNaN", "1000", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi648 */ self.divideint128("sNaN", "NaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi649 */ self.divideint128("sNaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi650 */ self.divideint128("NaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi651 */ self.divideint128("-Inf", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi652 */ self.divideint128("-1000", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi653 */ self.divideint128("-1", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi654 */ self.divideint128("-0", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi655 */ self.divideint128("0", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi656 */ self.divideint128("1", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi657 */ self.divideint128("1000", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi658 */ self.divideint128("Inf", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi659 */ self.divideint128("NaN", "sNaN", "NaN", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi661 */ self.divideint128("NaN(0x9)", "-Inf", "NaN(0x9)", .toNearestOrEven)
    /* dqdvi662 */ self.divideint128("NaN(0x8)", "1000", "NaN(0x8)", .toNearestOrEven)
    /* dqdvi663 */ self.divideint128("NaN(0x7)", "Inf", "NaN(0x7)", .toNearestOrEven)
    /* dqdvi664 */ self.divideint128("-NaN(0x6)", "NaN(0x5)", "-NaN(0x6)", .toNearestOrEven)
    /* dqdvi665 */ self.divideint128("-Inf", "NaN(0x4)", "NaN(0x4)", .toNearestOrEven)
    /* dqdvi666 */ self.divideint128("-1000", "NaN(0x3)", "NaN(0x3)", .toNearestOrEven)
    /* dqdvi667 */ self.divideint128("Inf", "-NaN(0x2)", "-NaN(0x2)", .toNearestOrEven)
    /* dqdvi671 */ self.divideint128("-sNaN(0x63)", "-Inf", "-NaN(0x63)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi672 */ self.divideint128("sNaN(0x62)", "-1", "NaN(0x62)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi673 */ self.divideint128("sNaN(0x61)", "NaN", "NaN(0x61)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi674 */ self.divideint128("sNaN(0x60)", "sNaN(0x5e)", "NaN(0x60)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi675 */ self.divideint128("NaN(0x5f)", "sNaN(0x5d)", "NaN(0x5d)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi676 */ self.divideint128("-Inf", "sNaN(0x5c)", "NaN(0x5c)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi677 */ self.divideint128("0", "sNaN(0x5b)", "NaN(0x5b)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi678 */ self.divideint128("Inf", "-sNaN(0x5a)", "-NaN(0x5a)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi679 */ self.divideint128("NaN", "sNaN(0x59)", "NaN(0x59)", .toNearestOrEven, .isInvalidOperation)
    /* dqdvi700 */ self.divideint128("8.336804418094040989630006819881709E-6143", "8.336804418094040989630006819889000E-6143", "0", .toNearestOrEven)
  }

  private func divideint128(
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ rounding: DecimalFloatingPointRoundingRule,
    _ _expectedStatus: DecimalStatus? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal128(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = self.divideInt(arg0, by: arg1, rounding: rounding)
    self.assertEqualByEqualEqual(result, expected, file, line)
  }
}
