// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class IntelFromDecimalTests: XCTestCase, IntelMixin {

  func test_bid32_to_bid64() {
    self.bid32_to_bid64("0", "[00000000]", "[2520000000000000]", "00")
    self.bid32_to_bid64("0", "[00000001]", "[2520000000000001]", "00")
    self.bid32_to_bid64("0", "[00000066]", "[2520000000000066]", "00")
    self.bid32_to_bid64("0", "[00001231]", "[2520000000001231]", "00")
    self.bid32_to_bid64("0", "[000027db]", "[25200000000027db]", "00")
    self.bid32_to_bid64("0", "[000f1b60]", "[25200000000f1b60]", "00")
    self.bid32_to_bid64("0", "[0012d687]", "[252000000012d687]", "00")
    self.bid32_to_bid64("0", "[02800000]", "[25c0000000000000]", "00")
    self.bid32_to_bid64("0", "[02800001]", "[25c0000000000001]", "00")
    self.bid32_to_bid64("0", "[2f8f4240]", "[31000000000f4240]", "00")
    self.bid32_to_bid64("0", "[2f9e8480]", "[31000000001e8480]", "00")
    self.bid32_to_bid64("0", "[300186a0]", "[31200000000186a0]", "00")
    self.bid32_to_bid64("0", "[30030d40]", "[3120000000030d40]", "00")
    self.bid32_to_bid64("0", "[30802710]", "[3140000000002710]", "00")
    self.bid32_to_bid64("0", "[30804e20]", "[3140000000004e20]", "00")
    self.bid32_to_bid64("0", "[310003e8]", "[31600000000003e8]", "00")
    self.bid32_to_bid64("0", "[310007d0]", "[31600000000007d0]", "00")
    self.bid32_to_bid64("0", "[31800064]", "[3180000000000064]", "00")
    self.bid32_to_bid64("0", "[318000c8]", "[31800000000000c8]", "00")
    self.bid32_to_bid64("0", "[3200000a]", "[31a000000000000a]", "00")
    self.bid32_to_bid64("0", "[32000014]", "[31a0000000000014]", "00")
    self.bid32_to_bid64("0", "[32800001]", "[31c0000000000001]", "00")
    self.bid32_to_bid64("0", "[32800002]", "[31c0000000000002]", "00")
    self.bid32_to_bid64("0", "[32800003]", "[31c0000000000003]", "00")
    self.bid32_to_bid64("0", "[32800004]", "[31c0000000000004]", "00")
    self.bid32_to_bid64("0", "[32800008]", "[31c0000000000008]", "00")
    self.bid32_to_bid64("0", "[32800010]", "[31c0000000000010]", "00")
    self.bid32_to_bid64("0", "[32800020]", "[31c0000000000020]", "00")
    self.bid32_to_bid64("0", "[32800040]", "[31c0000000000040]", "00")
    self.bid32_to_bid64("0", "[32800080]", "[31c0000000000080]", "00")
    self.bid32_to_bid64("0", "[32800100]", "[31c0000000000100]", "00")
    self.bid32_to_bid64("0", "[32800200]", "[31c0000000000200]", "00")
    self.bid32_to_bid64("0", "[32800400]", "[31c0000000000400]", "00")
    self.bid32_to_bid64("0", "[32800800]", "[31c0000000000800]", "00")
    self.bid32_to_bid64("0", "[32801000]", "[31c0000000001000]", "00")
    self.bid32_to_bid64("0", "[32802000]", "[31c0000000002000]", "00")
    self.bid32_to_bid64("0", "[32804000]", "[31c0000000004000]", "00")
    self.bid32_to_bid64("0", "[32808000]", "[31c0000000008000]", "00")
    self.bid32_to_bid64("0", "[32810000]", "[31c0000000010000]", "00")
    self.bid32_to_bid64("0", "[32820000]", "[31c0000000020000]", "00")
    self.bid32_to_bid64("0", "[32840000]", "[31c0000000040000]", "00")
    self.bid32_to_bid64("0", "[32880000]", "[31c0000000080000]", "00")
    self.bid32_to_bid64("0", "[32900000]", "[31c0000000100000]", "00")
    self.bid32_to_bid64("0", "[32a00000]", "[31c0000000200000]", "00")
    self.bid32_to_bid64("0", "[32c00000]", "[31c0000000400000]", "00")
    self.bid32_to_bid64("0", "[3319999a]", "[31e000000019999a]", "00")
    self.bid32_to_bid64("0", "[33333333]", "[31e0000000333333]", "00")
    self.bid32_to_bid64("0", "[33666666]", "[31e0000000666666]", "00")
    self.bid32_to_bid64("0", "[33947ae1]", "[3200000000147ae1]", "00")
    self.bid32_to_bid64("0", "[33a8f5c3]", "[320000000028f5c3]", "00")
    self.bid32_to_bid64("0", "[5f000000]", "[3ce0000000000000]", "00")
    self.bid32_to_bid64("0", "[5f000001]", "[3ce0000000000001]", "00")
    self.bid32_to_bid64("0", "[5f12d687]", "[3ce000000012d687]", "00")
    self.bid32_to_bid64("0", "[5f800000]", "[3d00000000000000]", "00")
    self.bid32_to_bid64("0", "[5f800001]", "[3d00000000000001]", "00")
    self.bid32_to_bid64("0", "[5f8f4241]", "[3d000000000f4241]", "00")
    self.bid32_to_bid64("0", "[5f92d687]", "[3d0000000012d687]", "00")
    self.bid32_to_bid64("0", "[6018967f]", "[252000000098967f]", "00")
    self.bid32_to_bid64("0", "[607fffff]", "[2580000000000000]", "00")
    self.bid32_to_bid64("0", "[658c3437]", "[2aa00000008c3437]", "00")
    self.bid32_to_bid64("0", "[6ca00000]", "[31c0000000800000]", "00")
    self.bid32_to_bid64("0", "[77eae409]", "[3d000000008ae409]", "00")
    self.bid32_to_bid64("0", "[77f8967e]", "[3d0000000098967e]", "00")
    self.bid32_to_bid64("0", "[77f8967f]", "[3d0000000098967f]", "00")
    self.bid32_to_bid64("0", "[78000000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78000001]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78001000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[780fffff]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78f00000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78f00001]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78ffffff]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[7c000000]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7c000001]", "[7c0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[7c000100]", "[7c00003b9aca0000]", "00")
    self.bid32_to_bid64("0", "[7c001000]", "[7c0003b9aca00000]", "00")
    self.bid32_to_bid64("0", "[7c0fffff]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7cf00000]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7cf00001]", "[7c0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[7cffffff]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7e000000]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7e000001]", "[7c0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[7e000100]", "[7c00003b9aca0000]", "01")
    self.bid32_to_bid64("0", "[7e0fffff]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7ef00000]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7ef00001]", "[7c0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[7effffff]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[80000000]", "[a520000000000000]", "00")
    self.bid32_to_bid64("0", "[80000001]", "[a520000000000001]", "00")
    self.bid32_to_bid64("0", "[800007d0]", "[a5200000000007d0]", "00")
    self.bid32_to_bid64("0", "[800027db]", "[a5200000000027db]", "00")
    self.bid32_to_bid64("0", "[808000c8]", "[a5400000000000c8]", "00")
    self.bid32_to_bid64("0", "[81000014]", "[a560000000000014]", "00")
    self.bid32_to_bid64("0", "[81800002]", "[a580000000000002]", "00")
    self.bid32_to_bid64("0", "[df8f4241]", "[bd000000000f4241]", "00")
    self.bid32_to_bid64("0", "[df92d687]", "[bd0000000012d687]", "00")
    self.bid32_to_bid64("0", "[f420b31f]", "[b94000000080b31f]", "00")
    self.bid32_to_bid64("0", "[f71fffff]", "[bc20000000000000]", "00")
    self.bid32_to_bid64("0", "[f7f8967e]", "[bd0000000098967e]", "00")
    self.bid32_to_bid64("0", "[f7f8967f]", "[bd0000000098967f]", "00")
    self.bid32_to_bid64("0", "[f8000000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8000001]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8001000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f80fffff]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8f00000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8f00001]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8ffffff]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[fc000000]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fc000001]", "[fc0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[fc001000]", "[fc0003b9aca00000]", "00")
    self.bid32_to_bid64("0", "[fc0fffff]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fcf00000]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fcf00001]", "[fc0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[fcffffff]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fe000000]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fe000001]", "[fc0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[fe000100]", "[fc00003b9aca0000]", "01")
    self.bid32_to_bid64("0", "[fe0fffff]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fef00000]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fef00001]", "[fc0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[feffffff]", "[fc00000000000000]", "01")
  }

  private func bid32_to_bid64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(arg0)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_bid128() {
    self.bid32_to_bid128("0", "[3d000000]", "[306a0000000000000000000000000000]", "00")
    self.bid32_to_bid128("0", "[7c000100]", "[7c0000033b2e3c9fd0803ce800000000]", "00")
    self.bid32_to_bid128("0", "[92229c08]", "[afbe0000000000000000000000229c08]", "00")
    self.bid32_to_bid128("0", "[e5c005c3]", "[afd200000000000000000000008005c3]", "00")
    self.bid32_to_bid128("0", "[fe000000]", "[fc000000000000000000000000000000]", "01")
    self.bid32_to_bid128("0", "-Infinity", "[f8000000000000000000000000000000]", "00")
  }

  private func bid32_to_bid128(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal128(arg0)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_bid32() {
    self.bid64_to_bid32("0", "[0000000002081018]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[0000000004000001]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[00009405c2420001]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[2401080102d11508]", "[00046de3]", "30")
    self.bid64_to_bid32("0", "[4040000000008000]", "[78000000]", "28")
    self.bid64_to_bid32("0", "[45e3aa726bf8c1af]", "[78000000]", "28")
    self.bid64_to_bid32("0", "[68fb86f234263601]", "[000f4240]", "30")
    self.bid64_to_bid32("0", "[7c00003b9aca0000]", "[7c000100]", "00")
    self.bid64_to_bid32("0", "[7e73e8f4c9c3c3b8]", "[7c000000]", "01")
    self.bid64_to_bid32("0", "9.999999999999999E+384", "[78000000]", "28")
    self.bid64_to_bid32("0", "[b563ebfdfefd7e36]", "[c590d81d]", "20")
    self.bid64_to_bid32("0", "[e895d1a75bc418c6]", "[80000000]", "00")
    self.bid64_to_bid32("0", "[e8fb86f234263601]", "[800f4240]", "30")
    self.bid64_to_bid32("0", "[ec60334bd86bec30]", "[ed8a4cb0]", "20")
    self.bid64_to_bid32("0", "[f7effbbfeffff6ff]", "[df800000]", "00")
    self.bid64_to_bid32("0", "[f8e033e5145dcea9]", "[f8000000]", "00")
    self.bid64_to_bid32("1", "[0000000002081018]", "[00000000]", "30")
    self.bid64_to_bid32("1", "[00009405c2420001]", "[00000000]", "30")
    self.bid64_to_bid32("1", "[45e3aa726bf8c1af]", "[77f8967f]", "28")
    self.bid64_to_bid32("1", "[68fb86f234263601]", "[000f423f]", "30")
    self.bid64_to_bid32("1", "[8409fa41e971c020]", "[80000001]", "30")
    self.bid64_to_bid32("1", "[e8fb86f234263601]", "[800f4240]", "30", underflowBeforeOnly: true)
    self.bid64_to_bid32("2", "[0000000002081018]", "[00000001]", "30")
    self.bid64_to_bid32("2", "[00009405c2420001]", "[00000001]", "30")
    self.bid64_to_bid32("2", "[45e3aa726bf8c1af]", "[78000000]", "28")
    self.bid64_to_bid32("2", "[68fb86f234263601]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid64_to_bid32("2", "[8a6d66b1506ee969]", "[80000000]", "30")
    self.bid64_to_bid32("2", "[d7d0e396fb4bffa3]", "[f7f8967f]", "28")
    self.bid64_to_bid32("2", "[e8fb86f234263601]", "[800f423f]", "30")
    self.bid64_to_bid32("3", "[45e3aa726bf8c1af]", "[77f8967f]", "28")
    self.bid64_to_bid32("3", "[68fb86f234263601]", "[000f423f]", "30")
    self.bid64_to_bid32("3", "[e8fb86f234263601]", "[800f423f]", "30")
    self.bid64_to_bid32("4", "[68fb86f234263601]", "[000f4240]", "30")
    self.bid64_to_bid32("4", "[e8fb86f234263601]", "[800f4240]", "30")
  }

  private func bid64_to_bid32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_bid128() {
    self.bid64_to_bid128("0", "[0000000000000000]", "[2d240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[0000000000000001]", "[2d240000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[0000000000000064]", "[2d240000000000000000000000000064]", "00")
    self.bid64_to_bid128("0", "[0000000000989e50]", "[2d240000000000000000000000989e50]", "00")
    self.bid64_to_bid128("0", "[00001231276e5fb2]", "[2d2400000000000000001231276e5fb2]", "00")
    self.bid64_to_bid128("0", "[000462d53c8abac0]", "[2d24000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[00071b33671d6160]", "[2d2400000000000000071b33671d6160]", "00")
    self.bid64_to_bid128("0", "[0020000000000000]", "[2d260000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[002462d53c8abac0]", "[2d26000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[0040000005f62f23]", "[2d280000000000000000000005f62f23]", "00")
    self.bid64_to_bid128("0", "[00a0000005f62f23]", "[2d2e0000000000000000000005f62f23]", "00")
    self.bid64_to_bid128("0", "[01a0000000000000]", "[2d3e0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[01a0000000000001]", "[2d3e0000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[2fe71afd498d0000]", "[302200000000000000071afd498d0000]", "00")
    self.bid64_to_bid128("0", "[3000b5e620f48000]", "[30240000000000000000b5e620f48000]", "00")
    self.bid64_to_bid128("0", "[302012309ce54000]", "[3026000000000000000012309ce54000]", "00")
    self.bid64_to_bid128("0", "[304001d1a94a2000]", "[3028000000000000000001d1a94a2000]", "00")
    self.bid64_to_bid128("0", "[3060002e90edd000]", "[302a0000000000000000002e90edd000]", "00")
    self.bid64_to_bid128("0", "[30800004a817c800]", "[302c00000000000000000004a817c800]", "00")
    self.bid64_to_bid128("0", "[30a0000077359400]", "[302e0000000000000000000077359400]", "00")
    self.bid64_to_bid128("0", "[30c000000bebc200]", "[3030000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[30e0000001312d00]", "[30320000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[31000000001e8480]", "[303400000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[3120000000030d40]", "[30360000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[3140000000004e20]", "[30380000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[31600000000007d0]", "[303a00000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[31800000000000c8]", "[303c00000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[31a0000000000014]", "[303e0000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[31c0000000000001]", "[30400000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[31c0000000000002]", "[30400000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[31c0000000000003]", "[30400000000000000000000000000003]", "00")
    self.bid64_to_bid128("0", "[31c0000000000004]", "[30400000000000000000000000000004]", "00")
    self.bid64_to_bid128("0", "[31c0000000000008]", "[30400000000000000000000000000008]", "00")
    self.bid64_to_bid128("0", "[31c0000000000010]", "[30400000000000000000000000000010]", "00")
    self.bid64_to_bid128("0", "[31c0000000000020]", "[30400000000000000000000000000020]", "00")
    self.bid64_to_bid128("0", "[31c0000000000040]", "[30400000000000000000000000000040]", "00")
    self.bid64_to_bid128("0", "[31c0000000000080]", "[30400000000000000000000000000080]", "00")
    self.bid64_to_bid128("0", "[31c0000000000100]", "[30400000000000000000000000000100]", "00")
    self.bid64_to_bid128("0", "[31c0000000000200]", "[30400000000000000000000000000200]", "00")
    self.bid64_to_bid128("0", "[31c0000000000400]", "[30400000000000000000000000000400]", "00")
    self.bid64_to_bid128("0", "[31c0000000000800]", "[30400000000000000000000000000800]", "00")
    self.bid64_to_bid128("0", "[31c0000000001000]", "[30400000000000000000000000001000]", "00")
    self.bid64_to_bid128("0", "[31c0000000002000]", "[30400000000000000000000000002000]", "00")
    self.bid64_to_bid128("0", "[31c0000000004000]", "[30400000000000000000000000004000]", "00")
    self.bid64_to_bid128("0", "[31c0000000008000]", "[30400000000000000000000000008000]", "00")
    self.bid64_to_bid128("0", "[31c0000000010000]", "[30400000000000000000000000010000]", "00")
    self.bid64_to_bid128("0", "[31c0000000020000]", "[30400000000000000000000000020000]", "00")
    self.bid64_to_bid128("0", "[31c0000000040000]", "[30400000000000000000000000040000]", "00")
    self.bid64_to_bid128("0", "[31c0000000080000]", "[30400000000000000000000000080000]", "00")
    self.bid64_to_bid128("0", "[31c0000000100000]", "[30400000000000000000000000100000]", "00")
    self.bid64_to_bid128("0", "[31c0000000200000]", "[30400000000000000000000000200000]", "00")
    self.bid64_to_bid128("0", "[31c0000000400000]", "[30400000000000000000000000400000]", "00")
    self.bid64_to_bid128("0", "[31c0000000800000]", "[30400000000000000000000000800000]", "00")
    self.bid64_to_bid128("0", "[31c0000001000000]", "[30400000000000000000000001000000]", "00")
    self.bid64_to_bid128("0", "[31c0000002000000]", "[30400000000000000000000002000000]", "00")
    self.bid64_to_bid128("0", "[31c0000004000000]", "[30400000000000000000000004000000]", "00")
    self.bid64_to_bid128("0", "[31c0000008000000]", "[30400000000000000000000008000000]", "00")
    self.bid64_to_bid128("0", "[31c0000010000000]", "[30400000000000000000000010000000]", "00")
    self.bid64_to_bid128("0", "[31c0000020000000]", "[30400000000000000000000020000000]", "00")
    self.bid64_to_bid128("0", "[31c0000040000000]", "[30400000000000000000000040000000]", "00")
    self.bid64_to_bid128("0", "[31c0000080000000]", "[30400000000000000000000080000000]", "00")
    self.bid64_to_bid128("0", "[31c0000100000000]", "[30400000000000000000000100000000]", "00")
    self.bid64_to_bid128("0", "[31c0000200000000]", "[30400000000000000000000200000000]", "00")
    self.bid64_to_bid128("0", "[31c0000400000000]", "[30400000000000000000000400000000]", "00")
    self.bid64_to_bid128("0", "[31c0000800000000]", "[30400000000000000000000800000000]", "00")
    self.bid64_to_bid128("0", "[31c0001000000000]", "[30400000000000000000001000000000]", "00")
    self.bid64_to_bid128("0", "[31c0002000000000]", "[30400000000000000000002000000000]", "00")
    self.bid64_to_bid128("0", "[31c0004000000000]", "[30400000000000000000004000000000]", "00")
    self.bid64_to_bid128("0", "[31c0008000000000]", "[30400000000000000000008000000000]", "00")
    self.bid64_to_bid128("0", "[31c0010000000000]", "[30400000000000000000010000000000]", "00")
    self.bid64_to_bid128("0", "[31c0020000000000]", "[30400000000000000000020000000000]", "00")
    self.bid64_to_bid128("0", "[31c0040000000000]", "[30400000000000000000040000000000]", "00")
    self.bid64_to_bid128("0", "[31c0080000000000]", "[30400000000000000000080000000000]", "00")
    self.bid64_to_bid128("0", "[31c0100000000000]", "[30400000000000000000100000000000]", "00")
    self.bid64_to_bid128("0", "[31c0200000000000]", "[30400000000000000000200000000000]", "00")
    self.bid64_to_bid128("0", "[31c0400000000000]", "[30400000000000000000400000000000]", "00")
    self.bid64_to_bid128("0", "[31c0800000000000]", "[30400000000000000000800000000000]", "00")
    self.bid64_to_bid128("0", "[31c1000000000000]", "[30400000000000000001000000000000]", "00")
    self.bid64_to_bid128("0", "[31c2000000000000]", "[30400000000000000002000000000000]", "00")
    self.bid64_to_bid128("0", "[31c4000000000000]", "[30400000000000000004000000000000]", "00")
    self.bid64_to_bid128("0", "[31c8000000000000]", "[30400000000000000008000000000000]", "00")
    self.bid64_to_bid128("0", "[31d0000000000000]", "[30400000000000000010000000000000]", "00")
    self.bid64_to_bid128("0", "[3c671afd498d0000]", "[30ea00000000000000071afd498d0000]", "00")
    self.bid64_to_bid128("0", "[3c80b5e620f48000]", "[30ec0000000000000000b5e620f48000]", "00")
    self.bid64_to_bid128("0", "[3ca012309ce54000]", "[30ee000000000000000012309ce54000]", "00")
    self.bid64_to_bid128("0", "[3cc001d1a94a2000]", "[30f0000000000000000001d1a94a2000]", "00")
    self.bid64_to_bid128("0", "[3ce0002e90edd000]", "[30f20000000000000000002e90edd000]", "00")
    self.bid64_to_bid128("0", "[3d000004a817c800]", "[30f400000000000000000004a817c800]", "00")
    self.bid64_to_bid128("0", "[3d20000077359400]", "[30f60000000000000000000077359400]", "00")
    self.bid64_to_bid128("0", "[3d4000000bebc200]", "[30f8000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[3d60000001312d00]", "[30fa0000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[3d800000001e8480]", "[30fc00000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[3da0000000030d40]", "[30fe0000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[3dc0000000004e20]", "[31000000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[3de00000000007d0]", "[310200000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[3e000000000000c8]", "[310400000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[3e20000000000014]", "[31060000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[3e40000000000002]", "[31080000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[5fa0000000000000]", "[331e0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fa0000000000001]", "[331e0000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[5fc0000000000000]", "[33200000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fc462d53c8abac0]", "[3320000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[5fe0000000000000]", "[33220000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fe71b33671d6160]", "[332200000000000000071b33671d6160]", "00")
    self.bid64_to_bid128("0", "[5fe841f5e8ceedc0]", "[3322000000000000000841f5e8ceedc0]", "00")
    self.bid64_to_bid128("0", "[6002b75d7734cd9e]", "[2d240000000000000022b75d7734cd9e]", "00")
    self.bid64_to_bid128("0", "[6003b75d7734cd9e]", "[2d240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[69dbb75d7734cd9e]", "[2f9a0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[6c70000000000000]", "[30400000000000000020000000000000]", "00")
    self.bid64_to_bid128("0", "[77fb81c8f23c4dc0]", "[3322000000000000002381c8f23c4dc0]", "00")
    self.bid64_to_bid128("0", "[77fb86f26fc0fffe]", "[3322000000000000002386f26fc0fffe]", "00")
    self.bid64_to_bid128("0", "[77fb86f26fc0ffff]", "[3322000000000000002386f26fc0ffff]", "00")
    self.bid64_to_bid128("0", "[7800000000000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7800000000000001]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7800000100000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7803ffffffffffff]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f0000000000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f0000000000001]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f3ffffffffffff]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00000000000000]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00000000000001]", "[7c000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[7c00000100000000]", "[7c0000000de0b6b3a764000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00003b9aca0000]", "[7c0000033b2e3c9fd0803ce800000000]", "00")
    self.bid64_to_bid128("0", "[7c03ffffffffffff]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7cf0000000000000]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7cf0000000000001]", "[7c000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[7cf3ffffffffffff]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7e00000000000000]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7e00000000000001]", "[7c000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[7e00000100000000]", "[7c0000000de0b6b3a764000000000000]", "01")
    self.bid64_to_bid128("0", "[7e03ffffffffffff]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7ef0000000000000]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7ef0000000000001]", "[7c000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[7ef3ffffffffffff]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[8000000000000001]", "[ad240000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[800000000000000c]", "[ad24000000000000000000000000000c]", "00")
    self.bid64_to_bid128("0", "[800000000bebc200]", "[ad24000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[8020000001312d00]", "[ad260000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[80400000001e8480]", "[ad2800000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[8060000000030d40]", "[ad2a0000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[8080000000004e20]", "[ad2c0000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[80a00000000007d0]", "[ad2e00000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[80c00000000000c8]", "[ad3000000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[80e0000000000014]", "[ad320000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[8100000000000002]", "[ad340000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[dfc0000000000000]", "[b3200000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[dfc0000000000001]", "[b3200000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[dfe462d53c8abac0]", "[b322000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[e002b75d7734cd9e]", "[ad240000000000000022b75d7734cd9e]", "00")
    self.bid64_to_bid128("0", "[e003b75d7734cd9e]", "[ad240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[e9dbb75d7734cd9e]", "[af9a0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f7fb86f26fc0ffff]", "[b322000000000000002386f26fc0ffff]", "00")
    self.bid64_to_bid128("0", "[f800000000000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f800000000000001]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f800000100000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f803ffffffffffff]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f0000000000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f0000000000001]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f3ffffffffffff]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fc00000000000000]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fc00000000000001]", "[fc000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[fc00000100000000]", "[fc0000000de0b6b3a764000000000000]", "00")
    self.bid64_to_bid128("0", "[fc03ffffffffffff]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fcf0000000000000]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fcf0000000000001]", "[fc000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[fcf3ffffffffffff]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fe00000000000000]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fe00000000000001]", "[fc000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[fe00000100000000]", "[fc0000000de0b6b3a764000000000000]", "01")
    self.bid64_to_bid128("0", "[fe03ffffffffffff]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fef0000000000000]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fef0000000000001]", "[fc000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[fef3ffffffffffff]", "[fc000000000000000000000000000000]", "01")
  }

  private func bid64_to_bid128(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal128(arg0)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_to_bid32() {
    self.bid128_to_bid32("0", "[0000000000000000,0000000001200200]", "[00000000]", "30")
    self.bid128_to_bid32("0", "-0.000000000011000000000E5137", "[f8000000]", "28")
    self.bid128_to_bid32("0", "[0001ed09bead87c0378d8e62ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("0", "[0001ed09bead87c0378d8e64ffffffff]", "[00000000]", "00")
    self.bid128_to_bid32("0", "[0100021000040045,80010040a2408000]", "[00000000]", "30")
    self.bid128_to_bid32("0", "-1000.101000E-1885", "[80000000]", "30")
    self.bid128_to_bid32("0", "1E+367", "[78000000]", "28")
    self.bid128_to_bid32("0", "[2000000000080c00,a4870413f5a4ffe8]", "[00000000]", "30")
    self.bid128_to_bid32("0", "[2cffed09bead87c0378d8e63ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("0", "[2f720000000000000000000005f5e0fb]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid32("0", "[69857aaa11d2057e,596109f05958a963]", "[00000000]", "00")
    self.bid128_to_bid32("0", "[7c0000033b2e3c9fd0803ce800000000]", "[7c000100]", "00")
    self.bid128_to_bid32("0", "[7c003fffffffffff38c15b08ffffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("0", "[7c003fffffffffff38c15b0affffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("0", "[7c916e845d860ed7,82a65a666200660d]", "[7c0e6575]", "00")
    self.bid128_to_bid32("0", "9.999999999999999E+384", "[78000000]", "28")
    self.bid128_to_bid32("0", "[9b5bfd3199ec9622,da0bec09de4f1828]", "[80000000]", "00")
    self.bid128_to_bid32("0", "[9e903b074149442e,8a6d32abd27f38ac]", "[80000000]", "30")
    self.bid128_to_bid32("0", "[acffed09bead87c0378d8e63ffffffff]", "[80000000]", "30")
    self.bid128_to_bid32("0", "[af3b0381239bdaba,3825cb8cb3b608b7]", "[8000148f]", "30")
    self.bid128_to_bid32("0", "[af720000000000000000000005f5e0fb]", "[800f4240]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid32("0", "[afd9b62ab9362555,1e55f1f5559b9527]", "[e9879b28]", "20")
    self.bid128_to_bid32("0", "[f5e98b6f9f5afe7e,0400422022000040]", "[df800000]", "00")
    self.bid128_to_bid32("0", "[fb17407129ade7dd,f95f73ccd42c5a59]", "[f8000000]", "00")
    self.bid128_to_bid32("0", "[feffffefffffefef,b7d58ddefda6ff82]", "[fc000000]", "01")
    self.bid128_to_bid32("1", "-0.000000000011000000000E5137", "[f8000000]", "28")
    self.bid128_to_bid32("1", "[0001ed09bead87c0378d8e62ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("1", "[0001ed09bead87c0378d8e64ffffffff]", "[00000000]", "00")
    self.bid128_to_bid32("1", "-100000000000000000000000000000.000000E2100", "[f8000000]", "28")
    self.bid128_to_bid32("1", "[2cffed09bead87c0378d8e63ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("1", "[2f720000000000000000000005f5e0fb]", "[000f423f]", "30")
    self.bid128_to_bid32("1", "[4002080001080000,0dff45cfdaffa585]", "[77f8967f]", "28")
    self.bid128_to_bid32("1", "[7c003fffffffffff38c15b08ffffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("1", "[7c003fffffffffff38c15b0affffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("1", "[acffed09bead87c0378d8e63ffffffff]", "[80000001]", "30")
    self.bid128_to_bid32("1", "[af720000000000000000000005f5e0fb]", "[800f4240]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid32("1", "[dd030482e0a24502,e7f42fa8dffbafdf]", "[f8000000]", "28")
    self.bid128_to_bid32("2", "[0001ed09bead87c0378d8e62ffffffff]", "[00000001]", "30")
    self.bid128_to_bid32("2", "[0001ed09bead87c0378d8e64ffffffff]", "[00000000]", "00")
    self.bid128_to_bid32("2", "[2cffed09bead87c0378d8e63ffffffff]", "[00000001]", "30")
    self.bid128_to_bid32("2", "[2f720000000000000000000005f5e0fb]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid32("2", "[7c003fffffffffff38c15b08ffffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("2", "[7c003fffffffffff38c15b0affffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("2", "[9e903b074149442e,8a6d32abd27f38ac]", "[80000000]", "30")
    self.bid128_to_bid32("2", "[acffed09bead87c0378d8e63ffffffff]", "[80000000]", "30")
    self.bid128_to_bid32("2", "[af720000000000000000000005f5e0fb]", "[800f423f]", "30")
    self.bid128_to_bid32("2", "[c8211f3889c7ddf4,4c0ae01390392c44]", "[f7f8967f]", "28")
    self.bid128_to_bid32("3", "[0001ed09bead87c0378d8e62ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("3", "[0001ed09bead87c0378d8e64ffffffff]", "[00000000]", "00")
    self.bid128_to_bid32("3", "[2cffed09bead87c0378d8e63ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("3", "[2f720000000000000000000005f5e0fb]", "[000f423f]", "30")
    self.bid128_to_bid32("3", "[7c003fffffffffff38c15b08ffffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("3", "[7c003fffffffffff38c15b0affffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("3", "[acffed09bead87c0378d8e63ffffffff]", "[80000000]", "30")
    self.bid128_to_bid32("3", "[af720000000000000000000005f5e0fb]", "[800f423f]", "30")
    self.bid128_to_bid32("3", "[c8211f3889c7ddf4,4c0ae01390392c44]", "[f7f8967f]", "28")
    self.bid128_to_bid32("4", "[0001ed09bead87c0378d8e62ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("4", "[0001ed09bead87c0378d8e64ffffffff]", "[00000000]", "00")
    self.bid128_to_bid32("4", "[2cffed09bead87c0378d8e63ffffffff]", "[00000000]", "30")
    self.bid128_to_bid32("4", "[2f720000000000000000000005f5e0fb]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid32("4", "[7c003fffffffffff38c15b08ffffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("4", "[7c003fffffffffff38c15b0affffffff]", "[7c000000]", "00")
    self.bid128_to_bid32("4", "[acffed09bead87c0378d8e63ffffffff]", "[80000000]", "30")
    self.bid128_to_bid32("4", "[af720000000000000000000005f5e0fb]", "[800f4240]", "30", underflowBeforeOnly: true)
  }

  private func bid128_to_bid32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_to_bid64() {
    self.bid128_to_bid64("0", "[0000000000000000,0080100000800080]", "[0000000000000000]", "30")
    self.bid128_to_bid64("0", "[0001ed09bead87c0378d8e62ffffffff]", "[0000000000000000]", "30")
    self.bid128_to_bid64("0", "[0001ed09bead87c0378d8e64ffffffff]", "[0000000000000000]", "00")
    self.bid128_to_bid64("0", "1.234567890123456E-397", "[000000000000000c]", "30")
    self.bid128_to_bid64("0", "1.234567890123456E-398", "[0000000000000001]", "30")
    self.bid128_to_bid64("0", "[2ce1230b00900000,002a008000c20080]", "[0000000000000001]", "30")
    self.bid128_to_bid64("0", "[2cffed09bead87c0378d8e63ffffffff]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("0", "[2d1e0000000000000de0b6b3a763ffa1]", "[00038d7ea4c68000]", "30")
    self.bid128_to_bid64("0", "[2d20000000000000016345785d89fffb]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("0", "[2f720000000000000000000005f5e0fb]", "[24e0000005f5e0fb]", "00")
    self.bid128_to_bid64("0", "[4000000000000000,009010e002120858]", "[7800000000000000]", "28")
    self.bid128_to_bid64("0", "[4e37fa4093c6d5fa,7eff7fef7f7afff6]", "[5fe0000000000000]", "00")
    self.bid128_to_bid64("0", "[7c0000033b2e3c9fd0803ce800000000]", "[7c00003b9aca0000]", "00")
    self.bid128_to_bid64("0", "[7c003fffffffffff38c15b08ffffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("0", "[7c003fffffffffff38c15b0affffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("0", "[acffed09bead87c0378d8e63ffffffff]", "[80038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("0", "[af720000000000000000000005f5e0fb]", "[a4e0000005f5e0fb]", "00")
    self.bid128_to_bid64("0", "[e3396e4f8d790fc9,b5c7464701b29b6b]", "[8000000000000000]", "00")
    self.bid128_to_bid64("0", "[ffffff7fffffffff,ffc77fffff3fffdf]", "[fc00000000000000]", "01")
    self.bid128_to_bid64("1", "[0001ed09bead87c0378d8e62ffffffff]", "[0000000000000000]", "30")
    self.bid128_to_bid64("1", "[0001ed09bead87c0378d8e64ffffffff]", "[0000000000000000]", "00")
    self.bid128_to_bid64("1", "[2cffed09bead87c0378d8e63ffffffff]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("1", "[2d1e0000000000000de0b6b3a763ffa1]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("1", "[2d20000000000000016345785d89fffb]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("1", "[2f720000000000000000000005f5e0fb]", "[24e0000005f5e0fb]", "00")
    self.bid128_to_bid64("1", "[7c003fffffffffff38c15b08ffffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("1", "[7c003fffffffffff38c15b0affffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("1", "[acffed09bead87c0378d8e63ffffffff]", "[80038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("1", "[af720000000000000000000005f5e0fb]", "[a4e0000005f5e0fb]", "00")
    self.bid128_to_bid64("2", "[0001ed09bead87c0378d8e62ffffffff]", "[0000000000000001]", "30")
    self.bid128_to_bid64("2", "[0001ed09bead87c0378d8e64ffffffff]", "[0000000000000000]", "00")
    self.bid128_to_bid64("2", "[2cffed09bead87c0378d8e63ffffffff]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("2", "[2d1e0000000000000de0b6b3a763ffa1]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("2", "[2d20000000000000016345785d89fffb]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("2", "[2f720000000000000000000005f5e0fb]", "[24e0000005f5e0fb]", "00")
    self.bid128_to_bid64("2", "[7c003fffffffffff38c15b08ffffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("2", "[7c003fffffffffff38c15b0affffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("2", "[8ee8068322a31587,b7a0d168b1fee707]", "[8000000000000000]", "30")
    self.bid128_to_bid64("2", "[acffed09bead87c0378d8e63ffffffff]", "[80038d7ea4c67fff]", "30")
    self.bid128_to_bid64("2", "[af720000000000000000000005f5e0fb]", "[a4e0000005f5e0fb]", "00")
    self.bid128_to_bid64("3", "[0001ed09bead87c0378d8e62ffffffff]", "[0000000000000000]", "30")
    self.bid128_to_bid64("3", "[0001ed09bead87c0378d8e64ffffffff]", "[0000000000000000]", "00")
    self.bid128_to_bid64("3", "[2cffed09bead87c0378d8e63ffffffff]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("3", "[2d1e0000000000000de0b6b3a763ffa1]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("3", "[2d20000000000000016345785d89fffb]", "[00038d7ea4c67fff]", "30")
    self.bid128_to_bid64("3", "[2f720000000000000000000005f5e0fb]", "[24e0000005f5e0fb]", "00")
    self.bid128_to_bid64("3", "[7c003fffffffffff38c15b08ffffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("3", "[7c003fffffffffff38c15b0affffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("3", "[acffed09bead87c0378d8e63ffffffff]", "[80038d7ea4c67fff]", "30")
    self.bid128_to_bid64("3", "[af720000000000000000000005f5e0fb]", "[a4e0000005f5e0fb]", "00")
    self.bid128_to_bid64("4", "[0001ed09bead87c0378d8e62ffffffff]", "[0000000000000000]", "30")
    self.bid128_to_bid64("4", "[0001ed09bead87c0378d8e64ffffffff]", "[0000000000000000]", "00")
    self.bid128_to_bid64("4", "[2cffed09bead87c0378d8e63ffffffff]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("4", "[2d1e0000000000000de0b6b3a763ffa1]", "[00038d7ea4c68000]", "30")
    self.bid128_to_bid64("4", "[2d20000000000000016345785d89fffb]", "[00038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("4", "[2f720000000000000000000005f5e0fb]", "[24e0000005f5e0fb]", "00")
    self.bid128_to_bid64("4", "[7c003fffffffffff38c15b08ffffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("4", "[7c003fffffffffff38c15b0affffffff]", "[7c00000000000000]", "00")
    self.bid128_to_bid64("4", "[acffed09bead87c0378d8e63ffffffff]", "[80038d7ea4c68000]", "30", underflowBeforeOnly: true)
    self.bid128_to_bid64("4", "[af720000000000000000000005f5e0fb]", "[a4e0000005f5e0fb]", "00")
  }

  private func bid128_to_bid64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_decimalToDecimal(arg0, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }
}
