// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class IntelDecimal64Tests: XCTestCase, IntelMixin {

  func test_bid64_abs() {
    self.bid64_abs("0", "-0", "[31c0000000000000]", "00")
    self.bid64_abs("0", "[0c2f000000000000]", "[0c2f000000000000]", "00")
    self.bid64_abs("0", "[0eada90166c6c0e3]", "[0eada90166c6c0e3]", "00")
    self.bid64_abs("0", "[3a52266e9c893405]", "[3a52266e9c893405]", "00")
    self.bid64_abs("0", "[4820000000000000]", "[4820000000000000]", "00")
    self.bid64_abs("0", "[4c25e2eef8bedf06]", "[4c25e2eef8bedf06]", "00")
    self.bid64_abs("0", "[5972aa2ec1ca6dac]", "[5972aa2ec1ca6dac]", "00")
    self.bid64_abs("0", "[673828de6d87f005]", "[673828de6d87f005]", "00")
    self.bid64_abs("0", "[6efa41c0e86b768b]", "[6efa41c0e86b768b]", "00")
    self.bid64_abs("0", "[e15b6196405c5cd9]", "[615b6196405c5cd9]", "00")
    self.bid64_abs("0", "[edfb16881efb7901]", "[6dfb16881efb7901]", "00")
    self.bid64_abs("0", "[f4724d2349d55f24]", "[74724d2349d55f24]", "00")
    self.bid64_abs("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_abs("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_abs("0", "SNaN", "[7e00000000000000]", "00")
  }

  private func bid64_abs(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = arg0.magnitude
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_add() {
    self.bid64_add("0", "-0.0110E-5", "+8898.E5", "[30ff9caf11361fff]", "20")
    self.bid64_add("0", "[0018810020182059]", "[0008040210000004]", "[600085023018205d]", "00")
    self.bid64_add("0", "0", "0", "[31c0000000000000]", "00")
    self.bid64_add("0", "-0.1111100100010010E10", "-10.01E-13", "[b103f28a26c5601a]", "20")
    self.bid64_add("0", "[0120000000000000]", "[56ad29df3b5a71bb]", "[56ad29df3b5a71bb]", "00")
    self.bid64_add("0", "[0202120000008021]", "[ffffffffffffffff]", "[fc00000000000000]", "01")
    self.bid64_add("0", "[02e0000000000000]", "[d2229969429f6ca5]", "[d219fe1c9a3a3e72]", "00")
    self.bid64_add("0", "-0.E-19", "+9695899578786.656E10", "[6caa725e8a2be360]", "00")
    self.bid64_add("0", "0E+368", "-NaN", "[fc00000000000000]", "00")
    self.bid64_add("0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_add("0", "-10000.000E-63", "+78795576.6967E-56", "[29dbfe6a7be1c5d0]", "00")
    self.bid64_add("0", "+1.00000E-12", "+99899999.898988998E0", "[6c337dda20b43e94]", "20")
    self.bid64_add("0", "+10.0001E398", "-111000.010E392", "[7c00000000000000]", "01")
    self.bid64_add("0", "+10000.E263", "-0.000E-194", "[51438d7ea4c68000]", "00")
    self.bid64_add("0", "-10001.0010100101E388", "+4588654244484.776E386", "[7c00000000000000]", "01")
    self.bid64_add("0", "-1.0011E-9", "-98898889999898.989E15", "[ecdb22cd38b6628b]", "20")
    self.bid64_add("0", "+1.01101000E-198", "+100.10000011E-128", "[20238e67797c58e0]", "20")
    self.bid64_add("0", "-101110110110.10110101E0", "-67.696968885699597E0", "[b14397975200e43d]", "20")
    self.bid64_add("0", "-10.111111000101E0", "+978554.469E0", "[6c22c3cf207d470f]", "20")
    self.bid64_add("0", "-10.E-302", "+1000.00E282", "[53838d7ea4c68000]", "20")
    self.bid64_add("0", "-1100.000E0", "+9.758785579577658555E0", "[b043df91904e15c6]", "20")
    self.bid64_add("0", "-1110100.00110000101E267", "+1001.00E-249", "[d203f1a14c3b10e1]", "20")
    self.bid64_add("0", "[1da0000000000000]", "[dd20000000000000]", "[1da0000000000000]", "00")
    self.bid64_add("0", "1E+367", "-1.000000000000000E+384", "[dfe38d7ea4c68000]", "20")
    self.bid64_add("0", "-1.E397", "+787878.88899688897E397", "[7c00000000000000]", "01")
    self.bid64_add("0", "[21407a47dbe16c8f]", "[040200100000a000]", "[2124c6ce96ce3d96]", "20")
    self.bid64_add("0", "+2.2982295752779357453E0", "+966976856776.7E0", "[6c525a9a708b199e]", "20")
    self.bid64_add("0", "+234885.884424996E-295", "+99.998989899989988E-287", "[0c438d81c2bce2f6]", "20")
    self.bid64_add("0", "[2440000000000000]", "[e3f08cce9a7dbe1e]", "[e3f08cce9a7dbe1e]", "00")
    self.bid64_add("0", "+2.76756636E399", "-777558885766.7E393", "[7c00000000000000]", "01")
    self.bid64_add("0", "[4003e39b61afb041]", "[bfbfff7fedf7ffff]", "[4003db6a5b8f70c4]", "20")
    self.bid64_add("0", "+439964424.68362238E382", "-1000.101000E397", "[7c00000000000000]", "01")
    self.bid64_add("0", "+43.E3", "+0.E-4", "[3140000019a14780]", "00")
    self.bid64_add("0", "+44.9282349474E-69", "+5588689955.E-289", "[276ff632fc714820]", "20")
    self.bid64_add("0", "-4988.668E-20", "-9898999.9E-13", "[ebc32b1684b36bb3]", "20")
    self.bid64_add("0", "[4ad96e65ff4b1f64]", "[6bba76db8b29d15c]", "[4ad96e65ff4b1f64]", "20")
    self.bid64_add("0", "-5245998.82675298E20", "+8999998888899.8E-19", "[b332a335488f8bd4]", "20")
    self.bid64_add("0", "+5292.22E-360", "-9454467.399689E335", "[f6a196c9bae62328]", "20")
    self.bid64_add("0", "-55.568E-5", "+9868.E5", "[6c3b0ee4caa4aa4b]", "20")
    self.bid64_add("0", "+55797.E5", "+97.786E-5", "[3113d2b524740bd2]", "20")
    self.bid64_add("0", "[55e0000000000000]", "[0a20000000000000]", "[0a20000000000000]", "00")
    self.bid64_add("0", "+566955856656678778.E18", "-988889.88898998989899E-12", "[3454246ef864bb84]", "20")
    self.bid64_add("0", "+568656.75656676888E336", "-1.000E358", "[f72386f26fc0ffff]", "20")
    self.bid64_add("0", "[60fc51af47c841da]", "[e7f3effd37f8b94f]", "[03e0000000000000]", "00")
    self.bid64_add("0", "[63f08f8ceb1a0eb8]", "[dffffffefffff6fd]", "[dffffffefffff6fd]", "20")
    self.bid64_add("0", "+65695.E4", "-98.998E-5", "[30f756ece9d9f154]", "20")
    self.bid64_add("0", "+65.767599878579869898E-66", "+8898.898999E-287", "[27d75d8742d96a43]", "20")
    self.bid64_add("0", "+665886.975795E-3", "-3.7825797469566E13", "[b18d703c7a25e11b]", "20")
    self.bid64_add("0", "+68879559987558.8E0", "+698898555.996E0", "[3198789f804b5c98]", "20")
    self.bid64_add("0", "-754329993.87568436725E0", "-735437544799935588.E0", "[b21a20c3f8928d80]", "20")
    self.bid64_add("0", "[800465810d808004]", "[0100000000202000]", "[8003a60631608004]", "00")
    self.bid64_add("0", "[8020002000004000]", "[0400000000000001]", "[02238d7ea4c68000]", "20")
    self.bid64_add("0", "+82253794294537886.728E400", "-99.695987675688886589E400", "[7c00000000000000]", "01")
    self.bid64_add("0", "[822a2c860622bcd1]", "[021e9c223c400f3b]", "[82271ce9001c54e5]", "20")
    self.bid64_add("0", "-8.7878958998E398", "+78.87E386", "[7c00000000000000]", "01")
    self.bid64_add("0", "+889988.89989989E-304", "-6924.22664874538522E206", "[ca18998c25be25a9]", "20")
    self.bid64_add("0", "-88.99888E0", "+829344724243563.87434E0", "[31bd76d8a8d948bd]", "20")
    self.bid64_add("0", "-8899.89998899E-326", "-0.1E152", "[c2c38d7ea4c68000]", "20")
    self.bid64_add("0", "-898.889899998E0", "+494258438.536E0", "[30f18f3f02c819c8]", "20")
    self.bid64_add("0", "-8988.998E0", "-9.68473665643883E0", "[b05ff84117f70037]", "20")
    self.bid64_add("0", "+89.89889999898998E12", "+101111100011111.1101E-4", "[319ff12d4aed01a5]", "20")
    self.bid64_add("0", "+89898989988889.99E397", "-98.9E397", "[7c00000000000000]", "01")
    self.bid64_add("0", "+89989.E5", "+3.883E-5", "[311ff873adde8827]", "20")
    self.bid64_add("0", "[8a00000000000000]", "[c6d4941d1256f680]", "[c6d4941d1256f680]", "00")
    self.bid64_add("0", "-8.E5", "+273.7E3", "[b20000000000148f]", "00")
    self.bid64_add("0", "-925255365.6432E-369", "+1.0110000E-116", "[2163977fc7de3000]", "20")
    self.bid64_add("0", "-9.6658887796668E0", "+869785.8E0", "[309ee6915f13ff8b]", "20")
    self.bid64_add("0", "-98696.677E264", "-10111.000001011111E-264", "[f45b1069154f4500]", "20")
    self.bid64_add("0", "-98855.E3", "-8.5588E-5", "[ec331ecf53ed796f]", "20")
    self.bid64_add("0", "+9.8989E-4", "+98998.E4", "[6c3b2bd0ce5916ab]", "20")
    self.bid64_add("0", "+9989889898889889.99E0", "-8898.8888E0", "[6c737dc07ec49fdf]", "20")
    self.bid64_add("0", "-9998.E5", "-97.588E-5", "[ec3b8520c677061f]", "20")
    self.bid64_add("0", "-99998.E170", "-11011.0101000010010E167", "[c5c38d939fc18608]", "20")
    self.bid64_add("0", "[9bfae7929707ce77]", "[9dc3df260556dcf3]", "[9dc3df260556dcfb]", "20")
    self.bid64_add("0", "[ae00000000000000]", "[497face7312d32d4]", "[497face7312d32d4]", "00")
    self.bid64_add("0", "[b4b7313d0540c489]", "[a4c0000000000000]", "[b4b7313d0540c489]", "00")
    self.bid64_add("0", "[be386cf3f81ffa33]", "[be3b6f79927fed56]", "[be452fa48ddcca5a]", "20")
    self.bid64_add("0", "[bffffffffffffbff]", "[414086090010d205]", "[41253c5a009a75c2]", "20")
    self.bid64_add("0", "[d7e0000000000000]", "[58f1710d03bdb7a9]", "[58f1710d03bdb7a9]", "00")
    self.bid64_add("0", "[dba5fef7ffa7c9f7]", "[48850602a8c05400]", "[dba5fef7ffa7c9f7]", "20")
    self.bid64_add("0", "[dfffefffffffffde]", "[dff57564a1de8711]", "[f800000000000000]", "28")
    self.bid64_add("0", "[e33fbf5f26e2cfdf]", "[335d7d90f51ed738]", "[335d7d90f51ed738]", "00")
    self.bid64_add("0", "[e62bb5a6cfc547bc]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_add("0", "[e79501607cee8695]", "[1e9090ace525cc79]", "[1e9090ace525cc79]", "00")
    self.bid64_add("0", "[ef3031aa6d47935d]", "[7195851ba4a3beb1]", "[ef3031aa6d47935d]", "00")
    self.bid64_add("0", "[efffdfdfdddffbcf]", "[a792bbb8376b7ede]", "[a792bbb8376b7ede]", "00")
    self.bid64_add("0", "[f25bbf6eeddfff6b]", "[f284f66a6da94255]", "[c960000000000000]", "00")
    self.bid64_add("0", "[f5ce57a92fbc7496]", "[747bb208a0c43b8c]", "[51e0000000000000]", "00")
    self.bid64_add("0", "[f9efe4efeefb1dbc]", "[49d54d8203c5a840]", "[f800000000000000]", "00")
    self.bid64_add("0", "[fb7ffffffffbfdff]", "[fb2d0c623ab90e08]", "[f800000000000000]", "00")
    self.bid64_add("0", "[fbb1438319eeb335]", "[ffffeffdffffefd3]", "[fc00000000000000]", "01")
    self.bid64_add("0", "[fbefdffffdfdf9f7]", "[7977ebafda7fff9f]", "[7c00000000000000]", "01")
    self.bid64_add("0", "[fdb9548e8c24d385]", "[80000190000460e3]", "[fc01548e8c24d385]", "00")
    self.bid64_add("0", "[ffeffffffffffef7]", "[ba1db10e9fa4cbe4]", "[fc00000000000000]", "01")
    self.bid64_add("0", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_add("0", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_add("0", "Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("0", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_add("0", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_add("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_add("0", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("0", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_add("1", "-0.0110E-5", "+8898.E5", "[30ff9caf11361ffe]", "20")
    self.bid64_add("1", "-0.1111100100010010E10", "-10.01E-13", "[b103f28a26c5601b]", "20")
    self.bid64_add("1", "[0120000000000000]", "[56ad29df3b5a71bb]", "[56ad29df3b5a71bb]", "00")
    self.bid64_add("1", "[02e0000000000000]", "[d2229969429f6ca5]", "[d219fe1c9a3a3e72]", "00")
    self.bid64_add("1", "-0.E-19", "+9695899578786.656E10", "[6caa725e8a2be360]", "00")
    self.bid64_add("1", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_add("1", "-10000.000E-63", "+78795576.6967E-56", "[29dbfe6a7be1c5d0]", "00")
    self.bid64_add("1", "+1.00000E-12", "+99899999.898988998E0", "[6c337dda20b43e94]", "20")
    self.bid64_add("1", "+10.0001E398", "-111000.010E392", "[7c00000000000000]", "01")
    self.bid64_add("1", "+10000.E263", "-0.000E-194", "[51438d7ea4c68000]", "00")
    self.bid64_add("1", "-10001.0010100101E388", "+4588654244484.776E386", "[7c00000000000000]", "01")
    self.bid64_add("1", "-1.0011E-9", "-98898889999898.989E15", "[ecdb22cd38b6628c]", "20")
    self.bid64_add("1", "+1.01101000E-198", "+100.10000011E-128", "[20238e67797c58e0]", "20")
    self.bid64_add("1", "-101110110110.10110101E0", "-67.696968885699597E0", "[b14397975200e43d]", "20")
    self.bid64_add("1", "-10.111111000101E0", "+978554.469E0", "[6c22c3cf207d470e]", "20")
    self.bid64_add("1", "-10.E-302", "+1000.00E282", "[74db86f26fc0ffff]", "20")
    self.bid64_add("1", "-1100.000E0", "+9.758785579577658555E0", "[b043df91904e15c7]", "20")
    self.bid64_add("1", "-1110100.00110000101E267", "+1001.00E-249", "[d203f1a14c3b10e1]", "20")
    self.bid64_add("1", "[1da0000000000000]", "[dd20000000000000]", "[9da0000000000000]", "00")
    self.bid64_add("1", "-1E-385", "-9.999999999999999E+384", "[f800000000000000]", "28")
    self.bid64_add("1", "-1.E397", "+787878.88899688897E397", "[7c00000000000000]", "01")
    self.bid64_add("1", "+2.2982295752779357453E0", "+966976856776.7E0", "[6c525a9a708b199e]", "20")
    self.bid64_add("1", "[2440000000000000]", "[e3f08cce9a7dbe1e]", "[e3f08cce9a7dbe1e]", "00")
    self.bid64_add("1", "+2.76756636E399", "-777558885766.7E393", "[7c00000000000000]", "01")
    self.bid64_add("1", "[4000000000000001]", "[b242ebf30803c141]", "[6f8386f26fc0ffff]", "20")
    self.bid64_add("1", "+439964424.68362238E382", "-1000.101000E397", "[7c00000000000000]", "01")
    self.bid64_add("1", "+43.E3", "+0.E-4", "[3140000019a14780]", "00")
    self.bid64_add("1", "+44.9282349474E-69", "+5588689955.E-289", "[276ff632fc714820]", "20")
    self.bid64_add("1", "-4988.668E-20", "-9898999.9E-13", "[ebc32b1684b36bb3]", "20")
    self.bid64_add("1", "[4ad96e65ff4b1f64]", "[6bba76db8b29d15c]", "[4ad96e65ff4b1f64]", "20")
    self.bid64_add("1", "-5245998.82675298E20", "+8999998888899.8E-19", "[b332a335488f8bd4]", "20")
    self.bid64_add("1", "+5292.22E-360", "-9454467.399689E335", "[f6a196c9bae62328]", "20")
    self.bid64_add("1", "-55.568E-5", "+9868.E5", "[6c3b0ee4caa4aa4b]", "20")
    self.bid64_add("1", "+55797.E5", "+97.786E-5", "[3113d2b524740bd1]", "20")
    self.bid64_add("1", "[55e0000000000000]", "[0a20000000000000]", "[0a20000000000000]", "00")
    self.bid64_add("1", "+566955856656678778.E18", "-988889.88898998989899E-12", "[3454246ef864bb83]", "20")
    self.bid64_add("1", "[5f7f5fdfa67bdfff]", "[ac374699bb96c89e]", "[5f7f5fdfa67bdffe]", "20")
    self.bid64_add("1", "[5ffffbfff34ffeb7]", "[5ffffff5efffef7f]", "[77fb86f26fc0ffff]", "28")
    self.bid64_add("1", "[60fc51af47c841da]", "[e7f3effd37f8b94f]", "[83e0000000000000]", "00")
    self.bid64_add("1", "+65695.E4", "-98.998E-5", "[30f756ece9d9f154]", "20")
    self.bid64_add("1", "+65.767599878579869898E-66", "+8898.898999E-287", "[27d75d8742d96a43]", "20")
    self.bid64_add("1", "+665886.975795E-3", "-3.7825797469566E13", "[b18d703c7a25e11c]", "20")
    self.bid64_add("1", "+68879559987558.8E0", "+698898555.996E0", "[3198789f804b5c97]", "20")
    self.bid64_add("1", "-754329993.87568436725E0", "-735437544799935588.E0", "[b21a20c3f8928d80]", "20")
    self.bid64_add("1", "[8020002000004000]", "[0400000000000001]", "[608386f26fc0ffff]", "20")
    self.bid64_add("1", "+82253794294537886.728E400", "-99.695987675688886589E400", "[7c00000000000000]", "01")
    self.bid64_add("1", "-8.7878958998E398", "+78.87E386", "[7c00000000000000]", "01")
    self.bid64_add("1", "+889988.89989989E-304", "-6924.22664874538522E206", "[ca18998c25be25a9]", "20")
    self.bid64_add("1", "-88.99888E0", "+829344724243563.87434E0", "[31bd76d8a8d948bd]", "20")
    self.bid64_add("1", "-8899.89998899E-326", "-0.1E152", "[c2c38d7ea4c68001]", "20")
    self.bid64_add("1", "-898.889899998E0", "+494258438.536E0", "[30f18f3f02c819c8]", "20")
    self.bid64_add("1", "-8988.998E0", "-9.68473665643883E0", "[b05ff84117f70037]", "20")
    self.bid64_add("1", "+89.89889999898998E12", "+101111100011111.1101E-4", "[319ff12d4aed01a5]", "20")
    self.bid64_add("1", "+89898989988889.99E397", "-98.9E397", "[7c00000000000000]", "01")
    self.bid64_add("1", "+89989.E5", "+3.883E-5", "[311ff873adde8826]", "20")
    self.bid64_add("1", "[8a00000000000000]", "[c6d4941d1256f680]", "[c6d4941d1256f680]", "00")
    self.bid64_add("1", "-8.E5", "+273.7E3", "[b20000000000148f]", "00")
    self.bid64_add("1", "-925255365.6432E-369", "+1.0110000E-116", "[2163977fc7de2fff]", "20")
    self.bid64_add("1", "-9.6658887796668E0", "+869785.8E0", "[309ee6915f13ff8b]", "20")
    self.bid64_add("1", "-98696.677E264", "-10111.000001011111E-264", "[f45b1069154f4501]", "20")
    self.bid64_add("1", "-98855.E3", "-8.5588E-5", "[ec331ecf53ed796f]", "20")
    self.bid64_add("1", "+9.8989E-4", "+98998.E4", "[6c3b2bd0ce5916aa]", "20")
    self.bid64_add("1", "+9989889898889889.99E0", "-8898.8888E0", "[6c737dc07ec49fdf]", "20")
    self.bid64_add("1", "-9998.E5", "-97.588E-5", "[ec3b8520c677061f]", "20")
    self.bid64_add("1", "[ae00000000000000]", "[497face7312d32d4]", "[497face7312d32d4]", "00")
    self.bid64_add("1", "[b4b7313d0540c489]", "[a4c0000000000000]", "[b4b7313d0540c489]", "00")
    self.bid64_add("1", "[bffffffffffffbff]", "[414086090010d205]", "[41253c5a009a75c2]", "20")
    self.bid64_add("1", "[d7e0000000000000]", "[58f1710d03bdb7a9]", "[58f1710d03bdb7a9]", "00")
    self.bid64_add("1", "[dba5fef7ffa7c9f7]", "[48850602a8c05400]", "[dba5fef7ffa7c9f7]", "20")
    self.bid64_add("1", "[dfffefffffffffde]", "[dff57564a1de8711]", "[f800000000000000]", "28")
    self.bid64_add("1", "[e79501607cee8695]", "[1e9090ace525cc79]", "[1e9090ace525cc79]", "00")
    self.bid64_add("1", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_add("1", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_add("1", "Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("1", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_add("1", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_add("1", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_add("1", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("1", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_add("2", "-0.0110E-5", "+8898.E5", "[30ff9caf11361fff]", "20")
    self.bid64_add("2", "-0.1111100100010010E10", "-10.01E-13", "[b103f28a26c5601a]", "20")
    self.bid64_add("2", "[0120000000000000]", "[56ad29df3b5a71bb]", "[56ad29df3b5a71bb]", "00")
    self.bid64_add("2", "[02e0000000000000]", "[d2229969429f6ca5]", "[d219fe1c9a3a3e72]", "00")
    self.bid64_add("2", "-0.E-19", "+9695899578786.656E10", "[6caa725e8a2be360]", "00")
    self.bid64_add("2", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_add("2", "-10000.000E-63", "+78795576.6967E-56", "[29dbfe6a7be1c5d0]", "00")
    self.bid64_add("2", "+1.00000E-12", "+99899999.898988998E0", "[6c337dda20b43e95]", "20")
    self.bid64_add("2", "+10.0001E398", "-111000.010E392", "[7c00000000000000]", "01")
    self.bid64_add("2", "+10000.E263", "-0.000E-194", "[51438d7ea4c68000]", "00")
    self.bid64_add("2", "-10001.0010100101E388", "+4588654244484.776E386", "[7c00000000000000]", "01")
    self.bid64_add("2", "-1.0011E-9", "-98898889999898.989E15", "[ecdb22cd38b6628b]", "20")
    self.bid64_add("2", "+1.01101000E-198", "+100.10000011E-128", "[20238e67797c58e1]", "20")
    self.bid64_add("2", "-101110110110.10110101E0", "-67.696968885699597E0", "[b14397975200e43c]", "20")
    self.bid64_add("2", "-10.111111000101E0", "+978554.469E0", "[6c22c3cf207d470f]", "20")
    self.bid64_add("2", "-10.E-302", "+1000.00E282", "[53838d7ea4c68000]", "20")
    self.bid64_add("2", "-1100.000E0", "+9.758785579577658555E0", "[b043df91904e15c6]", "20")
    self.bid64_add("2", "-1110100.00110000101E267", "+1001.00E-249", "[d203f1a14c3b10e0]", "20")
    self.bid64_add("2", "[1da0000000000000]", "[dd20000000000000]", "[1da0000000000000]", "00")
    self.bid64_add("2", "1E+367", "9.999999999999999E+384", "[7800000000000000]", "28")
    self.bid64_add("2", "-1.E397", "+787878.88899688897E397", "[7c00000000000000]", "01")
    self.bid64_add("2", "+2.2982295752779357453E0", "+966976856776.7E0", "[6c525a9a708b199f]", "20")
    self.bid64_add("2", "[2440000000000000]", "[e3f08cce9a7dbe1e]", "[e3f08cce9a7dbe1e]", "00")
    self.bid64_add("2", "+2.76756636E399", "-777558885766.7E393", "[7c00000000000000]", "01")
    self.bid64_add("2", "+439964424.68362238E382", "-1000.101000E397", "[7c00000000000000]", "01")
    self.bid64_add("2", "+43.E3", "+0.E-4", "[3140000019a14780]", "00")
    self.bid64_add("2", "+44.9282349474E-69", "+5588689955.E-289", "[276ff632fc714821]", "20")
    self.bid64_add("2", "-4988.668E-20", "-9898999.9E-13", "[ebc32b1684b36bb2]", "20")
    self.bid64_add("2", "[4ad96e65ff4b1f64]", "[6bba76db8b29d15c]", "[4ad96e65ff4b1f65]", "20")
    self.bid64_add("2", "-5245998.82675298E20", "+8999998888899.8E-19", "[b332a335488f8bd3]", "20")
    self.bid64_add("2", "+5292.22E-360", "-9454467.399689E335", "[f6a196c9bae62327]", "20")
    self.bid64_add("2", "-55.568E-5", "+9868.E5", "[6c3b0ee4caa4aa4c]", "20")
    self.bid64_add("2", "+55797.E5", "+97.786E-5", "[3113d2b524740bd2]", "20")
    self.bid64_add("2", "[55e0000000000000]", "[0a20000000000000]", "[0a20000000000000]", "00")
    self.bid64_add("2", "+566955856656678778.E18", "-988889.88898998989899E-12", "[3454246ef864bb84]", "20")
    self.bid64_add("2", "+65695.E4", "-98.998E-5", "[30f756ece9d9f155]", "20")
    self.bid64_add("2", "+65.767599878579869898E-66", "+8898.898999E-287", "[27d75d8742d96a44]", "20")
    self.bid64_add("2", "+665886.975795E-3", "-3.7825797469566E13", "[b18d703c7a25e11b]", "20")
    self.bid64_add("2", "+68879559987558.8E0", "+698898555.996E0", "[3198789f804b5c98]", "20")
    self.bid64_add("2", "-754329993.87568436725E0", "-735437544799935588.E0", "[b21a20c3f8928d7f]", "20")
    self.bid64_add("2", "+82253794294537886.728E400", "-99.695987675688886589E400", "[7c00000000000000]", "01")
    self.bid64_add("2", "[822a2c860622bcd1]", "[021e9c223c400f3b]", "[82271ce9001c54e4]", "20")
    self.bid64_add("2", "-8.7878958998E398", "+78.87E386", "[7c00000000000000]", "01")
    self.bid64_add("2", "+889988.89989989E-304", "-6924.22664874538522E206", "[ca18998c25be25a8]", "20")
    self.bid64_add("2", "-88.99888E0", "+829344724243563.87434E0", "[31bd76d8a8d948be]", "20")
    self.bid64_add("2", "-8899.89998899E-326", "-0.1E152", "[c2c38d7ea4c68000]", "20")
    self.bid64_add("2", "-898.889899998E0", "+494258438.536E0", "[30f18f3f02c819c9]", "20")
    self.bid64_add("2", "-8988.998E0", "-9.68473665643883E0", "[b05ff84117f70036]", "20")
    self.bid64_add("2", "+89.89889999898998E12", "+101111100011111.1101E-4", "[319ff12d4aed01a6]", "20")
    self.bid64_add("2", "+89898989988889.99E397", "-98.9E397", "[7c00000000000000]", "01")
    self.bid64_add("2", "+89989.E5", "+3.883E-5", "[311ff873adde8827]", "20")
    self.bid64_add("2", "[8a00000000000000]", "[c6d4941d1256f680]", "[c6d4941d1256f680]", "00")
    self.bid64_add("2", "-8.E5", "+273.7E3", "[b20000000000148f]", "00")
    self.bid64_add("2", "-925255365.6432E-369", "+1.0110000E-116", "[2163977fc7de3000]", "20")
    self.bid64_add("2", "-9.6658887796668E0", "+869785.8E0", "[309ee6915f13ff8c]", "20")
    self.bid64_add("2", "-98696.677E264", "-10111.000001011111E-264", "[f45b1069154f4500]", "20")
    self.bid64_add("2", "-98855.E3", "-8.5588E-5", "[ec331ecf53ed796e]", "20")
    self.bid64_add("2", "+9.8989E-4", "+98998.E4", "[6c3b2bd0ce5916ab]", "20")
    self.bid64_add("2", "+9989889898889889.99E0", "-8898.8888E0", "[6c737dc07ec49fe0]", "20")
    self.bid64_add("2", "-9998.E5", "-97.588E-5", "[ec3b8520c677061e]", "20")
    self.bid64_add("2", "+9999999999.999999E192", "+0.1E24", "[49238d7ea4c68000]", "20")
    self.bid64_add("2", "[ae00000000000000]", "[497face7312d32d4]", "[497face7312d32d4]", "00")
    self.bid64_add("2", "[b4b7313d0540c489]", "[a4c0000000000000]", "[b4b7313d0540c489]", "00")
    self.bid64_add("2", "[bffffffffffffbff]", "[414086090010d205]", "[41253c5a009a75c3]", "20")
    self.bid64_add("2", "[cecdf0a30f64b490]", "[f36af3493667544a]", "[cecdf0a30ffad0dc]", "20")
    self.bid64_add("2", "[d7e0000000000000]", "[58f1710d03bdb7a9]", "[58f1710d03bdb7a9]", "00")
    self.bid64_add("2", "[dba5fef7ffa7c9f7]", "[48850602a8c05400]", "[dba5fef7ffa7c9f6]", "20")
    self.bid64_add("2", "[dfffefffffffffde]", "[dff57564a1de8711]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_add("2", "[e79501607cee8695]", "[1e9090ace525cc79]", "[1e9090ace525cc79]", "00")
    self.bid64_add("2", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_add("2", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_add("2", "Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("2", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_add("2", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_add("2", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_add("2", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("2", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_add("3", "-0.0110E-5", "+8898.E5", "[30ff9caf11361ffe]", "20")
    self.bid64_add("3", "-0.1111100100010010E10", "-10.01E-13", "[b103f28a26c5601a]", "20")
    self.bid64_add("3", "[0120000000000000]", "[56ad29df3b5a71bb]", "[56ad29df3b5a71bb]", "00")
    self.bid64_add("3", "[02e0000000000000]", "[d2229969429f6ca5]", "[d219fe1c9a3a3e72]", "00")
    self.bid64_add("3", "-0.E-19", "+9695899578786.656E10", "[6caa725e8a2be360]", "00")
    self.bid64_add("3", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_add("3", "-10000.000E-63", "+78795576.6967E-56", "[29dbfe6a7be1c5d0]", "00")
    self.bid64_add("3", "+1.00000E-12", "+99899999.898988998E0", "[6c337dda20b43e94]", "20")
    self.bid64_add("3", "+10.0001E398", "-111000.010E392", "[7c00000000000000]", "01")
    self.bid64_add("3", "+10000.E263", "-0.000E-194", "[51438d7ea4c68000]", "00")
    self.bid64_add("3", "-10001.0010100101E388", "+4588654244484.776E386", "[7c00000000000000]", "01")
    self.bid64_add("3", "-1.0011E-9", "-98898889999898.989E15", "[ecdb22cd38b6628b]", "20")
    self.bid64_add("3", "+1.01101000E-198", "+100.10000011E-128", "[20238e67797c58e0]", "20")
    self.bid64_add("3", "-101110110110.10110101E0", "-67.696968885699597E0", "[b14397975200e43c]", "20")
    self.bid64_add("3", "-10.111111000101E0", "+978554.469E0", "[6c22c3cf207d470e]", "20")
    self.bid64_add("3", "-10.E-302", "+1000.00E282", "[74db86f26fc0ffff]", "20")
    self.bid64_add("3", "-1100.000E0", "+9.758785579577658555E0", "[b043df91904e15c6]", "20")
    self.bid64_add("3", "-1110100.00110000101E267", "+1001.00E-249", "[d203f1a14c3b10e0]", "20")
    self.bid64_add("3", "[1da0000000000000]", "[dd20000000000000]", "[1da0000000000000]", "00")
    self.bid64_add("3", "-1.E397", "+787878.88899688897E397", "[7c00000000000000]", "01")
    self.bid64_add("3", "+2.2982295752779357453E0", "+966976856776.7E0", "[6c525a9a708b199e]", "20")
    self.bid64_add("3", "[2440000000000000]", "[e3f08cce9a7dbe1e]", "[e3f08cce9a7dbe1e]", "00")
    self.bid64_add("3", "+2.76756636E399", "-777558885766.7E393", "[7c00000000000000]", "01")
    self.bid64_add("3", "[4000000000000001]", "[b242ebf30803c141]", "[6f8386f26fc0ffff]", "20")
    self.bid64_add("3", "+439964424.68362238E382", "-1000.101000E397", "[7c00000000000000]", "01")
    self.bid64_add("3", "+43.E3", "+0.E-4", "[3140000019a14780]", "00")
    self.bid64_add("3", "+44.9282349474E-69", "+5588689955.E-289", "[276ff632fc714820]", "20")
    self.bid64_add("3", "-4988.668E-20", "-9898999.9E-13", "[ebc32b1684b36bb2]", "20")
    self.bid64_add("3", "[4ad96e65ff4b1f64]", "[6bba76db8b29d15c]", "[4ad96e65ff4b1f64]", "20")
    self.bid64_add("3", "-5245998.82675298E20", "+8999998888899.8E-19", "[b332a335488f8bd3]", "20")
    self.bid64_add("3", "+5292.22E-360", "-9454467.399689E335", "[f6a196c9bae62327]", "20")
    self.bid64_add("3", "-55.568E-5", "+9868.E5", "[6c3b0ee4caa4aa4b]", "20")
    self.bid64_add("3", "+55797.E5", "+97.786E-5", "[3113d2b524740bd1]", "20")
    self.bid64_add("3", "[55e0000000000000]", "[0a20000000000000]", "[0a20000000000000]", "00")
    self.bid64_add("3", "+566955856656678778.E18", "-988889.88898998989899E-12", "[3454246ef864bb83]", "20")
    self.bid64_add("3", "+65695.E4", "-98.998E-5", "[30f756ece9d9f154]", "20")
    self.bid64_add("3", "+65.767599878579869898E-66", "+8898.898999E-287", "[27d75d8742d96a43]", "20")
    self.bid64_add("3", "+665886.975795E-3", "-3.7825797469566E13", "[b18d703c7a25e11b]", "20")
    self.bid64_add("3", "+68879559987558.8E0", "+698898555.996E0", "[3198789f804b5c97]", "20")
    self.bid64_add("3", "-754329993.87568436725E0", "-735437544799935588.E0", "[b21a20c3f8928d7f]", "20")
    self.bid64_add("3", "+82253794294537886.728E400", "-99.695987675688886589E400", "[7c00000000000000]", "01")
    self.bid64_add("3", "-8.7878958998E398", "+78.87E386", "[7c00000000000000]", "01")
    self.bid64_add("3", "+889988.89989989E-304", "-6924.22664874538522E206", "[ca18998c25be25a8]", "20")
    self.bid64_add("3", "-88.99888E0", "+829344724243563.87434E0", "[31bd76d8a8d948bd]", "20")
    self.bid64_add("3", "-8899.89998899E-326", "-0.1E152", "[c2c38d7ea4c68000]", "20")
    self.bid64_add("3", "-898.889899998E0", "+494258438.536E0", "[30f18f3f02c819c8]", "20")
    self.bid64_add("3", "-8988.998E0", "-9.68473665643883E0", "[b05ff84117f70036]", "20")
    self.bid64_add("3", "+89.89889999898998E12", "+101111100011111.1101E-4", "[319ff12d4aed01a5]", "20")
    self.bid64_add("3", "+89898989988889.99E397", "-98.9E397", "[7c00000000000000]", "01")
    self.bid64_add("3", "+89989.E5", "+3.883E-5", "[311ff873adde8826]", "20")
    self.bid64_add("3", "[8a00000000000000]", "[c6d4941d1256f680]", "[c6d4941d1256f680]", "00")
    self.bid64_add("3", "-8.E5", "+273.7E3", "[b20000000000148f]", "00")
    self.bid64_add("3", "-925255365.6432E-369", "+1.0110000E-116", "[2163977fc7de2fff]", "20")
    self.bid64_add("3", "-9.6658887796668E0", "+869785.8E0", "[309ee6915f13ff8b]", "20")
    self.bid64_add("3", "-98696.677E264", "-10111.000001011111E-264", "[f45b1069154f4500]", "20")
    self.bid64_add("3", "-98855.E3", "-8.5588E-5", "[ec331ecf53ed796e]", "20")
    self.bid64_add("3", "+9.8989E-4", "+98998.E4", "[6c3b2bd0ce5916aa]", "20")
    self.bid64_add("3", "+9989889898889889.99E0", "-8898.8888E0", "[6c737dc07ec49fdf]", "20")
    self.bid64_add("3", "-9998.E5", "-97.588E-5", "[ec3b8520c677061e]", "20")
    self.bid64_add("3", "[ae00000000000000]", "[497face7312d32d4]", "[497face7312d32d4]", "00")
    self.bid64_add("3", "[b4b7313d0540c489]", "[a4c0000000000000]", "[b4b7313d0540c489]", "00")
    self.bid64_add("3", "[d7e0000000000000]", "[58f1710d03bdb7a9]", "[58f1710d03bdb7a9]", "00")
    self.bid64_add("3", "[dba5fef7ffa7c9f7]", "[48850602a8c05400]", "[dba5fef7ffa7c9f6]", "20")
    self.bid64_add("3", "[dfffefffffffffde]", "[dff57564a1de8711]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_add("3", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_add("3", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_add("3", "Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("3", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_add("3", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_add("3", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_add("3", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("3", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_add("4", "-0.0110E-5", "+8898.E5", "[30ff9caf11361fff]", "20")
    self.bid64_add("4", "-0.1111100100010010E10", "-10.01E-13", "[b103f28a26c5601a]", "20")
    self.bid64_add("4", "[0120000000000000]", "[56ad29df3b5a71bb]", "[56ad29df3b5a71bb]", "00")
    self.bid64_add("4", "[02e0000000000000]", "[d2229969429f6ca5]", "[d219fe1c9a3a3e72]", "00")
    self.bid64_add("4", "-0.E-19", "+9695899578786.656E10", "[6caa725e8a2be360]", "00")
    self.bid64_add("4", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_add("4", "-10000.000E-63", "+78795576.6967E-56", "[29dbfe6a7be1c5d0]", "00")
    self.bid64_add("4", "+1.00000E-12", "+99899999.898988998E0", "[6c337dda20b43e94]", "20")
    self.bid64_add("4", "+10.0001E398", "-111000.010E392", "[7c00000000000000]", "01")
    self.bid64_add("4", "+10000.E263", "-0.000E-194", "[51438d7ea4c68000]", "00")
    self.bid64_add("4", "-10001.0010100101E388", "+4588654244484.776E386", "[7c00000000000000]", "01")
    self.bid64_add("4", "-1.0011E-9", "-98898889999898.989E15", "[ecdb22cd38b6628b]", "20")
    self.bid64_add("4", "+1.01101000E-198", "+100.10000011E-128", "[20238e67797c58e0]", "20")
    self.bid64_add("4", "-101110110110.10110101E0", "-67.696968885699597E0", "[b14397975200e43d]", "20")
    self.bid64_add("4", "-10.111111000101E0", "+978554.469E0", "[6c22c3cf207d470f]", "20")
    self.bid64_add("4", "-10.E-302", "+1000.00E282", "[53838d7ea4c68000]", "20")
    self.bid64_add("4", "-1100.000E0", "+9.758785579577658555E0", "[b043df91904e15c6]", "20")
    self.bid64_add("4", "-1110100.00110000101E267", "+1001.00E-249", "[d203f1a14c3b10e1]", "20")
    self.bid64_add("4", "[1da0000000000000]", "[dd20000000000000]", "[1da0000000000000]", "00")
    self.bid64_add("4", "-1.E397", "+787878.88899688897E397", "[7c00000000000000]", "01")
    self.bid64_add("4", "+2.2982295752779357453E0", "+966976856776.7E0", "[6c525a9a708b199e]", "20")
    self.bid64_add("4", "[2440000000000000]", "[e3f08cce9a7dbe1e]", "[e3f08cce9a7dbe1e]", "00")
    self.bid64_add("4", "+2.76756636E399", "-777558885766.7E393", "[7c00000000000000]", "01")
    self.bid64_add("4", "+439964424.68362238E382", "-1000.101000E397", "[7c00000000000000]", "01")
    self.bid64_add("4", "+43.E3", "+0.E-4", "[3140000019a14780]", "00")
    self.bid64_add("4", "+44.9282349474E-69", "+5588689955.E-289", "[276ff632fc714820]", "20")
    self.bid64_add("4", "-4988.668E-20", "-9898999.9E-13", "[ebc32b1684b36bb3]", "20")
    self.bid64_add("4", "[4ad96e65ff4b1f64]", "[6bba76db8b29d15c]", "[4ad96e65ff4b1f64]", "20")
    self.bid64_add("4", "-5245998.82675298E20", "+8999998888899.8E-19", "[b332a335488f8bd4]", "20")
    self.bid64_add("4", "+5292.22E-360", "-9454467.399689E335", "[f6a196c9bae62328]", "20")
    self.bid64_add("4", "-55.568E-5", "+9868.E5", "[6c3b0ee4caa4aa4b]", "20")
    self.bid64_add("4", "+55797.E5", "+97.786E-5", "[3113d2b524740bd2]", "20")
    self.bid64_add("4", "[55e0000000000000]", "[0a20000000000000]", "[0a20000000000000]", "00")
    self.bid64_add("4", "+566955856656678778.E18", "-988889.88898998989899E-12", "[3454246ef864bb84]", "20")
    self.bid64_add("4", "+65695.E4", "-98.998E-5", "[30f756ece9d9f154]", "20")
    self.bid64_add("4", "+65.767599878579869898E-66", "+8898.898999E-287", "[27d75d8742d96a43]", "20")
    self.bid64_add("4", "+665886.975795E-3", "-3.7825797469566E13", "[b18d703c7a25e11b]", "20")
    self.bid64_add("4", "+68879559987558.8E0", "+698898555.996E0", "[3198789f804b5c98]", "20")
    self.bid64_add("4", "-754329993.87568436725E0", "-735437544799935588.E0", "[b21a20c3f8928d80]", "20")
    self.bid64_add("4", "+82253794294537886.728E400", "-99.695987675688886589E400", "[7c00000000000000]", "01")
    self.bid64_add("4", "-8.7878958998E398", "+78.87E386", "[7c00000000000000]", "01")
    self.bid64_add("4", "+889988.89989989E-304", "-6924.22664874538522E206", "[ca18998c25be25a9]", "20")
    self.bid64_add("4", "-88.99888E0", "+829344724243563.87434E0", "[31bd76d8a8d948bd]", "20")
    self.bid64_add("4", "-8899.89998899E-326", "-0.1E152", "[c2c38d7ea4c68000]", "20")
    self.bid64_add("4", "-898.889899998E0", "+494258438.536E0", "[30f18f3f02c819c8]", "20")
    self.bid64_add("4", "-8988.998E0", "-9.68473665643883E0", "[b05ff84117f70037]", "20")
    self.bid64_add("4", "+89.89889999898998E12", "+101111100011111.1101E-4", "[319ff12d4aed01a5]", "20")
    self.bid64_add("4", "+89898989988889.99E397", "-98.9E397", "[7c00000000000000]", "01")
    self.bid64_add("4", "+89989.E5", "+3.883E-5", "[311ff873adde8827]", "20")
    self.bid64_add("4", "[8a00000000000000]", "[c6d4941d1256f680]", "[c6d4941d1256f680]", "00")
    self.bid64_add("4", "-8.E5", "+273.7E3", "[b20000000000148f]", "00")
    self.bid64_add("4", "-925255365.6432E-369", "+1.0110000E-116", "[2163977fc7de3000]", "20")
    self.bid64_add("4", "-9.6658887796668E0", "+869785.8E0", "[309ee6915f13ff8b]", "20")
    self.bid64_add("4", "-98696.677E264", "-10111.000001011111E-264", "[f45b1069154f4500]", "20")
    self.bid64_add("4", "-98855.E3", "-8.5588E-5", "[ec331ecf53ed796f]", "20")
    self.bid64_add("4", "+9.8989E-4", "+98998.E4", "[6c3b2bd0ce5916ab]", "20")
    self.bid64_add("4", "+9989889898889889.99E0", "-8898.8888E0", "[6c737dc07ec49fdf]", "20")
    self.bid64_add("4", "-9998.E5", "-97.588E-5", "[ec3b8520c677061f]", "20")
    self.bid64_add("4", "[ae00000000000000]", "[497face7312d32d4]", "[497face7312d32d4]", "00")
    self.bid64_add("4", "[b4b7313d0540c489]", "[a4c0000000000000]", "[b4b7313d0540c489]", "00")
    self.bid64_add("4", "[d7e0000000000000]", "[58f1710d03bdb7a9]", "[58f1710d03bdb7a9]", "00")
    self.bid64_add("4", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_add("4", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_add("4", "Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("4", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_add("4", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_add("4", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_add("4", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_add("4", "SNaN", "Infinity", "[7c00000000000000]", "01")
  }

  private func bid64_add(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._adding(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_class() {
    self.bid64_class("0", "[0000000040100000]", "7", "00")
    self.bid64_class("0", "-0", "5", "00")
    self.bid64_class("0", "0", "6", "00")
    self.bid64_class("0", "[069a36c8f9c09818]", "8", "00")
    self.bid64_class("0", "[1000000000000000]", "6", "00")
    self.bid64_class("0", "[18ebf0eb84027607]", "8", "00")
    self.bid64_class("0", "[2407f5972ed7b76b]", "8", "00")
    self.bid64_class("0", "[3e2a85a98df1a62e]", "8", "00")
    self.bid64_class("0", "[72bb05ed5f217403]", "8", "00")
    self.bid64_class("0", "[73dc9f0cefef8aef]", "6", "00")
    self.bid64_class("0", "[74a23c8f2229106a]", "8", "00")
    self.bid64_class("0", "[79fffade57fabf5b]", "9", "00")
    self.bid64_class("0", "[8c32d9f830270c43]", "3", "00")
    self.bid64_class("0", "[97c4180a6666476d]", "3", "00")
    self.bid64_class("0", "[a5247757cbba3ba7]", "3", "00")
    self.bid64_class("0", "[b61b100697ed86c3]", "3", "00")
    self.bid64_class("0", "[b6ee2fa4068519a5]", "3", "00")
    self.bid64_class("0", "[c1e50e97c4a1cb96]", "3", "00")
    self.bid64_class("0", "[f0c3ae213f30b8d8]", "5", "00")
    self.bid64_class("0", "[fbfffefffffffeff]", "2", "00")
    self.bid64_class("0", "[fde7bf7f3d7bafd8]", "1", "00")
    self.bid64_class("0", "[fffefffffffffeff]", "0", "00")
    self.bid64_class("0", "-Infinity", "2", "00")
    self.bid64_class("0", "Infinity", "9", "00")
    self.bid64_class("0", "QNaN", "1", "00")
    self.bid64_class("0", "SNaN", "0", "00")
    self.bid64_class("0", "[8000000040100000]", "4", "00")
  }

  private func bid64_class(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.floatingPointClass
    self.assertFloatingPointClass(result, expected, file, line)
  }

  func test_bid64_copy() {
    self.bid64_copy("0", "0", "[31c0000000000000]", "00")
    self.bid64_copy("0", "-0", "[b1c0000000000000]", "00")
    self.bid64_copy("0", "[0b3b000000000000]", "[0b3b000000000000]", "00")
    self.bid64_copy("0", "[1bf1eb878bd92f90]", "[1bf1eb878bd92f90]", "00")
    self.bid64_copy("0", "[2ebc30b0f5d6db60]", "[2ebc30b0f5d6db60]", "00")
    self.bid64_copy("0", "[39924d7d31b3d9af]", "[39924d7d31b3d9af]", "00")
    self.bid64_copy("0", "[56a6a32dd0a507da]", "[56a6a32dd0a507da]", "00")
    self.bid64_copy("0", "[91a5e22e38f2f4eb]", "[91a5e22e38f2f4eb]", "00")
    self.bid64_copy("0", "[995a75bdbe299504]", "[995a75bdbe299504]", "00")
    self.bid64_copy("0", "[9a60000000000000]", "[9a60000000000000]", "00")
    self.bid64_copy("0", "[9d410f21af28e834]", "[9d410f21af28e834]", "00")
    self.bid64_copy("0", "[bebab2a41b98f61a]", "[bebab2a41b98f61a]", "00")
    self.bid64_copy("0", "[e118d2eb2d0c4469]", "[e118d2eb2d0c4469]", "00")
    self.bid64_copy("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_copy("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_copy("0", "SNaN", "[7e00000000000000]", "00")
  }

  private func bid64_copy(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = arg0
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_copySign() {
    self.bid64_copySign("0", "[0520000000000000]", "[1b127dee53a469e7]", "[0520000000000000]", "00")
    self.bid64_copySign("0", "-0", "QNaN", "[31c0000000000000]", "00")
    self.bid64_copySign("0", "0", "QNaN", "[31c0000000000000]", "00")
    self.bid64_copySign("0", "[2299f520e7149a87]", "[373c94e68d2e26db]", "[2299f520e7149a87]", "00")
    self.bid64_copySign("0", "[23a8cd8f9e2eac0c]", "[0774b2d5ad18740f]", "[23a8cd8f9e2eac0c]", "00")
    self.bid64_copySign("0", "[4def6a1c2cfef4d2]", "[db9829abdc4561c6]", "[cdef6a1c2cfef4d2]", "00")
    self.bid64_copySign("0", "[5b8cc119deccf705]", "[a3c0000000000000]", "[db8cc119deccf705]", "00")
    self.bid64_copySign("0", "[5ca6fcf6e6e84a72]", "[60c99559452e440e]", "[5ca6fcf6e6e84a72]", "00")
    self.bid64_copySign("0", "[5fdf3f7ff7bfea7e]", "[00211954a0720132]", "[5fdf3f7ff7bfea7e]", "00")
    self.bid64_copySign("0", "[8fbca9a831fcc222]", "[114fcafa66dfc639]", "[0fbca9a831fcc222]", "00")
    self.bid64_copySign("0", "[9b591709bbde6727]", "[a0b602281de43389]", "[9b591709bbde6727]", "00")
    self.bid64_copySign("0", "[a54ec523c670fa31]", "[05fe0fd2309b9c45]", "[254ec523c670fa31]", "00")
    self.bid64_copySign("0", "[e0e370966e25bd0d]", "[0da875a1d84f564d]", "[60e370966e25bd0d]", "00")
    self.bid64_copySign("0", "Infinity", "QNaN", "[7800000000000000]", "00")
    self.bid64_copySign("0", "QNaN", "-0", "[fc00000000000000]", "00")
    self.bid64_copySign("0", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_copySign("0", "QNaN", "-Infinity", "[fc00000000000000]", "00")
    self.bid64_copySign("0", "SNaN", "-0", "[fe00000000000000]", "00")
    self.bid64_copySign("0", "SNaN", "SNaN", "[7e00000000000000]", "00")
  }

  private func bid64_copySign(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(signOf: arg1, magnitudeOf: arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_div() {
    self.bid64_div("0", "[0000000000000000]", "[eef7ffb6ffdffff7]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[0000000000000004]", "[0040000000000400]", "[308000000005f5e1]", "00")
    self.bid64_div("0", "[0000000000000282]", "[080000000000000a]", "[29a0000000000282]", "00")
    self.bid64_div("0", "-0", "-0", "[7c00000000000000]", "01")
    self.bid64_div("0", "[0180400000000000]", "[0001000000000000]", "[3300000000000019]", "00")
    self.bid64_div("0", "[0200006060800800]", "[0000000000004000]", "[33600005e1e3d07d]", "00")
    self.bid64_div("0", "[021e9204a8ae47b6]", "[f5ffefdbdfdffbf9]", "[f800000000000000]", "04")
    self.bid64_div("0", "[039393792c7c126a]", "[51abaea754772210]", "[0000000000000000]", "30")
    self.bid64_div("0", "[042d518a897c3880]", "[96ff6539819d4eef]", "[9d0f123f2e25c97c]", "20")
    self.bid64_div("0", "[04f208c93b8f8b47]", "[4040000000000000]", "[7800000000000000]", "04")
    self.bid64_div("0", "[0a25000000000000]", "[b1e367cf1e446523]", "[882537549b5c0e35]", "20")
    self.bid64_div("0", "[0b3d8e5d8cce182a]", "[337fcffeffefddff]", "[61e101de3b12cb7a]", "20")
    self.bid64_div("0", "[0bae000000000000]", "[0c1ff642997dcd4b]", "[2f6f8fc69bc6e1ce]", "20")
    self.bid64_div("0", "[0f57000000000000]", "[589cb873b58c817c]", "[0000000000000000]", "30")
    self.bid64_div("0", "[0fc0a985ec79fe1a]", "[101abaab50975ac3]", "[2f68cd385806de33]", "20")
    self.bid64_div("0", "-0", "Infinity", "[8000000000000000]", "00")
    self.bid64_div("0", "-0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("0", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("0", "+10.1110110E0", "0", "[7800000000000000]", "04")
    self.bid64_div("0", "-1111001100110010.E0", "-2.92E0", "[31ad8471a266af6b]", "20")
    self.bid64_div("0", "[167adba71acf185d]", "[90e3c2736eb30aa5]", "[b5796156c3f8f151]", "20")
    self.bid64_div("0", "1E-385", "16384", "[00000000246139ca]", "30")
    self.bid64_div("0", "1E-385", "1E+367", "[0000000000000000]", "30")
    self.bid64_div("0", "[2018024302120800]", "[0000000000008000]", "[514753b0b301c0b1]", "00")
    self.bid64_div("0", "[2400000000008100]", "[0000000000000020]", "[55c0000000000408]", "00")
    self.bid64_div("0", "[2880000000000000]", "[3d40000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[2d785dacb4166294]", "[5e72c4a1d1b31da0]", "[000000000013cf57]", "30")
    self.bid64_div("0", "[2f9cf28d6eaaebcc]", "[f94832e6badcf797]", "[8000000000000000]", "00")
    self.bid64_div("0", "[3200058000000000]", "[0000000000000010]", "[7800000000000000]", "28")
    self.bid64_div("0", "[339eb13e144fb3f3]", "[c53a14f5cb7938be]", "[9e442e43fb2dfb55]", "20")
    self.bid64_div("0", "[3ffffd0af7de7eff]", "[7efbdfffffff7bd7]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[4000000000020000]", "[0000000001000000]", "[7800000000000000]", "28")
    self.bid64_div("0", "[400051600011e004]", "[3fd94c7fdfaddfff]", "[2fe476bfbd6da947]", "20")
    self.bid64_div("0", "[41e1fbe51166dc69]", "[2a9c71784e0b81aa]", "[4718c7e0f7fa1d4d]", "20")
    self.bid64_div("0", "[420a7c9a1d28f90f]", "[02c9ef83cdb1ddf7]", "[7800000000000000]", "28")
    self.bid64_div("0", "[4bc0000000000000]", "[5114e89b5a42af8d]", "[2c80000000000000]", "00")
    self.bid64_div("0", "[4ea93be697d51be4]", "[88116e2dd297cc4d]", "[f800000000000000]", "28")
    self.bid64_div("0", "[5858f12126e35a22]", "[61226b08b1946f05]", "[7800000000000000]", "28")
    self.bid64_div("0", "[59cd9856f330399a]", "[9bdb3e5708231902]", "[f800000000000000]", "28")
    self.bid64_div("0", "[5e2c752533be5749]", "[c700000000000000]", "[f800000000000000]", "04")
    self.bid64_div("0", "[5fc0000000000000]", "[7800000000000000]", "[0000000000000000]", "00")
    self.bid64_div("0", "[5fc0000000000000]", "[f800000000000000]", "[8000000000000000]", "00")
    self.bid64_div("0", "[601f0f9da2b320f6]", "[3b8e15040145540e]", "[0000000000000000]", "00")
    self.bid64_div("0", "[62cb6ee11abc0476]", "[0000000000000001]", "[6f3b6ee11abc0476]", "00")
    self.bid64_div("0", "[63dd3bfeaef7dbff]", "[08014068b2298d18]", "[3920000000000000]", "00")
    self.bid64_div("0", "+6687988995.758858799E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("0", "[755e5cfb4ddb218b]", "[f265c6f3ed542986]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[82e0000000000000]", "[81e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[8660000000000000]", "[98d0817453613ac1]", "[1f60000000000000]", "00")
    self.bid64_div("0", "+8898.98E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("0", "+88.E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("0", "-89.E0", "0", "[f800000000000000]", "04")
    self.bid64_div("0", "[9102332813400470]", "[d9f9890149262ddf]", "[0000000000000000]", "30")
    self.bid64_div("0", "[91d485eae74fc032]", "[d800000000000000]", "[7800000000000000]", "04")
    self.bid64_div("0", "[982ca40942e6fb1f]", "[f4facdd2bab9ad58]", "[0000000000000000]", "30")
    self.bid64_div("0", "[998ed817c9d53f16]", "[c895d1f21105b6c5]", "[00d82b40182a092c]", "20")
    self.bid64_div("0", "+9.E0", "0", "[7800000000000000]", "04")
    self.bid64_div("0", "[a2fbd24fd2ad12f5]", "[d973fbdfabf9ed93]", "[0000000000000000]", "30")
    self.bid64_div("0", "[afc0000000000000]", "[d8e474adefac0730]", "[08a0000000000000]", "00")
    self.bid64_div("0", "[b7fcffb8ffdffe6b]", "[a0ae000424880541]", "[47275bdfda41a904]", "20")
    self.bid64_div("0", "[b9e36bb3ca04293f]", "[84d70274957e1bdc]", "[7800000000000000]", "28")
    self.bid64_div("0", "[bfff7ff7ffbf7fdf]", "[2000000000002102]", "[d143ba50da19b137]", "20")
    self.bid64_div("0", "[c1e1d7c2a197e831]", "[3840000000000000]", "[f800000000000000]", "04")
    self.bid64_div("0", "[c966c31ebbb54b25]", "[0d4c38ce9336af27]", "[f800000000000000]", "28")
    self.bid64_div("0", "[cfffffaffeffffbf]", "[e33255da752fd6ad]", "[7800000000000000]", "28")
    self.bid64_div("0", "[db00000000000000]", "[0d99000000000000]", "[dfe0000000000000]", "00")
    self.bid64_div("0", "[dffd65e1d2c35e62]", "[e9f9936524689c8c]", "[7800000000000000]", "28")
    self.bid64_div("0", "[e3dd88b6496b6f3d]", "[68810133c0dbc9dc]", "[9f20000000000000]", "00")
    self.bid64_div("0", "[f04d7481964314a9]", "[0000000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[f6ffffffff7fffef]", "[865419747a1134e0]", "[5fe0000000000000]", "00")
    self.bid64_div("0", "[f8009c3887ca4503]", "[002c04142292d400]", "[f800000000000000]", "00")
    self.bid64_div("0", "[f92bf743dfd2e0c3]", "[fff7ffffffffbfdf]", "[fc00000000000000]", "01")
    self.bid64_div("0", "[fa0a1ffcf8a5db16]", "[f95b66d979dab6fd]", "[7c00000000000000]", "01")
    self.bid64_div("0", "[fd69ddfd386feeff]", "[fd5d747ddffbbaeb]", "[fc01ddfd386feeff]", "00")
    self.bid64_div("0", "[ffffdefffefefeff]", "[ff96f7eedbbfefbc]", "[fc00000000000000]", "01")
    self.bid64_div("0", "[ffffdfff7ffffffb]", "[51a693977ee9dd4c]", "[fc00000000000000]", "01")
    self.bid64_div("0", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_div("0", "Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_div("0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_div("0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("0", "Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("0", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("0", "QNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("0", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_div("1", "-0", "-0", "[7c00000000000000]", "01")
    self.bid64_div("1", "[039393792c7c126a]", "[51abaea754772210]", "[0000000000000000]", "30")
    self.bid64_div("1", "[042d518a897c3880]", "[96ff6539819d4eef]", "[9d0f123f2e25c97d]", "20")
    self.bid64_div("1", "[04f208c93b8f8b47]", "[4040000000000000]", "[7800000000000000]", "04")
    self.bid64_div("1", "[0a25000000000000]", "[b1e367cf1e446523]", "[882537549b5c0e36]", "20")
    self.bid64_div("1", "[0bae000000000000]", "[0c1ff642997dcd4b]", "[2f6f8fc69bc6e1ce]", "20")
    self.bid64_div("1", "[0f57000000000000]", "[589cb873b58c817c]", "[0000000000000000]", "30")
    self.bid64_div("1", "[0fc0a985ec79fe1a]", "[101abaab50975ac3]", "[2f68cd385806de33]", "20")
    self.bid64_div("1", "-0", "Infinity", "[8000000000000000]", "00")
    self.bid64_div("1", "-0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("1", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("1", "+10.1110110E0", "0", "[7800000000000000]", "04")
    self.bid64_div("1", "-1111001100110010.E0", "-2.92E0", "[31ad8471a266af6b]", "20")
    self.bid64_div("1", "[13a8cc55d7309683]", "[db3a49157a4df475]", "[8000000000000001]", "30")
    self.bid64_div("1", "[167adba71acf185d]", "[90e3c2736eb30aa5]", "[b5796156c3f8f151]", "20")
    self.bid64_div("1", "1E-385", "16384", "[00000000246139ca]", "30")
    self.bid64_div("1", "1E-385", "-1E+368", "[8000000000000001]", "30")
    self.bid64_div("1", "[2880000000000000]", "[3d40000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("1", "[2d785dacb4166294]", "[5e72c4a1d1b31da0]", "[000000000013cf56]", "30")
    self.bid64_div("1", "[339eb13e144fb3f3]", "[c53a14f5cb7938be]", "[9e442e43fb2dfb56]", "20")
    self.bid64_div("1", "[414024441e040388]", "[0000000000000002]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("1", "[41e1fbe51166dc69]", "[2a9c71784e0b81aa]", "[4718c7e0f7fa1d4d]", "20")
    self.bid64_div("1", "[420a7c9a1d28f90f]", "[02c9ef83cdb1ddf7]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("1", "[4bc0000000000000]", "[5114e89b5a42af8d]", "[2c80000000000000]", "00")
    self.bid64_div("1", "[4ea93be697d51be4]", "[88116e2dd297cc4d]", "[f800000000000000]", "28")
    self.bid64_div("1", "[5858f12126e35a22]", "[61226b08b1946f05]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("1", "[59cd9856f330399a]", "[9bdb3e5708231902]", "[f800000000000000]", "28")
    self.bid64_div("1", "[5e2c752533be5749]", "[c700000000000000]", "[f800000000000000]", "04")
    self.bid64_div("1", "+6687988995.758858799E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("1", "[82e0000000000000]", "[81e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("1", "[8660000000000000]", "[98d0817453613ac1]", "[1f60000000000000]", "00")
    self.bid64_div("1", "+8898.98E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("1", "+88.E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("1", "-89.E0", "0", "[f800000000000000]", "04")
    self.bid64_div("1", "[91d485eae74fc032]", "[d800000000000000]", "[7800000000000000]", "04")
    self.bid64_div("1", "[982ca40942e6fb1f]", "[f4facdd2bab9ad58]", "[0000000000000000]", "30")
    self.bid64_div("1", "[998ed817c9d53f16]", "[c895d1f21105b6c5]", "[00d82b40182a092c]", "20")
    self.bid64_div("1", "+9.E0", "0", "[7800000000000000]", "04")
    self.bid64_div("1", "[a2fbd24fd2ad12f5]", "[d973fbdfabf9ed93]", "[0000000000000000]", "30")
    self.bid64_div("1", "[afc0000000000000]", "[d8e474adefac0730]", "[08a0000000000000]", "00")
    self.bid64_div("1", "[b8ac3defb7727fb8]", "[0020000000000008]", "[f800000000000000]", "28")
    self.bid64_div("1", "[b9e36bb3ca04293f]", "[84d70274957e1bdc]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("1", "[c1e1d7c2a197e831]", "[3840000000000000]", "[f800000000000000]", "04")
    self.bid64_div("1", "[c966c31ebbb54b25]", "[0d4c38ce9336af27]", "[f800000000000000]", "28")
    self.bid64_div("1", "[db00000000000000]", "[0d99000000000000]", "[dfe0000000000000]", "00")
    self.bid64_div("1", "[dffd65e1d2c35e62]", "[e9f9936524689c8c]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("1", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_div("1", "Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_div("1", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_div("1", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("1", "Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("1", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("1", "QNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("1", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_div("2", "-0", "-0", "[7c00000000000000]", "01")
    self.bid64_div("2", "[039393792c7c126a]", "[51abaea754772210]", "[0000000000000001]", "30")
    self.bid64_div("2", "[042d518a897c3880]", "[96ff6539819d4eef]", "[9d0f123f2e25c97c]", "20")
    self.bid64_div("2", "[04f208c93b8f8b47]", "[4040000000000000]", "[7800000000000000]", "04")
    self.bid64_div("2", "[0a25000000000000]", "[b1e367cf1e446523]", "[882537549b5c0e35]", "20")
    self.bid64_div("2", "[0bae000000000000]", "[0c1ff642997dcd4b]", "[2f6f8fc69bc6e1cf]", "20")
    self.bid64_div("2", "[0f57000000000000]", "[589cb873b58c817c]", "[0000000000000001]", "30")
    self.bid64_div("2", "[0fc0a985ec79fe1a]", "[101abaab50975ac3]", "[2f68cd385806de34]", "20")
    self.bid64_div("2", "-0", "Infinity", "[8000000000000000]", "00")
    self.bid64_div("2", "-0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("2", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("2", "+10.1110110E0", "0", "[7800000000000000]", "04")
    self.bid64_div("2", "-1111001100110010.E0", "-2.92E0", "[31ad8471a266af6c]", "20")
    self.bid64_div("2", "[167adba71acf185d]", "[90e3c2736eb30aa5]", "[b5796156c3f8f150]", "20")
    self.bid64_div("2", "1E-385", "16384", "[00000000246139cb]", "30")
    self.bid64_div("2", "1E-385", "1E+367", "[0000000000000001]", "30")
    self.bid64_div("2", "[2880000000000000]", "[3d40000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("2", "[2d785dacb4166294]", "[5e72c4a1d1b31da0]", "[000000000013cf57]", "30")
    self.bid64_div("2", "[2d92d2e46e3cb1c8]", "[cb3bcb79cd21170b]", "[92380f78b353a52c]", "20")
    self.bid64_div("2", "[339eb13e144fb3f3]", "[c53a14f5cb7938be]", "[9e442e43fb2dfb55]", "20")
    self.bid64_div("2", "[400051600011e004]", "[3fd94c7fdfaddfff]", "[2fe476bfbd6da948]", "20")
    self.bid64_div("2", "[41e1fbe51166dc69]", "[2a9c71784e0b81aa]", "[4718c7e0f7fa1d4e]", "20")
    self.bid64_div("2", "[420a7c9a1d28f90f]", "[02c9ef83cdb1ddf7]", "[7800000000000000]", "28")
    self.bid64_div("2", "[4bc0000000000000]", "[5114e89b5a42af8d]", "[2c80000000000000]", "00")
    self.bid64_div("2", "[4ea93be697d51be4]", "[88116e2dd297cc4d]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("2", "[5858f12126e35a22]", "[61226b08b1946f05]", "[7800000000000000]", "28")
    self.bid64_div("2", "[59cd9856f330399a]", "[9bdb3e5708231902]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("2", "[5e2c752533be5749]", "[c700000000000000]", "[f800000000000000]", "04")
    self.bid64_div("2", "+6687988995.758858799E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("2", "[82e0000000000000]", "[81e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("2", "[8660000000000000]", "[98d0817453613ac1]", "[1f60000000000000]", "00")
    self.bid64_div("2", "+8898.98E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("2", "+88.E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("2", "-89.E0", "0", "[f800000000000000]", "04")
    self.bid64_div("2", "[91d485eae74fc032]", "[d800000000000000]", "[7800000000000000]", "04")
    self.bid64_div("2", "[982ca40942e6fb1f]", "[f4facdd2bab9ad58]", "[0000000000000001]", "30")
    self.bid64_div("2", "[998ed817c9d53f16]", "[c895d1f21105b6c5]", "[00d82b40182a092d]", "20")
    self.bid64_div("2", "+9.E0", "0", "[7800000000000000]", "04")
    self.bid64_div("2", "[a2fbd24fd2ad12f5]", "[d973fbdfabf9ed93]", "[0000000000000001]", "30")
    self.bid64_div("2", "[afc0000000000000]", "[d8e474adefac0730]", "[08a0000000000000]", "00")
    self.bid64_div("2", "[b8ac3defb7727fb8]", "[0020000000000008]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("2", "[b9e36bb3ca04293f]", "[84d70274957e1bdc]", "[7800000000000000]", "28")
    self.bid64_div("2", "[c1e1d7c2a197e831]", "[3840000000000000]", "[f800000000000000]", "04")
    self.bid64_div("2", "[c966c31ebbb54b25]", "[0d4c38ce9336af27]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("2", "[db00000000000000]", "[0d99000000000000]", "[dfe0000000000000]", "00")
    self.bid64_div("2", "[dffd65e1d2c35e62]", "[e9f9936524689c8c]", "[7800000000000000]", "28")
    self.bid64_div("2", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_div("2", "Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_div("2", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_div("2", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("2", "Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("2", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("2", "QNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("2", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_div("3", "-0", "-0", "[7c00000000000000]", "01")
    self.bid64_div("3", "[039393792c7c126a]", "[51abaea754772210]", "[0000000000000000]", "30")
    self.bid64_div("3", "[042d518a897c3880]", "[96ff6539819d4eef]", "[9d0f123f2e25c97c]", "20")
    self.bid64_div("3", "[04f208c93b8f8b47]", "[4040000000000000]", "[7800000000000000]", "04")
    self.bid64_div("3", "[0a25000000000000]", "[b1e367cf1e446523]", "[882537549b5c0e35]", "20")
    self.bid64_div("3", "[0bae000000000000]", "[0c1ff642997dcd4b]", "[2f6f8fc69bc6e1ce]", "20")
    self.bid64_div("3", "[0f57000000000000]", "[589cb873b58c817c]", "[0000000000000000]", "30")
    self.bid64_div("3", "[0fc0a985ec79fe1a]", "[101abaab50975ac3]", "[2f68cd385806de33]", "20")
    self.bid64_div("3", "-0", "Infinity", "[8000000000000000]", "00")
    self.bid64_div("3", "-0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("3", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("3", "+10.1110110E0", "0", "[7800000000000000]", "04")
    self.bid64_div("3", "-1111001100110010.E0", "-2.92E0", "[31ad8471a266af6b]", "20")
    self.bid64_div("3", "[167adba71acf185d]", "[90e3c2736eb30aa5]", "[b5796156c3f8f150]", "20")
    self.bid64_div("3", "[2880000000000000]", "[3d40000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("3", "[2d785dacb4166294]", "[5e72c4a1d1b31da0]", "[000000000013cf56]", "30")
    self.bid64_div("3", "[339eb13e144fb3f3]", "[c53a14f5cb7938be]", "[9e442e43fb2dfb55]", "20")
    self.bid64_div("3", "[41e1fbe51166dc69]", "[2a9c71784e0b81aa]", "[4718c7e0f7fa1d4d]", "20")
    self.bid64_div("3", "[420a7c9a1d28f90f]", "[02c9ef83cdb1ddf7]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[4bc0000000000000]", "[5114e89b5a42af8d]", "[2c80000000000000]", "00")
    self.bid64_div("3", "[4ea93be697d51be4]", "[88116e2dd297cc4d]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[5858f12126e35a22]", "[61226b08b1946f05]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[59cd9856f330399a]", "[9bdb3e5708231902]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[5e2c752533be5749]", "[c700000000000000]", "[f800000000000000]", "04")
    self.bid64_div("3", "+6687988995.758858799E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("3", "[82e0000000000000]", "[81e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("3", "[8660000000000000]", "[98d0817453613ac1]", "[1f60000000000000]", "00")
    self.bid64_div("3", "+8898.98E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("3", "+88.E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("3", "-89.E0", "0", "[f800000000000000]", "04")
    self.bid64_div("3", "[91d485eae74fc032]", "[d800000000000000]", "[7800000000000000]", "04")
    self.bid64_div("3", "[982ca40942e6fb1f]", "[f4facdd2bab9ad58]", "[0000000000000000]", "30")
    self.bid64_div("3", "[998ed817c9d53f16]", "[c895d1f21105b6c5]", "[00d82b40182a092c]", "20")
    self.bid64_div("3", "+9.E0", "0", "[7800000000000000]", "04")
    self.bid64_div("3", "[a2fbd24fd2ad12f5]", "[d973fbdfabf9ed93]", "[0000000000000000]", "30")
    self.bid64_div("3", "[afc0000000000000]", "[d8e474adefac0730]", "[08a0000000000000]", "00")
    self.bid64_div("3", "[b8ac3defb7727fb8]", "[0020000000000008]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[b9e36bb3ca04293f]", "[84d70274957e1bdc]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[c1e1d7c2a197e831]", "[3840000000000000]", "[f800000000000000]", "04")
    self.bid64_div("3", "[c966c31ebbb54b25]", "[0d4c38ce9336af27]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_div("3", "[db00000000000000]", "[0d99000000000000]", "[dfe0000000000000]", "00")
    self.bid64_div("3", "[dffd65e1d2c35e62]", "[e9f9936524689c8c]", "[77fb86f26fc0ffff]", "28")
    self.bid64_div("3", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_div("3", "Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_div("3", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_div("3", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("3", "Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("3", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("3", "QNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("3", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_div("4", "-0", "-0", "[7c00000000000000]", "01")
    self.bid64_div("4", "[039393792c7c126a]", "[51abaea754772210]", "[0000000000000000]", "30")
    self.bid64_div("4", "[042d518a897c3880]", "[96ff6539819d4eef]", "[9d0f123f2e25c97c]", "20")
    self.bid64_div("4", "[04f208c93b8f8b47]", "[4040000000000000]", "[7800000000000000]", "04")
    self.bid64_div("4", "[0a25000000000000]", "[b1e367cf1e446523]", "[882537549b5c0e35]", "20")
    self.bid64_div("4", "[0bae000000000000]", "[0c1ff642997dcd4b]", "[2f6f8fc69bc6e1ce]", "20")
    self.bid64_div("4", "[0f57000000000000]", "[589cb873b58c817c]", "[0000000000000000]", "30")
    self.bid64_div("4", "[0fc0a985ec79fe1a]", "[101abaab50975ac3]", "[2f68cd385806de33]", "20")
    self.bid64_div("4", "-0", "Infinity", "[8000000000000000]", "00")
    self.bid64_div("4", "-0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("4", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("4", "+10.1110110E0", "0", "[7800000000000000]", "04")
    self.bid64_div("4", "-1111001100110010.E0", "-2.92E0", "[31ad8471a266af6b]", "20")
    self.bid64_div("4", "[167adba71acf185d]", "[90e3c2736eb30aa5]", "[b5796156c3f8f151]", "20")
    self.bid64_div("4", "[2880000000000000]", "[3d40000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("4", "[2d785dacb4166294]", "[5e72c4a1d1b31da0]", "[000000000013cf57]", "30")
    self.bid64_div("4", "[339eb13e144fb3f3]", "[c53a14f5cb7938be]", "[9e442e43fb2dfb55]", "20")
    self.bid64_div("4", "[41e1fbe51166dc69]", "[2a9c71784e0b81aa]", "[4718c7e0f7fa1d4d]", "20")
    self.bid64_div("4", "[420a7c9a1d28f90f]", "[02c9ef83cdb1ddf7]", "[7800000000000000]", "28")
    self.bid64_div("4", "[4bc0000000000000]", "[5114e89b5a42af8d]", "[2c80000000000000]", "00")
    self.bid64_div("4", "[4ea93be697d51be4]", "[88116e2dd297cc4d]", "[f800000000000000]", "28")
    self.bid64_div("4", "[5858f12126e35a22]", "[61226b08b1946f05]", "[7800000000000000]", "28")
    self.bid64_div("4", "[59cd9856f330399a]", "[9bdb3e5708231902]", "[f800000000000000]", "28")
    self.bid64_div("4", "[5e2c752533be5749]", "[c700000000000000]", "[f800000000000000]", "04")
    self.bid64_div("4", "+6687988995.758858799E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("4", "[82e0000000000000]", "[81e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_div("4", "[8660000000000000]", "[98d0817453613ac1]", "[1f60000000000000]", "00")
    self.bid64_div("4", "+8898.98E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("4", "+88.E0", "-0", "[f800000000000000]", "04")
    self.bid64_div("4", "-89.E0", "0", "[f800000000000000]", "04")
    self.bid64_div("4", "[91d485eae74fc032]", "[d800000000000000]", "[7800000000000000]", "04")
    self.bid64_div("4", "[982ca40942e6fb1f]", "[f4facdd2bab9ad58]", "[0000000000000000]", "30")
    self.bid64_div("4", "[998ed817c9d53f16]", "[c895d1f21105b6c5]", "[00d82b40182a092c]", "20")
    self.bid64_div("4", "+9.E0", "0", "[7800000000000000]", "04")
    self.bid64_div("4", "[a2fbd24fd2ad12f5]", "[d973fbdfabf9ed93]", "[0000000000000000]", "30")
    self.bid64_div("4", "[afc0000000000000]", "[d8e474adefac0730]", "[08a0000000000000]", "00")
    self.bid64_div("4", "[b9e36bb3ca04293f]", "[84d70274957e1bdc]", "[7800000000000000]", "28")
    self.bid64_div("4", "[c1e1d7c2a197e831]", "[3840000000000000]", "[f800000000000000]", "04")
    self.bid64_div("4", "[c966c31ebbb54b25]", "[0d4c38ce9336af27]", "[f800000000000000]", "28")
    self.bid64_div("4", "[db00000000000000]", "[0d99000000000000]", "[dfe0000000000000]", "00")
    self.bid64_div("4", "[dffd65e1d2c35e62]", "[e9f9936524689c8c]", "[7800000000000000]", "28")
    self.bid64_div("4", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_div("4", "Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_div("4", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_div("4", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("4", "Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("4", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_div("4", "QNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_div("4", "SNaN", "0", "[7c00000000000000]", "01")
  }

  private func bid64_div(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._divided(by: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_fma() {
    self.bid64_fma("0", "[00238d7ea4c68001]", "[6bf386f26fc0fff6]", "[81e0000000000009]", "[00038d7ea4c68000]", "30")
    self.bid64_fma("2", "[00238d7ea4c68001]", "[6bf386f26fc0fff6]", "[81e0000000000009]", "[00038d7ea4c68000]", "30")
    self.bid64_fma("4", "[00238d7ea4c68001]", "[6bf386f26fc0fff6]", "[81e0000000000009]", "[00038d7ea4c68000]", "30")
    self.bid64_fma("0", "[0000000000000000]", "[00d0400101510600]", "[0020000210a2430a]", "[00000014a6569e64]", "00")
    self.bid64_fma("0", "[0000000000000000]", "[010879c99167ba41]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_fma("0", "[0000000000000000]", "[fbfdffdffdfff6ff]", "[ff777d7cffffdff7]", "[fc037d7cffffdff7]", "01")
    self.bid64_fma("0", "[0000000000000002]", "[0000200008000000]", "[e624226f21bd67b4]", "[0000000000000000]", "30")
    self.bid64_fma("0", "[0000000000000002]", "[39b4ddb9e2f83460]", "[0800008010080020]", "[08042cd870a00a9a]", "20")
    self.bid64_fma("0", "[0000000000000020]", "[e502e9c91be94db0]", "[0000001400100112]", "[0000001400100112]", "30")
    self.bid64_fma("0", "[0000000000000100]", "[4c1306322ddf8000]", "[9a409f33969deb6b]", "[1aa4de9c69086b07]", "20")
    self.bid64_fma("0", "[0000000000000400]", "[50000028010c0008]", "[696d7f7bd6fe7f66]", "[1e40a00430002000]", "00")
    self.bid64_fma("0", "[0000000000010000]", "[f5eebfdc791c23b7]", "[3eff5b15cf1ffef7]", "[3eff5b15cf1ffef7]", "00")
    self.bid64_fma("0", "[0000000004000000]", "[300234c8f1d4c108]", "[0050000000000000]", "[00500000003f96d1]", "20")
    self.bid64_fma("0", "[0000212020010000]", "[7bfe87ffbfcbff37]", "[ffed6fdb626e4ad3]", "[fc016fdb626e4ad3]", "01")
    self.bid64_fma("0", "[0001000000008020]", "[7bf705feff8ebfff]", "[22092015234b6048]", "[7800000000000000]", "00")
    self.bid64_fma("0", "[00180081c0008000]", "[4044000000000000]", "[80409002001000a2]", "[107b0619843fbdda]", "20")
    self.bid64_fma("0", "-0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("0", "-0.101111000011E-271", "-98.9989988999E331", "+0.000E-1998", "[37838e64dc87afee]", "20")
    self.bid64_fma("0", "[01a0000000000001]", "[30005af3107a4000]", "[81a0000000000001]", "[0000000000000000]", "00")
    self.bid64_fma("0", "+0.1E2167", "+99888998988889998.889899899989999E1387", "-7776567.96595796889999599997575989899887E-3096", "[7800000000000000]", "00")
    self.bid64_fma("0", "[044cdee64742a8ce]", "[169ff4aa153c0a98]", "[53c0000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("0", "[05002042003c8302]", "[38aa1a158f37eb1f]", "[d8c33303a474a943]", "[d8bffe246c8e9c9e]", "20")
    self.bid64_fma("0", "[06686268fe77a9df]", "[28000a4040000004]", "[0000000100000000]", "[000000010000001b]", "30")
    self.bid64_fma("0", "[08000884a28200a4]", "[60110412000000c8]", "[9903beed5d1ac2c4]", "[9903beed5d1ac2c4]", "20")
    self.bid64_fma("0", "[086c63d816e5963d]", "[b1440640373e5484]", "[08c30041885810a0]", "[89ce08fa891e7ee7]", "20")
    self.bid64_fma("0", "[0aee000000000000]", "[00a0000000000000]", "[733b16cad14044a1]", "[733b16cad14044a1]", "00")
    self.bid64_fma("0", "[0be5000000000000]", "[55a9de340797b9c9]", "[ae2dd44cb79d04d1]", "[31ade350a34fa74f]", "20")
    self.bid64_fma("0", "[0e45000000000000]", "[0f512df7108ecb14]", "[8d1ea59449a41dac]", "[8d1ea59449a41dac]", "20")
    self.bid64_fma("0", "-0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("0", "-0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("0", "0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("0", "0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("0", "0", "QNaN", "-0", "[7c00000000000000]", "00")
    self.bid64_fma("0", "-0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("0", "-1000000.00E-198", "+55.86898859557879567887558857876986965876E2515", "-6999699.7885768575965965588757588E-2899", "[f800000000000000]", "00")
    self.bid64_fma("0", "+10101010.0111000011E-228", "+989587665895777579797998.76677669577E300", "-8922342.E-1600", "[6f2b8328ada4fc5c]", "20")
    self.bid64_fma("0", "+110000000010.0000001000000000100E3597", "-9867789.776597E1391", "-89988888989989898.89E1544", "[f800000000000000]", "00")
    self.bid64_fma("0", "-11.0010001111001E382", "-9.E191", "+8677.9E-1415", "[7800000000000000]", "28")
    self.bid64_fma("0", "-1100101.10001011000100100000000101E3419", "-1110001.001100E-3563", "+7795597699996956896798785.E-1805", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[1102716d2a6e6ac5]", "[1a0ca98b2c90efe1]", "[e13e317f5d25b939]", "[0000000000000000]", "30")
    self.bid64_fma("0", "+11100000.01000011E2758", "+7875.78779995965695E499", "-6687578.675565878E336", "[7800000000000000]", "00")
    self.bid64_fma("0", "[1c5a1b3a4aa0a5f6]", "[8bf5534c5dd1aae0]", "[ffdfbf7effbfff77]", "[fc00000000000000]", "01")
    self.bid64_fma("0", "[1f8ecaf50db921d8]", "[cea9e9211235b2ed]", "[ab2d40787f01205f]", "[be642069266fbf92]", "20")
    self.bid64_fma("0", "[2020a57510008844]", "[9f123d52f3201ec5]", "[1080000000104208]", "[63d28907cc19c5ce]", "20")
    self.bid64_fma("0", "[2480000000000000]", "[d5183d74e9ae8977]", "[d7897b705774214c]", "[d7897b705774214c]", "00")
    self.bid64_fma("0", "[2780000000000000]", "[0e7d574b10e2f988]", "[48e58a6e466cc162]", "[48e58a6e466cc162]", "00")
    self.bid64_fma("0", "[2a00000306053544]", "[0040000000002201]", "[af0b5f75f94f4895]", "[af0b5f75f94f4895]", "20")
    self.bid64_fma("0", "[3000400200500203]", "[4000000000000008]", "[3d82029e7224e682]", "[3e3400a16a435ba5]", "20")
    self.bid64_fma("0", "-326329.E0", "-11101101.101111E0", "-0", "[316cdebee7001c04]", "20")
    self.bid64_fma("0", "[353056894e1c8385]", "[3487d2873e6ae31f]", "[37ee3c19d2caf7ea]", "[39e398e983ebbf0f]", "20")
    self.bid64_fma("0", "+365.2683758E0", "+8.8898988E0", "-0", "[304b894f68b18161]", "20")
    self.bid64_fma("0", "[37b2914bed9892a5]", "[9195cf876c473226]", "[1c7773649ba05d00]", "[1c7773649ba05d00]", "20")
    self.bid64_fma("0", "[4050800311200b05]", "[518a6ff586fd963f]", "[a01844083283a151]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[408400010c600000]", "[0000000000000004]", "[8d3a48e479b391a3]", "[0ed00004317ffd1c]", "20")
    self.bid64_fma("0", "[41859cab5336dc80]", "[688ffda2ba09adbf]", "[6e149be1f305451c]", "[31e0000000000000]", "00")
    self.bid64_fma("0", "+42577.8664943686864229E-1299", "-79998598895657755889.688985875E-2213", "-0.00000001000E-1418", "[8000000000000000]", "00")
    self.bid64_fma("0", "-45.E-131", "-1110101100000101101001.111010110110E-285", "-1110110111001111000.110E-2623", "[000000000000c323]", "30")
    self.bid64_fma("0", "-45.E-2952", "+9.988988898E-1156", "-0.000000100E239", "[cce38d7ea4c68000]", "00")
    self.bid64_fma("0", "[4716710536974a10]", "[b78f93aaed91a5bb]", "[17e217d0c6ef1375]", "[cec9d6e58e6d2854]", "20")
    self.bid64_fma("0", "+49.86E-314", "-8988999.888898E-78", "-9999.88E-383", "[80838d8648f30a26]", "20")
    self.bid64_fma("0", "[49e87bc4b82ae3d8]", "[4b93057177b088e1]", "[1d46296d0dff2eb2]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[4a20000003020000]", "[0000000000002000]", "[97d0b1109f594743]", "[17ed047589aa45ac]", "20")
    self.bid64_fma("0", "[4d5400880c250068]", "[4253d58e976af92c]", "[dffffbdefb37f5df]", "[dffede0013ede543]", "20")
    self.bid64_fma("0", "[4e4de48132cf9cff]", "[765ec07d1780dec7]", "[49d341d321da20eb]", "[49d341d321da20eb]", "00")
    self.bid64_fma("0", "[5000414808005009]", "[0000000000000020]", "[dd62233b2b20dbf3]", "[dd55604faf48977e]", "20")
    self.bid64_fma("0", "[51c46477bf75efe7]", "[c48e3181143e8cab]", "[3711407bd7e3541f]", "[f800000000000000]", "28")
    self.bid64_fma("0", "[525013de42785593]", "[f78aa8a55a308acc]", "[6031ffec661217c4]", "[f800000000000000]", "28")
    self.bid64_fma("0", "+5353472838896522543377.E-228", "+0.1E265", "-89889999889898898999999899889999.9E60", "[bb5fef72a73acfc2]", "20")
    self.bid64_fma("0", "+56465267.E377", "+110000010000000.000011000000000000000000E50", "+767.E70", "[7800000000000000]", "28")
    self.bid64_fma("0", "+56658585.5987986E128", "+0.1011100101110E361", "+228993.E-1026", "[7800000000000000]", "28")
    self.bid64_fma("0", "[588a69b291fd275a]", "[b68adb297e26220b]", "[dd4ee225f93102eb]", "[df3fd1a0c5a9931e]", "20")
    self.bid64_fma("0", "-5895787759566.8568676785875687668E-3586", "-110010100110.1101100E-3798", "+6.7798666866E-3033", "[0000000000000000]", "00")
    self.bid64_fma("0", "-596999886.9E-374", "+589648.385E-26", "+1.0000E-379", "[601b86f19def0200]", "20")
    self.bid64_fma("0", "+655633969724693.E-1504", "-1000000000000100000000.00000000E-221", "+1111110010111.0E2177", "[7800000000000000]", "00")
    self.bid64_fma("0", "+65659.55968875568E-129", "+9988899899988989898998998988989889.89888E-303", "-56985588.8E-437", "[0000000000010033]", "30")
    self.bid64_fma("0", "+65677855.7959655555E0", "+100110000001.100001E0", "0", "[32375befd8042396]", "20")
    self.bid64_fma("0", "-6588795998878667888757.9686576E-2896", "-89889.88988888898888999899E-3903", "-8.899899E1116", "[f800000000000000]", "00")
    self.bid64_fma("0", "-699.76578678875598965578686688965E-3208", "+5.79767569577558E2557", "-98989.9998898E-161", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[6bfeeaa31884393f]", "[210757ad7710355d]", "[202000000040408a]", "[1f217ef8eecb4a00]", "00")
    self.bid64_fma("0", "[6fed7fffdff3efbf]", "[2053800102000773]", "[afbfd2fcf317714b]", "[afbfd2fcf317714b]", "00")
    self.bid64_fma("0", "[6ff7fc29cbfbfdff]", "[9dd03c2be5c8456d]", "[e8483dd66caf3ca9]", "[e8483dd66caf3ca9]", "00")
    self.bid64_fma("0", "[70f2e6141f197b31]", "[8d28bbf7f5949a31]", "[e85215502e02869e]", "[e852f0f484f54bd2]", "20")
    self.bid64_fma("0", "-7575.866768897E765", "+6776634485838.5844462777436274E-3953", "-99998898.8989999899988999888898E1771", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[76a26b16ca880e82]", "[532634af9dfd0a7e]", "[b5b3283b46229614]", "[7800000000000000]", "28")
    self.bid64_fma("0", "-79587.578569697596E2883", "-8899.898898899988888E672", "-99988898.9989998999999988889899989888989E1697", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[799b13bfc74dd3cc]", "[5779ffd6f8bff6bb]", "[7fffffffffffffea]", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[7b8415f5015dc808]", "[fd7bfdff3b7fefff]", "[48338f0525c89531]", "[fc00000000000000]", "00")
    self.bid64_fma("0", "[7bb324bb6b22696d]", "[0000000000000000]", "[fffffeffff9ffffb]", "[fc00000000000000]", "01")
    self.bid64_fma("0", "[80d5d7e06ef5290a]", "[afa4b1e4aeff4f08]", "[00130b9008284012]", "[009cde20d8540778]", "20")
    self.bid64_fma("0", "[81c0000000000000]", "[19b74526664b3842]", "[e680c8b0cef64c6f]", "[e680c8b0cef64c6f]", "00")
    self.bid64_fma("0", "-828.64832E3917", "+110010110101.1101E-2003", "-567.69E-2577", "[7c00000000000000]", "01")
    self.bid64_fma("0", "-86987676.9558595E0", "+0.01101001E0", "-0", "[ec22068d03c5bb13]", "20")
    self.bid64_fma("0", "[874d5036a44f4bcd]", "[0e15000000000000]", "[3bd60c8d9236d98e]", "[3bd60c8d9236d98e]", "20")
    self.bid64_fma("0", "-87.7E0", "-26757.854527644E0", "0", "[30a8564740b6cf0b]", "20")
    self.bid64_fma("0", "-8857.78555E3909", "-7759755569.88988E3403", "-0.1101E-2963", "[7800000000000000]", "00")
    self.bid64_fma("0", "+8889989989.899E-365", "+26858538265655946599822795973789292.E-331", "+78869768569785878579778587856765798.6787E-3243", "[0000000000000000]", "30")
    self.bid64_fma("0", "[891d87e54574a5a0]", "[214191950a290d55]", "[5600000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("0", "+8.988989898988899889988899898898998E2553", "-85877686689857987686968786877687.76E-2851", "-4.56E961", "[7c00000000000000]", "01")
    self.bid64_fma("0", "-89988.9E311", "-1001.1011101110E164", "-88759569597678767695566.55659E-1447", "[7800000000000000]", "28")
    self.bid64_fma("0", "+8998989889988998999988998.8899E-2814", "-98998.888998899998989899E2343", "-0.011001011111000E3441", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[8c1cec0046d39321]", "[2341b8329a600007]", "[001110020004c042]", "[00110ff8d3800a00]", "20")
    self.bid64_fma("0", "[8e3f278ee9c4e669]", "[3b4acfebb8528492]", "[9b857bc3e226884f]", "[9b857bc3e2268852]", "20")
    self.bid64_fma("0", "[92cfc8303ab2031e]", "[2808081190058ec1]", "[0ac886bbd988ed04]", "[e2bad343c504a510]", "20")
    self.bid64_fma("0", "[9508bf6bf7c59797]", "[5d1cb1acab0b7e64]", "[43a0f3e053281008]", "[438986c33f8d977b]", "20")
    self.bid64_fma("0", "+957876778.566865796E234", "+10.0000111000E324", "-10000000000000000.00000000E-2315", "[7800000000000000]", "28")
    self.bid64_fma("0", "-9597.56757698559786E0", "-26.87623444E0", "-0", "[30892a0270e1914d]", "20")
    self.bid64_fma("0", "[9626c2f864aba8e7]", "[9451d8944a4bf287]", "[9960000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("0", "-9699.6955766868969879586956798E139", "-1000.10001110111101000110001E344", "+93499387558657577225565.338744922886848E-3769", "[7800000000000000]", "28")
    self.bid64_fma("0", "[96b40f6ca5493264]", "[0c5e000000000000]", "[0400000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("0", "+97.42E249", "-69558557765795767855.56778667876557767E31", "-59676.7886558886E-2632", "[d598131856ce1090]", "20")
    self.bid64_fma("0", "+9758786597.697876697E0", "+101000011.100E0", "-0", "[6c830452433eeec8]", "20")
    self.bid64_fma("0", "[9f7849c620634412]", "[406c3ab426c1d82a]", "[409ead39681471c0]", "[409ead39681471c0]", "20")
    self.bid64_fma("0", "[a1e63281a0601c22]", "[12685f51e462a159]", "[200000000000000a]", "[1e438d7ea4c68000]", "20")
    self.bid64_fma("0", "[a340012fe8e804dd]", "[085a000000000000]", "[813bf6b7cdef90a5]", "[813bf6b7cdef90a5]", "20")
    self.bid64_fma("0", "[a40ffbf72fa26b95]", "[fadbffffbd43fdfe]", "[fdffdfdffffeb5bb]", "[fc00000000000000]", "00")
    self.bid64_fma("0", "[aa9ffa9b39179b2b]", "[b3f91aaf8f42d0d5]", "[39de64b67b2be906]", "[39de64b67b2be906]", "20")
    self.bid64_fma("0", "[abf4c8cff7ffabf4]", "[fabdf7fba36c7efe]", "[fbfff3f7ffffffff]", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[ad89b51c88af69cf]", "[0103000100120c00]", "[0000000000000008]", "[8000000000005a19]", "30")
    self.bid64_fma("0", "[aeb6b2cbbe69af6f]", "[fdfbfcfbfbfeeffc]", "[ffffffffffffffff]", "[fc00000000000000]", "01")
    self.bid64_fma("0", "[b960000000000000]", "[6c81bd06d1bc69f0]", "[1cbc0699f519b029]", "[1cbc0699f519b029]", "00")
    self.bid64_fma("0", "[bfffffffff4fc6fd]", "[9b5d725ce93b4155]", "[2b7003da4fc61171]", "[2b8440fb0bb03765]", "20")
    self.bid64_fma("0", "[c060002107151a06]", "[0100000000008870]", "[b7e3ce5fcca69f1f]", "[b7e3ce5fcca69f1f]", "20")
    self.bid64_fma("0", "[c12008b07ce1429e]", "[df386f30acf77614]", "[035d246c0e445f84]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[c299c69761718b54]", "[0439000848301168]", "[44e04aa10048201b]", "[44bd26e41c2c8a8c]", "20")
    self.bid64_fma("0", "[c6dc9204e1504427]", "[fff9ffffffdfffff]", "[0300011000001100]", "[fc01ffffffdfffff]", "01")
    self.bid64_fma("0", "[c720000000000000]", "[ce24af51f46fefcd]", "[cddb16689ad47de7]", "[cddb16689ad47de7]", "00")
    self.bid64_fma("0", "[cae8279978177853]", "[01e0000000000000]", "[4de0000000000000]", "[1b00000000000000]", "00")
    self.bid64_fma("0", "[d10c967487431deb]", "[222dde52f60ed558]", "[5023dc7b6fa46108]", "[5023dc7b6fa46108]", "20")
    self.bid64_fma("0", "[d1cb49ab4261aacd]", "[5f94f0fc918c4a6e]", "[1a8947c94c2dbf5b]", "[f800000000000000]", "28")
    self.bid64_fma("0", "[d2fdca892420c735]", "[d28d4938435cb5b5]", "[bda7f323437d7c9f]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[d94c0f24a80dd3a7]", "[6b9d4f6b6cf4d4a7]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_fma("0", "[da05b8744546a5f0]", "[ca2d387e8c751657]", "[a511527ac20869f3]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[e40c48889230bcc1]", "[0080940108140400]", "[0000000010000001]", "[0000000010000001]", "00")
    self.bid64_fma("0", "[eda10de61003dc4f]", "[dd179f310b113ff7]", "[3145f5c82f90ec6f]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[ef8c695dfcbffd4a]", "[f5f7aff79faf7fff]", "[8029eab262894a6c]", "[8029eab262894a6c]", "00")
    self.bid64_fma("0", "[f6f17a6f96d5746b]", "[c73d5c78e572caab]", "[c0e12a578ad1f74e]", "[7800000000000000]", "28")
    self.bid64_fma("0", "[f7d287f6ddd7d7ef]", "[71a60c09282b4c38]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_fma("0", "[fb1739f7d7b1ffbe]", "[ffffffffffdeffff]", "[53d603218f418842]", "[fc00000000000000]", "01")
    self.bid64_fma("0", "[fb3d3d9a25f13fee]", "[d6efdbbbfeff6eff]", "[fbb78bee99ff5df6]", "[7c00000000000000]", "01")
    self.bid64_fma("0", "[fbbfffe2ffefdfef]", "[ab8c5db7fc8ecea2]", "[6fa56692f7ded68f]", "[7800000000000000]", "00")
    self.bid64_fma("0", "[fdf7ef4f9f5bf7f7]", "[0e03009004900080]", "[85432de72c393e91]", "[fc00000000000000]", "00")
    self.bid64_fma("0", "[ffb54afb6edff98e]", "[0000000000020000]", "[5dffdff9dfbd7f9f]", "[fc014afb6edff98e]", "01")
    self.bid64_fma("0", "[ffffffffffffffff]", "[bbfeaaf7dbff63dd]", "[3f970dd472e7f7fe]", "[fc00000000000000]", "01")
    self.bid64_fma("0", "-Infinity", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_fma("0", "QNaN", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("0", "SNaN", "0", "0", "[7c00000000000000]", "01")
    self.bid64_fma("0", "SNaN", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("0", "SNaN", "+5596858.E0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("0", "SNaN", "-Infinity", "QNaN", "[7c00000000000000]", "01")
    self.bid64_fma("1", "[0000000000000000]", "[00d0400101510600]", "[0020000210a2430a]", "[00000014a6569e64]", "00")
    self.bid64_fma("1", "-0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-0.101111000011E-271", "-98.9989988999E331", "+0.000E-1998", "[37838e64dc87afed]", "20")
    self.bid64_fma("1", "[01a0000000000001]", "[30005af3107a4000]", "[81a0000000000001]", "[8000000000000000]", "00")
    self.bid64_fma("1", "+0.1E2167", "+99888998988889998.889899899989999E1387", "-7776567.96595796889999599997575989899887E-3096", "[7800000000000000]", "00")
    self.bid64_fma("1", "[044cdee64742a8ce]", "[169ff4aa153c0a98]", "[53c0000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("1", "[0aee000000000000]", "[00a0000000000000]", "[733b16cad14044a1]", "[733b16cad14044a1]", "00")
    self.bid64_fma("1", "[0be5000000000000]", "[55a9de340797b9c9]", "[ae2dd44cb79d04d1]", "[31ade350a34fa74e]", "20")
    self.bid64_fma("1", "[0e45000000000000]", "[0f512df7108ecb14]", "[8d1ea59449a41dac]", "[8d1ea59449a41dac]", "20")
    self.bid64_fma("1", "-0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("1", "0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("1", "0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("1", "0", "QNaN", "-0", "[7c00000000000000]", "00")
    self.bid64_fma("1", "-0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-1000000.00E-198", "+55.86898859557879567887558857876986965876E2515", "-6999699.7885768575965965588757588E-2899", "[f800000000000000]", "00")
    self.bid64_fma("1", "+10101010.0111000011E-228", "+989587665895777579797998.76677669577E300", "-8922342.E-1600", "[6f2b8328ada4fc5b]", "20")
    self.bid64_fma("1", "+110000000010.0000001000000000100E3597", "-9867789.776597E1391", "-89988888989989898.89E1544", "[f800000000000000]", "00")
    self.bid64_fma("1", "-11.0010001111001E382", "-9.E191", "+8677.9E-1415", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "-1100101.10001011000100100000000101E3419", "-1110001.001100E-3563", "+7795597699996956896798785.E-1805", "[7c00000000000000]", "01")
    self.bid64_fma("1", "+11100000.01000011E2758", "+7875.78779995965695E499", "-6687578.675565878E336", "[7800000000000000]", "00")
    self.bid64_fma("1", "[1f8ecaf50db921d8]", "[cea9e9211235b2ed]", "[ab2d40787f01205f]", "[be642069266fbf92]", "20")
    self.bid64_fma("1", "[2480000000000000]", "[d5183d74e9ae8977]", "[d7897b705774214c]", "[d7897b705774214c]", "00")
    self.bid64_fma("1", "[2780000000000000]", "[0e7d574b10e2f988]", "[48e58a6e466cc162]", "[48e58a6e466cc162]", "00")
    self.bid64_fma("1", "-326329.E0", "-11101101.101111E0", "-0", "[316cdebee7001c03]", "20")
    self.bid64_fma("1", "+365.2683758E0", "+8.8898988E0", "-0", "[304b894f68b18161]", "20")
    self.bid64_fma("1", "[37b2914bed9892a5]", "[9195cf876c473226]", "[1c7773649ba05d00]", "[1c7773649ba05cff]", "20")
    self.bid64_fma("1", "[408400010c600000]", "[0000000000000004]", "[8d3a48e479b391a3]", "[0ed00004317ffd1c]", "20")
    self.bid64_fma("1", "+42577.8664943686864229E-1299", "-79998598895657755889.688985875E-2213", "-0.00000001000E-1418", "[8000000000000000]", "00")
    self.bid64_fma("1", "-45.E-131", "-1110101100000101101001.111010110110E-285", "-1110110111001111000.110E-2623", "[000000000000c322]", "30")
    self.bid64_fma("1", "-45.E-2952", "+9.988988898E-1156", "-0.000000100E239", "[cce38d7ea4c68000]", "00")
    self.bid64_fma("1", "[49e87bc4b82ae3d8]", "[4b93057177b088e1]", "[1d46296d0dff2eb2]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[51c46477bf75efe7]", "[c48e3181143e8cab]", "[3711407bd7e3541f]", "[f800000000000000]", "28")
    self.bid64_fma("1", "[525013de42785593]", "[f78aa8a55a308acc]", "[6031ffec661217c4]", "[f800000000000000]", "28")
    self.bid64_fma("1", "+5353472838896522543377.E-228", "+0.1E265", "-89889999889898898999999899889999.9E60", "[bb5fef72a73acfc2]", "20")
    self.bid64_fma("1", "+56465267.E377", "+110000010000000.000011000000000000000000E50", "+767.E70", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "+56658585.5987986E128", "+0.1011100101110E361", "+228993.E-1026", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "-5895787759566.8568676785875687668E-3586", "-110010100110.1101100E-3798", "+6.7798666866E-3033", "[0000000000000000]", "00")
    self.bid64_fma("1", "+655633969724693.E-1504", "-1000000000000100000000.00000000E-221", "+1111110010111.0E2177", "[7800000000000000]", "00")
    self.bid64_fma("1", "+65659.55968875568E-129", "+9988899899988989898998998988989889.89888E-303", "-56985588.8E-437", "[0000000000010032]", "30")
    self.bid64_fma("1", "+65677855.7959655555E0", "+100110000001.100001E0", "0", "[32375befd8042395]", "20")
    self.bid64_fma("1", "-6588795998878667888757.9686576E-2896", "-89889.88988888898888999899E-3903", "-8.899899E1116", "[f800000000000000]", "00")
    self.bid64_fma("1", "-699.76578678875598965578686688965E-3208", "+5.79767569577558E2557", "-98989.9998898E-161", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-7575.866768897E765", "+6776634485838.5844462777436274E-3953", "-99998898.8989999899988999888898E1771", "[7c00000000000000]", "01")
    self.bid64_fma("1", "[76a26b16ca880e82]", "[532634af9dfd0a7e]", "[b5b3283b46229614]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "-79587.578569697596E2883", "-8899.898898899988888E672", "-99988898.9989998999999988889899989888989E1697", "[7c00000000000000]", "01")
    self.bid64_fma("1", "[81c0000000000000]", "[19b74526664b3842]", "[e680c8b0cef64c6f]", "[e680c8b0cef64c6f]", "00")
    self.bid64_fma("1", "-828.64832E3917", "+110010110101.1101E-2003", "-567.69E-2577", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-86987676.9558595E0", "+0.01101001E0", "-0", "[ec22068d03c5bb13]", "20")
    self.bid64_fma("1", "[874d5036a44f4bcd]", "[0e15000000000000]", "[3bd60c8d9236d98e]", "[3bd60c8d9236d98d]", "20")
    self.bid64_fma("1", "-87.7E0", "-26757.854527644E0", "0", "[30a8564740b6cf0a]", "20")
    self.bid64_fma("1", "[8800000000000040]", "[000000500e000100]", "[ed7390ffbb99fe8f]", "[8000000000000001]", "30")
    self.bid64_fma("1", "-8857.78555E3909", "-7759755569.88988E3403", "-0.1101E-2963", "[7800000000000000]", "00")
    self.bid64_fma("1", "+8889989989.899E-365", "+26858538265655946599822795973789292.E-331", "+78869768569785878579778587856765798.6787E-3243", "[0000000000000000]", "30")
    self.bid64_fma("1", "[891d87e54574a5a0]", "[214191950a290d55]", "[5600000000000000]", "[8000000000000001]", "30")
    self.bid64_fma("1", "+8.988989898988899889988899898898998E2553", "-85877686689857987686968786877687.76E-2851", "-4.56E961", "[7c00000000000000]", "01")
    self.bid64_fma("1", "-89988.9E311", "-1001.1011101110E164", "-88759569597678767695566.55659E-1447", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "+8998989889988998999988998.8899E-2814", "-98998.888998899998989899E2343", "-0.011001011111000E3441", "[7c00000000000000]", "01")
    self.bid64_fma("1", "[8cf9356a90cc9005]", "[0005000080000000]", "[0800000000000001]", "[618386f26fc0ffff]", "20")
    self.bid64_fma("1", "[8e3f278ee9c4e669]", "[3b4acfebb8528492]", "[9b857bc3e226884f]", "[9b857bc3e2268852]", "20")
    self.bid64_fma("1", "+957876778.566865796E234", "+10.0000111000E324", "-10000000000000000.00000000E-2315", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "-9597.56757698559786E0", "-26.87623444E0", "-0", "[30892a0270e1914c]", "20")
    self.bid64_fma("1", "[9626c2f864aba8e7]", "[9451d8944a4bf287]", "[9960000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("1", "-9699.6955766868969879586956798E139", "-1000.10001110111101000110001E344", "+93499387558657577225565.338744922886848E-3769", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[96b40f6ca5493264]", "[0c5e000000000000]", "[0400000000000000]", "[8000000000000001]", "30")
    self.bid64_fma("1", "+97.42E249", "-69558557765795767855.56778667876557767E31", "-59676.7886558886E-2632", "[d598131856ce1090]", "20")
    self.bid64_fma("1", "+9758786597.697876697E0", "+101000011.100E0", "-0", "[6c830452433eeec8]", "20")
    self.bid64_fma("1", "[9f7849c620634412]", "[406c3ab426c1d82a]", "[409ead39681471c0]", "[409ead39681471bf]", "20")
    self.bid64_fma("1", "[a340012fe8e804dd]", "[085a000000000000]", "[813bf6b7cdef90a5]", "[813bf6b7cdef90a6]", "20")
    self.bid64_fma("1", "[aa9ffa9b39179b2b]", "[b3f91aaf8f42d0d5]", "[39de64b67b2be906]", "[39de64b67b2be906]", "20")
    self.bid64_fma("1", "[b960000000000000]", "[6c81bd06d1bc69f0]", "[1cbc0699f519b029]", "[1cbc0699f519b029]", "00")
    self.bid64_fma("1", "[bfffffffff4fc6fd]", "[9b5d725ce93b4155]", "[2b7003da4fc61171]", "[2b8440fb0bb03764]", "20")
    self.bid64_fma("1", "[c0c09514e19044f1]", "[0200000000000004]", "[392ecd038d588c91]", "[392ecd038d588c90]", "20")
    self.bid64_fma("1", "[c12008b07ce1429e]", "[df386f30acf77614]", "[035d246c0e445f84]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[c720000000000000]", "[ce24af51f46fefcd]", "[cddb16689ad47de7]", "[cddb16689ad47de7]", "00")
    self.bid64_fma("1", "[cae8279978177853]", "[01e0000000000000]", "[4de0000000000000]", "[9b00000000000000]", "00")
    self.bid64_fma("1", "[d1cb49ab4261aacd]", "[5f94f0fc918c4a6e]", "[1a8947c94c2dbf5b]", "[f800000000000000]", "28")
    self.bid64_fma("1", "[d2fdca892420c735]", "[d28d4938435cb5b5]", "[bda7f323437d7c9f]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[d94c0f24a80dd3a7]", "[6b9d4f6b6cf4d4a7]", "[0000000000000000]", "[8000000000000000]", "00")
    self.bid64_fma("1", "[da05b8744546a5f0]", "[ca2d387e8c751657]", "[a511527ac20869f3]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[eda10de61003dc4f]", "[dd179f310b113ff7]", "[3145f5c82f90ec6f]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "[f6f17a6f96d5746b]", "[c73d5c78e572caab]", "[c0e12a578ad1f74e]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("1", "-Infinity", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_fma("1", "QNaN", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("1", "SNaN", "0", "0", "[7c00000000000000]", "01")
    self.bid64_fma("1", "SNaN", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("1", "SNaN", "+5596858.E0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("1", "SNaN", "-Infinity", "QNaN", "[7c00000000000000]", "01")
    self.bid64_fma("2", "[0000000000000000]", "[00d0400101510600]", "[0020000210a2430a]", "[00000014a6569e64]", "00")
    self.bid64_fma("2", "[0000000000000000]", "[9b172504dc3f3a04]", "[8000824080280d50]", "[8000824080280d50]", "00")
    self.bid64_fma("2", "[0000000000000002]", "[0000200008000000]", "[e624226f21bd67b4]", "[0000000000000001]", "30")
    self.bid64_fma("2", "[0000000000000002]", "[db6e1916d82d44e5]", "[ab6ff4a3cec93add]", "[ab6ff4a3cec93b2c]", "20")
    self.bid64_fma("2", "-0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-0.101111000011E-271", "-98.9989988999E331", "+0.000E-1998", "[37838e64dc87afee]", "20")
    self.bid64_fma("2", "[01a0000000000001]", "[30005af3107a4000]", "[81a0000000000001]", "[0000000000000000]", "00")
    self.bid64_fma("2", "+0.1E2167", "+99888998988889998.889899899989999E1387", "-7776567.96595796889999599997575989899887E-3096", "[7800000000000000]", "00")
    self.bid64_fma("2", "[044cdee64742a8ce]", "[169ff4aa153c0a98]", "[53c0000000000000]", "[0000000000000001]", "30")
    self.bid64_fma("2", "[086c63d816e5963d]", "[b1440640373e5484]", "[08c30041885810a0]", "[89ce08fa891e7ee6]", "20")
    self.bid64_fma("2", "[0aee000000000000]", "[00a0000000000000]", "[733b16cad14044a1]", "[733b16cad14044a1]", "00")
    self.bid64_fma("2", "[0be5000000000000]", "[55a9de340797b9c9]", "[ae2dd44cb79d04d1]", "[31ade350a34fa74f]", "20")
    self.bid64_fma("2", "[0e45000000000000]", "[0f512df7108ecb14]", "[8d1ea59449a41dac]", "[8d1ea59449a41dab]", "20")
    self.bid64_fma("2", "-0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("2", "0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("2", "0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("2", "0", "QNaN", "-0", "[7c00000000000000]", "00")
    self.bid64_fma("2", "-0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-1000000.00E-198", "+55.86898859557879567887558857876986965876E2515", "-6999699.7885768575965965588757588E-2899", "[f800000000000000]", "00")
    self.bid64_fma("2", "+10101010.0111000011E-228", "+989587665895777579797998.76677669577E300", "-8922342.E-1600", "[6f2b8328ada4fc5c]", "20")
    self.bid64_fma("2", "+110000000010.0000001000000000100E3597", "-9867789.776597E1391", "-89988888989989898.89E1544", "[f800000000000000]", "00")
    self.bid64_fma("2", "-11.0010001111001E382", "-9.E191", "+8677.9E-1415", "[7800000000000000]", "28")
    self.bid64_fma("2", "-1100101.10001011000100100000000101E3419", "-1110001.001100E-3563", "+7795597699996956896798785.E-1805", "[7c00000000000000]", "01")
    self.bid64_fma("2", "+11100000.01000011E2758", "+7875.78779995965695E499", "-6687578.675565878E336", "[7800000000000000]", "00")
    self.bid64_fma("2", "[1be97bd4237b54b0]", "[1324849ee5798891]", "[8000000080000000]", "[800000006bc40331]", "30")
    self.bid64_fma("2", "[1f8ecaf50db921d8]", "[cea9e9211235b2ed]", "[ab2d40787f01205f]", "[be642069266fbf91]", "20")
    self.bid64_fma("2", "[2480000000000000]", "[d5183d74e9ae8977]", "[d7897b705774214c]", "[d7897b705774214c]", "00")
    self.bid64_fma("2", "[2780000000000000]", "[0e7d574b10e2f988]", "[48e58a6e466cc162]", "[48e58a6e466cc162]", "00")
    self.bid64_fma("2", "-326329.E0", "-11101101.101111E0", "-0", "[316cdebee7001c04]", "20")
    self.bid64_fma("2", "[326b500aa831fc00]", "[ccae07d6b3d4bf9c]", "[cb6f57b77fbffbec]", "[cf4477b97d44da02]", "20")
    self.bid64_fma("2", "+365.2683758E0", "+8.8898988E0", "-0", "[304b894f68b18162]", "20")
    self.bid64_fma("2", "[37b2914bed9892a5]", "[9195cf876c473226]", "[1c7773649ba05d00]", "[1c7773649ba05d00]", "20")
    self.bid64_fma("2", "[408400010c600000]", "[0000000000000004]", "[8d3a48e479b391a3]", "[0ed00004317ffd1d]", "20")
    self.bid64_fma("2", "+42577.8664943686864229E-1299", "-79998598895657755889.688985875E-2213", "-0.00000001000E-1418", "[8000000000000000]", "00")
    self.bid64_fma("2", "-45.E-131", "-1110101100000101101001.111010110110E-285", "-1110110111001111000.110E-2623", "[000000000000c323]", "30")
    self.bid64_fma("2", "-45.E-2952", "+9.988988898E-1156", "-0.000000100E239", "[cce38d7ea4c68000]", "00")
    self.bid64_fma("2", "[49e87bc4b82ae3d8]", "[4b93057177b088e1]", "[1d46296d0dff2eb2]", "[7800000000000000]", "28")
    self.bid64_fma("2", "[51c46477bf75efe7]", "[c48e3181143e8cab]", "[3711407bd7e3541f]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("2", "[525013de42785593]", "[f78aa8a55a308acc]", "[6031ffec661217c4]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("2", "+5353472838896522543377.E-228", "+0.1E265", "-89889999889898898999999899889999.9E60", "[bb5fef72a73acfc1]", "20")
    self.bid64_fma("2", "+56465267.E377", "+110000010000000.000011000000000000000000E50", "+767.E70", "[7800000000000000]", "28")
    self.bid64_fma("2", "+56658585.5987986E128", "+0.1011100101110E361", "+228993.E-1026", "[7800000000000000]", "28")
    self.bid64_fma("2", "-5895787759566.8568676785875687668E-3586", "-110010100110.1101100E-3798", "+6.7798666866E-3033", "[0000000000000000]", "00")
    self.bid64_fma("2", "+655633969724693.E-1504", "-1000000000000100000000.00000000E-221", "+1111110010111.0E2177", "[7800000000000000]", "00")
    self.bid64_fma("2", "+65659.55968875568E-129", "+9988899899988989898998998988989889.89888E-303", "-56985588.8E-437", "[0000000000010033]", "30")
    self.bid64_fma("2", "+65677855.7959655555E0", "+100110000001.100001E0", "0", "[32375befd8042396]", "20")
    self.bid64_fma("2", "-6588795998878667888757.9686576E-2896", "-89889.88988888898888999899E-3903", "-8.899899E1116", "[f800000000000000]", "00")
    self.bid64_fma("2", "-699.76578678875598965578686688965E-3208", "+5.79767569577558E2557", "-98989.9998898E-161", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-7575.866768897E765", "+6776634485838.5844462777436274E-3953", "-99998898.8989999899988999888898E1771", "[7c00000000000000]", "01")
    self.bid64_fma("2", "[76a26b16ca880e82]", "[532634af9dfd0a7e]", "[b5b3283b46229614]", "[7800000000000000]", "28")
    self.bid64_fma("2", "-79587.578569697596E2883", "-8899.898898899988888E672", "-99988898.9989998999999988889899989888989E1697", "[7c00000000000000]", "01")
    self.bid64_fma("2", "[81c0000000000000]", "[19b74526664b3842]", "[e680c8b0cef64c6f]", "[e680c8b0cef64c6f]", "00")
    self.bid64_fma("2", "-828.64832E3917", "+110010110101.1101E-2003", "-567.69E-2577", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-86987676.9558595E0", "+0.01101001E0", "-0", "[ec22068d03c5bb12]", "20")
    self.bid64_fma("2", "[874d5036a44f4bcd]", "[0e15000000000000]", "[3bd60c8d9236d98e]", "[3bd60c8d9236d98e]", "20")
    self.bid64_fma("2", "-87.7E0", "-26757.854527644E0", "0", "[30a8564740b6cf0b]", "20")
    self.bid64_fma("2", "-8857.78555E3909", "-7759755569.88988E3403", "-0.1101E-2963", "[7800000000000000]", "00")
    self.bid64_fma("2", "+8889989989.899E-365", "+26858538265655946599822795973789292.E-331", "+78869768569785878579778587856765798.6787E-3243", "[0000000000000001]", "30")
    self.bid64_fma("2", "[891d87e54574a5a0]", "[214191950a290d55]", "[5600000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("2", "+8.988989898988899889988899898898998E2553", "-85877686689857987686968786877687.76E-2851", "-4.56E961", "[7c00000000000000]", "01")
    self.bid64_fma("2", "-89988.9E311", "-1001.1011101110E164", "-88759569597678767695566.55659E-1447", "[7800000000000000]", "28")
    self.bid64_fma("2", "+8998989889988998999988998.8899E-2814", "-98998.888998899998989899E2343", "-0.011001011111000E3441", "[7c00000000000000]", "01")
    self.bid64_fma("2", "[8e3f278ee9c4e669]", "[3b4acfebb8528492]", "[9b857bc3e226884f]", "[9b857bc3e2268851]", "20")
    self.bid64_fma("2", "+957876778.566865796E234", "+10.0000111000E324", "-10000000000000000.00000000E-2315", "[7800000000000000]", "28")
    self.bid64_fma("2", "-9597.56757698559786E0", "-26.87623444E0", "-0", "[30892a0270e1914d]", "20")
    self.bid64_fma("2", "[9626c2f864aba8e7]", "[9451d8944a4bf287]", "[9960000000000000]", "[0000000000000001]", "30")
    self.bid64_fma("2", "-9699.6955766868969879586956798E139", "-1000.10001110111101000110001E344", "+93499387558657577225565.338744922886848E-3769", "[7800000000000000]", "28")
    self.bid64_fma("2", "[96b40f6ca5493264]", "[0c5e000000000000]", "[0400000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("2", "+97.42E249", "-69558557765795767855.56778667876557767E31", "-59676.7886558886E-2632", "[d598131856ce108f]", "20")
    self.bid64_fma("2", "+9758786597.697876697E0", "+101000011.100E0", "-0", "[6c830452433eeec9]", "20")
    self.bid64_fma("2", "[9f7849c620634412]", "[406c3ab426c1d82a]", "[409ead39681471c0]", "[409ead39681471c0]", "20")
    self.bid64_fma("2", "[a340012fe8e804dd]", "[085a000000000000]", "[813bf6b7cdef90a5]", "[813bf6b7cdef90a5]", "20")
    self.bid64_fma("2", "[aa9ffa9b39179b2b]", "[b3f91aaf8f42d0d5]", "[39de64b67b2be906]", "[39de64b67b2be907]", "20")
    self.bid64_fma("2", "[b960000000000000]", "[6c81bd06d1bc69f0]", "[1cbc0699f519b029]", "[1cbc0699f519b029]", "00")
    self.bid64_fma("2", "[bfffffffff4fc6fd]", "[9b5d725ce93b4155]", "[2b7003da4fc61171]", "[2b8440fb0bb03765]", "20")
    self.bid64_fma("2", "[c12008b07ce1429e]", "[df386f30acf77614]", "[035d246c0e445f84]", "[7800000000000000]", "28")
    self.bid64_fma("2", "[c720000000000000]", "[ce24af51f46fefcd]", "[cddb16689ad47de7]", "[cddb16689ad47de7]", "00")
    self.bid64_fma("2", "[cae8279978177853]", "[01e0000000000000]", "[4de0000000000000]", "[1b00000000000000]", "00")
    self.bid64_fma("2", "[cc53077b376ebbb5]", "[4400010000401000]", "[63993af82938c24d]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("2", "[d1cb49ab4261aacd]", "[5f94f0fc918c4a6e]", "[1a8947c94c2dbf5b]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("2", "[d2fdca892420c735]", "[d28d4938435cb5b5]", "[bda7f323437d7c9f]", "[7800000000000000]", "28")
    self.bid64_fma("2", "[da05b8744546a5f0]", "[ca2d387e8c751657]", "[a511527ac20869f3]", "[7800000000000000]", "28")
    self.bid64_fma("2", "[eda10de61003dc4f]", "[dd179f310b113ff7]", "[3145f5c82f90ec6f]", "[7800000000000000]", "28")
    self.bid64_fma("2", "[f6f17a6f96d5746b]", "[c73d5c78e572caab]", "[c0e12a578ad1f74e]", "[7800000000000000]", "28")
    self.bid64_fma("2", "-Infinity", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_fma("2", "QNaN", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("2", "SNaN", "0", "0", "[7c00000000000000]", "01")
    self.bid64_fma("2", "SNaN", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("2", "SNaN", "+5596858.E0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("2", "SNaN", "-Infinity", "QNaN", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-0.101111000011E-271", "-98.9989988999E331", "+0.000E-1998", "[37838e64dc87afed]", "20")
    self.bid64_fma("3", "[01a0000000000001]", "[30005af3107a4000]", "[81a0000000000001]", "[0000000000000000]", "00")
    self.bid64_fma("3", "+0.1E2167", "+99888998988889998.889899899989999E1387", "-7776567.96595796889999599997575989899887E-3096", "[7800000000000000]", "00")
    self.bid64_fma("3", "[044cdee64742a8ce]", "[169ff4aa153c0a98]", "[53c0000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("3", "[0aee000000000000]", "[00a0000000000000]", "[733b16cad14044a1]", "[733b16cad14044a1]", "00")
    self.bid64_fma("3", "[0be5000000000000]", "[55a9de340797b9c9]", "[ae2dd44cb79d04d1]", "[31ade350a34fa74e]", "20")
    self.bid64_fma("3", "[0e45000000000000]", "[0f512df7108ecb14]", "[8d1ea59449a41dac]", "[8d1ea59449a41dab]", "20")
    self.bid64_fma("3", "-0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("3", "0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("3", "0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("3", "0", "QNaN", "-0", "[7c00000000000000]", "00")
    self.bid64_fma("3", "-0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-1000000.00E-198", "+55.86898859557879567887558857876986965876E2515", "-6999699.7885768575965965588757588E-2899", "[f800000000000000]", "00")
    self.bid64_fma("3", "+10101010.0111000011E-228", "+989587665895777579797998.76677669577E300", "-8922342.E-1600", "[6f2b8328ada4fc5b]", "20")
    self.bid64_fma("3", "+110000000010.0000001000000000100E3597", "-9867789.776597E1391", "-89988888989989898.89E1544", "[f800000000000000]", "00")
    self.bid64_fma("3", "-11.0010001111001E382", "-9.E191", "+8677.9E-1415", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "-1100101.10001011000100100000000101E3419", "-1110001.001100E-3563", "+7795597699996956896798785.E-1805", "[7c00000000000000]", "01")
    self.bid64_fma("3", "+11100000.01000011E2758", "+7875.78779995965695E499", "-6687578.675565878E336", "[7800000000000000]", "00")
    self.bid64_fma("3", "[1f8ecaf50db921d8]", "[cea9e9211235b2ed]", "[ab2d40787f01205f]", "[be642069266fbf91]", "20")
    self.bid64_fma("3", "[2480000000000000]", "[d5183d74e9ae8977]", "[d7897b705774214c]", "[d7897b705774214c]", "00")
    self.bid64_fma("3", "[2780000000000000]", "[0e7d574b10e2f988]", "[48e58a6e466cc162]", "[48e58a6e466cc162]", "00")
    self.bid64_fma("3", "-326329.E0", "-11101101.101111E0", "-0", "[316cdebee7001c03]", "20")
    self.bid64_fma("3", "+365.2683758E0", "+8.8898988E0", "-0", "[304b894f68b18161]", "20")
    self.bid64_fma("3", "[37b2914bed9892a5]", "[9195cf876c473226]", "[1c7773649ba05d00]", "[1c7773649ba05cff]", "20")
    self.bid64_fma("3", "+42577.8664943686864229E-1299", "-79998598895657755889.688985875E-2213", "-0.00000001000E-1418", "[8000000000000000]", "00")
    self.bid64_fma("3", "-45.E-131", "-1110101100000101101001.111010110110E-285", "-1110110111001111000.110E-2623", "[000000000000c322]", "30")
    self.bid64_fma("3", "-45.E-2952", "+9.988988898E-1156", "-0.000000100E239", "[cce38d7ea4c68000]", "00")
    self.bid64_fma("3", "[49e87bc4b82ae3d8]", "[4b93057177b088e1]", "[1d46296d0dff2eb2]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[51c46477bf75efe7]", "[c48e3181143e8cab]", "[3711407bd7e3541f]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[525013de42785593]", "[f78aa8a55a308acc]", "[6031ffec661217c4]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "+5353472838896522543377.E-228", "+0.1E265", "-89889999889898898999999899889999.9E60", "[bb5fef72a73acfc1]", "20")
    self.bid64_fma("3", "+56465267.E377", "+110000010000000.000011000000000000000000E50", "+767.E70", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "+56658585.5987986E128", "+0.1011100101110E361", "+228993.E-1026", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "-5895787759566.8568676785875687668E-3586", "-110010100110.1101100E-3798", "+6.7798666866E-3033", "[0000000000000000]", "00")
    self.bid64_fma("3", "+655633969724693.E-1504", "-1000000000000100000000.00000000E-221", "+1111110010111.0E2177", "[7800000000000000]", "00")
    self.bid64_fma("3", "+65659.55968875568E-129", "+9988899899988989898998998988989889.89888E-303", "-56985588.8E-437", "[0000000000010032]", "30")
    self.bid64_fma("3", "+65677855.7959655555E0", "+100110000001.100001E0", "0", "[32375befd8042395]", "20")
    self.bid64_fma("3", "-6588795998878667888757.9686576E-2896", "-89889.88988888898888999899E-3903", "-8.899899E1116", "[f800000000000000]", "00")
    self.bid64_fma("3", "-699.76578678875598965578686688965E-3208", "+5.79767569577558E2557", "-98989.9998898E-161", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-7575.866768897E765", "+6776634485838.5844462777436274E-3953", "-99998898.8989999899988999888898E1771", "[7c00000000000000]", "01")
    self.bid64_fma("3", "[76a26b16ca880e82]", "[532634af9dfd0a7e]", "[b5b3283b46229614]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "-79587.578569697596E2883", "-8899.898898899988888E672", "-99988898.9989998999999988889899989888989E1697", "[7c00000000000000]", "01")
    self.bid64_fma("3", "[81c0000000000000]", "[19b74526664b3842]", "[e680c8b0cef64c6f]", "[e680c8b0cef64c6f]", "00")
    self.bid64_fma("3", "-828.64832E3917", "+110010110101.1101E-2003", "-567.69E-2577", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-86987676.9558595E0", "+0.01101001E0", "-0", "[ec22068d03c5bb12]", "20")
    self.bid64_fma("3", "[874d5036a44f4bcd]", "[0e15000000000000]", "[3bd60c8d9236d98e]", "[3bd60c8d9236d98d]", "20")
    self.bid64_fma("3", "-87.7E0", "-26757.854527644E0", "0", "[30a8564740b6cf0a]", "20")
    self.bid64_fma("3", "-8857.78555E3909", "-7759755569.88988E3403", "-0.1101E-2963", "[7800000000000000]", "00")
    self.bid64_fma("3", "+8889989989.899E-365", "+26858538265655946599822795973789292.E-331", "+78869768569785878579778587856765798.6787E-3243", "[0000000000000000]", "30")
    self.bid64_fma("3", "[891d87e54574a5a0]", "[214191950a290d55]", "[5600000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("3", "+8.988989898988899889988899898898998E2553", "-85877686689857987686968786877687.76E-2851", "-4.56E961", "[7c00000000000000]", "01")
    self.bid64_fma("3", "-89988.9E311", "-1001.1011101110E164", "-88759569597678767695566.55659E-1447", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "+8998989889988998999988998.8899E-2814", "-98998.888998899998989899E2343", "-0.011001011111000E3441", "[7c00000000000000]", "01")
    self.bid64_fma("3", "[8e3f278ee9c4e669]", "[3b4acfebb8528492]", "[9b857bc3e226884f]", "[9b857bc3e2268851]", "20")
    self.bid64_fma("3", "+957876778.566865796E234", "+10.0000111000E324", "-10000000000000000.00000000E-2315", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "-9597.56757698559786E0", "-26.87623444E0", "-0", "[30892a0270e1914c]", "20")
    self.bid64_fma("3", "[9626c2f864aba8e7]", "[9451d8944a4bf287]", "[9960000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("3", "-9699.6955766868969879586956798E139", "-1000.10001110111101000110001E344", "+93499387558657577225565.338744922886848E-3769", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[96b40f6ca5493264]", "[0c5e000000000000]", "[0400000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("3", "+97.42E249", "-69558557765795767855.56778667876557767E31", "-59676.7886558886E-2632", "[d598131856ce108f]", "20")
    self.bid64_fma("3", "+9758786597.697876697E0", "+101000011.100E0", "-0", "[6c830452433eeec8]", "20")
    self.bid64_fma("3", "[9f7849c620634412]", "[406c3ab426c1d82a]", "[409ead39681471c0]", "[409ead39681471bf]", "20")
    self.bid64_fma("3", "[a340012fe8e804dd]", "[085a000000000000]", "[813bf6b7cdef90a5]", "[813bf6b7cdef90a5]", "20")
    self.bid64_fma("3", "[aa9ffa9b39179b2b]", "[b3f91aaf8f42d0d5]", "[39de64b67b2be906]", "[39de64b67b2be906]", "20")
    self.bid64_fma("3", "[b960000000000000]", "[6c81bd06d1bc69f0]", "[1cbc0699f519b029]", "[1cbc0699f519b029]", "00")
    self.bid64_fma("3", "[c12008b07ce1429e]", "[df386f30acf77614]", "[035d246c0e445f84]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[c720000000000000]", "[ce24af51f46fefcd]", "[cddb16689ad47de7]", "[cddb16689ad47de7]", "00")
    self.bid64_fma("3", "[cae8279978177853]", "[01e0000000000000]", "[4de0000000000000]", "[1b00000000000000]", "00")
    self.bid64_fma("3", "[d1cb49ab4261aacd]", "[5f94f0fc918c4a6e]", "[1a8947c94c2dbf5b]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[d2fdca892420c735]", "[d28d4938435cb5b5]", "[bda7f323437d7c9f]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[da05b8744546a5f0]", "[ca2d387e8c751657]", "[a511527ac20869f3]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[eda10de61003dc4f]", "[dd179f310b113ff7]", "[3145f5c82f90ec6f]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "[f6f17a6f96d5746b]", "[c73d5c78e572caab]", "[c0e12a578ad1f74e]", "[77fb86f26fc0ffff]", "28")
    self.bid64_fma("3", "-Infinity", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_fma("3", "QNaN", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("3", "SNaN", "0", "0", "[7c00000000000000]", "01")
    self.bid64_fma("3", "SNaN", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("3", "SNaN", "+5596858.E0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("3", "SNaN", "-Infinity", "QNaN", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-0.101111000011E-271", "-98.9989988999E331", "+0.000E-1998", "[37838e64dc87afee]", "20")
    self.bid64_fma("4", "[01a0000000000001]", "[30005af3107a4000]", "[81a0000000000001]", "[0000000000000000]", "00")
    self.bid64_fma("4", "+0.1E2167", "+99888998988889998.889899899989999E1387", "-7776567.96595796889999599997575989899887E-3096", "[7800000000000000]", "00")
    self.bid64_fma("4", "[044cdee64742a8ce]", "[169ff4aa153c0a98]", "[53c0000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("4", "[0aee000000000000]", "[00a0000000000000]", "[733b16cad14044a1]", "[733b16cad14044a1]", "00")
    self.bid64_fma("4", "[0be5000000000000]", "[55a9de340797b9c9]", "[ae2dd44cb79d04d1]", "[31ade350a34fa74f]", "20")
    self.bid64_fma("4", "[0e45000000000000]", "[0f512df7108ecb14]", "[8d1ea59449a41dac]", "[8d1ea59449a41dac]", "20")
    self.bid64_fma("4", "-0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-0", "-Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("4", "0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("4", "0", "Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_fma("4", "0", "QNaN", "-0", "[7c00000000000000]", "00")
    self.bid64_fma("4", "-0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-1000000.00E-198", "+55.86898859557879567887558857876986965876E2515", "-6999699.7885768575965965588757588E-2899", "[f800000000000000]", "00")
    self.bid64_fma("4", "+10101010.0111000011E-228", "+989587665895777579797998.76677669577E300", "-8922342.E-1600", "[6f2b8328ada4fc5c]", "20")
    self.bid64_fma("4", "+110000000010.0000001000000000100E3597", "-9867789.776597E1391", "-89988888989989898.89E1544", "[f800000000000000]", "00")
    self.bid64_fma("4", "-11.0010001111001E382", "-9.E191", "+8677.9E-1415", "[7800000000000000]", "28")
    self.bid64_fma("4", "-1100101.10001011000100100000000101E3419", "-1110001.001100E-3563", "+7795597699996956896798785.E-1805", "[7c00000000000000]", "01")
    self.bid64_fma("4", "+11100000.01000011E2758", "+7875.78779995965695E499", "-6687578.675565878E336", "[7800000000000000]", "00")
    self.bid64_fma("4", "[1f8ecaf50db921d8]", "[cea9e9211235b2ed]", "[ab2d40787f01205f]", "[be642069266fbf92]", "20")
    self.bid64_fma("4", "[2480000000000000]", "[d5183d74e9ae8977]", "[d7897b705774214c]", "[d7897b705774214c]", "00")
    self.bid64_fma("4", "[2780000000000000]", "[0e7d574b10e2f988]", "[48e58a6e466cc162]", "[48e58a6e466cc162]", "00")
    self.bid64_fma("4", "-326329.E0", "-11101101.101111E0", "-0", "[316cdebee7001c04]", "20")
    self.bid64_fma("4", "+365.2683758E0", "+8.8898988E0", "-0", "[304b894f68b18161]", "20")
    self.bid64_fma("4", "[37b2914bed9892a5]", "[9195cf876c473226]", "[1c7773649ba05d00]", "[1c7773649ba05d00]", "20")
    self.bid64_fma("4", "+42577.8664943686864229E-1299", "-79998598895657755889.688985875E-2213", "-0.00000001000E-1418", "[8000000000000000]", "00")
    self.bid64_fma("4", "-45.E-131", "-1110101100000101101001.111010110110E-285", "-1110110111001111000.110E-2623", "[000000000000c323]", "30")
    self.bid64_fma("4", "-45.E-2952", "+9.988988898E-1156", "-0.000000100E239", "[cce38d7ea4c68000]", "00")
    self.bid64_fma("4", "[49e87bc4b82ae3d8]", "[4b93057177b088e1]", "[1d46296d0dff2eb2]", "[7800000000000000]", "28")
    self.bid64_fma("4", "[51c46477bf75efe7]", "[c48e3181143e8cab]", "[3711407bd7e3541f]", "[f800000000000000]", "28")
    self.bid64_fma("4", "[525013de42785593]", "[f78aa8a55a308acc]", "[6031ffec661217c4]", "[f800000000000000]", "28")
    self.bid64_fma("4", "+5353472838896522543377.E-228", "+0.1E265", "-89889999889898898999999899889999.9E60", "[bb5fef72a73acfc2]", "20")
    self.bid64_fma("4", "+56465267.E377", "+110000010000000.000011000000000000000000E50", "+767.E70", "[7800000000000000]", "28")
    self.bid64_fma("4", "+56658585.5987986E128", "+0.1011100101110E361", "+228993.E-1026", "[7800000000000000]", "28")
    self.bid64_fma("4", "-5895787759566.8568676785875687668E-3586", "-110010100110.1101100E-3798", "+6.7798666866E-3033", "[0000000000000000]", "00")
    self.bid64_fma("4", "+655633969724693.E-1504", "-1000000000000100000000.00000000E-221", "+1111110010111.0E2177", "[7800000000000000]", "00")
    self.bid64_fma("4", "+65659.55968875568E-129", "+9988899899988989898998998988989889.89888E-303", "-56985588.8E-437", "[0000000000010033]", "30")
    self.bid64_fma("4", "+65677855.7959655555E0", "+100110000001.100001E0", "0", "[32375befd8042396]", "20")
    self.bid64_fma("4", "-6588795998878667888757.9686576E-2896", "-89889.88988888898888999899E-3903", "-8.899899E1116", "[f800000000000000]", "00")
    self.bid64_fma("4", "-699.76578678875598965578686688965E-3208", "+5.79767569577558E2557", "-98989.9998898E-161", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-7575.866768897E765", "+6776634485838.5844462777436274E-3953", "-99998898.8989999899988999888898E1771", "[7c00000000000000]", "01")
    self.bid64_fma("4", "[76a26b16ca880e82]", "[532634af9dfd0a7e]", "[b5b3283b46229614]", "[7800000000000000]", "28")
    self.bid64_fma("4", "-79587.578569697596E2883", "-8899.898898899988888E672", "-99988898.9989998999999988889899989888989E1697", "[7c00000000000000]", "01")
    self.bid64_fma("4", "[81c0000000000000]", "[19b74526664b3842]", "[e680c8b0cef64c6f]", "[e680c8b0cef64c6f]", "00")
    self.bid64_fma("4", "-828.64832E3917", "+110010110101.1101E-2003", "-567.69E-2577", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-86987676.9558595E0", "+0.01101001E0", "-0", "[ec22068d03c5bb13]", "20")
    self.bid64_fma("4", "[874d5036a44f4bcd]", "[0e15000000000000]", "[3bd60c8d9236d98e]", "[3bd60c8d9236d98e]", "20")
    self.bid64_fma("4", "-87.7E0", "-26757.854527644E0", "0", "[30a8564740b6cf0b]", "20")
    self.bid64_fma("4", "-8857.78555E3909", "-7759755569.88988E3403", "-0.1101E-2963", "[7800000000000000]", "00")
    self.bid64_fma("4", "+8889989989.899E-365", "+26858538265655946599822795973789292.E-331", "+78869768569785878579778587856765798.6787E-3243", "[0000000000000000]", "30")
    self.bid64_fma("4", "[891d87e54574a5a0]", "[214191950a290d55]", "[5600000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("4", "+8.988989898988899889988899898898998E2553", "-85877686689857987686968786877687.76E-2851", "-4.56E961", "[7c00000000000000]", "01")
    self.bid64_fma("4", "-89988.9E311", "-1001.1011101110E164", "-88759569597678767695566.55659E-1447", "[7800000000000000]", "28")
    self.bid64_fma("4", "+8998989889988998999988998.8899E-2814", "-98998.888998899998989899E2343", "-0.011001011111000E3441", "[7c00000000000000]", "01")
    self.bid64_fma("4", "[8e3f278ee9c4e669]", "[3b4acfebb8528492]", "[9b857bc3e226884f]", "[9b857bc3e2268852]", "20")
    self.bid64_fma("4", "+957876778.566865796E234", "+10.0000111000E324", "-10000000000000000.00000000E-2315", "[7800000000000000]", "28")
    self.bid64_fma("4", "-9597.56757698559786E0", "-26.87623444E0", "-0", "[30892a0270e1914d]", "20")
    self.bid64_fma("4", "[9626c2f864aba8e7]", "[9451d8944a4bf287]", "[9960000000000000]", "[0000000000000000]", "30")
    self.bid64_fma("4", "-9699.6955766868969879586956798E139", "-1000.10001110111101000110001E344", "+93499387558657577225565.338744922886848E-3769", "[7800000000000000]", "28")
    self.bid64_fma("4", "[96b40f6ca5493264]", "[0c5e000000000000]", "[0400000000000000]", "[8000000000000000]", "30")
    self.bid64_fma("4", "+97.42E249", "-69558557765795767855.56778667876557767E31", "-59676.7886558886E-2632", "[d598131856ce1090]", "20")
    self.bid64_fma("4", "+9758786597.697876697E0", "+101000011.100E0", "-0", "[6c830452433eeec8]", "20")
    self.bid64_fma("4", "[9f7849c620634412]", "[406c3ab426c1d82a]", "[409ead39681471c0]", "[409ead39681471c0]", "20")
    self.bid64_fma("4", "[a340012fe8e804dd]", "[085a000000000000]", "[813bf6b7cdef90a5]", "[813bf6b7cdef90a5]", "20")
    self.bid64_fma("4", "[aa9ffa9b39179b2b]", "[b3f91aaf8f42d0d5]", "[39de64b67b2be906]", "[39de64b67b2be906]", "20")
    self.bid64_fma("4", "[b960000000000000]", "[6c81bd06d1bc69f0]", "[1cbc0699f519b029]", "[1cbc0699f519b029]", "00")
    self.bid64_fma("4", "[c12008b07ce1429e]", "[df386f30acf77614]", "[035d246c0e445f84]", "[7800000000000000]", "28")
    self.bid64_fma("4", "[c720000000000000]", "[ce24af51f46fefcd]", "[cddb16689ad47de7]", "[cddb16689ad47de7]", "00")
    self.bid64_fma("4", "[cae8279978177853]", "[01e0000000000000]", "[4de0000000000000]", "[1b00000000000000]", "00")
    self.bid64_fma("4", "[d1cb49ab4261aacd]", "[5f94f0fc918c4a6e]", "[1a8947c94c2dbf5b]", "[f800000000000000]", "28")
    self.bid64_fma("4", "[d2fdca892420c735]", "[d28d4938435cb5b5]", "[bda7f323437d7c9f]", "[7800000000000000]", "28")
    self.bid64_fma("4", "[da05b8744546a5f0]", "[ca2d387e8c751657]", "[a511527ac20869f3]", "[7800000000000000]", "28")
    self.bid64_fma("4", "[eda10de61003dc4f]", "[dd179f310b113ff7]", "[3145f5c82f90ec6f]", "[7800000000000000]", "28")
    self.bid64_fma("4", "[f6f17a6f96d5746b]", "[c73d5c78e572caab]", "[c0e12a578ad1f74e]", "[7800000000000000]", "28")
    self.bid64_fma("4", "-Infinity", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_fma("4", "QNaN", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("4", "SNaN", "0", "0", "[7c00000000000000]", "01")
    self.bid64_fma("4", "SNaN", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_fma("4", "SNaN", "+5596858.E0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_fma("4", "SNaN", "-Infinity", "QNaN", "[7c00000000000000]", "01")
    self.bid64_fma("0", "1001001001001001E-383", "999E-18", "0.0", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("1", "1001001001001001E-383", "999E-18", "0.0", "999999999999999E-398", "0x30")
    self.bid64_fma("2", "1001001001001001E-383", "999E-18", "0.0", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("3", "1001001001001001E-383", "999E-18", "0.0", "999999999999999E-398", "0x30")
    self.bid64_fma("4", "1001001001001001E-383", "999E-18", "0.0", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("0", "5e-101", "-1e-299", "1e-383", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("1", "5e-101", "-1e-299", "1e-383", "999999999999999E-398", "0x30")
    self.bid64_fma("2", "5e-101", "-1e-299", "1e-383", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("3", "5e-101", "-1e-299", "1e-383", "999999999999999E-398", "0x30")
    self.bid64_fma("4", "5e-101", "-1e-299", "1e-383", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("0", "5e-101", "1e-299", "-1e-383", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("1", "5e-101", "1e-299", "-1e-383", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("2", "5e-101", "1e-299", "-1e-383", "-999999999999999E-398", "0x30")
    self.bid64_fma("3", "5e-101", "1e-299", "-1e-383", "-999999999999999E-398", "0x30")
    self.bid64_fma("4", "5e-101", "1e-299", "-1e-383", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_fma("1", "123456789877675", "333444", "1E+10", "4116592585397146E+4", "20")
    self.bid64_fma("0", "12345678987767", "707", "1E+10", "8728405044351269", "00")
    self.bid64_fma("0", "[18e000000098967f]", "[18c0000000989681]", "[01a0000000000063]", "+1000000000000000E-398", "30")
    self.bid64_fma("4", "[18e000000098967f]", "[18c0000000989681]", "[01a0000000000063]", "+1000000000000000E-398", "30")
    self.bid64_fma("1", "[18e000000098967f]", "[18c0000000989681]", "[01a0000000000063]", "+999999999999999E-398", "30")
    self.bid64_fma("2", "[18e000000098967f]", "[18c0000000989681]", "[01a0000000000063]", "+1000000000000000E-398", "30")
    self.bid64_fma("3", "[18e000000098967f]", "[18c0000000989681]", "[01a0000000000063]", "+999999999999999E-398", "30")
    self.bid64_fma("1", "1", "1E+78", "-56", "9999999999999999E+62", "20")
    self.bid64_fma("3", "1", "1E+78", "-56", "9999999999999999E+62", "20")
    self.bid64_fma("2", "1", "1", "9999999999999999E+34", "1000000000000000E+35", "20")
    self.bid64_fma("0", "1000000000000000", "1E+17", "-5000000000000001", "9999999999999999E+16", "20")
    self.bid64_fma("0", "1", "1", "22E+16", "2200000000000000E+2", "20")
    self.bid64_fma("0", "1", "1", "22E+17", "2200000000000000E+3", "20")
    self.bid64_fma("0", "1", "1", "-22E+17", "-2200000000000000E+3", "20")
    self.bid64_fma("1", "1", "1", "-22E+17", "-2200000000000000E+3", "20")
    self.bid64_fma("2", "1", "1", "-22E+17", "-2199999999999999E+3", "20")
    self.bid64_fma("3", "1", "1", "-22E+17", "-2199999999999999E+3", "20")
    self.bid64_fma("4", "1", "1", "-22E+17", "-2200000000000000E+3", "20")
    self.bid64_fma("0", "1", "1", "10000E+15", "+1000000000000000E+4", "20")
    self.bid64_fma("0", "1", "9999999999999999", "9999999999999999E+16", "+1000000000000000E+17", "20")
    self.bid64_fma("0", "1", "9999999999999999", "999999999999999E+16", "+1000000000000000E+16", "20")
    self.bid64_fma("0", "1", "1000000000000000", "1000000000000000E+15", "+1000000000000001E+15", "00")
    self.bid64_fma("1", "1E-200", "1E-300", "-1000000000000000E-398", "-1000000000000000E-398", "30", underflowBeforeOnly: true)
    self.bid64_fma("2", "1E-200", "1E-300", "-1000000000000000E-398", "-999999999999999E-398", "30")
    self.bid64_fma("0", "300", "-100000000000000", "3000000000000000E+1", "+0", "00")
    self.bid64_fma("1", "300", "-100000000000000", "3000000000000000E+1", "-0", "00")
  }

  private func bid64_fma(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _arg2: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let arg2 = self.parseDecimal64(_arg2, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._addingProduct(arg1, arg2, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_frexp() {
    self.bid64_frexp("0", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_frexp("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_frexp("0", "[f800000000000000]", "0", "[f800000000000000]", "00")
    self.bid64_frexp("0", "[fc00000000000000]", "0", "[fc00000000000000]", "00")
    self.bid64_frexp("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[0000000000000000]", "0", "[0000000000000000]", "00")
    self.bid64_frexp("0", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[7e00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_frexp("0", "[8000000000000000]", "0", "[8000000000000000]", "00")
    self.bid64_frexp("0", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[fe00000000000000]", "0", "[fc00000000000000]", "00")
    self.bid64_frexp("1", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[002000a008200080]", "-385", "[304000a008200080]", "00")
    self.bid64_frexp("0", "[618f00fe4935c48a]", "0", "[0620000000000000]", "00")
    self.bid64_frexp("0", "[2383cd3f15c1076a]", "-98", "[2fc3cd3f15c1076a]", "00")
    self.bid64_frexp("0", "[002000a008200080]", "-385", "[304000a008200080]", "00")
    self.bid64_frexp("0", "[618f00fe4935c48a]", "0", "[0620000000000000]", "00")
  }

  private func bid64_frexp(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let exponent = arg0._getExponent(status: &status)
    let significand = arg0._getSignificand()
    let intel = self.convertToIntelFrexp(arg0, exponent: exponent, significand: significand)

    // 'arg1' is the expected exponent
    self.assertInt(intel.exponent, arg1, file, line, "Exponent")
    self.assertEqual(intel.significand, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Significand")

    if !arg0.isInfinite && !arg0.isNaN {
      // Rounding should not matter
      let restored = Decimal64(sign: arg0.sign, exponent: exponent, significand: significand, rounding: .towardZero)
      self.assertEqual(restored, arg0, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Decimal64(sign:exponent:significand:)")
    }

    // 'frexp' does not signal any exceptions
    status = ExceptionStatus()
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_from_int32() {
    self.bid64_from_int32("0", "1151048260", "[31c00000449b9a44]", "00")
    self.bid64_from_int32("0", "1238620169", "[31c0000049d3d809]", "00")
    self.bid64_from_int32("0", "1300695084", "[31c000004d87082c]", "00")
    self.bid64_from_int32("0", "-1321821308", "[b1c000004ec9647c]", "00")
    self.bid64_from_int32("0", "-1409558545", "[b1c0000054042811]", "00")
    self.bid64_from_int32("0", "-1411393610", "[b1c000005420284a]", "00")
    self.bid64_from_int32("0", "-1558551822", "[b1c000005ce59d0e]", "00")
    self.bid64_from_int32("0", "-1680014258", "[b1c000006422fbb2]", "00")
    self.bid64_from_int32("0", "1850397233", "[31c000006e4ad231]", "00")
    self.bid64_from_int32("0", "1961604583", "[31c0000074ebb5e7]", "00")
    self.bid64_from_int32("0", "1965388277", "[31c00000752571f5]", "00")
    self.bid64_from_int32("0", "1983979873", "[31c0000076412161]", "00")
    self.bid64_from_int32("0", "2042218777", "[31c0000079b9c919]", "00")
    self.bid64_from_int32("0", "-2132132449", "[b1c000007f15c261]", "00")
    self.bid64_from_int32("0", "-647085063", "[b1c000002691bc07]", "00")
    self.bid64_from_int32("0", "665889169", "[31c0000027b0a991]", "00")
    self.bid64_from_int32("0", "753240669", "[31c000002ce58a5d]", "00")
    self.bid64_from_int32("0", "-765857262", "[b1c000002da60dee]", "00")
    self.bid64_from_int32("0", "-768244481", "[b1c000002dca7b01]", "00")
    self.bid64_from_int32("0", "988813101", "[31c000003af0172d]", "00")
  }

  private func bid64_from_int32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_from_int64() {
    self.bid64_from_int64("0", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("0", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("0", "-17891329", "[b1c0000001110001]", "00")
    self.bid64_from_int64("0", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("0", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("0", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("0", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("0", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("0", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("0", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("0", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("0", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("0", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("0", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("0", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("0", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("0", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("0", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("0", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("0", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("0", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("0", "9781575579355265", "[6c72c04a89c04881]", "00")
    self.bid64_from_int64("1", "1139264871891773575", "[32240c27c5fe833d]", "20")
    self.bid64_from_int64("1", "-1750062212783916257", "[b22637ac1c871f2d]", "20")
    self.bid64_from_int64("1", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("1", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("1", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("1", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("1", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("1", "-5681820659447707127", "[b2342f95f615779c]", "20")
    self.bid64_from_int64("1", "589782372181576380", "[3214f40a17e2fed3]", "20")
    self.bid64_from_int64("1", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("1", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("1", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("1", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("1", "6987444851531894805", "[3238d30b48436076]", "20")
    self.bid64_from_int64("1", "-7058028164498851412", "[b239133d3d8f45a4]", "20")
    self.bid64_from_int64("1", "-791485443906179333", "[b21c1e84a74a0922]", "20")
    self.bid64_from_int64("1", "-7999593679867525011", "[b23c6b968ba2ce86]", "20")
    self.bid64_from_int64("1", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("1", "8840994672450821792", "[323f68d67ae99d05]", "20")
    self.bid64_from_int64("1", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("2", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("2", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("2", "2097835747362605220", "[322773f87284c72e]", "20")
    self.bid64_from_int64("2", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("2", "-3699397591305768705", "[b22d24951f500e28]", "20")
    self.bid64_from_int64("2", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("2", "5456652339267465168", "[323362cbe058478a]", "20")
    self.bid64_from_int64("2", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("2", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("2", "-6247827353969653838", "[b236325daa0d23f5]", "20")
    self.bid64_from_int64("2", "-6251581962144061921", "[b23635c7da23493d]", "20")
    self.bid64_from_int64("2", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("2", "63716561664156733", "[31f6a2fcce6e1d3a]", "20")
    self.bid64_from_int64("2", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("2", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("2", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("2", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("2", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("2", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("2", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("3", "1139264871891773575", "[32240c27c5fe833d]", "20")
    self.bid64_from_int64("3", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("3", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("3", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("3", "-3699397591305768705", "[b22d24951f500e28]", "20")
    self.bid64_from_int64("3", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("3", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("3", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("3", "589782372181576380", "[3214f40a17e2fed3]", "20")
    self.bid64_from_int64("3", "-6247827353969653838", "[b236325daa0d23f5]", "20")
    self.bid64_from_int64("3", "-6251581962144061921", "[b23635c7da23493d]", "20")
    self.bid64_from_int64("3", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("3", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("3", "6987444851531894805", "[3238d30b48436076]", "20")
    self.bid64_from_int64("3", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("3", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("3", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("3", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("3", "8840994672450821792", "[323f68d67ae99d05]", "20")
    self.bid64_from_int64("3", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("4", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("4", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("4", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("4", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("4", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("4", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("4", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("4", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("4", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("4", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("4", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("4", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("4", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("4", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("4", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("4", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("4", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("4", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("4", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("4", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("0", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("0", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("0", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("0", "-99999999999999995", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("1", "999999999999999999", "[6c8386f26fc0ffff]", "20")
    self.bid64_from_int64("1", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_int64("1", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("1", "-99999999999999995", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("2", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("2", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("2", "-99999999999999999", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("2", "-99999999999999995", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "999999999999999999", "[6c8386f26fc0ffff]", "20")
    self.bid64_from_int64("3", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "-99999999999999999", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "-99999999999999995", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("4", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("4", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("4", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("4", "-99999999999999995", "[b2038d7ea4c68000]", "20")
  }

  private func bid64_from_int64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_from_string() {
    self.bid64_from_string("0", "12345678901234565", "1234567890123456e1", "20")
    self.bid64_from_string("0", "+Inf", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+NaN", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "+SNaN", "[7e00000000000000]", "00")
    self.bid64_from_string("1", "12345678901234565", "1234567890123456e1", "20")
    self.bid64_from_string("2", "12345678901234565", "1234567890123457e1", "20")
    self.bid64_from_string("3", "12345678901234565", "1234567890123456e1", "20")
    self.bid64_from_string("4", "12345678901234565", "1234567890123457e1", "20")
    self.bid64_from_string("2", "-9.9999999999999995", "[ebfb86f26fc0ffff]", "20")
    self.bid64_from_string("1", "-9.9999999999999995", "[b0038d7ea4c68000]", "20")
    self.bid64_from_string("0", "9.9999999999999995", "[30038d7ea4c68000]", "20")
    self.bid64_from_string("2", "9.9999999999999995", "[30038d7ea4c68000]", "20")
    self.bid64_from_string("4", "9.9999999999999995", "[30038d7ea4c68000]", "20")
    self.bid64_from_string("3", "9.9999999999999995", "[6bfb86f26fc0ffff]", "20")
    self.bid64_from_string("1", "9.9999999999999995", "[6bfb86f26fc0ffff]", "20")
    self.bid64_from_string("0", "1.0000000000000015", "[2fe38d7ea4c68002]", "20")
    self.bid64_from_string("2", "1.0000000000000015", "[2fe38d7ea4c68002]", "20")
    self.bid64_from_string("4", "1.0000000000000015", "[2fe38d7ea4c68002]", "20")
    self.bid64_from_string("3", "1.0000000000000015", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("1", "1.0000000000000015", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("1", "000.0", "[31a0000000000000]", "00")
    self.bid64_from_string("1", "0.0000000000000000000000000000000000000000000001001", "[2ba00000000003e9]", "00")
    self.bid64_from_string("1", "0.0000000000000000000000000000000000000000000001001", "[2ba00000000003e9]", "00")
    self.bid64_from_string("0", "0.", "[31c0000000000000]", "00")
    self.bid64_from_string("0", "1.", "[31c0000000000001]", "00")
    self.bid64_from_string("0", "1..", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "1.0000000000000005", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("2", "1.0000000000000005", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("4", "1.0000000000000005", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("3", "1.0000000000000005", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("1", "1.0000000000000005", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("0", "1.00000000000000051", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("2", "1.00000000000000051", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("4", "1.00000000000000051", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("3", "1.00000000000000051", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("1", "1.00000000000000051", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("0", "1.0000000000000004999999999999999", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("2", "1.0000000000000004999999999999999", "[2fe38d7ea4c68001]", "20")
    self.bid64_from_string("1", "1.0000000000000004999999999999999", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("4", "1.0000000000000004999999999999999", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("3", "1.0000000000000004999999999999999", "[2fe38d7ea4c68000]", "20")
    self.bid64_from_string("0", "1.1E2", "[31e000000000000b]", "00")
    self.bid64_from_string("0", "1.1P2", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "1.1EE", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "1.1P-2", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "1.1E-2E", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "+INF", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+INFi", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "+NAN", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "+SNAN", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "+SNANi", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "+inf", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+nan", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "+snan", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "+INFINITY", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+infinity", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+INFiNITY", "[7800000000000000]", "00")
    self.bid64_from_string("0", "+INFINITYi", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "INF", "[7800000000000000]", "00")
    self.bid64_from_string("0", "INFi", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "NAN", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "SNAN", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "SNANi", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "inf", "[7800000000000000]", "00")
    self.bid64_from_string("0", "nan", "[7c00000000000000]", "00")
    self.bid64_from_string("0", "snan", "[7e00000000000000]", "00")
    self.bid64_from_string("0", "INFINITY", "[7800000000000000]", "00")
    self.bid64_from_string("0", "infinity", "[7800000000000000]", "00")
    self.bid64_from_string("0", "INFiNITY", "[7800000000000000]", "00")
    self.bid64_from_string("0", "INFINITYi", "[7c00000000000000]", "00")
  }

  private func bid64_from_string(
    _ _rounding: String,
    _ arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._parse(arg0, rounding: rounding, status: &status)
    // In swift parsing failure is 'nil', in Cbid 'NaN'.
    self.assertEqual(result ?? .nan, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_from_uint32() {
    self.bid64_from_uint32("0", "1043759789", "[31c000003e3682ad]", "00")
    self.bid64_from_uint32("0", "1358431605", "[31c0000050f80575]", "00")
    self.bid64_from_uint32("0", "1444948445", "[31c00000562029dd]", "00")
    self.bid64_from_uint32("0", "1547363995", "[31c000005c3ae69b]", "00")
    self.bid64_from_uint32("0", "1589394791", "[31c000005ebc3d67]", "00")
    self.bid64_from_uint32("0", "2145346476", "[31c000007fdf63ac]", "00")
    self.bid64_from_uint32("0", "2157129534", "[31c0000080932f3e]", "00")
    self.bid64_from_uint32("0", "2209767582", "[31c0000083b6609e]", "00")
    self.bid64_from_uint32("0", "2231149582", "[31c0000084fca40e]", "00")
    self.bid64_from_uint32("0", "2333504895", "[31c000008b16757f]", "00")
    self.bid64_from_uint32("0", "3016223950", "[31c00000b3c7ecce]", "00")
    self.bid64_from_uint32("0", "3285489315", "[31c00000c3d496a3]", "00")
    self.bid64_from_uint32("0", "3481845618", "[31c00000cf88bf72]", "00")
    self.bid64_from_uint32("0", "3543999599", "[31c00000d33d246f]", "00")
    self.bid64_from_uint32("0", "3773691030", "[31c00000e0edf496]", "00")
    self.bid64_from_uint32("0", "546176994", "[31c00000208dffe2]", "00")
    self.bid64_from_uint32("0", "637658463", "[31c000002601e55f]", "00")
    self.bid64_from_uint32("0", "651472848", "[31c0000026d4afd0]", "00")
    self.bid64_from_uint32("0", "694329569", "[31c000002962a0e1]", "00")
    self.bid64_from_uint32("0", "876367805", "[31c00000343c4fbd]", "00")
  }

  private func bid64_from_uint32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseUInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_from_uint64() {
    self.bid64_from_uint64("0", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("0", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("0", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("0", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("0", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("0", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("0", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("0", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("0", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("0", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("0", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("0", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("0", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("0", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("0", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("0", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("0", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("0", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("0", "9007199254740994", "[6c70000000000002]", "00")
    self.bid64_from_uint64("0", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("0", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("1", "10789262222447919566", "[3243d54716373bb7]", "20")
    self.bid64_from_uint64("1", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("1", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("1", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("1", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("1", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("1", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("1", "3019588970190590771", "[322aba4cd7ef96fe]", "20")
    self.bid64_from_uint64("1", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("1", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("1", "4399244053147070808", "[322fa116d3116dbe]", "20")
    self.bid64_from_uint64("1", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("1", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("1", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("1", "6204429330282677880", "[32360ae54643f8b5]", "20")
    self.bid64_from_uint64("1", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("1", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("1", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("1", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("1", "9830691346977087921", "[6c8aecf631a2113f]", "20")
    self.bid64_from_uint64("2", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("2", "11490364541146872629", "[3244150ae5ae7580]", "20")
    self.bid64_from_uint64("2", "12066744217364604752", "[32444976c844640d]", "20")
    self.bid64_from_uint64("2", "14506243576798722737", "[32452755cd8ac301]", "20")
    self.bid64_from_uint64("2", "14775268902804503408", "[32453fcd8970f603]", "20")
    self.bid64_from_uint64("2", "18152794317206311497", "[324672fcadb21eb8]", "20")
    self.bid64_from_uint64("2", "2209388159661393197", "[3227d96d446d7552]", "20")
    self.bid64_from_uint64("2", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("2", "3099099504327532098", "[322b029d55143b6d]", "20")
    self.bid64_from_uint64("2", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("2", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("2", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("2", "5039469199127399108", "[3231e75edb787368]", "20")
    self.bid64_from_uint64("2", "519118078830965726", "[32127159f6da1e9a]", "20")
    self.bid64_from_uint64("2", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("2", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("2", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("2", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("2", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("2", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("3", "10789262222447919566", "[3243d54716373bb7]", "20")
    self.bid64_from_uint64("3", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("3", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("3", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("3", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("3", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("3", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("3", "3019588970190590771", "[322aba4cd7ef96fe]", "20")
    self.bid64_from_uint64("3", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("3", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("3", "4399244053147070808", "[322fa116d3116dbe]", "20")
    self.bid64_from_uint64("3", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("3", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("3", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("3", "6204429330282677880", "[32360ae54643f8b5]", "20")
    self.bid64_from_uint64("3", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("3", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("3", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("3", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("3", "9830691346977087921", "[6c8aecf631a2113f]", "20")
    self.bid64_from_uint64("4", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("4", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("4", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("4", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("4", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("4", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("4", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("4", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("4", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("4", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("4", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("4", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("4", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("4", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("4", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("4", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("4", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("4", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("4", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("4", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("0", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("0", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_uint64("1", "9999999999999999999", "[6c8b86f26fc0ffff]", "20")
    self.bid64_from_uint64("1", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_uint64("2", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("2", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_uint64("3", "9999999999999999999", "[6c8b86f26fc0ffff]", "20")
    self.bid64_from_uint64("3", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_uint64("4", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("4", "99999999999999995", "[32038d7ea4c68000]", "20")
  }

  private func bid64_from_uint64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_ilogb() {
    self.bid64_ilogb("0", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[05c0000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "-0", "[80000000]", "01")
    self.bid64_ilogb("0", "0", "[80000000]", "01")
    self.bid64_ilogb("0", "[1200000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[3580000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[3a60000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[4000190410201c00]", "[0007f]", "00")
    self.bid64_ilogb("0", "[5860000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[69dbb75d7734cd9e]", "-2147483648", "01")
    self.bid64_ilogb("0", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[7800000000000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[7810000100000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7c00000000000001]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7ef0000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7effffffffefffff]", "-2147483648", "01")
    self.bid64_ilogb("0", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[877f265d6129acc4]", "[FFFFFEBC]", "00")
    self.bid64_ilogb("0", "[8e60000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[a8b7e5186aa06c67]", "[FFFFFFC6]", "00")
    self.bid64_ilogb("0", "[b54b05813dfa685d]", "[002b]", "00")
    self.bid64_ilogb("0", "[ba337e6a6a0ab070]", "[0052]", "00")
    self.bid64_ilogb("0", "[d14062208c339e33]", "266", "00")
    self.bid64_ilogb("0", "[e003b75d7734cd9e]", "-2147483648", "01")
    self.bid64_ilogb("0", "[e6b63ababd5d04d2]", "[80000000]", "01")
    self.bid64_ilogb("0", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[f800000000000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[f810000100000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[fbedefba9d5c7fdd]", "[7fffffff]", "01")
    self.bid64_ilogb("0", "[fc00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fc00000000000001]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fde7ff7ffdffbff9]", "[80000000]", "01")
    self.bid64_ilogb("0", "[fe00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fef0000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[feffffffffefffff]", "-2147483648", "01")
    self.bid64_ilogb("0", "-Infinity", "[7fffffff]", "01")
    self.bid64_ilogb("0", "QNaN", "[80000000]", "01")
    self.bid64_ilogb("0", "SNaN", "[80000000]", "01")
    self.bid64_ilogb("1", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
  }

  private func bid64_ilogb(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    assert(ulp?.isZero ?? true) // 'ulp' does not make sense in this test
    let result = arg0._getExponent(status: &status)
    let resultIntel = self.convertToIntelLogB(arg0, exponent: result)
    self.assertInt(resultIntel, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_inf() {
    self.bid64_inf("0", "0", "[7800000000000000]", "00")
  }

  private func bid64_inf(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Dummy use for 'arg0, rounding, status', so that the compiler does not complain.
    _ = (arg0, rounding)
    // Dummy assign 'status', so that the compiler does not complain.
    status = ExceptionStatus()

    let result = Decimal64.infinity
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_isCanonical() {
    self.bid64_isCanonical("0", "-0", "1", "00")
    self.bid64_isCanonical("0", "0", "1", "00")
    self.bid64_isCanonical("0", "0E-83", "1", "00")
    self.bid64_isCanonical("0", "[2811086419027808]", "1", "00")
    self.bid64_isCanonical("0", "[292fc3f6cda18948]", "1", "00")
    self.bid64_isCanonical("0", "[5473faef406b0fcd]", "1", "00")
    self.bid64_isCanonical("0", "[68e3435409c48c01]", "1", "00")
    self.bid64_isCanonical("0", "[75ab31f57ab709dd]", "1", "00")
    self.bid64_isCanonical("0", "[79d06c1de91c42f2]", "0", "00")
    self.bid64_isCanonical("0", "[7e03f3e1e4c85d17]", "0", "00")
    self.bid64_isCanonical("0", "[a802003113f8e3a6]", "1", "00")
    self.bid64_isCanonical("0", "[b58bfd8821f2492a]", "1", "00")
    self.bid64_isCanonical("0", "[b9a0e346782c737f]", "1", "00")
    self.bid64_isCanonical("0", "[c1eef72624bcf3e9]", "1", "00")
    self.bid64_isCanonical("0", "[c22931d2363b48da]", "1", "00")
    self.bid64_isCanonical("0", "[ddc28edd86a0e0dc]", "1", "00")
    self.bid64_isCanonical("0", "[e125a4d69af506a9]", "0", "00")
    self.bid64_isCanonical("0", "[f800000000000000]", "1", "00")
    self.bid64_isCanonical("0", "[f800000001000000]", "0", "00")
    self.bid64_isCanonical("0", "[f810000000000000]", "0", "00")
    self.bid64_isCanonical("0", "[fe00c3d109f0dda6]", "1", "00")
    self.bid64_isCanonical("0", "[fffffeffffffffff]", "0", "00")
    self.bid64_isCanonical("0", "-Infinity", "1", "00")
    self.bid64_isCanonical("0", "Infinity", "1", "00")
    self.bid64_isCanonical("0", "QNaN", "1", "00")
    self.bid64_isCanonical("0", "SNaN", "1", "00")
  }

  private func bid64_isCanonical(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isCanonical
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isFinite() {
    self.bid64_isFinite("0", "-0", "1", "00")
    self.bid64_isFinite("0", "0", "1", "00")
    self.bid64_isFinite("0", "[1608af5cb4593bf4]", "1", "00")
    self.bid64_isFinite("0", "[2a166dfc84e76865]", "1", "00")
    self.bid64_isFinite("0", "[54c0000000000000]", "1", "00")
    self.bid64_isFinite("0", "[85c107f0c960db7e]", "1", "00")
    self.bid64_isFinite("0", "[99b52df1feac4415]", "1", "00")
    self.bid64_isFinite("0", "[a5d5d70134196a1a]", "1", "00")
    self.bid64_isFinite("0", "[af20000000000000]", "1", "00")
    self.bid64_isFinite("0", "[bec96a9433a05fc7]", "1", "00")
    self.bid64_isFinite("0", "[c235bf6d4565f8c4]", "1", "00")
    self.bid64_isFinite("0", "[dc5055f8523440b9]", "1", "00")
    self.bid64_isFinite("0", "[e8fd289d8852613a]", "1", "00")
    self.bid64_isFinite("0", "-Infinity", "0", "00")
    self.bid64_isFinite("0", "QNaN", "0", "00")
    self.bid64_isFinite("0", "SNaN", "0", "00")
  }

  private func bid64_isFinite(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isFinite
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isInf() {
    self.bid64_isInf("0", "-0", "0", "00")
    self.bid64_isInf("0", "0", "0", "00")
    self.bid64_isInf("0", "[0e2a000000000000]", "0", "00")
    self.bid64_isInf("0", "[426bd93b6d5a55ff]", "0", "00")
    self.bid64_isInf("0", "[452ed318d6be629d]", "0", "00")
    self.bid64_isInf("0", "[83b9dd4ef6f10188]", "0", "00")
    self.bid64_isInf("0", "[8b5d556f8b318648]", "0", "00")
    self.bid64_isInf("0", "[931f66ce5754afaa]", "0", "00")
    self.bid64_isInf("0", "[9840000000000000]", "0", "00")
    self.bid64_isInf("0", "[9e2fe80093f4056b]", "0", "00")
    self.bid64_isInf("0", "[c57708cdda260a7c]", "0", "00")
    self.bid64_isInf("0", "[dc929d20fa722a17]", "0", "00")
    self.bid64_isInf("0", "[ddaedd7658bad294]", "0", "00")
    self.bid64_isInf("0", "Infinity", "1", "00")
    self.bid64_isInf("0", "QNaN", "0", "00")
    self.bid64_isInf("0", "SNaN", "0", "00")
  }

  private func bid64_isInf(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isInfinite
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isNaN() {
    self.bid64_isNaN("0", "0", "0", "00")
    self.bid64_isNaN("0", "[2437f7cf38a63db8]", "0", "00")
    self.bid64_isNaN("0", "[2d8cedba6d10597e]", "0", "00")
    self.bid64_isNaN("0", "[385ba1cbb8c2bcf9]", "0", "00")
    self.bid64_isNaN("0", "[6031b795cfce0912]", "0", "00")
    self.bid64_isNaN("0", "[81c72ce22dc94c5d]", "0", "00")
    self.bid64_isNaN("0", "[bd673245d19d51eb]", "0", "00")
    self.bid64_isNaN("0", "[d11909bcbc0ef969]", "0", "00")
    self.bid64_isNaN("0", "[d6124b4e9e27cf82]", "0", "00")
    self.bid64_isNaN("0", "[db70d6ecf4cea09e]", "0", "00")
    self.bid64_isNaN("0", "[e649f50970cd7b28]", "0", "00")
    self.bid64_isNaN("0", "-Infinity", "0", "00")
    self.bid64_isNaN("0", "Infinity", "0", "00")
    self.bid64_isNaN("0", "QNaN", "1", "00")
  }

  private func bid64_isNaN(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isNaN
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isNormal() {
    self.bid64_isNormal("0", "0", "0", "00")
    self.bid64_isNormal("0", "[0000000000000000]", "0", "00")
    self.bid64_isNormal("0", "[0000000220000880]", "0", "00")
    self.bid64_isNormal("0", "[0042000880060800]", "1", "00")
    self.bid64_isNormal("0", "[0f19eda8ce8d0d7c]", "1", "00")
    self.bid64_isNormal("0", "[1240000000000000]", "0", "00")
    self.bid64_isNormal("0", "[176ca85dbd0e3ed8]", "1", "00")
    self.bid64_isNormal("0", "[1b77fad26e664ee7]", "1", "00")
    self.bid64_isNormal("0", "[20f6514fb338a22c]", "1", "00")
    self.bid64_isNormal("0", "[56867713cac397e3]", "1", "00")
    self.bid64_isNormal("0", "[6489214a172fbc88]", "1", "00")
    self.bid64_isNormal("0", "[6eaba7a5b910bc03]", "0", "00")
    self.bid64_isNormal("0", "[94206ef326033fa3]", "1", "00")
    self.bid64_isNormal("0", "[bbdd8c9fffac1f7b]", "1", "00")
    self.bid64_isNormal("0", "[c3bdd7e750efbf92]", "1", "00")
    self.bid64_isNormal("0", "[e97982db520f3b12]", "1", "00")
    self.bid64_isNormal("0", "[f56adf1cb46269c8]", "1", "00")
    self.bid64_isNormal("0", "[fdeffefd7c367377]", "0", "00")
    self.bid64_isNormal("0", "-Infinity", "0", "00")
    self.bid64_isNormal("0", "Infinity", "0", "00")
    self.bid64_isNormal("0", "QNaN", "0", "00")
  }

  private func bid64_isNormal(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isNormal
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isSignaling() {
    self.bid64_isSignaling("0", "-0", "0", "00")
    self.bid64_isSignaling("0", "0", "0", "00")
    self.bid64_isSignaling("0", "[15ad2a086b455100]", "0", "00")
    self.bid64_isSignaling("0", "[4781bd5bd459fb0e]", "0", "00")
    self.bid64_isSignaling("0", "[55dc18613ae0c22c]", "0", "00")
    self.bid64_isSignaling("0", "[57c9b7b52a49a843]", "0", "00")
    self.bid64_isSignaling("0", "[7e00000000000000]", "1", "00")
    self.bid64_isSignaling("0", "[7e00000100000000]", "1", "00")
    self.bid64_isSignaling("0", "[7e03ffffffffffff]", "1", "00")
    self.bid64_isSignaling("0", "[92943f53462b5700]", "0", "00")
    self.bid64_isSignaling("0", "[975027601b33db1d]", "0", "00")
    self.bid64_isSignaling("0", "[9e80000000000000]", "0", "00")
    self.bid64_isSignaling("0", "[a920000000000000]", "0", "00")
    self.bid64_isSignaling("0", "[ac40000000000000]", "0", "00")
    self.bid64_isSignaling("0", "[bcba996cf19c6391]", "0", "00")
    self.bid64_isSignaling("0", "[fe00000000000000]", "1", "00")
    self.bid64_isSignaling("0", "[fef0000000000000]", "1", "00")
    self.bid64_isSignaling("0", "-Infinity", "0", "00")
    self.bid64_isSignaling("0", "Infinity", "0", "00")
    self.bid64_isSignaling("0", "QNaN", "0", "00")
  }

  private func bid64_isSignaling(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isSignalingNaN
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isSigned() {
    self.bid64_isSigned("0", "0", "0", "00")
    self.bid64_isSigned("0", "[0000000000000000]", "0", "00")
    self.bid64_isSigned("0", "-0", "1", "00")
    self.bid64_isSigned("0", "[09ef000000000000]", "0", "00")
    self.bid64_isSigned("0", "[0e651dcf38049e2c]", "0", "00")
    self.bid64_isSigned("0", "[18f64159f3d889fe]", "0", "00")
    self.bid64_isSigned("0", "[57c0000000000000]", "0", "00")
    self.bid64_isSigned("0", "[8550e8a519089ef9]", "1", "00")
    self.bid64_isSigned("0", "[8fad471547a7465b]", "1", "00")
    self.bid64_isSigned("0", "[b2e180325c4db3a2]", "1", "00")
    self.bid64_isSigned("0", "[c0563045a9951137]", "1", "00")
    self.bid64_isSigned("0", "[c600000000000000]", "1", "00")
    self.bid64_isSigned("0", "[d5c48a1beee6bc7f]", "1", "00")
    self.bid64_isSigned("0", "Infinity", "0", "00")
    self.bid64_isSigned("0", "-Infinity", "1", "00")
    self.bid64_isSigned("0", "SNaN", "0", "00")
  }

  private func bid64_isSigned(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.sign
    self.assertSign(result, expected, file, line)
  }

  func test_bid64_isSubnormal() {
    self.bid64_isSubnormal("0", "-0", "0", "00")
    self.bid64_isSubnormal("0", "[0000000000000000]", "0", "00")
    self.bid64_isSubnormal("0", "[0000010000200040]", "1", "00")
    self.bid64_isSubnormal("0", "[01c306b99e03c3d7]", "0", "00")
    self.bid64_isSubnormal("0", "[0ababb959e64802b]", "0", "00")
    self.bid64_isSubnormal("0", "[480968bfcbd60383]", "0", "00")
    self.bid64_isSubnormal("0", "[59b702267f365f3e]", "0", "00")
    self.bid64_isSubnormal("0", "[6041008000280000]", "0", "00")
    self.bid64_isSubnormal("0", "[a9e07f5c486a9a54]", "0", "00")
    self.bid64_isSubnormal("0", "[c1b9fe97c57e987d]", "0", "00")
    self.bid64_isSubnormal("0", "[ceae0a0b6eb9fdfd]", "0", "00")
    self.bid64_isSubnormal("0", "[cfab61eda6d26c24]", "0", "00")
    self.bid64_isSubnormal("0", "[d609b99364c503d0]", "0", "00")
    self.bid64_isSubnormal("0", "[d612fd2145e1c711]", "0", "00")
    self.bid64_isSubnormal("0", "[de7b2a9a4ac39479]", "0", "00")
    self.bid64_isSubnormal("0", "[e33f4bdedd9ec7e9]", "0", "00")
    self.bid64_isSubnormal("0", "[f04a0d0a231ac1dc]", "0", "00")
    self.bid64_isSubnormal("0", "[fffffffffffffbff]", "0", "00")
    self.bid64_isSubnormal("0", "-Infinity", "0", "00")
    self.bid64_isSubnormal("0", "Infinity", "0", "00")
    self.bid64_isSubnormal("0", "QNaN", "0", "00")
    self.bid64_isSubnormal("0", "SNaN", "0", "00")
  }

  private func bid64_isSubnormal(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isSubnormal
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_isZero() {
    self.bid64_isZero("0", "[0040000000400100]", "0", "00")
    self.bid64_isZero("0", "-0", "1", "00")
    self.bid64_isZero("0", "0", "1", "00")
    self.bid64_isZero("0", "[24bc3644801d9a0b]", "0", "00")
    self.bid64_isZero("0", "[37da90406448ed2e]", "0", "00")
    self.bid64_isZero("0", "+5296735256349.E0", "0", "00")
    self.bid64_isZero("0", "[5d19e6a9d4638f11]", "0", "00")
    self.bid64_isZero("0", "[602386F26FC0FFFE]", "0", "00")
    self.bid64_isZero("0", "[602386f26fc0ffff]", "0", "00")
    self.bid64_isZero("0", "[602386f26fc10000]", "1", "00")
    self.bid64_isZero("0", "[602386f26fc1ffff]", "1", "00")
    self.bid64_isZero("0", "[6810002824290208]", "0", "00")
    self.bid64_isZero("0", "[81ffe75f5a52a8ff]", "0", "00")
    self.bid64_isZero("0", "[833dc51c3126fa2c]", "0", "00")
    self.bid64_isZero("0", "[930d09c739e98afe]", "0", "00")
    self.bid64_isZero("0", "[97eb0dbbc170e5b7]", "0", "00")
    self.bid64_isZero("0", "[a765d9338f33beea]", "0", "00")
    self.bid64_isZero("0", "[e3d27d04304a8332]", "0", "00")
    self.bid64_isZero("0", "[ee7b7a44bc674485]", "0", "00")
    self.bid64_isZero("0", "[ffffffffffffffff]", "0", "00")
    self.bid64_isZero("0", "-Infinity", "0", "00")
    self.bid64_isZero("0", "Infinity", "0", "00")
    self.bid64_isZero("0", "QNaN", "0", "00")
    self.bid64_isZero("0", "SNaN", "0", "00")
  }

  private func bid64_isZero(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isZero
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_maxnum() {
    self.bid64_maxnum("0", "[0000000000000000]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_maxnum("0", "[0000020000800000]", "[f99058c093cca73f]", "[0000020000800000]", "00")
    self.bid64_maxnum("0", "[0020000000040000]", "[0000800000024001]", "[0000800000024001]", "00")
    self.bid64_maxnum("0", "0", "-0", "[31c0000000000000]", "00")
    self.bid64_maxnum("0", "[0080000200902000]", "[fffeffebcbffbffa]", "[fc02ffebcbffbffa]", "01")
    self.bid64_maxnum("0", "[0b533d3ba956d943]", "[cdc0000000000000]", "[0b533d3ba956d943]", "00")
    self.bid64_maxnum("0", "0", "QNaN", "[31c0000000000000]", "00")
    self.bid64_maxnum("0", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum("0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum("0", "1.0", "1", "[31c0000000000001]", "00")
    self.bid64_maxnum("0", "1", "1.0", "[31a000000000000a]", "00")
    self.bid64_maxnum("0", "[1440000000000000]", "[0fddb3e37a109c2b]", "[0fddb3e37a109c2b]", "00")
    self.bid64_maxnum("0", "[26e4a7b427b8e564]", "[e483411f0d084cb3]", "[26e4a7b427b8e564]", "00")
    self.bid64_maxnum("0", "[2980000000000000]", "[55c426ce97ece09b]", "[55c426ce97ece09b]", "00")
    self.bid64_maxnum("0", "[2bfe35c7f0620dd9]", "[3557694ef3566909]", "[3557694ef3566909]", "00")
    self.bid64_maxnum("0", "+3.3792759E0", "QNaN", "[30e000000203a2f7]", "00")
    self.bid64_maxnum("0", "[3b4b06f7fe3c2971]", "[6fc2e17c366869ca]", "[6fc2e17c366869ca]", "00")
    self.bid64_maxnum("0", "[4f564ec94dc32551]", "[c3e0000000000000]", "[4f564ec94dc32551]", "00")
    self.bid64_maxnum("0", "[7210413870ec6c6a]", "[3660c27411705811]", "[7210413870ec6c6a]", "00")
    self.bid64_maxnum("0", "[7418274fca169ec1]", "[39855702dad705e9]", "[7418274fca169ec1]", "00")
    self.bid64_maxnum("0", "[7af88b3587c40cd0]", "[0210488000f21c48]", "[7800000000000000]", "00")
    self.bid64_maxnum("0", "[8068480040403300]", "[6dbc6c4d89046655]", "[36e0000000000000]", "00")
    self.bid64_maxnum("0", "[84960f8899a2a954]", "[fffff8bebfaf7fff]", "[fc00000000000000]", "01")
    self.bid64_maxnum("0", "[8b311194bc4dfa48]", "[93b7bda5d2f877a7]", "[8b311194bc4dfa48]", "00")
    self.bid64_maxnum("0", "[958731d297d11a7a]", "[730346031c275709]", "[730346031c275709]", "00")
    self.bid64_maxnum("0", "[990530201c404020]", "[8bffecf7f67f9f5f]", "[8bffecf7f67f9f5f]", "00")
    self.bid64_maxnum("0", "[b380000000000000]", "[28b11c100bbe6602]", "[28b11c100bbe6602]", "00")
    self.bid64_maxnum("0", "[c401410824008420]", "[0000000000000802]", "[0000000000000802]", "00")
    self.bid64_maxnum("0", "[cf7bfd3ef3ddff1f]", "[cfbbfcd6e3eff7bd]", "[cf7bfd3ef3ddff1f]", "00")
    self.bid64_maxnum("0", "[d7ffffffffffeefd]", "[a0a81fb301c809cb]", "[a0a81fb301c809cb]", "00")
    self.bid64_maxnum("0", "[e5b02c7e30fced8d]", "[33067bf3f66f79ae]", "[33067bf3f66f79ae]", "00")
    self.bid64_maxnum("0", "[e87feffe1ebfffe9]", "[2dcd33d4dd29ef5b]", "[2dcd33d4dd29ef5b]", "00")
    self.bid64_maxnum("0", "[eb1dba35683dc7b3]", "[f7ff7ffddfffffdf]", "[ac60000000000000]", "00")
    self.bid64_maxnum("0", "[fbb1c1e9ff332ed2]", "[0000000200000808]", "[0000000200000808]", "00")
    self.bid64_maxnum("0", "[fdbbfbdabffff1af]", "[7f5fffd5eeefffff]", "[fc00000000000000]", "01")
    self.bid64_maxnum("0", "[fff96edafd3c69ed]", "[6fdf593749e5dbc6]", "[fc016edafd3c69ed]", "01")
    self.bid64_maxnum("0", "[ffffffffffffffdd]", "[dfbff7ffffffbeee]", "[fc00000000000000]", "01")
    self.bid64_maxnum("0", "Infinity", "-0.0E0", "[7800000000000000]", "00")
    self.bid64_maxnum("0", "Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_maxnum("0", "Infinity", "QNaN", "[7800000000000000]", "00")
    self.bid64_maxnum("0", "QNaN", "Infinity", "[7800000000000000]", "00")
    self.bid64_maxnum("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_maxnum("0", "SNaN", "QNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum("0", "0E+368", "[7e00000000000001]", "[7c00000000000001]", "01")
    self.bid64_maxnum("0", "0", "+Inf", "+Inf", "00")
    self.bid64_maxnum("0", "0", "-1", "0", "00")
  }

  private func bid64_maxnum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._maximum(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid64_maxnum_mag() {
    self.bid64_maxnum_mag("0", "[0000000000000000]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_maxnum_mag("0", "[000100009615c242]", "[0080000800000100]", "[0080000800000100]", "00")
    self.bid64_maxnum_mag("0", "[0020110228000000]", "[0964590078006811]", "[0964590078006811]", "00")
    self.bid64_maxnum_mag("0", "-0", "0", "[31c0000000000000]", "00")
    self.bid64_maxnum_mag("0", "[0c0c000000000000]", "[f57a943bb0592f02]", "[f57a943bb0592f02]", "00")
    self.bid64_maxnum_mag("0", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum_mag("0", "1", "1.0", "[31a000000000000a]", "00")
    self.bid64_maxnum_mag("0", "1E+368", "-1E+368", "[5fc0000000000001]", "00")
    self.bid64_maxnum_mag("0", "[1ee9a6663dcde953]", "[4cae1f9dcd4a1f1a]", "[4cae1f9dcd4a1f1a]", "00")
    self.bid64_maxnum_mag("0", "[223882ca03fd113c]", "[5d6353623934b3dd]", "[5d6353623934b3dd]", "00")
    self.bid64_maxnum_mag("0", "[3490608500810a16]", "[81dc9d7a7b0ff956]", "[3490608500810a16]", "00")
    self.bid64_maxnum_mag("0", "[35eecb63164c6e9d]", "[3c126f76001d3424]", "[3c126f76001d3424]", "00")
    self.bid64_maxnum_mag("0", "[48482649305d020b]", "[e773708a21b418d1]", "[48482649305d020b]", "00")
    self.bid64_maxnum_mag("0", "[52aec83531ef30d2]", "[cf7fbb95875b776c]", "[52aec83531ef30d2]", "00")
    self.bid64_maxnum_mag("0", "[6509b96fe0fd306c]", "[14b0f5065f3d92b0]", "[14b0f5065f3d92b0]", "00")
    self.bid64_maxnum_mag("0", "[6948700a0300c232]", "[e68f647eebfbfe5f]", "[6948700a0300c232]", "00")
    self.bid64_maxnum_mag("0", "[73b2c3e4af2b0536]", "[592f6a05d0dc851c]", "[592f6a05d0dc851c]", "00")
    self.bid64_maxnum_mag("0", "[78506d8cdb179eb2]", "[42998267a357340c]", "[7800000000000000]", "00")
    self.bid64_maxnum_mag("0", "[92f923aff9f52270]", "[188ca3ee50aeeb53]", "[188ca3ee50aeeb53]", "00")
    self.bid64_maxnum_mag("0", "[aed022f6c1dfb22a]", "[2e5fc108e3815354]", "[aed022f6c1dfb22a]", "00")
    self.bid64_maxnum_mag("0", "[c969460a93e48631]", "[947dc53e73d68448]", "[c969460a93e48631]", "00")
    self.bid64_maxnum_mag("0", "[cdd9f5d1eaa026a3]", "[0040512c04403e12]", "[cdd9f5d1eaa026a3]", "00")
    self.bid64_maxnum_mag("0", "[cffe41856c902478]", "[fffffdfffb8f6fff]", "[fc00000000000000]", "01")
    self.bid64_maxnum_mag("0", "[d060000000000000]", "[bc40000000000000]", "[bc40000000000000]", "00")
    self.bid64_maxnum_mag("0", "[d944925925d56e79]", "[e1f3c8cc81cd2429]", "[d944925925d56e79]", "00")
    self.bid64_maxnum_mag("0", "[e1a02055b0887299]", "[f9df7ff7edf7effe]", "[f800000000000000]", "00")
    self.bid64_maxnum_mag("0", "[e8ca116aaf44f1d6]", "[d1075f3ca03743af]", "[d1075f3ca03743af]", "00")
    self.bid64_maxnum_mag("0", "[eafe7fdfbf7ff7bf]", "[289a27ba5f0a24d6]", "[289a27ba5f0a24d6]", "00")
    self.bid64_maxnum_mag("0", "[fdcff7f7ffff37fd]", "[369ed9554f4bb23b]", "[369ed9554f4bb23b]", "00")
    self.bid64_maxnum_mag("0", "[fdfdedffffff7fde]", "[ffbe79edeff968fa]", "[fc01edffffff7fde]", "01")
    self.bid64_maxnum_mag("0", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_maxnum_mag("0", "-Infinity", "-0", "[f800000000000000]", "00")
    self.bid64_maxnum_mag("0", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_maxnum_mag("0", "-Infinity", "QNaN", "[f800000000000000]", "00")
    self.bid64_maxnum_mag("0", "-Infinity", "SNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum_mag("0", "QNaN", "0", "[31c0000000000000]", "00")
    self.bid64_maxnum_mag("0", "QNaN", "QNaN", "[7c00000000000000]", "00")
    self.bid64_maxnum_mag("0", "SNaN", "QNaN", "[7c00000000000000]", "01")
    self.bid64_maxnum_mag("0", "-Inf", "+Inf", "+Inf", "00")
  }

  private func bid64_maxnum_mag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._maximumMagnitude(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid64_minnum() {
    self.bid64_minnum("0", "[0000000000000000]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_minnum("0", "[0010800b0003b004]", "[0020000240002020]", "[0020000240002020]", "00")
    self.bid64_minnum("0", "-0", "0", "[31c0000000000000]", "00")
    self.bid64_minnum("0", "0", "-0", "[b1c0000000000000]", "00")
    self.bid64_minnum("0", "[02e2ced7e23fbf5f]", "[4000000040006080]", "[02e2ced7e23fbf5f]", "00")
    self.bid64_minnum("0", "[08284035080cda26]", "[ffbffaabff77fffb]", "[fc00000000000000]", "01")
    self.bid64_minnum("0", "0E+368", "[7e00000000000001]", "[7c00000000000001]", "01")
    self.bid64_minnum("0", "[0fdd000000000000]", "[d13d5855034cfaad]", "[d13d5855034cfaad]", "00")
    self.bid64_minnum("0", "0", "-Infinity", "[f800000000000000]", "00")
    self.bid64_minnum("0", "0", "QNaN", "[31c0000000000000]", "00")
    self.bid64_minnum("0", "1.0", "1", "[31c0000000000001]", "00")
    self.bid64_minnum("0", "1", "1.0", "[31a000000000000a]", "00")
    self.bid64_minnum("0", "[2220000000000000]", "[5edd32eedeadc280]", "[2220000000000000]", "00")
    self.bid64_minnum("0", "[2330aaa3da6f4ec7]", "[6dc18833341366fb]", "[2330aaa3da6f4ec7]", "00")
    self.bid64_minnum("0", "[2a4b0cfcc5dad0ad]", "[293ee11762a0329d]", "[293ee11762a0329d]", "00")
    self.bid64_minnum("0", "[2d0af79737c00fc1]", "[792b5d0217888c2d]", "[2d0af79737c00fc1]", "00")
    self.bid64_minnum("0", "[3509fd6262a3a3af]", "[9100000000000000]", "[9100000000000000]", "00")
    self.bid64_minnum("0", "[3bd5eff14a5ccf14]", "[9c3edd435d5309f8]", "[9c3edd435d5309f8]", "00")
    self.bid64_minnum("0", "[487038270329c74a]", "[d22caa52c7dd1d59]", "[d22caa52c7dd1d59]", "00")
    self.bid64_minnum("0", "[5899620238809653]", "[9c854fe13bf0c757]", "[9c854fe13bf0c757]", "00")
    self.bid64_minnum("0", "[5a0ce61bd4f0ca0a]", "[c479f7ab8d183803]", "[c479f7ab8d183803]", "00")
    self.bid64_minnum("0", "[725b098e343fb10e]", "[565b14c74a8dc901]", "[725b098e343fb10e]", "00")
    self.bid64_minnum("0", "[7808681108641902]", "[8244882018000000]", "[8244882018000000]", "00")
    self.bid64_minnum("0", "[9bae6e9430b27930]", "[92f2cb7c58da1de9]", "[9bae6e9430b27930]", "00")
    self.bid64_minnum("0", "[b730a0795f1d3eea]", "[6b5f979bfbabdd6d]", "[b730a0795f1d3eea]", "00")
    self.bid64_minnum("0", "[b777c225b8bf4840]", "[fffeffff7bfafd7f]", "[fc02ffff7bfafd7f]", "01")
    self.bid64_minnum("0", "[bd6ffbfdfffffe3f]", "[d3d54c44305622fb]", "[d3d54c44305622fb]", "00")
    self.bid64_minnum("0", "[dabf738aac2ee784]", "[86a0000000000000]", "[dabf738aac2ee784]", "00")
    self.bid64_minnum("0", "[eab2b7ebfdf9fdf7]", "[e3e26637f7758ba2]", "[eab2b7ebfdf9fdf7]", "00")
    self.bid64_minnum("0", "[f172bc74c872d709]", "[03175329779bec5b]", "[f172bc74c872d709]", "00")
    self.bid64_minnum("0", "[f3ed3f6c68d8bbe8]", "[effffafdfeefffdf]", "[cfa0000000000000]", "00")
    self.bid64_minnum("0", "[f5ff6bf3f5eebfff]", "[83ac8f15de936c6f]", "[83ac8f15de936c6f]", "00")
    self.bid64_minnum("0", "[fbffafcffef6fe9f]", "[a68020305462c446]", "[f800000000000000]", "00")
    self.bid64_minnum("0", "[fd37ffffff5ebf44]", "[0000804000000100]", "[0000804000000100]", "00")
    self.bid64_minnum("0", "[fdaf7fe7b37ff7ff]", "[ffaf5f47f76dd261]", "[fc037fe7b37ff7ff]", "01")
    self.bid64_minnum("0", "[fdfdffffffffffff]", "[1e0000b882221c41]", "[1e0000b882221c41]", "00")
    self.bid64_minnum("0", "[ffffff6dfffff7ff]", "[c0efa908efc00dd2]", "[fc00000000000000]", "01")
    self.bid64_minnum("0", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_minnum("0", "-Infinity", "Infinity", "[f800000000000000]", "00")
    self.bid64_minnum("0", "QNaN", "0", "[31c0000000000000]", "00")
    self.bid64_minnum("0", "QNaN", "-0", "[b1c0000000000000]", "00")
    self.bid64_minnum("0", "QNaN", "QNaN", "[7c00000000000000]", "00")
  }

  private func bid64_minnum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._minimum(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid64_minnum_mag() {
    self.bid64_minnum_mag("0", "[0000000000000000]", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid64_minnum_mag("0", "[0000000000000400]", "[8000000000000400]", "[8000000000000400]", "00")
    self.bid64_minnum_mag("0", "[002428458000c920]", "[80a20020c2000200]", "[002428458000c920]", "00")
    self.bid64_minnum_mag("0", "-0", "-0", "[b1c0000000000000]", "00")
    self.bid64_minnum_mag("0", "-0", "0", "[b1c0000000000000]", "00")
    self.bid64_minnum_mag("0", "[04b4480902012080]", "[fbf7f7cff5ffdfff]", "[04b4480902012080]", "00")
    self.bid64_minnum_mag("0", "[080cda2608684035]", "[ff77fffbfddffab9]", "[fc00000000000000]", "01")
    self.bid64_minnum_mag("0", "[0a4e000000000000]", "[87737f64386c30dc]", "[87737f64386c30dc]", "00")
    self.bid64_minnum_mag("0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_minnum_mag("0", "1", "1.0", "[31c0000000000001]", "00")
    self.bid64_minnum_mag("0", "[1539cf097274e8b2]", "[13ba6e820829bf4e]", "[13ba6e820829bf4e]", "00")
    self.bid64_minnum_mag("0", "[1964590afa4ce873]", "[a059d26b9ae84aa2]", "[1964590afa4ce873]", "00")
    self.bid64_minnum_mag("0", "[2052c02ebf103c8d]", "[b5556bf75aaecd51]", "[2052c02ebf103c8d]", "00")
    self.bid64_minnum_mag("0", "[2208110000101102]", "[0a3bc6ad95a271bf]", "[0a3bc6ad95a271bf]", "00")
    self.bid64_minnum_mag("0", "[2a546b06a7405933]", "[7008a85ccab061b5]", "[2a546b06a7405933]", "00")
    self.bid64_minnum_mag("0", "[2c259d582f763563]", "[0da6000000000000]", "[0da6000000000000]", "00")
    self.bid64_minnum_mag("0", "[6911c64334f05a22]", "[edfdbffffffcf3e5]", "[b7e0000000000000]", "00")
    self.bid64_minnum_mag("0", "[729ea634923a2ad6]", "[b1a64fa74f28981f]", "[4a60000000000000]", "00")
    self.bid64_minnum_mag("0", "[7a294d1af9573eda]", "[0004080124000000]", "[0004080124000000]", "00")
    self.bid64_minnum_mag("0", "[8104102210241401]", "[83202b8579e35d70]", "[8104102210241401]", "00")
    self.bid64_minnum_mag("0", "[8cdc4f1e76bbe9b2]", "[296f9ecbbf5bfcae]", "[8cdc4f1e76bbe9b2]", "00")
    self.bid64_minnum_mag("0", "[970df44594bd8127]", "[89a48da4f30a2912]", "[89a48da4f30a2912]", "00")
    self.bid64_minnum_mag("0", "[9f5d40ba8527378d]", "[0c3e000000000000]", "[0c3e000000000000]", "00")
    self.bid64_minnum_mag("0", "[b3e11a50f028223c]", "[3660000000000000]", "[3660000000000000]", "00")
    self.bid64_minnum_mag("0", "[b980000000000000]", "[9000d9c727cc4bcc]", "[b980000000000000]", "00")
    self.bid64_minnum_mag("0", "[bdd56c3a57e3e7e7]", "[834eb1c09dad5912]", "[834eb1c09dad5912]", "00")
    self.bid64_minnum_mag("0", "[bebeab1242fe8000]", "[b255253f35124e6c]", "[b255253f35124e6c]", "00")
    self.bid64_minnum_mag("0", "[dcb37b49acb9ead8]", "[02590b0f4d8995c0]", "[02590b0f4d8995c0]", "00")
    self.bid64_minnum_mag("0", "[fd4b3c75426f39c0]", "[ffffffffeeffffbf]", "[fc033c75426f39c0]", "01")
    self.bid64_minnum_mag("0", "[fdfffffffafbffff]", "[2006022e14094814]", "[2006022e14094814]", "00")
    self.bid64_minnum_mag("0", "Infinity", "0", "[31c0000000000000]", "00")
    self.bid64_minnum_mag("0", "-Infinity", "Infinity", "[f800000000000000]", "00")
    self.bid64_minnum_mag("0", "Infinity", "-Infinity", "[f800000000000000]", "00")
    self.bid64_minnum_mag("0", "-Infinity", "QNaN", "[f800000000000000]", "00")
    self.bid64_minnum_mag("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_minnum_mag("0", "SNaN", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_minnum_mag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._minimumMagnitude(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid64_mul() {
    self.bid64_mul("0", "[0000000000000000]", "[fa77ffd7fb7ffeff]", "[7c00000000000000]", "01")
    self.bid64_mul("0", "[0000000000000001]", "[b47ef9e1dfcdf74f]", "[82bef9e1dfcdf74f]", "00")
    self.bid64_mul("0", "+0.0000000010000001E0", "+9.98899988898E0", "[6bb37cf181954935]", "20")
    self.bid64_mul("0", "[0000180010010480]", "[0080000000000008]", "[0000000000000000]", "30")
    self.bid64_mul("0", "+0.10100101E0", "+78856868956686.76857E0", "[317c4bc8652066a2]", "20")
    self.bid64_mul("0", "[0200000024100020]", "[2e2decc4d27751cf]", "[0000003736b70285]", "30")
    self.bid64_mul("0", "[026257043da3cab4]", "[aac09120242a5d73]", "[8000000000000000]", "30")
    self.bid64_mul("0", "[05d7bc2220347f5e]", "[9ac38cb88cbcf19a]", "[8000000000000000]", "30")
    self.bid64_mul("0", "[0c56d96b2c498e14]", "[a24ee9407ee8aaf1]", "[8000000000041e71]", "30")
    self.bid64_mul("0", "[0ec0000000000000]", "[0a07000000000000]", "[0000000000000000]", "00")
    self.bid64_mul("0", "-0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("0", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("0", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_mul("0", "[1020600000400400]", "[325ef3990b52a9f6]", "[6498ab9ad1a44cf9]", "20")
    self.bid64_mul("0", "+110.0E0", "-779489732.5773635E0", "[b13e765c0ec79b96]", "20")
    self.bid64_mul("0", "-110101.10101011000100E0", "+0.01110111000011E0", "[b044579ff548c635]", "20")
    self.bid64_mul("0", "[1285ce3d5e554edd]", "[b03f12388438cb91]", "[92e513d44eb4a545]", "20")
    self.bid64_mul("0", "[1a26179823b801ff]", "[15080003c46324e3]", "[00000000e6283adf]", "30")
    self.bid64_mul("0", "1E+367", "1E+367", "[7800000000000000]", "28")
    self.bid64_mul("0", "1E-385", "0.01234567890123456", "[0000001cbe991a14]", "30")
    self.bid64_mul("0", "1E-385", "1.00000000000000", "[000009184e72a000]", "00")
    self.bid64_mul("0", "1E-385", "5E-14", "[0000000000000000]", "30")
    self.bid64_mul("0", "[20a5553a8f593806]", "[8f253b091aaac14e]", "[8000c900279cb838]", "30")
    self.bid64_mul("0", "[2202c49001000286]", "[f47ffcfbbaebff4c]", "[c220000000000000]", "00")
    self.bid64_mul("0", "[4000000000202010]", "[0000000100000200]", "[6390201040402000]", "00")
    self.bid64_mul("0", "[41c0000000000000]", "[be4f13604a161cab]", "[ce40000000000000]", "00")
    self.bid64_mul("0", "[458086aa80268140]", "[0000000000000008]", "[13c4355401340a00]", "00")
    self.bid64_mul("0", "[48079159c9eac95b]", "[545376029f038b88]", "[7800000000000000]", "28")
    self.bid64_mul("0", "[500a39140c1df476]", "[deac4dd1e8ab47dc]", "[f800000000000000]", "28")
    self.bid64_mul("0", "[5116ed44f7c97723]", "[c0fcd59940767bc0]", "[f800000000000000]", "28")
    self.bid64_mul("0", "[527f62bd1287a67d]", "[d9f7dbf5fff7ffe7]", "[f800000000000000]", "28")
    self.bid64_mul("0", "-5555569769.8E0", "-789566.58268669636224E0", "[31cf957dcfa837c7]", "20")
    self.bid64_mul("0", "[58794c51b6e2faf6]", "[96e0000000000000]", "[bd80000000000000]", "00")
    self.bid64_mul("0", "[595163ac73c75073]", "[710046ab8fdfd911]", "[7800000000000000]", "28")
    self.bid64_mul("0", "[59f5506a9ce84d22]", "[0000000000030002]", "[28e430c939e366ec]", "20")
    self.bid64_mul("0", "[5c3ae0636c30449b]", "[eed07305b12f0c3d]", "[f800000000000000]", "28")
    self.bid64_mul("0", "[5d330a9955f87cf6]", "[0000000000000002]", "[2b83ceeb779818fe]", "00")
    self.bid64_mul("0", "[6006000883025200]", "[6942ba8cd0b77b3c]", "[0000000000000000]", "00")
    self.bid64_mul("0", "[621ff7ee477869bf]", "[0e1000000008021c]", "[0000000000000000]", "00")
    self.bid64_mul("0", "[74320a65f9b6e261]", "[2200000000000032]", "[41510532fcdb7130]", "20")
    self.bid64_mul("0", "-8998.89989899E0", "-58956575778996.8E0", "[3212d945c39720ea]", "20")
    self.bid64_mul("0", "-8.E0", "-888.898999989899889E0", "[305943976915b45f]", "20")
    self.bid64_mul("0", "[8ef670032d030ee8]", "[e7cdaf6b7fc63bcf]", "[0000000000000000]", "00")
    self.bid64_mul("0", "[8fbf5da3956fce8b]", "[8000a0a55508c595]", "[0000000000000000]", "30")
    self.bid64_mul("0", "-959.8997E0", "+68.7967799599E0", "[b077761f33802eaa]", "20")
    self.bid64_mul("0", "[972784165db43c3e]", "[044fbff56a929dd2]", "[8000000000000000]", "30")
    self.bid64_mul("0", "[ada0000000000000]", "[b8dcfe7aaece2955]", "[34a0000000000000]", "00")
    self.bid64_mul("0", "[bdffffffffffffbd]", "[fbfffff7ffffeeff]", "[7800000000000000]", "00")
    self.bid64_mul("0", "[ca1cf8617309a4d8]", "[dd9fc98585dc262c]", "[7800000000000000]", "28")
    self.bid64_mul("0", "[ccd968a05ded12b2]", "[43d400cb75bbaff6]", "[f800000000000000]", "28")
    self.bid64_mul("0", "[cfbd2d3cc1eddbb3]", "[3ac37a5a859aeea7]", "[da9c900a7142bc37]", "20")
    self.bid64_mul("0", "[d22eaca87ee95446]", "[481abdd75f3e0f3b]", "[f800000000000000]", "28")
    self.bid64_mul("0", "[d2a5e1c1f5080291]", "[7f3d1f59baff37f0]", "[7c011f59baff37f0]", "01")
    self.bid64_mul("0", "[d8da80f354325818]", "[6ffff9fffffffd17]", "[dfe0000000000000]", "00")
    self.bid64_mul("0", "[d8e0bf668018d8fc]", "[d702a94af9b02adb]", "[7800000000000000]", "28")
    self.bid64_mul("0", "[dc55a2268eb5ea2a]", "[d6777f6e4e953049]", "[7800000000000000]", "28")
    self.bid64_mul("0", "[ec36b39006e026e7]", "[13ec432af5323c3c]", "[92e0000000000000]", "00")
    self.bid64_mul("0", "[f5bffee6d71bff2b]", "[5c7a97577637e7ad]", "[dfe0000000000000]", "00")
    self.bid64_mul("0", "[f9bdcffff5fbdff7]", "[0000000000000000]", "[7c00000000000000]", "01")
    self.bid64_mul("0", "[fa445b3431f42001]", "[ffe63bfd1d36bfdd]", "[fc023bfd1d36bfdd]", "01")
    self.bid64_mul("0", "[fbffffbffffffdff]", "[a0b608081a304820]", "[7800000000000000]", "00")
    self.bid64_mul("0", "[fffcfbfffbfbbdff]", "[5434090a2e000648]", "[fc00fbfffbfbbdff]", "01")
    self.bid64_mul("0", "[fffffdfdffffffff]", "[fffffffffefffef7]", "[fc00000000000000]", "01")
    self.bid64_mul("0", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("0", "-Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_mul("0", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_mul("0", "QNaN", "-Infinity", "[7c00000000000000]", "00")
    self.bid64_mul("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("0", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_mul("0", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("1", "+0.0000000010000001E0", "+9.98899988898E0", "[6bb37cf181954934]", "20")
    self.bid64_mul("1", "+0.10100101E0", "+78856868956686.76857E0", "[317c4bc8652066a2]", "20")
    self.bid64_mul("1", "[026257043da3cab4]", "[aac09120242a5d73]", "[8000000000000001]", "30")
    self.bid64_mul("1", "[05d7bc2220347f5e]", "[9ac38cb88cbcf19a]", "[8000000000000001]", "30")
    self.bid64_mul("1", "[0c56d96b2c498e14]", "[a24ee9407ee8aaf1]", "[8000000000041e72]", "30")
    self.bid64_mul("1", "[0ec0000000000000]", "[0a07000000000000]", "[0000000000000000]", "00")
    self.bid64_mul("1", "-0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("1", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("1", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_mul("1", "[1020600000400400]", "[325ef3990b52a9f6]", "[6498ab9ad1a44cf8]", "20")
    self.bid64_mul("1", "+110.0E0", "-779489732.5773635E0", "[b13e765c0ec79b97]", "20")
    self.bid64_mul("1", "-110101.10101011000100E0", "+0.01110111000011E0", "[b044579ff548c636]", "20")
    self.bid64_mul("1", "[1285ce3d5e554edd]", "[b03f12388438cb91]", "[92e513d44eb4a545]", "20")
    self.bid64_mul("1", "1E+367", "1E+367", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "1E-385", "1.00000000000000", "[000009184e72a000]", "00")
    self.bid64_mul("1", "[41c0000000000000]", "[be4f13604a161cab]", "[ce40000000000000]", "00")
    self.bid64_mul("1", "[48079159c9eac95b]", "[545376029f038b88]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "[500a39140c1df476]", "[deac4dd1e8ab47dc]", "[f800000000000000]", "28")
    self.bid64_mul("1", "[5116ed44f7c97723]", "[c0fcd59940767bc0]", "[f800000000000000]", "28")
    self.bid64_mul("1", "-5555569769.8E0", "-789566.58268669636224E0", "[31cf957dcfa837c6]", "20")
    self.bid64_mul("1", "[58794c51b6e2faf6]", "[96e0000000000000]", "[bd80000000000000]", "00")
    self.bid64_mul("1", "[595163ac73c75073]", "[710046ab8fdfd911]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "[5c3ae0636c30449b]", "[eed07305b12f0c3d]", "[f800000000000000]", "28")
    self.bid64_mul("1", "[5d330a9955f87cf6]", "[0000000000000002]", "[2b83ceeb779818fe]", "00")
    self.bid64_mul("1", "-8998.89989899E0", "-58956575778996.8E0", "[3212d945c39720e9]", "20")
    self.bid64_mul("1", "-8.E0", "-888.898999989899889E0", "[305943976915b45f]", "20")
    self.bid64_mul("1", "[91c056424001a844]", "[0000000000000012]", "[8000000000000001]", "30")
    self.bid64_mul("1", "-959.8997E0", "+68.7967799599E0", "[b077761f33802eab]", "20")
    self.bid64_mul("1", "[972784165db43c3e]", "[044fbff56a929dd2]", "[8000000000000001]", "30")
    self.bid64_mul("1", "[ada0000000000000]", "[b8dcfe7aaece2955]", "[34a0000000000000]", "00")
    self.bid64_mul("1", "[ca1cf8617309a4d8]", "[dd9fc98585dc262c]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "[ccd968a05ded12b2]", "[43d400cb75bbaff6]", "[f800000000000000]", "28")
    self.bid64_mul("1", "[cfbd2d3cc1eddbb3]", "[3ac37a5a859aeea7]", "[da9c900a7142bc38]", "20")
    self.bid64_mul("1", "[d22eaca87ee95446]", "[481abdd75f3e0f3b]", "[f800000000000000]", "28")
    self.bid64_mul("1", "[d8e0bf668018d8fc]", "[d702a94af9b02adb]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "[dc55a2268eb5ea2a]", "[d6777f6e4e953049]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("1", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("1", "-Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_mul("1", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_mul("1", "QNaN", "-Infinity", "[7c00000000000000]", "00")
    self.bid64_mul("1", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("1", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_mul("1", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("2", "+0.0000000010000001E0", "+9.98899988898E0", "[6bb37cf181954935]", "20")
    self.bid64_mul("2", "[0000180010010480]", "[0080000000000008]", "[0000000000000001]", "30")
    self.bid64_mul("2", "+0.10100101E0", "+78856868956686.76857E0", "[317c4bc8652066a3]", "20")
    self.bid64_mul("2", "[026257043da3cab4]", "[aac09120242a5d73]", "[8000000000000000]", "30")
    self.bid64_mul("2", "[05d7bc2220347f5e]", "[9ac38cb88cbcf19a]", "[8000000000000000]", "30")
    self.bid64_mul("2", "[0c56d96b2c498e14]", "[a24ee9407ee8aaf1]", "[8000000000041e71]", "30")
    self.bid64_mul("2", "[0ec0000000000000]", "[0a07000000000000]", "[0000000000000000]", "00")
    self.bid64_mul("2", "-0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("2", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("2", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_mul("2", "[1020600000400400]", "[325ef3990b52a9f6]", "[6498ab9ad1a44cf9]", "20")
    self.bid64_mul("2", "+110.0E0", "-779489732.5773635E0", "[b13e765c0ec79b96]", "20")
    self.bid64_mul("2", "-110101.10101011000100E0", "+0.01110111000011E0", "[b044579ff548c635]", "20")
    self.bid64_mul("2", "[1285ce3d5e554edd]", "[b03f12388438cb91]", "[92e513d44eb4a544]", "20")
    self.bid64_mul("2", "1E+367", "1E+367", "[7800000000000000]", "28")
    self.bid64_mul("2", "1E+367", "-1E+368", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "1E-385", "1.00000000000000", "[000009184e72a000]", "00")
    self.bid64_mul("2", "1E-385", "-9.00000000000000", "[800051dac207a000]", "00")
    self.bid64_mul("2", "[41c0000000000000]", "[be4f13604a161cab]", "[ce40000000000000]", "00")
    self.bid64_mul("2", "[48079159c9eac95b]", "[545376029f038b88]", "[7800000000000000]", "28")
    self.bid64_mul("2", "[500a39140c1df476]", "[deac4dd1e8ab47dc]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "[5116ed44f7c97723]", "[c0fcd59940767bc0]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "[527f62bd1287a67d]", "[d9f7dbf5fff7ffe7]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "-5555569769.8E0", "-789566.58268669636224E0", "[31cf957dcfa837c7]", "20")
    self.bid64_mul("2", "[58794c51b6e2faf6]", "[96e0000000000000]", "[bd80000000000000]", "00")
    self.bid64_mul("2", "[595163ac73c75073]", "[710046ab8fdfd911]", "[7800000000000000]", "28")
    self.bid64_mul("2", "[5c3ae0636c30449b]", "[eed07305b12f0c3d]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "[5d330a9955f87cf6]", "[0000000000000002]", "[2b83ceeb779818fe]", "00")
    self.bid64_mul("2", "-8998.89989899E0", "-58956575778996.8E0", "[3212d945c39720ea]", "20")
    self.bid64_mul("2", "-8.E0", "-888.898999989899889E0", "[305943976915b460]", "20")
    self.bid64_mul("2", "[8fbf5da3956fce8b]", "[8000a0a55508c595]", "[0000000000000001]", "30")
    self.bid64_mul("2", "-959.8997E0", "+68.7967799599E0", "[b077761f33802eaa]", "20")
    self.bid64_mul("2", "[972784165db43c3e]", "[044fbff56a929dd2]", "[8000000000000000]", "30")
    self.bid64_mul("2", "[ada0000000000000]", "[b8dcfe7aaece2955]", "[34a0000000000000]", "00")
    self.bid64_mul("2", "[ca1cf8617309a4d8]", "[dd9fc98585dc262c]", "[7800000000000000]", "28")
    self.bid64_mul("2", "[ccd968a05ded12b2]", "[43d400cb75bbaff6]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "[cfbd2d3cc1eddbb3]", "[3ac37a5a859aeea7]", "[da9c900a7142bc37]", "20")
    self.bid64_mul("2", "[d22eaca87ee95446]", "[481abdd75f3e0f3b]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("2", "[d8e0bf668018d8fc]", "[d702a94af9b02adb]", "[7800000000000000]", "28")
    self.bid64_mul("2", "[dc55a2268eb5ea2a]", "[d6777f6e4e953049]", "[7800000000000000]", "28")
    self.bid64_mul("2", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("2", "-Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_mul("2", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_mul("2", "QNaN", "-Infinity", "[7c00000000000000]", "00")
    self.bid64_mul("2", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("2", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_mul("2", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("3", "+0.0000000010000001E0", "+9.98899988898E0", "[6bb37cf181954934]", "20")
    self.bid64_mul("3", "+0.10100101E0", "+78856868956686.76857E0", "[317c4bc8652066a2]", "20")
    self.bid64_mul("3", "[026257043da3cab4]", "[aac09120242a5d73]", "[8000000000000000]", "30")
    self.bid64_mul("3", "[05d7bc2220347f5e]", "[9ac38cb88cbcf19a]", "[8000000000000000]", "30")
    self.bid64_mul("3", "[0c56d96b2c498e14]", "[a24ee9407ee8aaf1]", "[8000000000041e71]", "30")
    self.bid64_mul("3", "[0ec0000000000000]", "[0a07000000000000]", "[0000000000000000]", "00")
    self.bid64_mul("3", "-0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("3", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("3", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_mul("3", "+110.0E0", "-779489732.5773635E0", "[b13e765c0ec79b96]", "20")
    self.bid64_mul("3", "-110101.10101011000100E0", "+0.01110111000011E0", "[b044579ff548c635]", "20")
    self.bid64_mul("3", "[1285ce3d5e554edd]", "[b03f12388438cb91]", "[92e513d44eb4a544]", "20")
    self.bid64_mul("3", "1E+367", "1E+367", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[41c0000000000000]", "[be4f13604a161cab]", "[ce40000000000000]", "00")
    self.bid64_mul("3", "[48079159c9eac95b]", "[545376029f038b88]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[500a39140c1df476]", "[deac4dd1e8ab47dc]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[5116ed44f7c97723]", "[c0fcd59940767bc0]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "-5555569769.8E0", "-789566.58268669636224E0", "[31cf957dcfa837c6]", "20")
    self.bid64_mul("3", "[58794c51b6e2faf6]", "[96e0000000000000]", "[bd80000000000000]", "00")
    self.bid64_mul("3", "[595163ac73c75073]", "[710046ab8fdfd911]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[5c3ae0636c30449b]", "[eed07305b12f0c3d]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "-8998.89989899E0", "-58956575778996.8E0", "[3212d945c39720e9]", "20")
    self.bid64_mul("3", "-8.E0", "-888.898999989899889E0", "[305943976915b45f]", "20")
    self.bid64_mul("3", "-959.8997E0", "+68.7967799599E0", "[b077761f33802eaa]", "20")
    self.bid64_mul("3", "[972784165db43c3e]", "[044fbff56a929dd2]", "[8000000000000000]", "30")
    self.bid64_mul("3", "[ada0000000000000]", "[b8dcfe7aaece2955]", "[34a0000000000000]", "00")
    self.bid64_mul("3", "[ca1cf8617309a4d8]", "[dd9fc98585dc262c]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[ccd968a05ded12b2]", "[43d400cb75bbaff6]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[cfbd2d3cc1eddbb3]", "[3ac37a5a859aeea7]", "[da9c900a7142bc37]", "20")
    self.bid64_mul("3", "[d22eaca87ee95446]", "[481abdd75f3e0f3b]", "[f7fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[d8e0bf668018d8fc]", "[d702a94af9b02adb]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "[dc55a2268eb5ea2a]", "[d6777f6e4e953049]", "[77fb86f26fc0ffff]", "28")
    self.bid64_mul("3", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("3", "-Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_mul("3", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_mul("3", "QNaN", "-Infinity", "[7c00000000000000]", "00")
    self.bid64_mul("3", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("3", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_mul("3", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("4", "+0.0000000010000001E0", "+9.98899988898E0", "[6bb37cf181954935]", "20")
    self.bid64_mul("4", "+0.10100101E0", "+78856868956686.76857E0", "[317c4bc8652066a2]", "20")
    self.bid64_mul("4", "[026257043da3cab4]", "[aac09120242a5d73]", "[8000000000000000]", "30")
    self.bid64_mul("4", "[05d7bc2220347f5e]", "[9ac38cb88cbcf19a]", "[8000000000000000]", "30")
    self.bid64_mul("4", "[0c56d96b2c498e14]", "[a24ee9407ee8aaf1]", "[8000000000041e71]", "30")
    self.bid64_mul("4", "[0ec0000000000000]", "[0a07000000000000]", "[0000000000000000]", "00")
    self.bid64_mul("4", "-0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("4", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("4", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_mul("4", "+110.0E0", "-779489732.5773635E0", "[b13e765c0ec79b97]", "20")
    self.bid64_mul("4", "-110101.10101011000100E0", "+0.01110111000011E0", "[b044579ff548c635]", "20")
    self.bid64_mul("4", "[1285ce3d5e554edd]", "[b03f12388438cb91]", "[92e513d44eb4a545]", "20")
    self.bid64_mul("4", "[41c0000000000000]", "[be4f13604a161cab]", "[ce40000000000000]", "00")
    self.bid64_mul("4", "[48079159c9eac95b]", "[545376029f038b88]", "[7800000000000000]", "28")
    self.bid64_mul("4", "[500a39140c1df476]", "[deac4dd1e8ab47dc]", "[f800000000000000]", "28")
    self.bid64_mul("4", "[5116ed44f7c97723]", "[c0fcd59940767bc0]", "[f800000000000000]", "28")
    self.bid64_mul("4", "-5555569769.8E0", "-789566.58268669636224E0", "[31cf957dcfa837c7]", "20")
    self.bid64_mul("4", "[58794c51b6e2faf6]", "[96e0000000000000]", "[bd80000000000000]", "00")
    self.bid64_mul("4", "[595163ac73c75073]", "[710046ab8fdfd911]", "[7800000000000000]", "28")
    self.bid64_mul("4", "[5c3ae0636c30449b]", "[eed07305b12f0c3d]", "[f800000000000000]", "28")
    self.bid64_mul("4", "-8998.89989899E0", "-58956575778996.8E0", "[3212d945c39720ea]", "20")
    self.bid64_mul("4", "-8.E0", "-888.898999989899889E0", "[305943976915b45f]", "20")
    self.bid64_mul("4", "-959.8997E0", "+68.7967799599E0", "[b077761f33802eaa]", "20")
    self.bid64_mul("4", "[972784165db43c3e]", "[044fbff56a929dd2]", "[8000000000000000]", "30")
    self.bid64_mul("4", "[ada0000000000000]", "[b8dcfe7aaece2955]", "[34a0000000000000]", "00")
    self.bid64_mul("4", "[ca1cf8617309a4d8]", "[dd9fc98585dc262c]", "[7800000000000000]", "28")
    self.bid64_mul("4", "[ccd968a05ded12b2]", "[43d400cb75bbaff6]", "[f800000000000000]", "28")
    self.bid64_mul("4", "[cfbd2d3cc1eddbb3]", "[3ac37a5a859aeea7]", "[da9c900a7142bc37]", "20")
    self.bid64_mul("4", "[d22eaca87ee95446]", "[481abdd75f3e0f3b]", "[f800000000000000]", "28")
    self.bid64_mul("4", "[d8e0bf668018d8fc]", "[d702a94af9b02adb]", "[7800000000000000]", "28")
    self.bid64_mul("4", "[dc55a2268eb5ea2a]", "[d6777f6e4e953049]", "[7800000000000000]", "28")
    self.bid64_mul("4", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("4", "-Infinity", "-Infinity", "[7800000000000000]", "00")
    self.bid64_mul("4", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_mul("4", "QNaN", "-Infinity", "[7c00000000000000]", "00")
    self.bid64_mul("4", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_mul("4", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_mul("4", "SNaN", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_mul("0", "1001001001001001E-383", "999E-18", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("1", "1001001001001001E-383", "999E-18", "999999999999999E-398", "0x30")
    self.bid64_mul("2", "1001001001001001E-383", "999E-18", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("3", "1001001001001001E-383", "999E-18", "999999999999999E-398", "0x30")
    self.bid64_mul("4", "1001001001001001E-383", "999E-18", "1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("0", "1001001001001001E-383", "-999E-18", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("1", "1001001001001001E-383", "-999E-18", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("2", "1001001001001001E-383", "-999E-18", "-999999999999999E-398", "0x30")
    self.bid64_mul("3", "1001001001001001E-383", "-999E-18", "-999999999999999E-398", "0x30")
    self.bid64_mul("4", "1001001001001001E-383", "-999E-18", "-1000000000000000E-398", "0x30", underflowBeforeOnly: true)
    self.bid64_mul("1", "[6000000000000000]", "1E-1", "900719925474099E-398", "30")
    self.bid64_mul("0", "[6000000000000000]", "1E-1", "900719925474099E-398", "30")
    self.bid64_mul("1", "123456789877675", "333444", "4116592584397146E+4", "20")
    self.bid64_mul("0", "12345678987767", "707", "8728395044351269", "00")
    self.bid64_mul("0", "123456789877700", "4899992", "6049372827464110E+5", "20")
    self.bid64_mul("0", "111111111111111", "7078", "7864444444444437E+2", "20")
  }

  private func bid64_mul(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._multiplied(by: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_nan() {
    self.bid64_nan("0", "0", "[7c00000000000000]", "00")
    self.bid64_nan("0", "1", "[7c00000000000001]", "00")
    self.bid64_nan("0", "NULL", "[7c00000000000000]", "00")
  }

  private func bid64_nan(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let payload = arg0.bid & Decimal64.nanPayloadMask
    let result = Decimal64(nan: payload, signaling: false)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_negate() {
    self.bid64_negate("0", "-0", "[31c0000000000000]", "00")
    self.bid64_negate("0", "0", "[b1c0000000000000]", "00")
    self.bid64_negate("0", "[0bd1000000000000]", "[8bd1000000000000]", "00")
    self.bid64_negate("0", "[0fcf000000000000]", "[8fcf000000000000]", "00")
    self.bid64_negate("0", "[13c0000000000000]", "[93c0000000000000]", "00")
    self.bid64_negate("0", "[286e30609a2e0627]", "[a86e30609a2e0627]", "00")
    self.bid64_negate("0", "[454b948762d28008]", "[c54b948762d28008]", "00")
    self.bid64_negate("0", "[51d48f690517f435]", "[d1d48f690517f435]", "00")
    self.bid64_negate("0", "[61e2cf8004a62830]", "[e1e2cf8004a62830]", "00")
    self.bid64_negate("0", "[9e592e1cd58718c1]", "[1e592e1cd58718c1]", "00")
    self.bid64_negate("0", "[b080000000000000]", "[3080000000000000]", "00")
    self.bid64_negate("0", "[b7ef8416f3c99d8b]", "[37ef8416f3c99d8b]", "00")
    self.bid64_negate("0", "[d4acd4c449d27624]", "[54acd4c449d27624]", "00")
    self.bid64_negate("0", "Infinity", "[f800000000000000]", "00")
    self.bid64_negate("0", "QNaN", "[fc00000000000000]", "00")
    self.bid64_negate("0", "SNaN", "[fe00000000000000]", "00")
  }

  private func bid64_negate(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result1 = -arg0
    self.assertEqual(result1, expected, .fuzzyStatus, file, line)

    var result2 = arg0
    result2.negate()
    self.assertEqual(result2, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_nextdown() {
    self.bid64_nextdown("0", "0", "[8000000000000001]", "00")
    self.bid64_nextdown("0", "[0c1d000000000000]", "[0c1cffffffffffff]", "00")
    self.bid64_nextdown("0", "[0d75000000000000]", "[0d74ffffffffffff]", "00")
    self.bid64_nextdown("0", "[27516c0657ef1ffd]", "[27516c0657ef1ffc]", "00")
    self.bid64_nextdown("0", "[416c58fc2e4160da]", "[416c58fc2e4160d9]", "00")
    self.bid64_nextdown("0", "[50386843f6afe19e]", "[50386843f6afe19d]", "00")
    self.bid64_nextdown("0", "[62882f9275e02fc3]", "[62882f9275e02fc2]", "00")
    self.bid64_nextdown("0", "-9.999999999999999E+384", "[f800000000000000]", "00")
    self.bid64_nextdown("0", "[c9843e391c357fde]", "[c9843e391c357fdf]", "00")
    self.bid64_nextdown("0", "[d240000000000000]", "[8000000000000001]", "00")
    self.bid64_nextdown("0", "[d31486bbc8fec197]", "[d31486bbc8fec198]", "00")
    self.bid64_nextdown("0", "[e532f9fe51c8a6a8]", "[e532f9fe51c8a6a9]", "00")
    self.bid64_nextdown("0", "[e5dbffffbfcef7ff]", "[8000000000000001]", "00")
    self.bid64_nextdown("0", "[f9eeffffffffffff]", "[f800000000000000]", "00")
    self.bid64_nextdown("0", "[fdede6ef9ff97778]", "[fc01e6ef9ff97778]", "00")
    self.bid64_nextdown("0", "[ff9fbf177bffff3f]", "[fc00000000000000]", "01")
    self.bid64_nextdown("0", "Infinity", "[77fb86f26fc0ffff]", "00")
    self.bid64_nextdown("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_nextdown(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._nextDown(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_nextup() {
    self.bid64_nextup("0", "-0", "[0000000000000001]", "00")
    self.bid64_nextup("0", "0", "[0000000000000001]", "00")
    self.bid64_nextup("0", "[0a8f000000000000]", "[0a8f000000000001]", "00")
    self.bid64_nextup("0", "[13db565cac306fea]", "[13db565cac306feb]", "00")
    self.bid64_nextup("0", "[17f282113bf9676e]", "[17f282113bf9676f]", "00")
    self.bid64_nextup("0", "[31053b4613944f66]", "[31053b4613944f67]", "00")
    self.bid64_nextup("0", "[69b57008e85ecab0]", "[0000000000000001]", "00")
    self.bid64_nextup("0", "[7a8fa7f2780e1ad1]", "[7800000000000000]", "00")
    self.bid64_nextup("0", "[8000000000000001]", "[8000000000000000]", "00")
    self.bid64_nextup("0", "[8a2dcc9108ec7029]", "[8a2dcc9108ec7028]", "00")
    self.bid64_nextup("0", "[9400000000000001]", "[e48386f26fc0ffff]", "00")
    self.bid64_nextup("0", "9.999999999999999E-383", "[00238d7ea4c68000]", "00")
    self.bid64_nextup("0", "9.999999999999999E+384", "[7800000000000000]", "00")
    self.bid64_nextup("0", "[b200000000000000]", "[0000000000000001]", "00")
    self.bid64_nextup("0", "[bd1e154561fbf070]", "[bd1e154561fbf06f]", "00")
    self.bid64_nextup("0", "[dc3ce68178886155]", "[dc3ce68178886154]", "00")
    self.bid64_nextup("0", "[de5a53458d01e348]", "[de5a53458d01e347]", "00")
    self.bid64_nextup("0", "[f15905fd8cfcf93f]", "[f15905fd8cfcf93e]", "00")
    self.bid64_nextup("0", "[fdeddfdff9ffde5f]", "[fc01dfdff9ffde5f]", "00")
    self.bid64_nextup("0", "[ff3e59edeff968f2]", "[fc0259edeff968f2]", "01")
    self.bid64_nextup("0", "[fffffffffeffffff]", "[fc00000000000000]", "01")
    self.bid64_nextup("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_nextup(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._nextUp(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_pow() {
    self.bid64_pow("0", "[0000000000000001]", "[0000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[01E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[6BF386F26FC0FFFF]", "[0000000000000001]", "30", ulp: "9.1642886701e-14")
    self.bid64_pow("0", "[0000000000000001]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[8000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[81E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[EBF386F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[0000000000000001]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "0.00001", "0.00001", "[6bf385e665521a0e]", "20", ulp: "8.309936e-02")
    self.bid64_pow("0", "0.00001", "1.1", "[2f2b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("0", "0.00001", "-1.1", "[308b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[0000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[01E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[6BF386F26FC0FFFF]", "[00038D7EA4C68058]", "20", ulp: "1.8900906168e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[8000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[81E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[EBF386F26FC0FFFF]", "[77EB86F26FC0FC8E]", "20", ulp: "1.0990938332e-01")
    self.bid64_pow("0", "[01E0000000000001]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "1.1", "0.00001", "[2fe38d7edd95afac]", "20", ulp: "2.449116e-01")
    self.bid64_pow("0", "-1.1", "0.00001", "[7c00000000000000]", "01")
    self.bid64_pow("0", "1.1", "-1.1", "[2fdffdb44b24dadf]", "20", ulp: "-2.494254e-01")
    self.bid64_pow("0", "1.1", "1.1", "[2fe3f20666f2ef70]", "20", ulp: "-2.717105e-01")
    self.bid64_pow("0", "-1.1", "-1.1", "[7c00000000000000]", "01")
    self.bid64_pow("0", "-1.1", "1.1", "[7c00000000000000]", "01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[0000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[01E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[6BF386F26FC0FFFF]", "[6BF386F26FC0FFFF]", "20", ulp: "1.0000000000e-16")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[8000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[81E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[EBF386F26FC0FFFF]", "[2FE38D7EA4C68000]", "20", ulp: "1.0000000000e-01")
    self.bid64_pow("0", "[6BF386F26FC0FFFF]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[0000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[01E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[6BF386F26FC0FFFF]", "[77FB86F26FC0FC89]", "20", ulp: "-4.9526080267e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[77FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[8000000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[81E0000000000001]", "[2FE38D7EA4C68000]", "20", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[EBF386F26FC0FFFF]", "[000009184E72A001]", "30", ulp: "-1.1250473920e-01")
    self.bid64_pow("0", "[77FB86F26FC0FFFF]", "[F7FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[7800000000000000]", "[31a000000000000a]", "[7800000000000000]", "00")
    self.bid64_pow("0", "[7800000000000100]", "[7e00000000011000]", "[7c00000000011000]", "01")
    self.bid64_pow("0", "[7800000000000100]", "[f800000000001100]", "[31c0000000000000]", "00")
    self.bid64_pow("0", "[7800000000000100]", "[fc00011000000000]", "[fc00011000000000]", "00")
    self.bid64_pow("0", "[78f0000000000000]", "[31a000000000000a]", "[7800000000000000]", "00")
    self.bid64_pow("0", "[7c00000000000000]", "[31a000000000000a]", "[7c00000000000000]", "00")
    self.bid64_pow("0", "[7c00010000000000]", "[f800000000001100]", "[7c00010000000000]", "00")
    self.bid64_pow("0", "[7c00010000000000]", "[fc00011000000000]", "[7c00010000000000]", "00")
    self.bid64_pow("0", "[7e00000000000000]", "[31a000000000000a]", "[7c00000000000000]", "01")
    self.bid64_pow("0", "[7ef0000000000000]", "[31a000000000000a]", "[7c00000000000000]", "01")
    self.bid64_pow("0", "[7effffffffefffff]", "[31a000000000000a]", "[7c00000000000000]", "01")
    self.bid64_pow("0", "[8000000000000001]", "[0000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[01E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[6BF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[8000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[81E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[EBF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[8000000000000001]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[0000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[01E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[6BF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[8000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[81E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[EBF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[81E0000000000001]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[0000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[01E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[6BF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[77FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[8000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[81E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[EBF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[EBF386F26FC0FFFF]", "[F7FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[0000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[01E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[6BF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[77FB86F26FC0FFFF]", "[7800000000000000]", "28", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[8000000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[81E0000000000001]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[EBF386F26FC0FFFF]", "[7c00000000000000]", "01", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[F7FB86F26FC0FFFF]", "[F7FB86F26FC0FFFF]", "[0000000000000000]", "30", ulp: "0.0000000000e-01")
    self.bid64_pow("0", "[fc00000000000000]", "[31a000000000000a]", "[fc00000000000000]", "00")
    self.bid64_pow("0", "[fe00000000000000]", "[31a000000000000a]", "[fc00000000000000]", "01")
    self.bid64_pow("0", "[fe00000000001000]", "[69dbb75d7734cd9e]", "[fc00000000001000]", "01")
    self.bid64_pow("0", "[fe00000000001000]", "[7e00000000011000]", "[fc00000000001000]", "01")
    self.bid64_pow("0", "[fe00000000001000]", "[e003b75d7734cd9e]", "[fc00000000001000]", "01")
    self.bid64_pow("0", "[fe00000000001000]", "[f800000000001100]", "[fc00000000001000]", "01")
    self.bid64_pow("0", "[fe00000000001000]", "[fc00011000000000]", "[fc00000000001000]", "01")
    self.bid64_pow("0", "[fef0000000000000]", "[31a000000000000a]", "[fc00000000000000]", "01")
    self.bid64_pow("0", "[feffffffffefffff]", "[31a000000000000a]", "[fc00000000000000]", "01")
    self.bid64_pow("1", "0.00001", "0.00001", "[6bf385e665521a0e]", "20", ulp: "8.309936e-02")
    self.bid64_pow("1", "0.00001", "1.1", "[2f2b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("1", "0.00001", "-1.1", "[308b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("1", "1.1", "0.00001", "[2fe38d7edd95afac]", "20", ulp: "2.449116e-01")
    self.bid64_pow("1", "-1.1", "0.00001", "[7c00000000000000]", "01")
    self.bid64_pow("1", "1.1", "-1.1", "[2fdffdb44b24dade]", "20", ulp: "7.505746e-01")
    self.bid64_pow("1", "1.1", "1.1", "[2fe3f20666f2ef6f]", "20", ulp: "7.282895e-01")
    self.bid64_pow("1", "-1.1", "-1.1", "[7c00000000000000]", "01")
    self.bid64_pow("1", "-1.1", "1.1", "[7c00000000000000]", "01")
    self.bid64_pow("2", "0.00001", "0.00001", "[6bf385e665521a0f]", "20", ulp: "-9.169006e-01")
    self.bid64_pow("2", "0.00001", "1.1", "[2f2b3c13249d90bc]", "20", ulp: "-6.680011e-01")
    self.bid64_pow("2", "0.00001", "-1.1", "[308b3c13249d90bc]", "20", ulp: "-6.680011e-01")
    self.bid64_pow("2", "1.1", "0.00001", "[2fe38d7edd95afad]", "20", ulp: "-7.550884e-01")
    self.bid64_pow("2", "-1.1", "0.00001", "[7c00000000000000]", "01")
    self.bid64_pow("2", "1.1", "-1.1", "[2fdffdb44b24dadf]", "20", ulp: "-2.494254e-01")
    self.bid64_pow("2", "1.1", "1.1", "[2fe3f20666f2ef70]", "20", ulp: "-2.717105e-01")
    self.bid64_pow("2", "-1.1", "-1.1", "[7c00000000000000]", "01")
    self.bid64_pow("2", "-1.1", "1.1", "[7c00000000000000]", "01")
    self.bid64_pow("3", "0.00001", "0.00001", "[6bf385e665521a0e]", "20", ulp: "8.309936e-02")
    self.bid64_pow("3", "0.00001", "1.1", "[2f2b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("3", "0.00001", "-1.1", "[308b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("3", "1.1", "0.00001", "[2fe38d7edd95afac]", "20", ulp: "2.449116e-01")
    self.bid64_pow("3", "-1.1", "0.00001", "[7c00000000000000]", "01")
    self.bid64_pow("3", "1.1", "-1.1", "[2fdffdb44b24dade]", "20", ulp: "7.505746e-01")
    self.bid64_pow("3", "1.1", "1.1", "[2fe3f20666f2ef6f]", "20", ulp: "7.282895e-01")
    self.bid64_pow("3", "-1.1", "-1.1", "[7c00000000000000]", "01")
    self.bid64_pow("3", "-1.1", "1.1", "[7c00000000000000]", "01")
    self.bid64_pow("4", "0.00001", "0.00001", "[6bf385e665521a0e]", "20", ulp: "8.309936e-02")
    self.bid64_pow("4", "0.00001", "1.1", "[2f2b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("4", "0.00001", "-1.1", "[308b3c13249d90bb]", "20", ulp: "3.319989e-01")
    self.bid64_pow("4", "1.1", "0.00001", "[2fe38d7edd95afac]", "20", ulp: "2.449116e-01")
    self.bid64_pow("4", "-1.1", "0.00001", "[7c00000000000000]", "01")
    self.bid64_pow("4", "1.1", "-1.1", "[2fdffdb44b24dadf]", "20", ulp: "-2.494254e-01")
    self.bid64_pow("4", "1.1", "1.1", "[2fe3f20666f2ef70]", "20", ulp: "-2.717105e-01")
    self.bid64_pow("4", "-1.1", "-1.1", "[7c00000000000000]", "01")
    self.bid64_pow("4", "-1.1", "1.1", "[7c00000000000000]", "01")
    self.bid64_pow("0", "[B1C0000000000002]", "[31C0000000000002]", "[31C0000000000004]", "20")
    self.bid64_pow("0", "[AFE6C00A3912C000]", "[31C0000000000002]", "[2FECD3469FA3A000]", "20")
    self.bid64_pow("0", "[AFE6651728988000]", "[31C0000000000002]", "[2FEB82C349128000]", "20")
    self.bid64_pow("0", "[AFE60A24181E4000]", "[31C0000000000002]", "[2FEA44708F66A000]", "20")
    self.bid64_pow("0", "[AFE5AF3107A40000]", "[31C0000000000002]", "[2FE9184E72A00000]", "20")
    self.bid64_pow("0", "[B1A000000000000F]", "[31C0000000000002]", "[31800000000000E1]", "20")
    self.bid64_pow("0", "[AFE4F94AE6AF8000]", "[31C0000000000002]", "[2FE6F69C0FC28000]", "20")
    self.bid64_pow("0", "[AFE49E57D6354000]", "[31C0000000000002]", "[2FE6010BC9ABA000]", "20")
    self.bid64_pow("0", "[AFE44364C5BB0000]", "[31C0000000000002]", "[2FE51DAC207A0000]", "20")
    self.bid64_pow("0", "[AFE3E871B540C000]", "[31C0000000000002]", "[2FE44C7D142DA000]", "20")
    self.bid64_pow("0", "[B1C0000000000001]", "[31C0000000000002]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[AFDFF973CAFA8000]", "[31C0000000000002]", "[2FDCC6E836AE4000]", "20")
    self.bid64_pow("0", "[AFDC6BF526340000]", "[31C0000000000002]", "[2FD6BCC41E900000]", "20")
    self.bid64_pow("0", "[AFD8DE76816D8000]", "[31C0000000000002]", "[2FD1688627664000]", "20")
    self.bid64_pow("0", "[AFD550F7DCA70000]", "[31C0000000000002]", "[2FCCCA2E51310000]", "20")
    self.bid64_pow("0", "[B1A0000000000005]", "[31C0000000000002]", "[3180000000000019]", "20")
    self.bid64_pow("0", "[AFCE35FA931A0000]", "[31C0000000000002]", "[2FC5AF3107A40000]", "20")
    self.bid64_pow("0", "[AFCAA87BEE538000]", "[31C0000000000002]", "[2FBFF973CAFA8000]", "20")
    self.bid64_pow("0", "[AFC71AFD498D0000]", "[31C0000000000002]", "[2FAE35FA931A0000]", "20")
    self.bid64_pow("0", "[AFC38D7EA4C68000]", "[31C0000000000002]", "[2FA38D7EA4C68000]", "20")
    self.bid64_pow("0", "[31C0000000000000]", "[31C0000000000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FC38D7EA4C68000]", "[31C0000000000002]", "[2FA38D7EA4C68000]", "20")
    self.bid64_pow("0", "[2FC71AFD498D0000]", "[31C0000000000002]", "[2FAE35FA931A0000]", "20")
    self.bid64_pow("0", "[2FCAA87BEE538000]", "[31C0000000000002]", "[2FBFF973CAFA8000]", "20")
    self.bid64_pow("0", "[2FCE35FA931A0000]", "[31C0000000000002]", "[2FC5AF3107A40000]", "20")
    self.bid64_pow("0", "[31A0000000000005]", "[31C0000000000002]", "[3180000000000019]", "20")
    self.bid64_pow("0", "[2FD550F7DCA70000]", "[31C0000000000002]", "[2FCCCA2E51310000]", "20")
    self.bid64_pow("0", "[2FD8DE76816D8000]", "[31C0000000000002]", "[2FD1688627664000]", "20")
    self.bid64_pow("0", "[2FDC6BF526340000]", "[31C0000000000002]", "[2FD6BCC41E900000]", "20")
    self.bid64_pow("0", "[2FDFF973CAFA8000]", "[31C0000000000002]", "[2FDCC6E836AE4000]", "20")
    self.bid64_pow("0", "[31C0000000000001]", "[31C0000000000002]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[2FE3E871B540C000]", "[31C0000000000002]", "[2FE44C7D142DA000]", "20")
    self.bid64_pow("0", "[2FE44364C5BB0000]", "[31C0000000000002]", "[2FE51DAC207A0000]", "20")
    self.bid64_pow("0", "[2FE49E57D6354000]", "[31C0000000000002]", "[2FE6010BC9ABA000]", "20")
    self.bid64_pow("0", "[2FE4F94AE6AF8000]", "[31C0000000000002]", "[2FE6F69C0FC28000]", "20")
    self.bid64_pow("0", "[31A000000000000F]", "[31C0000000000002]", "[31800000000000E1]", "20")
    self.bid64_pow("0", "[2FE5AF3107A40000]", "[31C0000000000002]", "[2FE9184E72A00000]", "20")
    self.bid64_pow("0", "[2FE60A24181E4000]", "[31C0000000000002]", "[2FEA44708F66A000]", "20")
    self.bid64_pow("0", "[2FE6651728988000]", "[31C0000000000002]", "[2FEB82C349128000]", "20")
    self.bid64_pow("0", "[2FE6C00A3912C000]", "[31C0000000000002]", "[2FECD3469FA3A000]", "20")
    self.bid64_pow("0", "[31C0000000000002]", "[31C0000000000002]", "[31C0000000000004]", "20")
    self.bid64_pow("0", "[B1C0000000000002]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE6651728988000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE5AF3107A40000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE4F94AE6AF8000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE44364C5BB0000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[B1C0000000000001]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFDC6BF526340000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFD550F7DCA70000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFCE35FA931A0000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFC71AFD498D0000]", "[2FE997A2BCE4C000]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[31C0000000000000]", "[2FE997A2BCE4C000]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FC71AFD498D0000]", "[2FE997A2BCE4C000]", "[2FA49B2ED09958E2]", "20")
    self.bid64_pow("0", "[2FCE35FA931A0000]", "[2FE997A2BCE4C000]", "[2FBDEE5A578A03EF]", "20")
    self.bid64_pow("0", "[2FD550F7DCA70000]", "[2FE997A2BCE4C000]", "[2FC8F1DBA53466EA]", "20")
    self.bid64_pow("0", "[2FDC6BF526340000]", "[2FE997A2BCE4C000]", "[2FD37302F8644FC3]", "20")
    self.bid64_pow("0", "[31C0000000000001]", "[2FE997A2BCE4C000]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[2FE44364C5BB0000]", "[2FE997A2BCE4C000]", "[2FE5CFF440A657C0]", "20")
    self.bid64_pow("0", "[2FE4F94AE6AF8000]", "[2FE997A2BCE4C000]", "[2FE8D0090248C324]", "20")
    self.bid64_pow("0", "[2FE5AF3107A40000]", "[2FE997A2BCE4C000]", "[2FECA35F0C81DD7F]", "20")
    self.bid64_pow("0", "[2FE6651728988000]", "[2FE997A2BCE4C000]", "[2FF15EAE3CD3B74D]", "20")
    self.bid64_pow("0", "[31C0000000000002]", "[2FE997A2BCE4C000]", "[2FF715E9FC6C145C]", "20")
    self.bid64_pow("0", "[B1C0000000000002]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE6C00A3912C000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE6651728988000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE60A24181E4000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE5AF3107A40000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[B1A000000000000F]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE4F94AE6AF8000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE49E57D6354000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE44364C5BB0000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[AFE3E871B540C000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[B1C0000000000001]", "[31C0000200000002]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[AFDFF973CAFA8000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFDC6BF526340000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFD8DE76816D8000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFD550F7DCA70000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[B1A0000000000005]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFCE35FA931A0000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFCAA87BEE538000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFC71AFD498D0000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[AFC38D7EA4C68000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[31C0000000000000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FC38D7EA4C68000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FC71AFD498D0000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FCAA87BEE538000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FCE35FA931A0000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[31A0000000000005]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FD550F7DCA70000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FD8DE76816D8000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FDC6BF526340000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FDFF973CAFA8000]", "[31C0000200000002]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[31C0000000000001]", "[31C0000200000002]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[2FE3E871B540C000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE44364C5BB0000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE49E57D6354000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE4F94AE6AF8000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[31A000000000000F]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE5AF3107A40000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE60A24181E4000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE6651728988000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE6C00A3912C000]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[31C0000000000002]", "[31C0000200000002]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[B1C0000000000002]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE6651728988000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE5AF3107A40000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE4F94AE6AF8000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFE44364C5BB0000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[B1C0000000000001]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFDC6BF526340000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFD550F7DCA70000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFCE35FA931A0000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[AFC71AFD498D0000]", "[311E848000061A80]", "[7C00000000000000]", "21")
    self.bid64_pow("0", "[31C0000000000000]", "[311E848000061A80]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FC71AFD498D0000]", "[311E848000061A80]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FCE35FA931A0000]", "[311E848000061A80]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FD550F7DCA70000]", "[311E848000061A80]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[2FDC6BF526340000]", "[311E848000061A80]", "[31C0000000000000]", "20")
    self.bid64_pow("0", "[31C0000000000001]", "[311E848000061A80]", "[31C0000000000001]", "20")
    self.bid64_pow("0", "[2FE44364C5BB0000]", "[311E848000061A80]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE4F94AE6AF8000]", "[311E848000061A80]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE5AF3107A40000]", "[311E848000061A80]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[2FE6651728988000]", "[311E848000061A80]", "[7800000000000000]", "20")
    self.bid64_pow("0", "[31C0000000000002]", "[311E848000061A80]", "[7800000000000000]", "20")
    self.bid64_pow("0", "10", "10", "10000000000", "00")
    self.bid64_pow("0", "10", "15", "1000000000000000", "00")
    self.bid64_pow("0", "10", "-10", ".0000000001", "00")
    self.bid64_pow("0", "[69dbb75d7734cd9e]", "[69dbb75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[69dbb75d7734cd9e]", "[7e00000000011000]", "[7c00000000011000]", "01")
    self.bid64_pow("0", "[69dbb75d7734cd9e]", "[e003b75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[69dbb75d7734cd9e]", "[f800000000001100]", "[7800000000000000]", "00")
    self.bid64_pow("0", "[69dbb75d7734cd9e]", "[fc00011000000000]", "[fc00011000000000]", "00")
    self.bid64_pow("0", "[7800000000000100]", "[69dbb75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[7800000000000100]", "[e003b75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[7c00010000000000]", "[69dbb75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[7c00010000000000]", "[7e00000000011000]", "[7c00010000000000]", "01")
    self.bid64_pow("0", "[7c00010000000000]", "[e003b75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[e003b75d7734cd9e]", "[69dbb75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[e003b75d7734cd9e]", "[7e00000000011000]", "[7c00000000011000]", "01")
    self.bid64_pow("0", "[e003b75d7734cd9e]", "[e003b75d7734cd9e]", "[31c0000000000001]", "00")
    self.bid64_pow("0", "[e003b75d7734cd9e]", "[f800000000001100]", "[7800000000000000]", "00")
    self.bid64_pow("0", "[e003b75d7734cd9e]", "[fc00011000000000]", "[fc00011000000000]", "00")
    self.bid64_pow("0", "[f800000000000000]", "[31a000000000000a]", "[f800000000000000]", "00")
    self.bid64_pow("0", "[f8f0000000000000]", "[31a000000000000a]", "[f800000000000000]", "00")
    self.bid64_pow("0", "[fb4f3039f2866c3e]", "[4012861010100000]", "[7800000000000000]", "00")
    self.bid64_pow("0", "[fb4f3039f2866c3e]", "[4012861010100000]", "[7800000000000000]", "00")
    self.bid64_pow("0", "1", "2", "1", "00")
    self.bid64_pow("0", "2", "[7c038d7ea4c68000]", "[7c00000000000000]", "00")
    self.bid64_pow("0", "-1", "Inf", "1", "00")
    self.bid64_pow("0", "0.5", "Inf", "0", "00")
    self.bid64_pow("0", "2", "Inf", "Inf", "00")
    self.bid64_pow("0", "Inf", "-2", "0", "00")
    self.bid64_pow("0", "-0", "3", "-0", "00")
    self.bid64_pow("0", "-2", "1", "-2", "00")
    self.bid64_pow("0", "-0", "-3", "-Inf", "04")
    self.bid64_pow("0", "-0", "-2", "Inf", "04")
    self.bid64_pow("0", "2", "[318000000000044c]", "2048", "00")
  }

  private func bid64_pow(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._pow(exponent: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .relativeError, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .relativeError, file, line)
  }

  func test_bid64_quantize() {
    self.bid64_quantize("0", "[0010000000008840]", "[0008200000000000]", "[0010000000008840]", "00")
    self.bid64_quantize("0", "+0.100000000000000E0", "0", "[31c0000000000000]", "20")
    self.bid64_quantize("0", "[0167328ec74f5201]", "[0d32c63ff6c58ba1]", "[0d20000000000000]", "20")
    self.bid64_quantize("0", "[03e6e9b66952848c]", "[0400242300900000]", "[0400b0f8a421da0e]", "00")
    self.bid64_quantize("0", "[0485504280bb0225]", "[85f3d5406802cad2]", "[05e0000000003a6c]", "20")
    self.bid64_quantize("0", "[0b6d7dab3757f95c]", "[0f1a000000000000]", "[0f00000000000000]", "20")
    self.bid64_quantize("0", "-0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "0", "Infinity", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "+10000.001E0", "0", "[31c0000000002710]", "20")
    self.bid64_quantize("0", "[110a535b742fee25]", "[0aa0000000000000]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "+11100.0111E0", "-0", "[31c0000000002b5c]", "20")
    self.bid64_quantize("0", "[17000f3000025e50]", "[5b3c7bbf7fffff77]", "[5b20000000000000]", "20")
    self.bid64_quantize("0", "[2af0b487dd543b7c]", "[5a20000000000000]", "[5a20000000000000]", "20")
    self.bid64_quantize("0", "[3382796ae8b5f696]", "[a718b8eccb75970d]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "-44789898.69E0", "-0", "[b1c0000002ab708b]", "20")
    self.bid64_quantize("0", "[54b861b448ed7806]", "[76d8e792243cb35a]", "[5b60000000000000]", "20")
    self.bid64_quantize("0", "+577897888665.59E0", "-0", "[31c000868d65fb9a]", "20")
    self.bid64_quantize("0", "+69.667775E0", "-0", "[31c0000000000046]", "20")
    self.bid64_quantize("0", "[6cde250888583608]", "[9fdbfffa18e44757]", "[1fc0000000000000]", "00")
    self.bid64_quantize("0", "[6e6139b93f663de3]", "[39933e55842625b8]", "[6e6139b93f663de3]", "00")
    self.bid64_quantize("0", "[70ab1534b98dc139]", "[c273ea4f5b38e5dd]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "[7741a8b50a4fc84f]", "[0000000000000000]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "[7800000000000000]", "[7800000000000001]", "[7800000000000000]", "00")
    self.bid64_quantize("0", "[7800000000000000]", "[7800000000000001]", "Infinity", "00")
    self.bid64_quantize("0", "[7800000000000001]", "[7800000000000000]", "[7800000000000000]", "00")
    self.bid64_quantize("0", "[87e8242e00822b4d]", "[0811f662040a12af]", "[8800d06b000d0454]", "20")
    self.bid64_quantize("0", "+889988989.89E0", "0", "[31c00000350c277e]", "20")
    self.bid64_quantize("0", "-89.9E0", "0", "[b1c000000000005a]", "20")
    self.bid64_quantize("0", "-998888.8E0", "0", "[b1c00000000f3de9]", "20")
    self.bid64_quantize("0", "+99989998.8E0", "-0", "[31c0000005f5b9ef]", "20")
    self.bid64_quantize("0", "[99eb9b73a3a105fb]", "[3bf36ab52824feaf]", "[bbe0000000000000]", "20")
    self.bid64_quantize("0", "[9b06bd679787ce84]", "[deddf11e9df0da97]", "[dec0000000000000]", "20")
    self.bid64_quantize("0", "[ac40000000000000]", "[23d0f641a05e8f21]", "[a3c0000000000000]", "00")
    self.bid64_quantize("0", "[afffefb7fffbfdff]", "[300838292921e020]", "[b00331926665ffcd]", "20")
    self.bid64_quantize("0", "[d7ea632b148b7c26]", "[41c0000000000000]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "[f800000000000001]", "[7800000000000000]", "[f800000000000000]", "00")
    self.bid64_quantize("0", "[fbfffffffffffffd]", "[09000c1046401000]", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "[fffffbffffffffff]", "[ffffffffffffffff]", "[fc00000000000000]", "01")
    self.bid64_quantize("0", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "Infinity", "0", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "Infinity", "Infinity", "[7800000000000000]", "00")
    self.bid64_quantize("0", "-Infinity", "Infinity", "[f800000000000000]", "00")
    self.bid64_quantize("0", "-Infinity", "QNaN", "[7c00000000000000]", "00")
    self.bid64_quantize("0", "QNaN", "0", "[7c00000000000000]", "00")
    self.bid64_quantize("0", "QNaN", "Infinity", "[7c00000000000000]", "00")
    self.bid64_quantize("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_quantize("0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_quantize("1", "[91b300e0d5222151]", "[11effd5a146da9fe]", "[91e030a6169c8056]", "20")
    self.bid64_quantize("1", "[bfb7e5bcbdde7fac]", "[bfdffffffffefffb]", "[bfc263c612fca65e]", "00")
    self.bid64_quantize("2", "[0000403100001024]", "[c192e20b1f4c8c3b]", "[4180000000000001]", "20")
    self.bid64_quantize("2", "[91b300e0d5222151]", "[11effd5a146da9fe]", "[91e030a6169c8055]", "20")
    self.bid64_quantize("2", "[b1a9ff477a0846d9]", "[45efeb47474a92dd]", "[c5e0000000000000]", "20")
    self.bid64_quantize("2", "[bfb7e5bcbdde7fac]", "[bfdffffffffefffb]", "[bfc263c612fca65e]", "00")
  }

  private func bid64_quantize(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._quantize(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_equal() {
    self.bid64_quiet_equal("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_equal("0", "[0000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[0000000200000004]", "[0000800016040482]", "0", "00")
    self.bid64_quiet_equal("0", "[0400000442000003]", "[d635d1fff9a6abcb]", "0", "00")
    self.bid64_quiet_equal("0", "[08d3000000000000]", "[c04e67a2b17156a5]", "0", "00")
    self.bid64_quiet_equal("0", "[0dff96e444f61932]", "[bd91d106a8c6b211]", "0", "00")
    self.bid64_quiet_equal("0", "-0", "-Infinity", "0", "00")
    self.bid64_quiet_equal("0", "-0", "Infinity", "0", "00")
    self.bid64_quiet_equal("0", "-0", "QNaN", "0", "00")
    self.bid64_quiet_equal("0", "[16e4170cab0c0531]", "[35b7c541a075794d]", "0", "00")
    self.bid64_quiet_equal("0", "[1902680820000864]", "[739abc3de12e2514]", "0", "00")
    self.bid64_quiet_equal("0", "[205ae8d55a73873b]", "[a294f00a5abaf5ec]", "0", "00")
    self.bid64_quiet_equal("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_equal("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[31a0000000000002]", "[31a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[31a0000000000002]", "[31a0000000000003]", "0", "00")
    self.bid64_quiet_equal("0", "[31a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[31a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_equal("0", "[31a000000000000a]", "[32c0000000000064]", "0", "00")
    self.bid64_quiet_equal("0", "[32c0000000000064]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[33a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[33a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[371ecf80b6faa5cf]", "[9010fe1fc236f487]", "0", "00")
    self.bid64_quiet_equal("0", "[39e523b840a059e2]", "[f3fdb7e7b3d9fc9f]", "0", "00")
    self.bid64_quiet_equal("0", "[56e079b17de74023]", "[0040000400002000]", "0", "00")
    self.bid64_quiet_equal("0", "[69c5c17372ebaafc]", "[046d01bce8945073]", "0", "00")
    self.bid64_quiet_equal("0", "[6b961e4dbb51b27a]", "[7396b958dc00b5bd]", "1", "00")
    self.bid64_quiet_equal("0", "[7800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[7800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_equal("0", "[7800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[7800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[7bfeffbeb5b8fbff]", "[7aa096b1d185bf07]", "1", "00")
    self.bid64_quiet_equal("0", "[8000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[8000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[8000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_equal("0", "[8000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[8000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_equal("0", "[8000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[868f68fe651e2f1b]", "[8508dc8d1ee747d9]", "0", "00")
    self.bid64_quiet_equal("0", "[8f32c321cbb82e65]", "[0c8f68da6718ffa0]", "0", "00")
    self.bid64_quiet_equal("0", "[ab0982a116a14477]", "[28b1b1b5cc7035e9]", "0", "00")
    self.bid64_quiet_equal("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_equal("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a0000000000002]", "[b1a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a0000000000002]", "[b1a0000000000003]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_equal("0", "[b1a000000000000a]", "[b2c0000000000064]", "0", "00")
    self.bid64_quiet_equal("0", "[b2c0000000000064]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_equal("0", "[b3a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[b3a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[bf8625c755752146]", "[bfdfdb6b3f9ffebe]", "0", "00")
    self.bid64_quiet_equal("0", "[c83db291cbb7c308]", "[cc7cacdaa2fe8b27]", "0", "00")
    self.bid64_quiet_equal("0", "[db80000000000000]", "[248593e6120db52f]", "0", "00")
    self.bid64_quiet_equal("0", "[e0a2410215030482]", "[137422bcc4d7bc1f]", "0", "00")
    self.bid64_quiet_equal("0", "[f800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[f800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[f800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_equal("0", "[f800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_equal("0", "[fffd6afb6edffdef]", "[57bf43f437650246]", "0", "01")
    self.bid64_quiet_equal("0", "-Infinity", "0", "0", "00")
    self.bid64_quiet_equal("0", "-Infinity", "SNaN", "0", "01")
    self.bid64_quiet_equal("0", "Infinity", "SNaN", "0", "01")
    self.bid64_quiet_equal("0", "QNaN", "Infinity", "0", "00")
    self.bid64_quiet_equal("0", "SNaN", "-0", "0", "01")
    self.bid64_quiet_equal("0", "SNaN", "QNaN", "0", "01")
  }

  private func bid64_quiet_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isEqual(to: arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_greater() {
    self.bid64_quiet_greater("0", "[0000000000000000]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_greater("0", "[0000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater("0", "[0000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater("0", "[0000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_greater("0", "[0000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[0000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_greater("0", "[0000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[0020000200081004]", "[e77f7f7ffffefb7f]", "1", "00")
    self.bid64_quiet_greater("0", "[0800000000c42184]", "[5789698ef7cd5f64]", "0", "00")
    self.bid64_quiet_greater("0", "[0a72000000000000]", "[a4b73fcb7660f2a0]", "1", "00")
    self.bid64_quiet_greater("0", "[0e2c000000000000]", "[22a788d9e4a65b58]", "0", "00")
    self.bid64_quiet_greater("0", "-0", "Infinity", "0", "00")
    self.bid64_quiet_greater("0", "0", "Infinity", "0", "00")
    self.bid64_quiet_greater("0", "[1011000008130020]", "[008001003001089c]", "1", "00")
    self.bid64_quiet_greater("0", "[25a0000000000000]", "[9a3d4ea561294a4f]", "1", "00")
    self.bid64_quiet_greater("0", "[2b1cebc95eae12f2]", "[a86fa61712c3ebeb]", "1", "00")
    self.bid64_quiet_greater("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_greater("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_greater("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater("0", "[31a0000000000002]", "[31a0000000000001]", "1", "00")
    self.bid64_quiet_greater("0", "[31a0000000000002]", "[31a0000000000003]", "0", "00")
    self.bid64_quiet_greater("0", "[31a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater("0", "[31a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_greater("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_greater("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_greater("0", "[31a000000000000a]", "[32c0000000000064]", "0", "00")
    self.bid64_quiet_greater("0", "[32c0000000000064]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater("0", "[33a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[33a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[390a149a36e2ed43]", "[3a88130691554406]", "0", "00")
    self.bid64_quiet_greater("0", "[3b40c1a859704636]", "[68d1cec2cb1331b6]", "1", "00")
    self.bid64_quiet_greater("0", "[3cfcefb5730c11be]", "[56b95d7479f1b9cf]", "0", "00")
    self.bid64_quiet_greater("0", "[4913f3cd899ee944]", "[7a11c1682482e2af]", "0", "00")
    self.bid64_quiet_greater("0", "[4d778c661a5fdfa2]", "[0018040082100414]", "1", "00")
    self.bid64_quiet_greater("0", "[4f40000000000000]", "[7190443efdd5536c]", "0", "00")
    self.bid64_quiet_greater("0", "[60d0c00289800340]", "[3201559da16e5a4c]", "0", "00")
    self.bid64_quiet_greater("0", "[661b41b6fcc22c2f]", "[f18a76489c92bb16]", "1", "00")
    self.bid64_quiet_greater("0", "[70a30ecddb65d4ee]", "[6192c5cf27bb1aa8]", "1", "00")
    self.bid64_quiet_greater("0", "[7800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[7800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[7800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[7800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[7bffff6ffbfbffff]", "[b8ff76db12202792]", "1", "00")
    self.bid64_quiet_greater("0", "[8000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater("0", "[8000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater("0", "[8000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_greater("0", "[8000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[8000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_greater("0", "[8000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater("0", "[97efffd7dbfefdf7]", "[2078317b44710090]", "0", "00")
    self.bid64_quiet_greater("0", "[a1a7b29c62766226]", "[88be332b7ccd087e]", "0", "00")
    self.bid64_quiet_greater("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_greater("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater("0", "[b1a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater("0", "[b1a0000000000002]", "[b1a0000000000001]", "0", "00")
    self.bid64_quiet_greater("0", "[b1a0000000000002]", "[b1a0000000000003]", "1", "00")
    self.bid64_quiet_greater("0", "[b1a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_greater("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_greater("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_greater("0", "[b1a000000000000a]", "[b2c0000000000064]", "1", "00")
    self.bid64_quiet_greater("0", "[b2c0000000000064]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater("0", "[b3a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[b3a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[bc4dffe96dff7f55]", "[bbfbfdf76df9d7eb]", "0", "00")
    self.bid64_quiet_greater("0", "[d2c96fa29804e7aa]", "[e240000200026404]", "0", "00")
    self.bid64_quiet_greater("0", "[dd60000000000000]", "[e381f7fc49b0aa04]", "1", "00")
    self.bid64_quiet_greater("0", "[ec6dee52ed58a0c3]", "[f6ffdff7af9fff6b]", "0", "00")
    self.bid64_quiet_greater("0", "[f0a05f4844ed3c37]", "[cff6f2bd6fbffd7c]", "1", "00")
    self.bid64_quiet_greater("0", "[f375521ecb2f50cc]", "[33373fcf8db37b8d]", "0", "00")
    self.bid64_quiet_greater("0", "[f800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[f800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[f800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[f800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_greater("0", "[fbf7fdfffbffffdf]", "[0208100000810000]", "0", "00")
    self.bid64_quiet_greater("0", "[fffffffff7ffffff]", "[001b080478f00400]", "0", "01")
    self.bid64_quiet_greater("0", "-Infinity", "QNaN", "0", "00")
    self.bid64_quiet_greater("0", "QNaN", "-0", "0", "00")
    self.bid64_quiet_greater("0", "SNaN", "-0", "0", "01")
    self.bid64_quiet_greater("0", "SNaN", "0", "0", "01")
    self.bid64_quiet_greater("0", "SNaN", "-Infinity", "0", "01")
    self.bid64_quiet_greater("0", "SNaN", "Infinity", "0", "01")
  }

  private func bid64_quiet_greater(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLess(than: arg0, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_greater_equal() {
    self.bid64_quiet_greater_equal("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000000]", "[79c75ae0ede38af6]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0000000000000050]", "[0020000000000008]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[088d088818102bc1]", "[6080814000628380]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[0a80000009004608]", "[166cd59811cacfd9]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[0dbb3da4645de750]", "[9f67143eafaabc58]", "1", "00")
    self.bid64_quiet_greater_equal("0", "-0", "SNaN", "0", "01")
    self.bid64_quiet_greater_equal("0", "1", "1.0", "1", "00")
    self.bid64_quiet_greater_equal("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[31a0000000000002]", "[31a0000000000001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[31a0000000000002]", "[31a0000000000003]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[31a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[31a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[31a000000000000a]", "[32c0000000000064]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[32c0000000000064]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[33a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[33a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[343cf06e2045b93c]", "[df80df78bcf9c7e5]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[5d4c168f01869bb6]", "[8b00000000000000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[7800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[7800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[7800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[7800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[7b69be7fa1fcbb0f]", "[810fe5406a8c1366]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[8000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[83857e6455aa3312]", "[d48ed01cbb28b026]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[8fa8d17bdc9e87b8]", "[349df9706fe32722]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[936c3c3eb4fdc8ad]", "[944a690a765c6030]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[a6cea894611e8957]", "[af0fb90cfa58be3e]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[a9a50477edffb6d2]", "[61a14eae886fc0e6]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[ab80000000000000]", "[119da30afc0820d0]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b042289689140720]", "[ae928a3df5d03522]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b1a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b1a0000000000002]", "[b1a0000000000001]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b1a0000000000002]", "[b1a0000000000003]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[b1a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[b1a000000000000a]", "[b2c0000000000064]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[b2c0000000000064]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b3a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[b3a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[bc1458ce30c4a0a3]", "[a880000000000000]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[bd67b65505c44b9c]", "[b1580edd103b8052]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[c2c23cefae45602a]", "[e37bcbb42f26af04]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[c52708b980dc3b19]", "[b93562b3e6996ab0]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[ea8759f32a607df2]", "[0100000000000000]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[efb2734ae8bc87e0]", "[e938e06f06b218b1]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[f442d7bfcf31b7dd]", "[d91acbf2f674cc64]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[f77f7fd3fa17dd69]", "[020caa0e24300980]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[f800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[f800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[f800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[f800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_equal("0", "[f88efdfad52ae1e9]", "[ddbfa8d02e03367e]", "0", "00")
    self.bid64_quiet_greater_equal("0", "[ffadfef7ffbfcbff]", "[2008000000000000]", "0", "01")
    self.bid64_quiet_greater_equal("0", "-Infinity", "0", "0", "00")
    self.bid64_quiet_greater_equal("0", "Infinity", "0", "1", "00")
    self.bid64_quiet_greater_equal("0", "-Infinity", "SNaN", "0", "01")
    self.bid64_quiet_greater_equal("0", "Infinity", "SNaN", "0", "01")
    self.bid64_quiet_greater_equal("0", "SNaN", "-0", "0", "01")
    self.bid64_quiet_greater_equal("0", "SNaN", "+11.001E0", "0", "01")
  }

  private func bid64_quiet_greater_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLessThanOrEqualTo(arg0, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_greater_unordered() {
    self.bid64_quiet_greater_unordered("0", "[0000000000000000]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[0000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[0112d90c2000002a]", "[0240044c00002402]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[01a8e90200000012]", "[00110c3f40f121e1]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[02aeb5e4dff5d590]", "[1b00000000000000]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[093cafbb19db4794]", "[505ea0008c65a960]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[0988000000000000]", "[26fb0af95803dfc5]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[0b0c4e0a5ac21810]", "[05ed3783549f48c1]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "-0", "Infinity", "0", "00")
    self.bid64_quiet_greater_unordered("0", "0", "Infinity", "0", "00")
    self.bid64_quiet_greater_unordered("0", "0", "QNaN", "1", "00")
    self.bid64_quiet_greater_unordered("0", "0", "SNaN", "1", "01")
    self.bid64_quiet_greater_unordered("0", "1.0", "1", "0", "00")
    self.bid64_quiet_greater_unordered("0", "1", "1.0", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[18d62bc549bd29ec]", "[2d90647c797f2e9f]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[2488a4a6f6eb23fb]", "[0a0bb83de7383c86]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[28c861665f3d672c]", "[2739dc40ea0f8774]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[2c20000000000000]", "[2b6e4bc28a17db10]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[2de577498e5405ef]", "[71a824ed9f697670]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[31a0000000000002]", "[31a0000000000001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[31a0000000000002]", "[31a0000000000003]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[31a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[31a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[31a000000000000a]", "[32c0000000000064]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[32c0000000000064]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[33a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[33a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[3aa4770bd8028886]", "[bc987061b28f64e2]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[5abfaeccd5ab94f9]", "[75cf974e9ff797a1]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[5bd3a4efe57d1eb2]", "[08200080102000a0]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[5fc6da5374a38ee1]", "[07d942a58278e500]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[69517be8743189d1]", "[500b1de303150498]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[7800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[7800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[7800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[7800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[7b205536141243c4]", "[67e7f96fefcffbff]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[8000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[9fa6ce84bb0eb14e]", "[230e2568612228e4]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[a1f1ad78d4f17021]", "[63da2c91cb28c29d]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[af8e39b893f25277]", "[40a0000000000000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a0000000000002]", "[b1a0000000000001]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a0000000000002]", "[b1a0000000000003]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[b1a000000000000a]", "[b2c0000000000064]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[b2c0000000000064]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b3a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b3a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[b7fffffd7ffffbff]", "[fa125be2eacf7f4e]", "1", "00")
    self.bid64_quiet_greater_unordered("0", "[e8750721a9f7adef]", "[4c0489ea867926ac]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[e9fe8ad0a5afcbb2]", "[e084ac6f8fb9f793]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[f800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[f800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[f800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[f800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[f8169eb30860a09b]", "[cee33829b453621a]", "0", "00")
    self.bid64_quiet_greater_unordered("0", "[fbffefde9fbfffbf]", "[ffffff3ffffffeff]", "1", "01")
    self.bid64_quiet_greater_unordered("0", "-Infinity", "-0", "0", "00")
    self.bid64_quiet_greater_unordered("0", "Infinity", "+0.E0", "1", "00")
    self.bid64_quiet_greater_unordered("0", "-Infinity", "QNaN", "1", "00")
    self.bid64_quiet_greater_unordered("0", "SNaN", "-Infinity", "1", "01")
  }

  private func bid64_quiet_greater_unordered(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLessThanOrEqualTo(arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_less() {
    self.bid64_quiet_less("0", "-0", "-0", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000000]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less("0", "[0000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000000]", "[dd07b3a4d3ef27fe]", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[0000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_less("0", "[0000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less("0", "-0", "-0.E0", "0", "00")
    self.bid64_quiet_less("0", "[0100008000000042]", "[00a0040008010001]", "0", "00")
    self.bid64_quiet_less("0", "-0", "-Infinity", "0", "00")
    self.bid64_quiet_less("0", "-0", "SNaN", "0", "01")
    self.bid64_quiet_less("0", "1.0", "1", "0", "00")
    self.bid64_quiet_less("0", "1", "1.0", "0", "00")
    self.bid64_quiet_less("0", "[1c36c22b18aa559e]", "[3a3ade39070c25da]", "1", "00")
    self.bid64_quiet_less("0", "[200819ba02c4127e]", "[05638210db876a12]", "0", "00")
    self.bid64_quiet_less("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_less("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less("0", "[30e297691009e893]", "[0ea2000000000000]", "0", "00")
    self.bid64_quiet_less("0", "[31a0000000000002]", "[31a0000000000001]", "0", "00")
    self.bid64_quiet_less("0", "[31a0000000000002]", "[31a0000000000003]", "1", "00")
    self.bid64_quiet_less("0", "[31a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less("0", "[31a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_less("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_less("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_less("0", "[31a000000000000a]", "[32c0000000000064]", "1", "00")
    self.bid64_quiet_less("0", "[32c0000000000064]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less("0", "[33a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[33a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[3dc8a05150811b03]", "[f5f7fffff5ff7fff]", "0", "00")
    self.bid64_quiet_less("0", "[4040000802200001]", "[34e7c884e1256a01]", "0", "00")
    self.bid64_quiet_less("0", "[410c62800439b909]", "[0044080020800400]", "0", "00")
    self.bid64_quiet_less("0", "[42e0000000000000]", "[271bfc26801c6ee7]", "1", "00")
    self.bid64_quiet_less("0", "[4653f7774a1c9896]", "[f9969a795f72ff7f]", "0", "00")
    self.bid64_quiet_less("0", "[48968125103485b1]", "[a7043631810a4695]", "0", "00")
    self.bid64_quiet_less("0", "[4e468766d861c2f9]", "[217fc1053c30fcd9]", "0", "00")
    self.bid64_quiet_less("0", "[5e4ef8e5faad9c8e]", "[3d87d1b9798e5d45]", "0", "00")
    self.bid64_quiet_less("0", "[6000004000001020]", "[80e01394820566eb]", "0", "00")
    self.bid64_quiet_less("0", "[7800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[7800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[7800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[7800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less("0", "-798668569958588.57E0", "SNaN", "0", "01")
    self.bid64_quiet_less("0", "[7bc77713f826f7aa]", "[bfffbfffefedffdf]", "0", "00")
    self.bid64_quiet_less("0", "[8000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less("0", "[8000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less("0", "[8000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_less("0", "[8000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[8000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_less("0", "[8000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[831d1418d24bddef]", "[a2c73c875f04fca7]", "0", "00")
    self.bid64_quiet_less("0", "[86801160524d1903]", "[97905a3f05a0c81a]", "0", "00")
    self.bid64_quiet_less("0", "[943356540bde9e38]", "[82c2c59c2c2a94db]", "1", "00")
    self.bid64_quiet_less("0", "[abff9fea79793f6f]", "[acf69f12914d342b]", "0", "00")
    self.bid64_quiet_less("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_less("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_less("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less("0", "[b1a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less("0", "[b1a0000000000002]", "[b1a0000000000001]", "1", "00")
    self.bid64_quiet_less("0", "[b1a0000000000002]", "[b1a0000000000003]", "0", "00")
    self.bid64_quiet_less("0", "[b1a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_less("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_less("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_less("0", "[b1a000000000000a]", "[b2c0000000000064]", "0", "00")
    self.bid64_quiet_less("0", "[b2c0000000000064]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less("0", "[b3a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[b3a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[c8fac5473438491d]", "[3a216342c3ffb3d1]", "1", "00")
    self.bid64_quiet_less("0", "[d7abf7fffeffbecc]", "[62086b5eae3078b3]", "1", "00")
    self.bid64_quiet_less("0", "[eda7ff6f0fa337dd]", "[616661635da49f12]", "0", "00")
    self.bid64_quiet_less("0", "[f1ba26e7702b40f4]", "[b26ffd20905789b3]", "1", "00")
    self.bid64_quiet_less("0", "[f800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[f800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[f800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_less("0", "[f800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less("0", "[fafff3ebbdfffffc]", "[39da2e0006594434]", "1", "00")
    self.bid64_quiet_less("0", "[fe62d71bef2bf5bf]", "[68a8c1c89872a385]", "0", "01")
    self.bid64_quiet_less("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_quiet_less("0", "Infinity", "QNaN", "0", "00")
    self.bid64_quiet_less("0", "QNaN", "-10.00000001E0", "0", "00")
    self.bid64_quiet_less("0", "SNaN", "-0", "0", "01")
    self.bid64_quiet_less("0", "SNaN", "-Infinity", "0", "01")
  }

  private func bid64_quiet_less(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLess(than: arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_less_equal() {
    self.bid64_quiet_less_equal("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000000]", "[f77d5ecfffc77ea3]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_less_equal("0", "[0000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[0000200c00080102]", "[04723cf97482a596]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0040043848002010]", "[0004000800820a0c]", "1", "00")
    self.bid64_quiet_less_equal("0", "[038158a18005d416]", "[1400000160400000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0409d099a0b8d35c]", "[0aca000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[080000181000808c]", "[70316d6498db9967]", "1", "00")
    self.bid64_quiet_less_equal("0", "[088b7b0380800201]", "[79d4f95fc418888a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0a5e000000000000]", "[1b7c5deecfcedaba]", "1", "00")
    self.bid64_quiet_less_equal("0", "[0f3c8d2d0bbcd537]", "[f33b244aff0a98ab]", "0", "00")
    self.bid64_quiet_less_equal("0", "-0", "Infinity", "1", "00")
    self.bid64_quiet_less_equal("0", "-0", "SNaN", "0", "01")
    self.bid64_quiet_less_equal("0", "1.0", "1", "1", "00")
    self.bid64_quiet_less_equal("0", "1", "1.0", "1", "00")
    self.bid64_quiet_less_equal("0", "[1b51efda47f74eea]", "[28c0000000000000]", "0", "00")
    self.bid64_quiet_less_equal("0", "[2ab601e84d808511]", "[225e5aff75e16cec]", "0", "00")
    self.bid64_quiet_less_equal("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less_equal("0", "[31a0000000000002]", "[31a0000000000001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[31a0000000000002]", "[31a0000000000003]", "1", "00")
    self.bid64_quiet_less_equal("0", "[31a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[31a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_less_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[31a000000000000a]", "[32c0000000000064]", "1", "00")
    self.bid64_quiet_less_equal("0", "[32c0000000000064]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less_equal("0", "[33a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[33a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[55d044d49523c220]", "[ef46026a589290ef]", "0", "00")
    self.bid64_quiet_less_equal("0", "[661216d9f9a7570d]", "[88d81f7c9ea44704]", "0", "00")
    self.bid64_quiet_less_equal("0", "[7800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[7800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[7800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[7800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[7bb18060f756c2a8]", "[d6c3f4d840b8f614]", "0", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[8000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_equal("0", "[80a0000000000000]", "[0bec22a4116866c3]", "1", "00")
    self.bid64_quiet_less_equal("0", "[85fffcd360b7023c]", "[cb5faf46abd848e8]", "0", "00")
    self.bid64_quiet_less_equal("0", "[8670e31ef77f91fd]", "[8800100000000000]", "0", "00")
    self.bid64_quiet_less_equal("0", "[8a8b7cc95de11d06]", "[08cb000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[9c2bd10ff988ac17]", "[0be7000000000000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[a85876086cdf250a]", "[fede54253f06ebfa]", "0", "01")
    self.bid64_quiet_less_equal("0", "[afe2ff2e7fb71cbe]", "[a265cb6b5f682f7f]", "1", "00")
    self.bid64_quiet_less_equal("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_less_equal("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b1a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b1a0000000000002]", "[b1a0000000000001]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b1a0000000000002]", "[b1a0000000000003]", "0", "00")
    self.bid64_quiet_less_equal("0", "[b1a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_less_equal("0", "[b1a000000000000a]", "[b2c0000000000064]", "0", "00")
    self.bid64_quiet_less_equal("0", "[b2c0000000000064]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b3a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[b3a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[bb1e36176a12c65c]", "[0520c80a0790480b]", "1", "00")
    self.bid64_quiet_less_equal("0", "[c4a6d242e9c77268]", "[93e235204d54ac88]", "1", "00")
    self.bid64_quiet_less_equal("0", "[ed2a9a5f75a516a7]", "[edefffed7fbfffff]", "1", "00")
    self.bid64_quiet_less_equal("0", "[eeffffffbfffffff]", "[a86ba280a9e51cdf]", "0", "00")
    self.bid64_quiet_less_equal("0", "[f4f3b1f5b53fe7ef]", "[fd49a7a62ffdd76d]", "0", "00")
    self.bid64_quiet_less_equal("0", "[f800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[f800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[f800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[f800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_less_equal("0", "[fa41e973c0208409]", "[057e571a5a24d94d]", "1", "00")
    self.bid64_quiet_less_equal("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_quiet_less_equal("0", "Infinity", "SNaN", "0", "01")
    self.bid64_quiet_less_equal("0", "SNaN", "0", "0", "01")
    self.bid64_quiet_less_equal("0", "SNaN", "-Infinity", "0", "01")
    self.bid64_quiet_less_equal("0", "SNaN", "QNaN", "0", "01")
  }

  private func bid64_quiet_less_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLessThanOrEqualTo(arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_less_unordered() {
    self.bid64_quiet_less_unordered("0", "-0", "-0", "0", "00")
    self.bid64_quiet_less_unordered("0", "0", "-0", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000000]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0000015005000010]", "[0080000000001010]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[000008a000000000]", "[099d28cc18d02bc1]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[0001801200061101]", "[7bffdff4efdf7933]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[0008408000300908]", "[e68ba5eecb1f79ab]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[0010000000010200]", "[24ab1bea02ce451c]", "1", "00")
    self.bid64_quiet_less_unordered("0", "0", "-Infinity", "0", "00")
    self.bid64_quiet_less_unordered("0", "0", "Infinity", "1", "00")
    self.bid64_quiet_less_unordered("0", "1.0", "1", "0", "00")
    self.bid64_quiet_less_unordered("0", "1", "1.0", "0", "00")
    self.bid64_quiet_less_unordered("0", "[2195dc039e790784]", "[20dabbed29f3da28]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[21ed37761c3b24f3]", "[1c924b45dc6ae5e4]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[291ff9772adfa2c0]", "[ff3fffffffff7fff]", "1", "01")
    self.bid64_quiet_less_unordered("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[31a0000000000002]", "[31a0000000000001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[31a0000000000002]", "[31a0000000000003]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[31a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[31a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[31a000000000000a]", "[32c0000000000064]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[32c0000000000064]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[33a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[33a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[4480000000000000]", "[1cb6b32bc2068a45]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[4ce18c07e09640d3]", "[01ff52a6571463d1]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[6080014000020300]", "[0000c00000208000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7054a3d2162a9d97]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[72589f0cb4f54c40]", "[950fb4d0a7d28a9f]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[755885c3dc6c2107]", "[e55b5d9c0c0f9dff]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[7bbfcf2ffeffefff]", "[a18a49e05f9ae3d1]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[8000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[847650e021099d9d]", "[bb20000000000000]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[88cc6782de38676a]", "[6d08db4f0da47e89]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[8a566f20cf97c56e]", "[283247727df9b99d]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[96b77ec3f0a3b782]", "[ee8851906cb2101d]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[a23f9f5f02e2ccd7]", "[2108135d24f09100]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b1a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b1a0000000000002]", "[b1a0000000000001]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b1a0000000000002]", "[b1a0000000000003]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[b1a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[b1a000000000000a]", "[b2c0000000000064]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[b2c0000000000064]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b3a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b3a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[b3df85fd09139ed7]", "[c39679be76302fa7]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[c21c0686f842802f]", "[0e209c747666d3e1]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[ddf794b9518fa74c]", "[afff7fbbbf7fdecb]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[f4e4b9fff5ff6bf3]", "[40b99e73ac077b25]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[f800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[f800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[f800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[f800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_less_unordered("0", "[f97fff9fbfb6e6fe]", "[1480121605208010]", "1", "00")
    self.bid64_quiet_less_unordered("0", "[fdefddfbffba7eff]", "[0000820000000000]", "1", "00")
    self.bid64_quiet_less_unordered("0", "Infinity", "-0", "0", "00")
    self.bid64_quiet_less_unordered("0", "Infinity", "0", "0", "00")
    self.bid64_quiet_less_unordered("0", "-Infinity", "0", "1", "00")
    self.bid64_quiet_less_unordered("0", "Infinity", "-Infinity", "0", "00")
    self.bid64_quiet_less_unordered("0", "-Infinity", "SNaN", "1", "01")
    self.bid64_quiet_less_unordered("0", "Infinity", "SNaN", "1", "01")
    self.bid64_quiet_less_unordered("0", "QNaN", "0", "1", "00")
    self.bid64_quiet_less_unordered("0", "QNaN", "SNaN", "1", "01")
    self.bid64_quiet_less_unordered("0", "SNaN", "-0", "1", "01")
    self.bid64_quiet_less_unordered("0", "SNaN", "0", "1", "01")
    self.bid64_quiet_less_unordered("0", "SNaN", "Infinity", "1", "01")
    self.bid64_quiet_less_unordered("0", "SNaN", "QNaN", "1", "01")
  }

  private func bid64_quiet_less_unordered(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLessThanOrEqualTo(arg0, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_not_equal() {
    self.bid64_quiet_not_equal("0", "-0", "-0", "0", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000000]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000000000000004]", "[82e9810502c0a640]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0000004000000000]", "[00000000a08024a0]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0c10000000000000]", "[b06743051bf7a3df]", "1", "00")
    self.bid64_quiet_not_equal("0", "[0fb52e32023b247a]", "[49f48071779a3032]", "1", "00")
    self.bid64_quiet_not_equal("0", "-0", "-Infinity", "1", "00")
    self.bid64_quiet_not_equal("0", "0", "Infinity", "1", "00")
    self.bid64_quiet_not_equal("0", "0", "QNaN", "1", "00")
    self.bid64_quiet_not_equal("0", "[24bcc4e001c16020]", "[2205308805b74809]", "1", "00")
    self.bid64_quiet_not_equal("0", "[2b36ab6e5068294d]", "[a77f16bc09275954]", "1", "00")
    self.bid64_quiet_not_equal("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_not_equal("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a0000000000002]", "[31a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a0000000000002]", "[31a0000000000003]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_not_equal("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[31a000000000000a]", "[32c0000000000064]", "1", "00")
    self.bid64_quiet_not_equal("0", "[32c0000000000064]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[33a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[33a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[3bc61bca46baaa82]", "[515929501c09539c]", "1", "00")
    self.bid64_quiet_not_equal("0", "[519cc2bc50bf271a]", "[f3ffe7ffeffdfffd]", "1", "00")
    self.bid64_quiet_not_equal("0", "[55b2e1ff6bc05771]", "[54e0e6127a727be1]", "1", "00")
    self.bid64_quiet_not_equal("0", "[5ea38dd498b66b0a]", "[40e38574ad8137ea]", "1", "00")
    self.bid64_quiet_not_equal("0", "[66eacfdfe3bfbfdf]", "[74001309418068a0]", "1", "00")
    self.bid64_quiet_not_equal("0", "[7800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[7800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_not_equal("0", "[7800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[7800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[7a97fc33ae973060]", "[fbe7fdaf7fffffff]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[8fc0000000000000]", "[bddfe162eec6a278]", "1", "00")
    self.bid64_quiet_not_equal("0", "[9140000000000000]", "[23eec56d4bf12d4c]", "1", "00")
    self.bid64_quiet_not_equal("0", "[ac20000000000000]", "[1eb0c78ff427fce0]", "1", "00")
    self.bid64_quiet_not_equal("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_not_equal("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a0000000000002]", "[b1a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a0000000000002]", "[b1a0000000000003]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "0", "00")
    self.bid64_quiet_not_equal("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b1a000000000000a]", "[b2c0000000000064]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b2c0000000000064]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b3a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[b3a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[d06e24d55275a203]", "[3df674e056201a4a]", "1", "00")
    self.bid64_quiet_not_equal("0", "[eab8f75194d70720]", "[d484a44a25d8ea83]", "1", "00")
    self.bid64_quiet_not_equal("0", "[ef7e9e7ff7e57ea7]", "[edebd3cd31bf17ad]", "0", "00")
    self.bid64_quiet_not_equal("0", "[f800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[f800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[f800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_not_equal("0", "[f800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_not_equal("0", "[ffffeff3ffefbfff]", "[0b0180000b0a0608]", "1", "01")
    self.bid64_quiet_not_equal("0", "-Infinity", "0", "1", "00")
    self.bid64_quiet_not_equal("0", "Infinity", "Infinity", "0", "00")
    self.bid64_quiet_not_equal("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_quiet_not_equal("0", "QNaN", "-Infinity", "1", "00")
    self.bid64_quiet_not_equal("0", "QNaN", "SNaN", "1", "01")
  }

  private func bid64_quiet_not_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isEqual(to: arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_not_greater() {
    self.bid64_quiet_not_greater("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_not_greater("0", "[0000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[0008000000000010]", "[0044000420084102]", "1", "00")
    self.bid64_quiet_not_greater("0", "[02c08cc072f88105]", "[7afbffaff7dffddf]", "1", "00")
    self.bid64_quiet_not_greater("0", "[0855000000000000]", "[77812662a5418577]", "1", "00")
    self.bid64_quiet_not_greater("0", "[0dd0000000000000]", "[cdd6620b48738297]", "0", "00")
    self.bid64_quiet_not_greater("0", "-0", "Infinity", "1", "00")
    self.bid64_quiet_not_greater("0", "0", "Infinity", "1", "00")
    self.bid64_quiet_not_greater("0", "-0", "QNaN", "1", "00")
    self.bid64_quiet_not_greater("0", "1.0", "1", "1", "00")
    self.bid64_quiet_not_greater("0", "1", "1.0", "1", "00")
    self.bid64_quiet_not_greater("0", "[15a1a020d9d08862]", "[eb415661bd7323d4]", "0", "00")
    self.bid64_quiet_not_greater("0", "[17b2544c706084d0]", "[d8aeaf53e907eb7c]", "0", "00")
    self.bid64_quiet_not_greater("0", "[2001020828100028]", "[0079001020781169]", "0", "00")
    self.bid64_quiet_not_greater("0", "[23705aa4a7116bea]", "[0984000000000000]", "0", "00")
    self.bid64_quiet_not_greater("0", "[23f9dc79d291c687]", "[437e9dfb0529e6a0]", "1", "00")
    self.bid64_quiet_not_greater("0", "[2ca77a7d31a4bba0]", "[41f6de48e1c90bc7]", "1", "00")
    self.bid64_quiet_not_greater("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_greater("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_greater("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_not_greater("0", "[31a0000000000002]", "[31a0000000000001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[31a0000000000002]", "[31a0000000000003]", "1", "00")
    self.bid64_quiet_not_greater("0", "[31a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[31a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_not_greater("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[31a000000000000a]", "[32c0000000000064]", "1", "00")
    self.bid64_quiet_not_greater("0", "[32c0000000000064]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_not_greater("0", "[33a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[33a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[3f6fe96811bd1526]", "[20a846c7e2fb1c55]", "0", "00")
    self.bid64_quiet_not_greater("0", "[5234fa67778aa0ef]", "[077f7fd127562d13]", "0", "00")
    self.bid64_quiet_not_greater("0", "[582e7bee103b4ddb]", "[57bde742622e737c]", "0", "00")
    self.bid64_quiet_not_greater("0", "[68da0e389f3aae85]", "[096bababf42c72e9]", "0", "00")
    self.bid64_quiet_not_greater("0", "[6dfe42860b3c2b77]", "[f0ad7baaea5c62fc]", "1", "00")
    self.bid64_quiet_not_greater("0", "[73f0c562237c3a2a]", "[b74340ab20fd37e4]", "0", "00")
    self.bid64_quiet_not_greater("0", "[7800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[7800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[7800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[7800000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[797ffe3fe78f9f12]", "[10220012180d020b]", "0", "00")
    self.bid64_quiet_not_greater("0", "[7d9dca1981285f79]", "[0000220080008000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000000]", "[0000000000000001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000000]", "[8000000000000001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[8000000000000001]", "[f800000000000002]", "0", "00")
    self.bid64_quiet_not_greater("0", "[905d055bef217e29]", "[7ecfef9f6ffef0fd]", "1", "01")
    self.bid64_quiet_not_greater("0", "[961a220cb711514b]", "[d949bcd9ef6cc09b]", "0", "00")
    self.bid64_quiet_not_greater("0", "[ad57ffcb356affbf]", "[8dd17d40008ba367]", "1", "00")
    self.bid64_quiet_not_greater("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_not_greater("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_greater("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b1a0000000000002]", "[33a0000000000001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b1a0000000000002]", "[b1a0000000000001]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b1a0000000000002]", "[b1a0000000000003]", "0", "00")
    self.bid64_quiet_not_greater("0", "[b1a0000000000002]", "[b3a0000000000001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_not_greater("0", "[b1a000000000000a]", "[b2c0000000000064]", "0", "00")
    self.bid64_quiet_not_greater("0", "[b2c0000000000064]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b3a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b3a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[b8bb248d4f9caef1]", "[cfd9f5d1ebf426a3]", "0", "00")
    self.bid64_quiet_not_greater("0", "[cecc016e2055d370]", "[86a0000000000000]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f1100c284809058a]", "[f7f7fffeff5fffee]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f3bff9fefd73fddf]", "[204200004251a430]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[f800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_greater("0", "[fbed5aff5dfffbf9]", "[42c8756cc569f909]", "1", "00")
    self.bid64_quiet_not_greater("0", "Infinity", "0", "0", "00")
    self.bid64_quiet_not_greater("0", "-Infinity", "0", "1", "00")
    self.bid64_quiet_not_greater("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_quiet_not_greater("0", "-Infinity", "SNaN", "1", "01")
    self.bid64_quiet_not_greater("0", "QNaN", "-0", "1", "00")
    self.bid64_quiet_not_greater("0", "SNaN", "Infinity", "1", "01")
  }

  private func bid64_quiet_not_greater(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLess(than: arg0, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_quiet_not_less() {
    self.bid64_quiet_not_less("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_less("0", "[0000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_not_less("0", "[0000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_not_less("0", "[0000000000000000]", "[ffffffffffffffff]", "1", "01")
    self.bid64_quiet_not_less("0", "[0000000000000001]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_less("0", "[0000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[0000000000000001]", "[8000000000000000]", "1", "00")
    self.bid64_quiet_not_less("0", "[0000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[0000220000000000]", "[0020000000200010]", "1", "00")
    self.bid64_quiet_not_less("0", "[0100884200000008]", "[0000000200410106]", "1", "00")
    self.bid64_quiet_not_less("0", "[02ea12179796b039]", "[37825656c389e3a1]", "0", "00")
    self.bid64_quiet_not_less("0", "[0f1d5b565fac3d85]", "[211b224499c6e9e6]", "0", "00")
    self.bid64_quiet_not_less("0", "0", "SNaN", "1", "01")
    self.bid64_quiet_not_less("0", "1.0", "1", "1", "00")
    self.bid64_quiet_not_less("0", "1", "1.0", "1", "00")
    self.bid64_quiet_not_less("0", "[18e42c45c2261600]", "[666ce8a34efed9ef]", "1", "00")
    self.bid64_quiet_not_less("0", "[2fe38d7ea4c67fff]", "[31a000000000000a]", "0", "00")
    self.bid64_quiet_not_less("0", "[2fe38d7ea4c68000]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_less("0", "[2fe38d7ea4c68001]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_less("0", "[31a0000000000002]", "[31a0000000000001]", "1", "00")
    self.bid64_quiet_not_less("0", "[31a0000000000002]", "[31a0000000000003]", "0", "00")
    self.bid64_quiet_not_less("0", "[31a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_not_less("0", "[31a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_not_less("0", "[31a000000000000a]", "[2fe38d7ea4c67fff]", "1", "00")
    self.bid64_quiet_not_less("0", "[31a000000000000a]", "[2fe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_not_less("0", "[31a000000000000a]", "[2fe38d7ea4c68001]", "0", "00")
    self.bid64_quiet_not_less("0", "[31a000000000000a]", "[32c0000000000064]", "0", "00")
    self.bid64_quiet_not_less("0", "[32c0000000000064]", "[31a000000000000a]", "1", "00")
    self.bid64_quiet_not_less("0", "[33a0000000000001]", "[31a0000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[33a0000000000001]", "[b1a0000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[3734fe4259377e65]", "[22bfa368c92decd3]", "1", "00")
    self.bid64_quiet_not_less("0", "[3f4ff544eefbe59d]", "[69a928427e939dbe]", "1", "00")
    self.bid64_quiet_not_less("0", "[4b9171484850b01f]", "[50229060d249e019]", "0", "00")
    self.bid64_quiet_not_less("0", "[7489ef8022b6ae96]", "[9f7677df7728693d]", "1", "00")
    self.bid64_quiet_not_less("0", "[75742e552714481d]", "[0000000000000000]", "1", "00")
    self.bid64_quiet_not_less("0", "[7800000000000001]", "[0000000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[7800000000000001]", "[7800000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[7800000000000001]", "[8000000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[7800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[79cbaf50e24ef572]", "[54203a9431049800]", "1", "00")
    self.bid64_quiet_not_less("0", "[8000000000000000]", "[0000000000000001]", "0", "00")
    self.bid64_quiet_not_less("0", "[8000000000000000]", "[8000000000000001]", "1", "00")
    self.bid64_quiet_not_less("0", "[8000000000000001]", "[0000000000000000]", "0", "00")
    self.bid64_quiet_not_less("0", "[8000000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[8000000000000001]", "[8000000000000000]", "0", "00")
    self.bid64_quiet_not_less("0", "[8000000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[90bea21141bbb741]", "[4320000000000000]", "0", "00")
    self.bid64_quiet_not_less("0", "[9905ac2346bbdaf0]", "[ec6300a120202528]", "1", "00")
    self.bid64_quiet_not_less("0", "[9aa805a8da666a3b]", "[74508ef358f6ae07]", "0", "00")
    self.bid64_quiet_not_less("0", "[afe38d7ea4c67fff]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_less("0", "[afe38d7ea4c68000]", "[b1a000000000000a]", "1", "00")
    self.bid64_quiet_not_less("0", "[afe38d7ea4c68001]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_not_less("0", "[b1a0000000000002]", "[33a0000000000001]", "0", "00")
    self.bid64_quiet_not_less("0", "[b1a0000000000002]", "[b1a0000000000001]", "0", "00")
    self.bid64_quiet_not_less("0", "[b1a0000000000002]", "[b1a0000000000003]", "1", "00")
    self.bid64_quiet_not_less("0", "[b1a0000000000002]", "[b3a0000000000001]", "1", "00")
    self.bid64_quiet_not_less("0", "[b1a000000000000a]", "[afe38d7ea4c67fff]", "0", "00")
    self.bid64_quiet_not_less("0", "[b1a000000000000a]", "[afe38d7ea4c68000]", "1", "00")
    self.bid64_quiet_not_less("0", "[b1a000000000000a]", "[afe38d7ea4c68001]", "1", "00")
    self.bid64_quiet_not_less("0", "[b1a000000000000a]", "[b2c0000000000064]", "1", "00")
    self.bid64_quiet_not_less("0", "[b2c0000000000064]", "[b1a000000000000a]", "0", "00")
    self.bid64_quiet_not_less("0", "[b3a0000000000001]", "[31a0000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[b3a0000000000001]", "[b1a0000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[b8a041b00dac48ae]", "[fb47cd684fb3a6b5]", "1", "00")
    self.bid64_quiet_not_less("0", "[bcac81b81b455d40]", "[aaddeee50b8a32df]", "0", "00")
    self.bid64_quiet_not_less("0", "[c95dedc9c7b41514]", "[c7bf27eebfffefbf]", "0", "00")
    self.bid64_quiet_not_less("0", "[ccd22d5b27964fc9]", "[5eec05ebe5055109]", "0", "00")
    self.bid64_quiet_not_less("0", "[ce08bcfff2a3a1cf]", "[34dd6e46d0b1bfba]", "0", "00")
    self.bid64_quiet_not_less("0", "[ce9c1612010283c9]", "[219eb7fbc04f0d4a]", "0", "00")
    self.bid64_quiet_not_less("0", "[df47909f7b5cd9f2]", "[967a7c88a621dac1]", "0", "00")
    self.bid64_quiet_not_less("0", "[e96b28627f41e1dc]", "[0fdde1bad0abed6b]", "0", "00")
    self.bid64_quiet_not_less("0", "[f025140183853426]", "[54030720ebc1220d]", "0", "00")
    self.bid64_quiet_not_less("0", "[f800000000000001]", "[0000000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[f800000000000001]", "[7800000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[f800000000000001]", "[8000000000000002]", "0", "00")
    self.bid64_quiet_not_less("0", "[f800000000000001]", "[f800000000000002]", "1", "00")
    self.bid64_quiet_not_less("0", "[fbb7d5fdffbfaef3]", "[ec019d6ef8a88913]", "0", "00")
    self.bid64_quiet_not_less("0", "[fd92553e9a4a2f6a]", "[e530c51889f03dbe]", "1", "00")
    self.bid64_quiet_not_less("0", "-Infinity", "-Infinity", "1", "00")
    self.bid64_quiet_not_less("0", "QNaN", "SNaN", "1", "01")
    self.bid64_quiet_not_less("0", "SNaN", "-0", "1", "01")
    self.bid64_quiet_not_less("0", "SNaN", "0", "1", "01")
    self.bid64_quiet_not_less("0", "SNaN", "Infinity", "1", "01")
    self.bid64_quiet_not_less("0", "SNaN", "QNaN", "1", "01")
  }

  private func bid64_quiet_not_less(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLess(than: arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_radix() {
    self.bid64_radix("0", "[0000000000000000]", "10", "00")
    self.bid64_radix("0", "1.0", "10", "00")
  }

  private func bid64_radix(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    // Dummy use for 'arg0', so that the compiler does not complain.
    _ = arg0

    let result = Decimal64.radix
    self.assertInt(result, Int(expected), file, line)
  }

  func test_bid64_rem() {
    self.bid64_rem("0", "[0000400000000000]", "[0000002180400729]", "[0000000205b252af]", "00")
    self.bid64_rem("0", "-0", "0", "[7c00000000000000]", "01")
    self.bid64_rem("0", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[00cd1505de2b28ef]", "[79ea3cfdff7ff7f7]", "[00cd1505de2b28ef]", "00")
    self.bid64_rem("0", "[08cd000000000000]", "[9446e2ab9830b5ea]", "[08cd000000000000]", "00")
    self.bid64_rem("0", "[08df000000000000]", "[19a0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[09f7000000000000]", "[c460000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[0c5e124ac21e0813]", "[662800c290a8d383]", "[0c5e124ac21e0813]", "00")
    self.bid64_rem("0", "+0.E0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_rem("0", "[0e8e26762eb6381c]", "[6ac6b8ae924112db]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "0", "Infinity", "[31c0000000000000]", "00")
    self.bid64_rem("0", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("0", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[10d5ec568879c7f0]", "[a2e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[238ce60ca6074db3]", "[7ffff4f5f9d7f4fe]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[2fbd095f29c987f4]", "[899d711b92e3e213]", "[098c994ddddf3df7]", "00")
    self.bid64_rem("0", "[4353d1d8a93c5ef9]", "[4390503cd8b20c4e]", "[4353d1d8a93c5ef9]", "00")
    self.bid64_rem("0", "[498aff06888ef77e]", "[1740000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[4d7bf08237c1ea3c]", "[5dceaba82e5bb7ee]", "[4d7bf08237c1ea3c]", "00")
    self.bid64_rem("0", "[5d030482e0a24502]", "[06dac3bbaa189e4e]", "[86c9e499bd65bf52]", "00")
    self.bid64_rem("0", "[6fdffdfffffd7eff]", "[0100042000483400]", "[0100000000000000]", "00")
    self.bid64_rem("0", "[75be35dff5dcf9bf]", "[edff6fedffc6e5df]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[8d40000000000000]", "[5f80000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[a48805a0f2caf9f8]", "[c360000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[afb236d07e3effc6]", "[5240000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[d34e2038ec42ae38]", "[0000100000000000]", "[8000000000000000]", "00")
    self.bid64_rem("0", "[da0793cd0c6c3581]", "[5940000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[dffdfffd7f7fffcd]", "[dfe52f777d5fe9df]", "[5fe11ccf70bf7b6d]", "00")
    self.bid64_rem("0", "[ec3a5d024e224441]", "[fab38185513508ad]", "[ec3a5d024e224441]", "00")
    self.bid64_rem("0", "[ed85b2c7ffaadfae]", "[63099bb2b1f32d17]", "[8c20000000000000]", "00")
    self.bid64_rem("0", "[f6ffb9f5f57fffef]", "[fdfba3f7afbdefff]", "[fc00000000000000]", "00")
    self.bid64_rem("0", "[fb1e6454d100e9d9]", "[00a30b0000040410]", "[7c00000000000000]", "01")
    self.bid64_rem("0", "[fefffdeffffbffba]", "[80010000a2408000]", "[fc00000000000000]", "01")
    self.bid64_rem("0", "[ffffeffff7effff7]", "[ffbdffffbd7dffff]", "[fc00000000000000]", "01")
    self.bid64_rem("0", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("0", "Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("0", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("0", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("1", "-0", "0", "[7c00000000000000]", "01")
    self.bid64_rem("1", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[08cd000000000000]", "[9446e2ab9830b5ea]", "[08cd000000000000]", "00")
    self.bid64_rem("1", "[08df000000000000]", "[19a0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[09f7000000000000]", "[c460000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "+0.E0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_rem("1", "0", "Infinity", "[31c0000000000000]", "00")
    self.bid64_rem("1", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("1", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[10d5ec568879c7f0]", "[a2e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[498aff06888ef77e]", "[1740000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[4d7bf08237c1ea3c]", "[5dceaba82e5bb7ee]", "[4d7bf08237c1ea3c]", "00")
    self.bid64_rem("1", "[8d40000000000000]", "[5f80000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[a48805a0f2caf9f8]", "[c360000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[afb236d07e3effc6]", "[5240000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "[da0793cd0c6c3581]", "[5940000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("1", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("1", "Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("1", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("1", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("2", "-0", "0", "[7c00000000000000]", "01")
    self.bid64_rem("2", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[08cd000000000000]", "[9446e2ab9830b5ea]", "[08cd000000000000]", "00")
    self.bid64_rem("2", "[08df000000000000]", "[19a0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[09f7000000000000]", "[c460000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "+0.E0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_rem("2", "0", "Infinity", "[31c0000000000000]", "00")
    self.bid64_rem("2", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("2", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[10d5ec568879c7f0]", "[a2e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[498aff06888ef77e]", "[1740000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[4d7bf08237c1ea3c]", "[5dceaba82e5bb7ee]", "[4d7bf08237c1ea3c]", "00")
    self.bid64_rem("2", "[8d40000000000000]", "[5f80000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[a48805a0f2caf9f8]", "[c360000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[afb236d07e3effc6]", "[5240000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "[da0793cd0c6c3581]", "[5940000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("2", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("2", "Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("2", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("2", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("3", "-0", "0", "[7c00000000000000]", "01")
    self.bid64_rem("3", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[08cd000000000000]", "[9446e2ab9830b5ea]", "[08cd000000000000]", "00")
    self.bid64_rem("3", "[08df000000000000]", "[19a0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[09f7000000000000]", "[c460000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "+0.E0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_rem("3", "0", "Infinity", "[31c0000000000000]", "00")
    self.bid64_rem("3", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("3", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[10d5ec568879c7f0]", "[a2e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[498aff06888ef77e]", "[1740000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[4d7bf08237c1ea3c]", "[5dceaba82e5bb7ee]", "[4d7bf08237c1ea3c]", "00")
    self.bid64_rem("3", "[8d40000000000000]", "[5f80000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[a48805a0f2caf9f8]", "[c360000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[afb236d07e3effc6]", "[5240000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "[da0793cd0c6c3581]", "[5940000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("3", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("3", "Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("3", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("3", "SNaN", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("4", "-0", "0", "[7c00000000000000]", "01")
    self.bid64_rem("4", "0", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[08cd000000000000]", "[9446e2ab9830b5ea]", "[08cd000000000000]", "00")
    self.bid64_rem("4", "[08df000000000000]", "[19a0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[09f7000000000000]", "[c460000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "+0.E0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_rem("4", "0", "Infinity", "[31c0000000000000]", "00")
    self.bid64_rem("4", "-0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("4", "0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[10d5ec568879c7f0]", "[a2e0000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[498aff06888ef77e]", "[1740000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[4d7bf08237c1ea3c]", "[5dceaba82e5bb7ee]", "[4d7bf08237c1ea3c]", "00")
    self.bid64_rem("4", "[8d40000000000000]", "[5f80000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[a48805a0f2caf9f8]", "[c360000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[afb236d07e3effc6]", "[5240000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "[da0793cd0c6c3581]", "[5940000000000000]", "[7c00000000000000]", "01")
    self.bid64_rem("4", "-Infinity", "-0", "[7c00000000000000]", "01")
    self.bid64_rem("4", "Infinity", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("4", "SNaN", "Infinity", "[7c00000000000000]", "01")
    self.bid64_rem("4", "SNaN", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_rem(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._formRemainder(dividingBy: arg1, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_round_integral_nearest_away() {
    self.bid64_round_integral_nearest_away("0", "[0000000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[001040000000140c]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "0", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[0ebf000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[3000042000096042]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[318ad42b83214976]", "[31c01bb8c14fb160]", "00")
    self.bid64_round_integral_nearest_away("0", "[344d663e925522bd]", "[344d663e925522bd]", "00")
    self.bid64_round_integral_nearest_away("0", "[352287c45d071d0f]", "[352287c45d071d0f]", "00")
    self.bid64_round_integral_nearest_away("0", "[38191e30b4b7f718]", "[38191e30b4b7f718]", "00")
    self.bid64_round_integral_nearest_away("0", "[42e06477388fc706]", "[42e06477388fc706]", "00")
    self.bid64_round_integral_nearest_away("0", "[44d139ed5c11b67e]", "[44d139ed5c11b67e]", "00")
    self.bid64_round_integral_nearest_away("0", "[65315f0102f71959]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[ae7ce2cf6b3dec4b]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[b11650001088834b]", "[b1c0000176577647]", "00")
    self.bid64_round_integral_nearest_away("0", "[b1a0000000000000]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[b840000000000000]", "[b840000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[c46d127074d850c9]", "[c46d127074d850c9]", "00")
    self.bid64_round_integral_nearest_away("0", "[c59e55d5feef1bfe]", "[c59e55d5feef1bfe]", "00")
    self.bid64_round_integral_nearest_away("0", "[e9884af887152ee2]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[ecf9bf677edce7ce]", "[ecf9bf677edce7ce]", "00")
    self.bid64_round_integral_nearest_away("0", "[f2f5d1ebb9b6abc8]", "[cbc0000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "[ffffffffffffffff]", "[fc00000000000000]", "01")
    self.bid64_round_integral_nearest_away("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_round_integral_nearest_away("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_round_integral_nearest_away(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.toNearestOrAwayFromZero, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_round_integral_nearest_even() {
    self.bid64_round_integral_nearest_even("0", "[0000000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[01c0409004000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "0", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[122f3ec26c27b361]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[1966790cc80a1b3a]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[298800870a018249]", "[31c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[317a83d36ac8f188]", "[31c006c9aef46cc9]", "00")
    self.bid64_round_integral_nearest_even("0", "[3c23b3355cc7ef47]", "[3c23b3355cc7ef47]", "00")
    self.bid64_round_integral_nearest_even("0", "[3ff1f7fcf3a1edb5]", "[3ff1f7fcf3a1edb5]", "00")
    self.bid64_round_integral_nearest_even("0", "[5b7366576d65013c]", "[5b7366576d65013c]", "00")
    self.bid64_round_integral_nearest_even("0", "[5bd9b8c6ef328b2d]", "[5bd9b8c6ef328b2d]", "00")
    self.bid64_round_integral_nearest_even("0", "[5f20000000000000]", "[5f20000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[9520000000000000]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[a65cf4be4d29a63d]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[b000080120100a00]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[b0659b9f04fb2cb8]", "[b1c0000000003da9]", "00")
    self.bid64_round_integral_nearest_even("0", "[b1bf3cbdefdffd7d]", "[b1c31fac97fccc8c]", "00")
    self.bid64_round_integral_nearest_even("0", "[bdc2f88bb868c381]", "[bdc2f88bb868c381]", "00")
    self.bid64_round_integral_nearest_even("0", "[c061cab98a3cb4df]", "[c061cab98a3cb4df]", "00")
    self.bid64_round_integral_nearest_even("0", "[c21fc0e99bd80e06]", "[c21fc0e99bd80e06]", "00")
    self.bid64_round_integral_nearest_even("0", "[ef2dc5ade35a42ad]", "[bca0000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[f7f261ea3cbdff7e]", "[f7f261ea3cbdff7e]", "00")
    self.bid64_round_integral_nearest_even("0", "[fa4eb56f810680a4]", "[f800000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "[fffff6fbefffe7ff]", "[fc00000000000000]", "01")
    self.bid64_round_integral_nearest_even("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "-Infinity", "[f800000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_round_integral_nearest_even("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_round_integral_nearest_even(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.toNearestOrEven, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_round_integral_negative() {
    self.bid64_round_integral_negative("0", "[0000000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[1698b6c95a90f99f]", "[31c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[2000009001000200]", "[31c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[30004914028800b8]", "[31c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[3118016000000808]", "[31c0000192be48a5]", "00")
    self.bid64_round_integral_negative("0", "[34600b6036223007]", "[34600b6036223007]", "00")
    self.bid64_round_integral_negative("0", "[3749dc7f132d3d0a]", "[3749dc7f132d3d0a]", "00")
    self.bid64_round_integral_negative("0", "[44f487fdb8b4c243]", "[44f487fdb8b4c243]", "00")
    self.bid64_round_integral_negative("0", "[6c60335ab86bec39]", "[31c0526efcb96633]", "00")
    self.bid64_round_integral_negative("0", "[6d38b17f82fad382]", "[6d38b17f82fad382]", "00")
    self.bid64_round_integral_negative("0", "[8c00000000000000]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[8dc0508521cd5127]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[9946650664f4f9e3]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[9b0a451b3665f421]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[9c409dc20851aa82]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[aa20000000000000]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[b000381285510401]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[b136af255daae29d]", "[b1c0000eddc56bd6]", "00")
    self.bid64_round_integral_negative("0", "[b3d4e28068cf485d]", "[b3d4e28068cf485d]", "00")
    self.bid64_round_integral_negative("0", "[bb7ef9b05c9e0cd4]", "[bb7ef9b05c9e0cd4]", "00")
    self.bid64_round_integral_negative("0", "[ca9ded372218bb92]", "[ca9ded372218bb92]", "00")
    self.bid64_round_integral_negative("0", "[cda2c902b15861e0]", "[cda2c902b15861e0]", "00")
    self.bid64_round_integral_negative("0", "[e5faab2e7bfde8f7]", "[b1c0000000000001]", "00")
    self.bid64_round_integral_negative("0", "[ea4c5fde262f578d]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_negative("0", "[f986cc74d2071536]", "[f800000000000000]", "00")
    self.bid64_round_integral_negative("0", "[fe3effdfdb433b5f]", "[fc02ffdfdb433b5f]", "01")
    self.bid64_round_integral_negative("0", "[fffffffffffffdff]", "[fc00000000000000]", "01")
    self.bid64_round_integral_negative("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_round_integral_negative("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_round_integral_negative(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.down, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_round_integral_positive() {
    self.bid64_round_integral_positive("0", "[0000000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[0040040010100800]", "[31c0000000000001]", "00")
    self.bid64_round_integral_positive("0", "[01aca948242e8ce9]", "[31c0000000000001]", "00")
    self.bid64_round_integral_positive("0", "0", "[31c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[08c1000000000000]", "[31c0000000000001]", "00")
    self.bid64_round_integral_positive("0", "-0", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[3000182000200204]", "[31c0000000000001]", "00")
    self.bid64_round_integral_positive("0", "[318fffee5cb1f7cb]", "[31c028f595682e00]", "00")
    self.bid64_round_integral_positive("0", "[38e3152cbfc0d32e]", "[38e3152cbfc0d32e]", "00")
    self.bid64_round_integral_positive("0", "[3ba0000000000000]", "[3ba0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[41fecceb44f309d5]", "[41fecceb44f309d5]", "00")
    self.bid64_round_integral_positive("0", "[4ae3a0950988606c]", "[4ae3a0950988606c]", "00")
    self.bid64_round_integral_positive("0", "[557d63bf6a3df7ae]", "[557d63bf6a3df7ae]", "00")
    self.bid64_round_integral_positive("0", "[8b61791ce8584f32]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[94c0000000000000]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[a7ddebcc9a46edc1]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[b00041b61a454101]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[b02050acaed32bff]", "[b1c0000000000008]", "00")
    self.bid64_round_integral_positive("0", "[bc9faa0346fd925b]", "[bc9faa0346fd925b]", "00")
    self.bid64_round_integral_positive("0", "[c7e1158478b3e876]", "[c7e1158478b3e876]", "00")
    self.bid64_round_integral_positive("0", "[dae29979b6bc48ce]", "[dae29979b6bc48ce]", "00")
    self.bid64_round_integral_positive("0", "[e043498baef72083]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_positive("0", "[ecaa15bc91e764ec]", "[ecaa15bc91e764ec]", "00")
    self.bid64_round_integral_positive("0", "[f6465d2110be89d5]", "[d900000000000000]", "00")
    self.bid64_round_integral_positive("0", "[fd39ef5fbdcf73d4]", "[fc01ef5fbdcf73d4]", "00")
    self.bid64_round_integral_positive("0", "[ffdbfff73ffbffb7]", "[fc00000000000000]", "01")
    self.bid64_round_integral_positive("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_round_integral_positive("0", "-Infinity", "[f800000000000000]", "00")
    self.bid64_round_integral_positive("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_round_integral_positive(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.up, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_round_integral_zero() {
    self.bid64_round_integral_zero("0", "[0000000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[00e0000000000000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "0", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "+10011001001110000.010E0", "[31e38e7ec7da0a98]", "00")
    self.bid64_round_integral_zero("0", "[12f48c419c7c162c]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[1c7c77621629c5c1]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[2004000040600010]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[300008313e021000]", "[31c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[3044020248482608]", "[31c0000000000468]", "00")
    self.bid64_round_integral_zero("0", "[3ba71f380a6bd963]", "[3ba71f380a6bd963]", "00")
    self.bid64_round_integral_zero("0", "[3dc0000000000000]", "[3dc0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[72f8031406c00cd0]", "[72f8031406c00cd0]", "00")
    self.bid64_round_integral_zero("0", "[97380e63bd57041b]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[a80231d6acd74f18]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[aea9db49a45d7aaf]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[b1bc6ea70343d80e]", "[b1c2d7dd8053959b]", "00")
    self.bid64_round_integral_zero("0", "[b3c3f729d481bb82]", "[b3c3f729d481bb82]", "00")
    self.bid64_round_integral_zero("0", "[b44956b0e6f1d142]", "[b44956b0e6f1d142]", "00")
    self.bid64_round_integral_zero("0", "[bd1807d37267366f]", "[bd1807d37267366f]", "00")
    self.bid64_round_integral_zero("0", "[c7998a089b34fdcc]", "[c7998a089b34fdcc]", "00")
    self.bid64_round_integral_zero("0", "[d582a26bd30897ec]", "[d582a26bd30897ec]", "00")
    self.bid64_round_integral_zero("0", "[eabafffbfdfdffff]", "[b1c0000000000000]", "00")
    self.bid64_round_integral_zero("0", "[ede38ae279475ae0]", "[b780000000000000]", "00")
    self.bid64_round_integral_zero("0", "[fdbfe96ffbdff9e7]", "[fc00000000000000]", "00")
    self.bid64_round_integral_zero("0", "[ff7ffffffffffeff]", "[fc00000000000000]", "01")
    self.bid64_round_integral_zero("0", "-Infinity", "[f800000000000000]", "00")
    self.bid64_round_integral_zero("0", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_round_integral_zero(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.towardZero, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_sameQuantum() {
    self.bid64_sameQuantum("0", "[0000000000000000]", "[698d80a4efe33f69]", "0", "00")
    self.bid64_sameQuantum("0", "0", "-0", "1", "00")
    self.bid64_sameQuantum("0", "-0", "SNaN", "0", "00")
    self.bid64_sameQuantum("0", "+1000000010.000000E0", "0", "0", "00")
    self.bid64_sameQuantum("0", "[29c95cda703c6a50]", "[97db1cf7f4ee8859]", "0", "00")
    self.bid64_sameQuantum("0", "[2dcb525f907dee77]", "[d93546fbedfc552e]", "0", "00")
    self.bid64_sameQuantum("0", "[471850f138942eeb]", "[5d7c6bc158b0b732]", "0", "00")
    self.bid64_sameQuantum("0", "[7c00000000000000]", "[fef3ffffffffffff]", "1", "00")
    self.bid64_sameQuantum("0", "[7e00000000000000]", "[7cf3ffffffffffff]", "1", "00")
    self.bid64_sameQuantum("0", "[7e2697ccba10d426]", "[fa2571792acbc717]", "0", "00")
    self.bid64_sameQuantum("0", "[8b7c50916fc999f4]", "[20909cda923baf84]", "0", "00")
    self.bid64_sameQuantum("0", "[8c9dce6f7b8ed1a6]", "[990793fa2ca53a1a]", "0", "00")
    self.bid64_sameQuantum("0", "[9920000000000000]", "[08c5000000000000]", "0", "00")
    self.bid64_sameQuantum("0", "[9ae0000000000000]", "[0e9c000000000000]", "0", "00")
    self.bid64_sameQuantum("0", "[a1926dee3ae9ff0a]", "[ba60000000000000]", "0", "00")
    self.bid64_sameQuantum("0", "[a23f9f5f02e2ccd6]", "[2f8167c39503829d]", "0", "00")
    self.bid64_sameQuantum("0", "[cbfc15ab001e11cc]", "[072486c8f96be096]", "0", "00")
    self.bid64_sameQuantum("0", "[d880000000000000]", "[c6bd8171578f2264]", "0", "00")
    self.bid64_sameQuantum("0", "[f4e4b9fff4ff6bf3]", "[3ccf6b9605feb0ac]", "0", "00")
    self.bid64_sameQuantum("0", "[fae73b5bf373db7f]", "[a9ceaee4c5dc851a]", "0", "00")
    self.bid64_sameQuantum("0", "Infinity", "-0.E0", "0", "00")
    self.bid64_sameQuantum("0", "Infinity", "Infinity", "1", "00")
    self.bid64_sameQuantum("0", "QNaN", "0", "0", "00")
    self.bid64_sameQuantum("0", "QNaN", "-Infinity", "0", "00")
    self.bid64_sameQuantum("0", "QNaN", "Infinity", "0", "00")
  }

  private func bid64_sameQuantum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0._sameQuantum(other: arg1)
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_scalbln() {
    self.bid64_scalbln("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("0", "[7800000000000000]", "0", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "0", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "-1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "-1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01", longIntSize: "01")
    self.bid64_scalbln("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01", longIntSize: "01")
    self.bid64_scalbln("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "9223372036854775807", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "9223372036854775807", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "9223372036854775807", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "9223372036854775807", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
  }

  private func bid64_scalbln(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    longIntSize _longIntSize: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }
    guard let longIntSize = self.parseLongIntSize(_longIntSize, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._initByScaling(sign: .plus, exponent: arg1, significand: arg0, rounding: rounding, status: &status)
    _ = longIntSize // Never used; silence compiler warning
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_scalbn() {
    self.bid64_scalbn("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("0", "[0000004280001000]", "-1", "[00000006a6666800]", "00")
    self.bid64_scalbn("0", "[0001000000000000]", "768", "[5fea000000000000]", "00")
    self.bid64_scalbn("0", "[0010b00010108004]", "-6", "[0000000117f84557]", "30")
    self.bid64_scalbn("0", "0", "0", "[31c0000000000000]", "00")
    self.bid64_scalbn("0", "-0", "0", "[b1c0000000000000]", "00")
    self.bid64_scalbn("0", "[00be3e41a7d69e11]", "1", "[00de3e41a7d69e11]", "00")
    self.bid64_scalbn("0", "0", "-1", "[31a0000000000000]", "00")
    self.bid64_scalbn("0", "0", "1", "[31e0000000000000]", "00")
    self.bid64_scalbn("0", "0.1", "-382", "[01e0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "-382", "[81e0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "-383", "[01c0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "383", "[5fe009184e72a000]", "00")
    self.bid64_scalbn("0", "-0.1", "-383", "[81c0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "383", "[dfe009184e72a000]", "00")
    self.bid64_scalbn("0", "0.1", "-384", "[01a0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "384", "[5fe05af3107a4000]", "00")
    self.bid64_scalbn("0", "-0.1", "-384", "[81a0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "384", "[dfe05af3107a4000]", "00")
    self.bid64_scalbn("0", "0.1", "385", "[5fe38d7ea4c68000]", "00")
    self.bid64_scalbn("0", "-0.1", "385", "[dfe38d7ea4c68000]", "00")
    self.bid64_scalbn("0", "-0", "-1", "[b1a0000000000000]", "00")
    self.bid64_scalbn("0", "-0", "1", "[b1e0000000000000]", "00")
    self.bid64_scalbn("0", "[0200940c0a114000]", "-2", "[01c0940c0a114000]", "00")
    self.bid64_scalbn("0", "[0e17000000000000]", "2", "[0e57000000000000]", "00")
    self.bid64_scalbn("0", "[10002403080400c0]", "640", "[5fe1681e50280780]", "00")
    self.bid64_scalbn("0", "[168004250b068840]", "24047", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[1c40400019043020]", "201392160", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[2000842084014008]", "-1141906699", "[0000000000000000]", "30")
    self.bid64_scalbn("0", "[2c2d0133540b49f4]", "335544833", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[2ec61b056786554d]", "3", "[2f261b056786554d]", "00")
    self.bid64_scalbn("0", "[45cf7777611b47c5]", "4", "[464f7777611b47c5]", "00")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[801bc107f3b6cbf5]", "-1", "[8002c680cb924798]", "30")
    self.bid64_scalbn("0", "[9c85d9a5a3dfada5]", "36", "[a105d9a5a3dfada5]", "00")
    self.bid64_scalbn("0", "[a720000000000000]", "5", "[a7c0000000000000]", "00")
    self.bid64_scalbn("0", "[ac3f9361f3311903]", "6", "[acff9361f3311903]", "00")
    self.bid64_scalbn("0", "[b67af9fd533fabff]", "0", "[b67af9fd533fabff]", "00")
    self.bid64_scalbn("0", "[bb56f5d503636a0c]", "7", "[bc36f5d503636a0c]", "00")
    self.bid64_scalbn("0", "[bbe6809560fc8bbe]", "8", "[bce6809560fc8bbe]", "00")
    self.bid64_scalbn("0", "[c6457c02fc84a38a]", "9", "[c7657c02fc84a38a]", "00")
    self.bid64_scalbn("0", "[dbff63dd3bfebef7]", "21520", "[f800000000000000]", "28")
    self.bid64_scalbn("0", "[e53804fdedf68481]", "10", "[e58804fdedf68481]", "00")
    self.bid64_scalbn("0", "[ea5e5fde262f578d]", "1048592", "[dfe0000000000000]", "00")
    self.bid64_scalbn("0", "[eea50bcafe743fea]", "18100", "[dfe0000000000000]", "00")
    self.bid64_scalbn("0", "[f5ac66ed9e697678]", "-4", "[d620000000000000]", "00")
    self.bid64_scalbn("0", "[fbffefde9fbfffbf]", "-3", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "[fd3c49edeff968d2]", "-1238194967", "[fc0049edeff968d2]", "00")
    self.bid64_scalbn("0", "[fdc106235688bc22]", "-6148", "[fc0106235688bc22]", "00")
    self.bid64_scalbn("0", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "Infinity", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "Infinity", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "-1", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "1", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "SNaN", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "SNaN", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000")
    self.bid64_scalbn("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000")
    self.bid64_scalbn("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000")
    self.bid64_scalbn("4", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "0.0e10", "-50", "[2ca0000000000000]", "00")
  }

  private func bid64_scalbn(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._initByScaling(sign: .plus, exponent: Int(arg1), significand: arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_sqrt() {
    self.bid64_sqrt("0", "[0000000000000001]", "[18E0000000000001]", "00", ulp: "0.0000000000e-01")
    self.bid64_sqrt("0", "[0000000000000003]", "[1706274A811E39ED]", "20", ulp: "2.9352744634e-01")
    self.bid64_sqrt("0", "[0000000000400000]", "[18e0000000000800]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[00012F2A36ECD555]", "[17E67C80A6EB25D9]", "20", ulp: "-2.0134769657e-01")
    self.bid64_sqrt("0", "[01E0000000000001]", "[17EB3C13249D90BB]", "20", ulp: "3.3199889354e-01")
    self.bid64_sqrt("0", "[01E0000000000003]", "[17F37581F4C1718D]", "20", ulp: "1.3456969783e-01")
    self.bid64_sqrt("0", "0", "[31c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[0720617360886d18]", "[1b6ba1181170ccbb]", "20", ulp: "-2.394166e-01")
    self.bid64_sqrt("0", "[0760000000000000]", "[1c80000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[0b1b56280b01950c]", "[1d7f29f6049c7784]", "20", ulp: "2.875489e-01")
    self.bid64_sqrt("0", "-0", "[b1c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "-1", "[7c00000000000000]", "01")
    self.bid64_sqrt("0", "[1a1d795b5ecb4196]", "[69385bff77084369]", "20", ulp: "-6.975172e-02")
    self.bid64_sqrt("0", "[253dc7edf441a1b4]", "[2a8a493c02bf701d]", "20", ulp: "-1.445805e-01")
    self.bid64_sqrt("0", "[318000000000013A]", "[2FE64BA0F3A319B7]", "20", ulp: "4.0199112510e-02")
    self.bid64_sqrt("0", "[318000000000013B]", "[2FE64E31662E2BDD]", "20", ulp: "-1.8722980151e-01")
    self.bid64_sqrt("0", "[3480000000000000]", "[3320000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[3ee0000000000000]", "[3840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "4", "[31c0000000000002]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[5600000000000000]", "[43e0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[57e0000000000000]", "[44c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[5FEBD7A625405555]", "[47E67C80A6EB25DA]", "20", ulp: "-3.7976386031e-01")
    self.bid64_sqrt("0", "[6BF386F26FC0FFFF]", "[6BF386F26FC0FFFF]", "20", ulp: "5.0000000000e-01")
    self.bid64_sqrt("0", "[77FB86F26FC0FFFF]", "[47EB3C13249D90BB]", "20", ulp: "1.7388501054e-01")
    self.bid64_sqrt("0", "[8511027ffb80d6da]", "[7c00000000000000]", "01")
    self.bid64_sqrt("0", "+8898998.8898989999E0", "[304a992183892dd9]", "20", ulp: "2.349778e-01")
    self.bid64_sqrt("0", "+8.9889E0", "[2feaa6cd0fb67ec9]", "20", ulp: "8.604776e-03")
    self.bid64_sqrt("0", "9", "[31c0000000000003]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "9999999800000001", "[31c0000005f5e0ff]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "9999999800000002", "[6c3386f269cb1f01]", "20", ulp: "-5.000000e-01")
    self.bid64_sqrt("0", "[99c0000000000000]", "[a5c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[aa80000000000000]", "[ae20000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[d580000000000000]", "[c3a0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[d9d5eb5e012dd27b]", "[7c00000000000000]", "01")
    self.bid64_sqrt("0", "[f7b797a7ed6edeff]", "[c840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("0", "[f800000000000000]", "[7c00000000000000]", "01")
    self.bid64_sqrt("0", "[ffffffffffffffff]", "[fc00000000000000]", "01")
    self.bid64_sqrt("0", "Infinity", "[7800000000000000]", "00")
    self.bid64_sqrt("0", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sqrt("0", "qnan", "[7c00000000000000]", "00")
    self.bid64_sqrt("0", "QNaN", "[7c00000000000000]", "00")
    self.bid64_sqrt("0", "SNaN", "[7c00000000000000]", "01")
    self.bid64_sqrt("1", "[0000000000000003]", "[1706274A811E39ED]", "20", ulp: "2.9352744634e-01")
    self.bid64_sqrt("1", "[00012F2A36ECD555]", "[17E67C80A6EB25D8]", "20", ulp: "7.9865230343e-01")
    self.bid64_sqrt("1", "[01E0000000000001]", "[17EB3C13249D90BB]", "20", ulp: "3.3199889354e-01")
    self.bid64_sqrt("1", "[01E0000000000003]", "[17F37581F4C1718D]", "20", ulp: "1.3456969783e-01")
    self.bid64_sqrt("1", "0", "[31c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[0760000000000000]", "[1c80000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "-0", "[b1c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[1a1d795b5ecb4196]", "[69385bff77084368]", "20", ulp: "9.302483e-01")
    self.bid64_sqrt("1", "[318000000000013A]", "[2FE64BA0F3A319B7]", "20", ulp: "4.0199112510e-02")
    self.bid64_sqrt("1", "[318000000000013B]", "[2FE64E31662E2BDC]", "20", ulp: "8.1277019849e-01")
    self.bid64_sqrt("1", "[3480000000000000]", "[3320000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[3ee0000000000000]", "[3840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[5600000000000000]", "[43e0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[57e0000000000000]", "[44c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[5FEBD7A625405555]", "[47E67C80A6EB25D9]", "20", ulp: "6.2023613969e-01")
    self.bid64_sqrt("1", "[77FB86F26FC0FFFF]", "[47EB3C13249D90BB]", "20", ulp: "1.7388501054e-01")
    self.bid64_sqrt("1", "[8511027ffb80d6da]", "[7c00000000000000]", "01")
    self.bid64_sqrt("1", "+8898998.8898989999E0", "[304a992183892dd9]", "20", ulp: "2.349778e-01")
    self.bid64_sqrt("1", "+8.9889E0", "[2feaa6cd0fb67ec9]", "20", ulp: "8.604776e-03")
    self.bid64_sqrt("1", "[99c0000000000000]", "[a5c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[aa80000000000000]", "[ae20000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "[d580000000000000]", "[c3a0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("1", "Infinity", "[7800000000000000]", "00")
    self.bid64_sqrt("1", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sqrt("1", "QNaN", "[7c00000000000000]", "00")
    self.bid64_sqrt("1", "SNaN", "[7c00000000000000]", "01")
    self.bid64_sqrt("2", "[0000000000000003]", "[1706274A811E39EE]", "20", ulp: "-7.0647255366e-01")
    self.bid64_sqrt("2", "[00012F2A36ECD555]", "[17E67C80A6EB25D9]", "20", ulp: "-2.0134769657e-01")
    self.bid64_sqrt("2", "[01E0000000000001]", "[17EB3C13249D90BC]", "20", ulp: "-6.6800110646e-01")
    self.bid64_sqrt("2", "[01E0000000000003]", "[17F37581F4C1718E]", "20", ulp: "-8.6543030217e-01")
    self.bid64_sqrt("2", "0", "[31c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[0760000000000000]", "[1c80000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[0b1b56280b01950c]", "[1d7f29f6049c7785]", "20", ulp: "-7.124511e-01")
    self.bid64_sqrt("2", "-0", "[b1c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "-1", "[7c00000000000000]", "01")
    self.bid64_sqrt("2", "[1a1d795b5ecb4196]", "[69385bff77084369]", "20", ulp: "-6.975172e-02")
    self.bid64_sqrt("2", "[318000000000013A]", "[2FE64BA0F3A319B8]", "20", ulp: "-9.5980088749e-01")
    self.bid64_sqrt("2", "[318000000000013B]", "[2FE64E31662E2BDD]", "20", ulp: "-1.8722980151e-01")
    self.bid64_sqrt("2", "[3480000000000000]", "[3320000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[3ee0000000000000]", "[3840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "4", "[31c0000000000002]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[5600000000000000]", "[43e0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[57e0000000000000]", "[44c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[5FEBD7A625405555]", "[47E67C80A6EB25DA]", "20", ulp: "-3.7976386031e-01")
    self.bid64_sqrt("2", "[77FB86F26FC0FFFF]", "[47EB3C13249D90BC]", "20", ulp: "-8.2611498946e-01")
    self.bid64_sqrt("2", "[8511027ffb80d6da]", "[7c00000000000000]", "01")
    self.bid64_sqrt("2", "+8898998.8898989999E0", "[304a992183892dda]", "20", ulp: "-7.650222e-01")
    self.bid64_sqrt("2", "+8.9889E0", "[2feaa6cd0fb67eca]", "20", ulp: "-9.913952e-01")
    self.bid64_sqrt("2", "9", "[31c0000000000003]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "9999999800000001", "[31c0000005f5e0ff]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "9999999800000002", "[6c3386f269cb1f01]", "20", ulp: "-5.000000e-01")
    self.bid64_sqrt("2", "9.999999999999999E-383", "[18038d7ea4c68000]", "20", ulp: "-5.000000e-02")
    self.bid64_sqrt("2", "[99c0000000000000]", "[a5c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[aa80000000000000]", "[ae20000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "[d580000000000000]", "[c3a0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("2", "Infinity", "[7800000000000000]", "00")
    self.bid64_sqrt("2", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sqrt("2", "qnan", "[7c00000000000000]", "00")
    self.bid64_sqrt("2", "QNaN", "[7c00000000000000]", "00")
    self.bid64_sqrt("2", "SNaN", "[7c00000000000000]", "01")
    self.bid64_sqrt("3", "[0000000000000003]", "[1706274A811E39ED]", "20", ulp: "2.9352744634e-01")
    self.bid64_sqrt("3", "[00012F2A36ECD556]", "[17E67C80A6EB25DB]", "20", ulp: "5.3726509096e-01")
    self.bid64_sqrt("3", "[01E0000000000001]", "[17EB3C13249D90BB]", "20", ulp: "3.3199889354e-01")
    self.bid64_sqrt("3", "[01E0000000000003]", "[17F37581F4C1718D]", "20", ulp: "1.3456969783e-01")
    self.bid64_sqrt("3", "0", "[31c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[0760000000000000]", "[1c80000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "-0", "[b1c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[1a1d795b5ecb4196]", "[69385bff77084368]", "20", ulp: "9.302483e-01")
    self.bid64_sqrt("3", "[318000000000013A]", "[2FE64BA0F3A319B7]", "20", ulp: "4.0199112510e-02")
    self.bid64_sqrt("3", "[318000000000013B]", "[2FE64E31662E2BDC]", "20", ulp: "8.1277019849e-01")
    self.bid64_sqrt("3", "[3480000000000000]", "[3320000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[3ee0000000000000]", "[3840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[5600000000000000]", "[43e0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[57e0000000000000]", "[44c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[5FEBD7A625405555]", "[47E67C80A6EB25D9]", "20", ulp: "6.2023613969e-01")
    self.bid64_sqrt("3", "[77FB86F26FC0FFFF]", "[47EB3C13249D90BB]", "20", ulp: "1.7388501054e-01")
    self.bid64_sqrt("3", "[8511027ffb80d6da]", "[7c00000000000000]", "01")
    self.bid64_sqrt("3", "+8898998.8898989999E0", "[304a992183892dd9]", "20", ulp: "2.349778e-01")
    self.bid64_sqrt("3", "+8.9889E0", "[2feaa6cd0fb67ec9]", "20", ulp: "8.604776e-03")
    self.bid64_sqrt("3", "[99c0000000000000]", "[a5c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[aa80000000000000]", "[ae20000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "[d580000000000000]", "[c3a0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("3", "Infinity", "[7800000000000000]", "00")
    self.bid64_sqrt("3", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sqrt("3", "QNaN", "[7c00000000000000]", "00")
    self.bid64_sqrt("3", "SNaN", "[7c00000000000000]", "01")
    self.bid64_sqrt("4", "0", "[31c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[0760000000000000]", "[1c80000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "-0", "[b1c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[1a1d795b5ecb4196]", "[69385bff77084369]", "20", ulp: "-6.975172e-02")
    self.bid64_sqrt("4", "[3480000000000000]", "[3320000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[3ee0000000000000]", "[3840000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[5600000000000000]", "[43e0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[57e0000000000000]", "[44c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[8511027ffb80d6da]", "[7c00000000000000]", "01")
    self.bid64_sqrt("4", "+8898998.8898989999E0", "[304a992183892dd9]", "20", ulp: "2.349778e-01")
    self.bid64_sqrt("4", "+8.9889E0", "[2feaa6cd0fb67ec9]", "20", ulp: "8.604776e-03")
    self.bid64_sqrt("4", "[99c0000000000000]", "[a5c0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[aa80000000000000]", "[ae20000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "[d580000000000000]", "[c3a0000000000000]", "00", ulp: "0.000000e-01")
    self.bid64_sqrt("4", "Infinity", "[7800000000000000]", "00")
    self.bid64_sqrt("4", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sqrt("4", "QNaN", "[7c00000000000000]", "00")
    self.bid64_sqrt("4", "SNaN", "[7c00000000000000]", "01")
  }

  private func bid64_sqrt(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._squareRoot(rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_sub() {
    self.bid64_sub("0", "0", "0", "[31c0000000000000]", "00")
    self.bid64_sub("0", "[20e0000000000000]", "[617a5e2cb460216b]", "[e17a5e2cb460216b]", "00")
    self.bid64_sub("0", "[24a0000000000000]", "[04096b81bbbe37e6]", "[84096b81bbbe37e6]", "00")
    self.bid64_sub("0", "[3240000000000000]", "[e30339faf6bc826c]", "[630339faf6bc826c]", "00")
    self.bid64_sub("0", "-3263229488685.7997356E0", "-99899.98998E0", "[b16b97e3cc8a0892]", "20")
    self.bid64_sub("0", "[3c40000000000000]", "[1f15936627c2f870]", "[9f15936627c2f870]", "00")
    self.bid64_sub("0", "+566858769589697759.E0", "+9.999999899998E0", "[3214238cebfdf992]", "20")
    self.bid64_sub("0", "-5756665976.99597977E0", "-98.898999888899999988E0", "[b11473a838c12c54]", "20")
    self.bid64_sub("0", "[59e0000000000000]", "[1fccef3bcde09f5d]", "[9fccef3bcde09f5d]", "00")
    self.bid64_sub("0", "[68464c7def71f5ed]", "[ffffdffffffffff7]", "[fc00000000000000]", "01")
    self.bid64_sub("0", "+89889998889.9899E0", "-4.52956365533383E0", "[313fef72a14bfbaa]", "20")
    self.bid64_sub("0", "-997659856.578E0", "-85898.464563965244E0", "[ec3b70e1de1af618]", "20")
    self.bid64_sub("0", "+998888998.989889898E0", "-88999999989898.E0", "[319f9e97fc487d23]", "20")
    self.bid64_sub("0", "[9d7138194236bb0e]", "[9280000000000000]", "[9d7138194236bb0e]", "00")
    self.bid64_sub("0", "[a1c0000000000000]", "[4f40000000000000]", "[a1c0000000000000]", "00")
    self.bid64_sub("0", "[baa9845d3648aefc]", "[809864c7ffc047a5]", "[baa9845d3648aefc]", "20")
    self.bid64_sub("0", "[be40000000000000]", "[43d6aa7bbe6923b8]", "[c3d6aa7bbe6923b8]", "00")
    self.bid64_sub("0", "[c580000000000000]", "[3287459e3cb504b7]", "[b287459e3cb504b7]", "00")
    self.bid64_sub("0", "[ff3bf5fffee6d71b]", "[effffffffffbffff]", "[fc00000000000000]", "01")
    self.bid64_sub("0", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_sub("0", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sub("0", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_sub("1", "[0000000000000400]", "[0000000000000400]", "[8000000000000000]", "00")
    self.bid64_sub("1", "0", "0", "[b1c0000000000000]", "00")
    self.bid64_sub("1", "[20e0000000000000]", "[617a5e2cb460216b]", "[e17a5e2cb460216b]", "00")
    self.bid64_sub("1", "[24a0000000000000]", "[04096b81bbbe37e6]", "[84096b81bbbe37e6]", "00")
    self.bid64_sub("1", "[3240000000000000]", "[e30339faf6bc826c]", "[630339faf6bc826c]", "00")
    self.bid64_sub("1", "-3263229488685.7997356E0", "-99899.98998E0", "[b16b97e3cc8a0893]", "20")
    self.bid64_sub("1", "[3c40000000000000]", "[1f15936627c2f870]", "[9f15936627c2f870]", "00")
    self.bid64_sub("1", "+566858769589697759.E0", "+9.999999899998E0", "[3214238cebfdf991]", "20")
    self.bid64_sub("1", "-5756665976.99597977E0", "-98.898999888899999988E0", "[b11473a838c12c55]", "20")
    self.bid64_sub("1", "[59e0000000000000]", "[1fccef3bcde09f5d]", "[9fccef3bcde09f5d]", "00")
    self.bid64_sub("1", "+89889998889.9899E0", "-4.52956365533383E0", "[313fef72a14bfbaa]", "20")
    self.bid64_sub("1", "-997659856.578E0", "-85898.464563965244E0", "[ec3b70e1de1af619]", "20")
    self.bid64_sub("1", "+998888998.989889898E0", "-88999999989898.E0", "[319f9e97fc487d22]", "20")
    self.bid64_sub("1", "[9d7138194236bb0e]", "[9280000000000000]", "[9d7138194236bb0e]", "00")
    self.bid64_sub("1", "[a1c0000000000000]", "[4f40000000000000]", "[a1c0000000000000]", "00")
    self.bid64_sub("1", "[baa9845d3648aefc]", "[809864c7ffc047a5]", "[baa9845d3648aefc]", "20")
    self.bid64_sub("1", "[be40000000000000]", "[43d6aa7bbe6923b8]", "[c3d6aa7bbe6923b8]", "00")
    self.bid64_sub("1", "[c580000000000000]", "[3287459e3cb504b7]", "[b287459e3cb504b7]", "00")
    self.bid64_sub("1", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_sub("1", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sub("1", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_sub("2", "0", "0", "[31c0000000000000]", "00")
    self.bid64_sub("2", "[0400004200088800]", "[4200000000000001]", "[f00386f26fc0ffff]", "20")
    self.bid64_sub("2", "[20e0000000000000]", "[617a5e2cb460216b]", "[e17a5e2cb460216b]", "00")
    self.bid64_sub("2", "[24a0000000000000]", "[04096b81bbbe37e6]", "[84096b81bbbe37e6]", "00")
    self.bid64_sub("2", "[3240000000000000]", "[e30339faf6bc826c]", "[630339faf6bc826c]", "00")
    self.bid64_sub("2", "-3263229488685.7997356E0", "-99899.98998E0", "[b16b97e3cc8a0892]", "20")
    self.bid64_sub("2", "[3c40000000000000]", "[1f15936627c2f870]", "[9f15936627c2f870]", "00")
    self.bid64_sub("2", "+566858769589697759.E0", "+9.999999899998E0", "[3214238cebfdf992]", "20")
    self.bid64_sub("2", "-5756665976.99597977E0", "-98.898999888899999988E0", "[b11473a838c12c54]", "20")
    self.bid64_sub("2", "[59e0000000000000]", "[1fccef3bcde09f5d]", "[9fccef3bcde09f5d]", "00")
    self.bid64_sub("2", "+89889998889.9899E0", "-4.52956365533383E0", "[313fef72a14bfbab]", "20")
    self.bid64_sub("2", "-997659856.578E0", "-85898.464563965244E0", "[ec3b70e1de1af618]", "20")
    self.bid64_sub("2", "+998888998.989889898E0", "-88999999989898.E0", "[319f9e97fc487d23]", "20")
    self.bid64_sub("2", "[9d7138194236bb0e]", "[9280000000000000]", "[9d7138194236bb0e]", "00")
    self.bid64_sub("2", "[a1c0000000000000]", "[4f40000000000000]", "[a1c0000000000000]", "00")
    self.bid64_sub("2", "[baa9845d3648aefc]", "[809864c7ffc047a5]", "[baa9845d3648aefb]", "20")
    self.bid64_sub("2", "[be40000000000000]", "[43d6aa7bbe6923b8]", "[c3d6aa7bbe6923b8]", "00")
    self.bid64_sub("2", "[c580000000000000]", "[3287459e3cb504b7]", "[b287459e3cb504b7]", "00")
    self.bid64_sub("2", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_sub("2", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sub("2", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_sub("3", "0", "0", "[31c0000000000000]", "00")
    self.bid64_sub("3", "[20e0000000000000]", "[617a5e2cb460216b]", "[e17a5e2cb460216b]", "00")
    self.bid64_sub("3", "[24a0000000000000]", "[04096b81bbbe37e6]", "[84096b81bbbe37e6]", "00")
    self.bid64_sub("3", "[3240000000000000]", "[e30339faf6bc826c]", "[630339faf6bc826c]", "00")
    self.bid64_sub("3", "-3263229488685.7997356E0", "-99899.98998E0", "[b16b97e3cc8a0892]", "20")
    self.bid64_sub("3", "[3c40000000000000]", "[1f15936627c2f870]", "[9f15936627c2f870]", "00")
    self.bid64_sub("3", "+566858769589697759.E0", "+9.999999899998E0", "[3214238cebfdf991]", "20")
    self.bid64_sub("3", "-5756665976.99597977E0", "-98.898999888899999988E0", "[b11473a838c12c54]", "20")
    self.bid64_sub("3", "[59e0000000000000]", "[1fccef3bcde09f5d]", "[9fccef3bcde09f5d]", "00")
    self.bid64_sub("3", "+89889998889.9899E0", "-4.52956365533383E0", "[313fef72a14bfbaa]", "20")
    self.bid64_sub("3", "-997659856.578E0", "-85898.464563965244E0", "[ec3b70e1de1af618]", "20")
    self.bid64_sub("3", "+998888998.989889898E0", "-88999999989898.E0", "[319f9e97fc487d22]", "20")
    self.bid64_sub("3", "[9d7138194236bb0e]", "[9280000000000000]", "[9d7138194236bb0e]", "00")
    self.bid64_sub("3", "[a1c0000000000000]", "[4f40000000000000]", "[a1c0000000000000]", "00")
    self.bid64_sub("3", "[baa9845d3648aefc]", "[809864c7ffc047a5]", "[baa9845d3648aefb]", "20")
    self.bid64_sub("3", "[be40000000000000]", "[43d6aa7bbe6923b8]", "[c3d6aa7bbe6923b8]", "00")
    self.bid64_sub("3", "[c580000000000000]", "[3287459e3cb504b7]", "[b287459e3cb504b7]", "00")
    self.bid64_sub("3", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_sub("3", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sub("3", "SNaN", "-0", "[7c00000000000000]", "01")
    self.bid64_sub("4", "0", "0", "[31c0000000000000]", "00")
    self.bid64_sub("4", "[20e0000000000000]", "[617a5e2cb460216b]", "[e17a5e2cb460216b]", "00")
    self.bid64_sub("4", "[24a0000000000000]", "[04096b81bbbe37e6]", "[84096b81bbbe37e6]", "00")
    self.bid64_sub("4", "[3240000000000000]", "[e30339faf6bc826c]", "[630339faf6bc826c]", "00")
    self.bid64_sub("4", "-3263229488685.7997356E0", "-99899.98998E0", "[b16b97e3cc8a0892]", "20")
    self.bid64_sub("4", "[3c40000000000000]", "[1f15936627c2f870]", "[9f15936627c2f870]", "00")
    self.bid64_sub("4", "+566858769589697759.E0", "+9.999999899998E0", "[3214238cebfdf992]", "20")
    self.bid64_sub("4", "-5756665976.99597977E0", "-98.898999888899999988E0", "[b11473a838c12c54]", "20")
    self.bid64_sub("4", "[59e0000000000000]", "[1fccef3bcde09f5d]", "[9fccef3bcde09f5d]", "00")
    self.bid64_sub("4", "+89889998889.9899E0", "-4.52956365533383E0", "[313fef72a14bfbaa]", "20")
    self.bid64_sub("4", "-997659856.578E0", "-85898.464563965244E0", "[ec3b70e1de1af618]", "20")
    self.bid64_sub("4", "+998888998.989889898E0", "-88999999989898.E0", "[319f9e97fc487d23]", "20")
    self.bid64_sub("4", "[9d7138194236bb0e]", "[9280000000000000]", "[9d7138194236bb0e]", "00")
    self.bid64_sub("4", "[a1c0000000000000]", "[4f40000000000000]", "[a1c0000000000000]", "00")
    self.bid64_sub("4", "[baa9845d3648aefc]", "[809864c7ffc047a5]", "[baa9845d3648aefc]", "20")
    self.bid64_sub("4", "[be40000000000000]", "[43d6aa7bbe6923b8]", "[c3d6aa7bbe6923b8]", "00")
    self.bid64_sub("4", "[c580000000000000]", "[3287459e3cb504b7]", "[b287459e3cb504b7]", "00")
    self.bid64_sub("4", "Infinity", "-0", "[7800000000000000]", "00")
    self.bid64_sub("4", "-Infinity", "-Infinity", "[7c00000000000000]", "01")
    self.bid64_sub("4", "SNaN", "-0", "[7c00000000000000]", "01")
  }

  private func bid64_sub(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._subtracting(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_bid128() {
    self.bid64_to_bid128("0", "[0000000000000000]", "[2d240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[0000000000000001]", "[2d240000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[0000000000000064]", "[2d240000000000000000000000000064]", "00")
    self.bid64_to_bid128("0", "[0000000000989e50]", "[2d240000000000000000000000989e50]", "00")
    self.bid64_to_bid128("0", "[00001231276e5fb2]", "[2d2400000000000000001231276e5fb2]", "00")
    self.bid64_to_bid128("0", "[000462d53c8abac0]", "[2d24000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[00071b33671d6160]", "[2d2400000000000000071b33671d6160]", "00")
    self.bid64_to_bid128("0", "[0020000000000000]", "[2d260000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[002462d53c8abac0]", "[2d26000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[0040000005f62f23]", "[2d280000000000000000000005f62f23]", "00")
    self.bid64_to_bid128("0", "[00a0000005f62f23]", "[2d2e0000000000000000000005f62f23]", "00")
    self.bid64_to_bid128("0", "[01a0000000000000]", "[2d3e0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[01a0000000000001]", "[2d3e0000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[2fe71afd498d0000]", "[302200000000000000071afd498d0000]", "00")
    self.bid64_to_bid128("0", "[3000b5e620f48000]", "[30240000000000000000b5e620f48000]", "00")
    self.bid64_to_bid128("0", "[302012309ce54000]", "[3026000000000000000012309ce54000]", "00")
    self.bid64_to_bid128("0", "[304001d1a94a2000]", "[3028000000000000000001d1a94a2000]", "00")
    self.bid64_to_bid128("0", "[3060002e90edd000]", "[302a0000000000000000002e90edd000]", "00")
    self.bid64_to_bid128("0", "[30800004a817c800]", "[302c00000000000000000004a817c800]", "00")
    self.bid64_to_bid128("0", "[30a0000077359400]", "[302e0000000000000000000077359400]", "00")
    self.bid64_to_bid128("0", "[30c000000bebc200]", "[3030000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[30e0000001312d00]", "[30320000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[31000000001e8480]", "[303400000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[3120000000030d40]", "[30360000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[3140000000004e20]", "[30380000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[31600000000007d0]", "[303a00000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[31800000000000c8]", "[303c00000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[31a0000000000014]", "[303e0000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[31c0000000000001]", "[30400000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[31c0000000000002]", "[30400000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[31c0000000000003]", "[30400000000000000000000000000003]", "00")
    self.bid64_to_bid128("0", "[31c0000000000004]", "[30400000000000000000000000000004]", "00")
    self.bid64_to_bid128("0", "[31c0000000000008]", "[30400000000000000000000000000008]", "00")
    self.bid64_to_bid128("0", "[31c0000000000010]", "[30400000000000000000000000000010]", "00")
    self.bid64_to_bid128("0", "[31c0000000000020]", "[30400000000000000000000000000020]", "00")
    self.bid64_to_bid128("0", "[31c0000000000040]", "[30400000000000000000000000000040]", "00")
    self.bid64_to_bid128("0", "[31c0000000000080]", "[30400000000000000000000000000080]", "00")
    self.bid64_to_bid128("0", "[31c0000000000100]", "[30400000000000000000000000000100]", "00")
    self.bid64_to_bid128("0", "[31c0000000000200]", "[30400000000000000000000000000200]", "00")
    self.bid64_to_bid128("0", "[31c0000000000400]", "[30400000000000000000000000000400]", "00")
    self.bid64_to_bid128("0", "[31c0000000000800]", "[30400000000000000000000000000800]", "00")
    self.bid64_to_bid128("0", "[31c0000000001000]", "[30400000000000000000000000001000]", "00")
    self.bid64_to_bid128("0", "[31c0000000002000]", "[30400000000000000000000000002000]", "00")
    self.bid64_to_bid128("0", "[31c0000000004000]", "[30400000000000000000000000004000]", "00")
    self.bid64_to_bid128("0", "[31c0000000008000]", "[30400000000000000000000000008000]", "00")
    self.bid64_to_bid128("0", "[31c0000000010000]", "[30400000000000000000000000010000]", "00")
    self.bid64_to_bid128("0", "[31c0000000020000]", "[30400000000000000000000000020000]", "00")
    self.bid64_to_bid128("0", "[31c0000000040000]", "[30400000000000000000000000040000]", "00")
    self.bid64_to_bid128("0", "[31c0000000080000]", "[30400000000000000000000000080000]", "00")
    self.bid64_to_bid128("0", "[31c0000000100000]", "[30400000000000000000000000100000]", "00")
    self.bid64_to_bid128("0", "[31c0000000200000]", "[30400000000000000000000000200000]", "00")
    self.bid64_to_bid128("0", "[31c0000000400000]", "[30400000000000000000000000400000]", "00")
    self.bid64_to_bid128("0", "[31c0000000800000]", "[30400000000000000000000000800000]", "00")
    self.bid64_to_bid128("0", "[31c0000001000000]", "[30400000000000000000000001000000]", "00")
    self.bid64_to_bid128("0", "[31c0000002000000]", "[30400000000000000000000002000000]", "00")
    self.bid64_to_bid128("0", "[31c0000004000000]", "[30400000000000000000000004000000]", "00")
    self.bid64_to_bid128("0", "[31c0000008000000]", "[30400000000000000000000008000000]", "00")
    self.bid64_to_bid128("0", "[31c0000010000000]", "[30400000000000000000000010000000]", "00")
    self.bid64_to_bid128("0", "[31c0000020000000]", "[30400000000000000000000020000000]", "00")
    self.bid64_to_bid128("0", "[31c0000040000000]", "[30400000000000000000000040000000]", "00")
    self.bid64_to_bid128("0", "[31c0000080000000]", "[30400000000000000000000080000000]", "00")
    self.bid64_to_bid128("0", "[31c0000100000000]", "[30400000000000000000000100000000]", "00")
    self.bid64_to_bid128("0", "[31c0000200000000]", "[30400000000000000000000200000000]", "00")
    self.bid64_to_bid128("0", "[31c0000400000000]", "[30400000000000000000000400000000]", "00")
    self.bid64_to_bid128("0", "[31c0000800000000]", "[30400000000000000000000800000000]", "00")
    self.bid64_to_bid128("0", "[31c0001000000000]", "[30400000000000000000001000000000]", "00")
    self.bid64_to_bid128("0", "[31c0002000000000]", "[30400000000000000000002000000000]", "00")
    self.bid64_to_bid128("0", "[31c0004000000000]", "[30400000000000000000004000000000]", "00")
    self.bid64_to_bid128("0", "[31c0008000000000]", "[30400000000000000000008000000000]", "00")
    self.bid64_to_bid128("0", "[31c0010000000000]", "[30400000000000000000010000000000]", "00")
    self.bid64_to_bid128("0", "[31c0020000000000]", "[30400000000000000000020000000000]", "00")
    self.bid64_to_bid128("0", "[31c0040000000000]", "[30400000000000000000040000000000]", "00")
    self.bid64_to_bid128("0", "[31c0080000000000]", "[30400000000000000000080000000000]", "00")
    self.bid64_to_bid128("0", "[31c0100000000000]", "[30400000000000000000100000000000]", "00")
    self.bid64_to_bid128("0", "[31c0200000000000]", "[30400000000000000000200000000000]", "00")
    self.bid64_to_bid128("0", "[31c0400000000000]", "[30400000000000000000400000000000]", "00")
    self.bid64_to_bid128("0", "[31c0800000000000]", "[30400000000000000000800000000000]", "00")
    self.bid64_to_bid128("0", "[31c1000000000000]", "[30400000000000000001000000000000]", "00")
    self.bid64_to_bid128("0", "[31c2000000000000]", "[30400000000000000002000000000000]", "00")
    self.bid64_to_bid128("0", "[31c4000000000000]", "[30400000000000000004000000000000]", "00")
    self.bid64_to_bid128("0", "[31c8000000000000]", "[30400000000000000008000000000000]", "00")
    self.bid64_to_bid128("0", "[31d0000000000000]", "[30400000000000000010000000000000]", "00")
    self.bid64_to_bid128("0", "[3c671afd498d0000]", "[30ea00000000000000071afd498d0000]", "00")
    self.bid64_to_bid128("0", "[3c80b5e620f48000]", "[30ec0000000000000000b5e620f48000]", "00")
    self.bid64_to_bid128("0", "[3ca012309ce54000]", "[30ee000000000000000012309ce54000]", "00")
    self.bid64_to_bid128("0", "[3cc001d1a94a2000]", "[30f0000000000000000001d1a94a2000]", "00")
    self.bid64_to_bid128("0", "[3ce0002e90edd000]", "[30f20000000000000000002e90edd000]", "00")
    self.bid64_to_bid128("0", "[3d000004a817c800]", "[30f400000000000000000004a817c800]", "00")
    self.bid64_to_bid128("0", "[3d20000077359400]", "[30f60000000000000000000077359400]", "00")
    self.bid64_to_bid128("0", "[3d4000000bebc200]", "[30f8000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[3d60000001312d00]", "[30fa0000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[3d800000001e8480]", "[30fc00000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[3da0000000030d40]", "[30fe0000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[3dc0000000004e20]", "[31000000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[3de00000000007d0]", "[310200000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[3e000000000000c8]", "[310400000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[3e20000000000014]", "[31060000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[3e40000000000002]", "[31080000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[5fa0000000000000]", "[331e0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fa0000000000001]", "[331e0000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[5fc0000000000000]", "[33200000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fc462d53c8abac0]", "[3320000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[5fe0000000000000]", "[33220000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[5fe71b33671d6160]", "[332200000000000000071b33671d6160]", "00")
    self.bid64_to_bid128("0", "[5fe841f5e8ceedc0]", "[3322000000000000000841f5e8ceedc0]", "00")
    self.bid64_to_bid128("0", "[6002b75d7734cd9e]", "[2d240000000000000022b75d7734cd9e]", "00")
    self.bid64_to_bid128("0", "[6003b75d7734cd9e]", "[2d240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[69dbb75d7734cd9e]", "[2f9a0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[6c70000000000000]", "[30400000000000000020000000000000]", "00")
    self.bid64_to_bid128("0", "[77fb81c8f23c4dc0]", "[3322000000000000002381c8f23c4dc0]", "00")
    self.bid64_to_bid128("0", "[77fb86f26fc0fffe]", "[3322000000000000002386f26fc0fffe]", "00")
    self.bid64_to_bid128("0", "[77fb86f26fc0ffff]", "[3322000000000000002386f26fc0ffff]", "00")
    self.bid64_to_bid128("0", "[7800000000000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7800000000000001]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7800000100000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7803ffffffffffff]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f0000000000000]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f0000000000001]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[78f3ffffffffffff]", "[78000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00000000000000]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00000000000001]", "[7c000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[7c00000100000000]", "[7c0000000de0b6b3a764000000000000]", "00")
    self.bid64_to_bid128("0", "[7c00003b9aca0000]", "[7c0000033b2e3c9fd0803ce800000000]", "00")
    self.bid64_to_bid128("0", "[7c03ffffffffffff]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7cf0000000000000]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7cf0000000000001]", "[7c000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[7cf3ffffffffffff]", "[7c000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[7e00000000000000]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7e00000000000001]", "[7c000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[7e00000100000000]", "[7c0000000de0b6b3a764000000000000]", "01")
    self.bid64_to_bid128("0", "[7e03ffffffffffff]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7ef0000000000000]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[7ef0000000000001]", "[7c000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[7ef3ffffffffffff]", "[7c000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[8000000000000001]", "[ad240000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[800000000000000c]", "[ad24000000000000000000000000000c]", "00")
    self.bid64_to_bid128("0", "[800000000bebc200]", "[ad24000000000000000000000bebc200]", "00")
    self.bid64_to_bid128("0", "[8020000001312d00]", "[ad260000000000000000000001312d00]", "00")
    self.bid64_to_bid128("0", "[80400000001e8480]", "[ad2800000000000000000000001e8480]", "00")
    self.bid64_to_bid128("0", "[8060000000030d40]", "[ad2a0000000000000000000000030d40]", "00")
    self.bid64_to_bid128("0", "[8080000000004e20]", "[ad2c0000000000000000000000004e20]", "00")
    self.bid64_to_bid128("0", "[80a00000000007d0]", "[ad2e00000000000000000000000007d0]", "00")
    self.bid64_to_bid128("0", "[80c00000000000c8]", "[ad3000000000000000000000000000c8]", "00")
    self.bid64_to_bid128("0", "[80e0000000000014]", "[ad320000000000000000000000000014]", "00")
    self.bid64_to_bid128("0", "[8100000000000002]", "[ad340000000000000000000000000002]", "00")
    self.bid64_to_bid128("0", "[dfc0000000000000]", "[b3200000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[dfc0000000000001]", "[b3200000000000000000000000000001]", "00")
    self.bid64_to_bid128("0", "[dfe462d53c8abac0]", "[b322000000000000000462d53c8abac0]", "00")
    self.bid64_to_bid128("0", "[e002b75d7734cd9e]", "[ad240000000000000022b75d7734cd9e]", "00")
    self.bid64_to_bid128("0", "[e003b75d7734cd9e]", "[ad240000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[e9dbb75d7734cd9e]", "[af9a0000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f7fb86f26fc0ffff]", "[b322000000000000002386f26fc0ffff]", "00")
    self.bid64_to_bid128("0", "[f800000000000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f800000000000001]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f800000100000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f803ffffffffffff]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f0000000000000]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f0000000000001]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[f8f3ffffffffffff]", "[f8000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fc00000000000000]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fc00000000000001]", "[fc000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[fc00000100000000]", "[fc0000000de0b6b3a764000000000000]", "00")
    self.bid64_to_bid128("0", "[fc03ffffffffffff]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fcf0000000000000]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fcf0000000000001]", "[fc000000000000000de0b6b3a7640000]", "00")
    self.bid64_to_bid128("0", "[fcf3ffffffffffff]", "[fc000000000000000000000000000000]", "00")
    self.bid64_to_bid128("0", "[fe00000000000000]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fe00000000000001]", "[fc000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[fe00000100000000]", "[fc0000000de0b6b3a764000000000000]", "01")
    self.bid64_to_bid128("0", "[fe03ffffffffffff]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fef0000000000000]", "[fc000000000000000000000000000000]", "01")
    self.bid64_to_bid128("0", "[fef0000000000001]", "[fc000000000000000de0b6b3a7640000]", "01")
    self.bid64_to_bid128("0", "[fef3ffffffffffff]", "[fc000000000000000000000000000000]", "01")
  }

  private func bid64_to_bid128(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal128._fromDecimal64(arg0, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_bid32() {
    self.bid64_to_bid32("0", "[0000000002081018]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[0000000004000001]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[00009405c2420001]", "[00000000]", "30")
    self.bid64_to_bid32("0", "[2401080102d11508]", "[00046de3]", "30")
    self.bid64_to_bid32("0", "[4040000000008000]", "[78000000]", "28")
    self.bid64_to_bid32("0", "[45e3aa726bf8c1af]", "[78000000]", "28")
    self.bid64_to_bid32("0", "[68fb86f234263601]", "[000f4240]", "30")
    self.bid64_to_bid32("0", "[7c00003b9aca0000]", "[7c000100]", "00")
    self.bid64_to_bid32("0", "[7e73e8f4c9c3c3b8]", "[7c000000]", "01")
    self.bid64_to_bid32("0", "9.999999999999999E+384", "[78000000]", "28")
    self.bid64_to_bid32("0", "[b563ebfdfefd7e36]", "[c590d81d]", "20")
    self.bid64_to_bid32("0", "[e895d1a75bc418c6]", "[80000000]", "00")
    self.bid64_to_bid32("0", "[e8fb86f234263601]", "[800f4240]", "30")
    self.bid64_to_bid32("0", "[ec60334bd86bec30]", "[ed8a4cb0]", "20")
    self.bid64_to_bid32("0", "[f7effbbfeffff6ff]", "[df800000]", "00")
    self.bid64_to_bid32("0", "[f8e033e5145dcea9]", "[f8000000]", "00")
    self.bid64_to_bid32("1", "[0000000002081018]", "[00000000]", "30")
    self.bid64_to_bid32("1", "[00009405c2420001]", "[00000000]", "30")
    self.bid64_to_bid32("1", "[45e3aa726bf8c1af]", "[77f8967f]", "28")
    self.bid64_to_bid32("1", "[68fb86f234263601]", "[000f423f]", "30")
    self.bid64_to_bid32("1", "[8409fa41e971c020]", "[80000001]", "30")
    self.bid64_to_bid32("1", "[e8fb86f234263601]", "[800f4240]", "30", underflowBeforeOnly: true)
    self.bid64_to_bid32("2", "[0000000002081018]", "[00000001]", "30")
    self.bid64_to_bid32("2", "[00009405c2420001]", "[00000001]", "30")
    self.bid64_to_bid32("2", "[45e3aa726bf8c1af]", "[78000000]", "28")
    self.bid64_to_bid32("2", "[68fb86f234263601]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid64_to_bid32("2", "[8a6d66b1506ee969]", "[80000000]", "30")
    self.bid64_to_bid32("2", "[d7d0e396fb4bffa3]", "[f7f8967f]", "28")
    self.bid64_to_bid32("2", "[e8fb86f234263601]", "[800f423f]", "30")
    self.bid64_to_bid32("3", "[45e3aa726bf8c1af]", "[77f8967f]", "28")
    self.bid64_to_bid32("3", "[68fb86f234263601]", "[000f423f]", "30")
    self.bid64_to_bid32("3", "[e8fb86f234263601]", "[800f423f]", "30")
    self.bid64_to_bid32("4", "[68fb86f234263601]", "[000f4240]", "30")
    self.bid64_to_bid32("4", "[e8fb86f234263601]", "[800f4240]", "30")
  }

  private func bid64_to_bid32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._fromDecimal64(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_binary32() {
    self.bid64_to_binary32("0", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[0000000000000001]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[002386F26FC10000]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[0755F0E047737E1E]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[0755F0E1B78F093B]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[0768C6C01C9498D9]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[0768C6C0AFD2D07E]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[076D2A202ADEE545]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[07718D80392931B1]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[07718D815FA5A0FC]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[077A544055BDCA8A]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[07C8FCAC257558EE]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[07C8FCACBC3C39D9]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[2A263917877CEC05]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[2A263917EFE491AE]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[2A38E45E1DF3B015]", "[00000000]", "30")
    self.bid64_to_binary32("0", "[2A38E45FBF9246B7]", "[00000001]", "30")
    self.bid64_to_binary32("0", "[2A43BBDAEAE48D9D]", "[00000001]", "30")
    self.bid64_to_binary32("0", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("0", "[2A44FA793930BCD1]", "[00000001]", "30")
    self.bid64_to_binary32("0", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("0", "[2A44FA798CB6DAF1]", "[00000001]", "30")
    self.bid64_to_binary32("0", "[2A4777B5D5C91B3A]", "[00000002]", "30")
    self.bid64_to_binary32("0", "[2A997D4DF19D6057]", "[00000200]", "30")
    self.bid64_to_binary32("0", "[2A997D4F9D41D1A1]", "[00000200]", "30")
    self.bid64_to_binary32("0", "[2aa3affb0f2905fd]", "[000002e5]", "0x30")
    self.bid64_to_binary32("0", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("0", "[2B242D1B170a4800]", "[00800000]", "30")
    self.bid64_to_binary32("0", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("0", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("0", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("0", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("0", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("0", "[2c442f5df29aeee1]", "[0f6eec3e]", "0x20")
    self.bid64_to_binary32("0", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("0", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("0", "[2de2ec6b64bf3205]", "[24bdbf34]", "0x20")
    self.bid64_to_binary32("0", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("0", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("0", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("0", "[2f86ecf96983918e]", "[3aff8334]", "0x20")
    self.bid64_to_binary32("0", "[3040000000000001]", "[2B8CBCCC]", "20")
    self.bid64_to_binary32("0", "[30400001ffffffff]", "[3C0CBCCC]", "20")
    self.bid64_to_binary32("0", "[30400003ffffffff]", "[3C8CBCCC]", "20")
    self.bid64_to_binary32("0", "[30400007ffffffff]", "[3D0CBCCC]", "20")
    self.bid64_to_binary32("0", "[3040000fffffffff]", "[3D8CBCCC]", "20")
    self.bid64_to_binary32("0", "[3041ffffffffffff]", "[440CBCCC]", "20")
    self.bid64_to_binary32("0", "[304fffffffffffff]", "[458CBCCC]", "20")
    self.bid64_to_binary32("0", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("0", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("0", "[312c34ffffffffff]", "[51000000]", "0x20")
    self.bid64_to_binary32("0", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("0", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("0", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("0", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("0", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("0", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("0", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("0", "[32cab8b4dd16f1df]", "[667f9ee7]", "0x20")
    self.bid64_to_binary32("0", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("0", "[3391025d42033846]", "[70c15f64]", "0x20")
    self.bid64_to_binary32("0", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("0", "[34AC13C157F0C34F]", "[7F7FBE77]", "20")
    self.bid64_to_binary32("0", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("0", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("0", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[34B22246700E05BD]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[34C570AEBB37681F]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[5666615B7DDB9FDE]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[5669947D1313F3E2]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[567CBD77393BDBA6]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[6ad840293ad68f5b]", "[05410ff2]", "0x20")
    self.bid64_to_binary32("0", "[6b426a519502caeb]", "[1aea37ec]", "0x20")
    self.bid64_to_binary32("0", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("0", "[6c1386f26fc0ffff]", "[461c4000]", "0x20")
    self.bid64_to_binary32("0", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("0", "[6C7386F26FC10000]", "[00000000]", "00")
    self.bid64_to_binary32("0", "[6c7b86f133333333]", "[5bb1a2b6]", "0x20")
    self.bid64_to_binary32("0", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[77FB86F26FC0FFFF]", "[7F800000]", "28")
    self.bid64_to_binary32("0", "[77fb86f26fc10000]", "[00000000]", "00")
    self.bid64_to_binary32("0", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("0", "[7c00000000000000]", "[7FC00000]", "00")
    self.bid64_to_binary32("0", "[7c038D7EA4C67FFF]", "[7FF8D7EA]", "00")
    self.bid64_to_binary32("0", "[7c038D7EA4C68000]", "[7FC00000]", "00")
    self.bid64_to_binary32("0", "[7e00000000000000]", "[7FC00000]", "01")
    self.bid64_to_binary32("0", "[7e038D7EA4C67FFF]", "[7FF8D7EA]", "01")
    self.bid64_to_binary32("0", "[7e038D7EA4C68000]", "[7FC00000]", "01")
    self.bid64_to_binary32("0", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("0", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("0", "[aaa3affb0f2905fd]", "[800002e5]", "0x30")
    self.bid64_to_binary32("0", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("0", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("0", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("0", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("0", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("0", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("0", "[ac442f5df29aeee1]", "[8f6eec3e]", "0x20")
    self.bid64_to_binary32("0", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("0", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("0", "[ade2ec6b64bf3205]", "[a4bdbf34]", "0x20")
    self.bid64_to_binary32("0", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("0", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("0", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("0", "[af86ecf96983918e]", "[baff8334]", "0x20")
    self.bid64_to_binary32("0", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("0", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("0", "[b12c34ffffffffff]", "[d1000000]", "0x20")
    self.bid64_to_binary32("0", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("0", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("0", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("0", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("0", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("0", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("0", "[b2cab8b4dd16f1df]", "[e67f9ee7]", "0x20")
    self.bid64_to_binary32("0", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("0", "[b391025d42033846]", "[f0c15f64]", "0x20")
    self.bid64_to_binary32("0", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[ead840293ad68f5b]", "[85410ff2]", "0x20")
    self.bid64_to_binary32("0", "[eb426a519502caeb]", "[9aea37ec]", "0x20")
    self.bid64_to_binary32("0", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("0", "[ec1386f26fc0ffff]", "[c61c4000]", "0x20")
    self.bid64_to_binary32("0", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("0", "[ec7b86f133333333]", "[dbb1a2b6]", "0x20")
    self.bid64_to_binary32("0", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("1", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[2a44fa793930bcd1]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("1", "[2aa3affb0f2905fd]", "[000002e4]", "0x30")
    self.bid64_to_binary32("1", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("1", "[2b242d1b1b375b8f]", "[007fffff]", "0x30")
    self.bid64_to_binary32("1", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("1", "[2b285a36366eb71f]", "[00ffffff]", "0x20")
    self.bid64_to_binary32("1", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("1", "[2be1345d833d6b0b]", "[098cd61b]", "0x20")
    self.bid64_to_binary32("1", "[2c442f5df29aeee1]", "[0f6eec3e]", "0x20")
    self.bid64_to_binary32("1", "[2cb70105df3d47cb]", "[15a0507f]", "0x20")
    self.bid64_to_binary32("1", "[2d814c1d40d23351]", "[1f2c718e]", "0x20")
    self.bid64_to_binary32("1", "[2de2ec6b64bf3205]", "[24bdbf33]", "0x20")
    self.bid64_to_binary32("1", "[2e5100e91aa27c10]", "[2b06b74f]", "0x20")
    self.bid64_to_binary32("1", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("1", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("1", "[2f86ecf96983918e]", "[3aff8334]", "0x20")
    self.bid64_to_binary32("1", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("1", "[30c2faf07fffffff]", "[4affffff]", "0x20")
    self.bid64_to_binary32("1", "[312c34ffffffffff]", "[50ffffff]", "0x20")
    self.bid64_to_binary32("1", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("1", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("1", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("1", "[325a369f8a0902de]", "[607ffd6d]", "0x20")
    self.bid64_to_binary32("1", "[32cab8b4dd16f1df]", "[667f9ee6]", "0x20")
    self.bid64_to_binary32("1", "[33319b96f36ec68b]", "[6bccfb3f]", "0x20")
    self.bid64_to_binary32("1", "[3391025d42033846]", "[70c15f63]", "0x20")
    self.bid64_to_binary32("1", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d993f27f88]", "[7f7ffffe]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d9a0095928]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d9a0095929]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("1", "[6ad840293ad68f5b]", "[05410ff2]", "0x20")
    self.bid64_to_binary32("1", "[6b426a519502caeb]", "[1aea37eb]", "0x20")
    self.bid64_to_binary32("1", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("1", "[6c1386f26fc0ffff]", "[461c3fff]", "0x20")
    self.bid64_to_binary32("1", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("1", "[6c7b86f133333333]", "[5bb1a2b5]", "0x20")
    self.bid64_to_binary32("1", "[77fb86f26fc0ffff]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("1", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("1", "[8000000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[81e0000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[8200000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa319c03c40b2180]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa44fa793930bcd2]", "[80000002]", "0x30")
    self.bid64_to_binary32("1", "[aaa3affb0f2905fd]", "[800002e5]", "0x30")
    self.bid64_to_binary32("1", "[ab158c3cf6ba79d1]", "[80420b39]", "0x30")
    self.bid64_to_binary32("1", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("1", "[ab242d1b1b375b90]", "[80800001]", "0x20")
    self.bid64_to_binary32("1", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("1", "[ab285a36366eb720]", "[81000001]", "0x20")
    self.bid64_to_binary32("1", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("1", "[ac442f5df29aeee1]", "[8f6eec3f]", "0x20")
    self.bid64_to_binary32("1", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("1", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("1", "[ade2ec6b64bf3205]", "[a4bdbf34]", "0x20")
    self.bid64_to_binary32("1", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("1", "[aea132645e1ba93f]", "[ae142981]", "0x20")
    self.bid64_to_binary32("1", "[af20fe93dea50b6c]", "[b49646af]", "0x20")
    self.bid64_to_binary32("1", "[af86ecf96983918e]", "[baff8335]", "0x20")
    self.bid64_to_binary32("1", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("1", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("1", "[b12c34ffffffffff]", "[d1000000]", "0x20")
    self.bid64_to_binary32("1", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("1", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("1", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("1", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("1", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("1", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("1", "[b2cab8b4dd16f1df]", "[e67f9ee7]", "0x20")
    self.bid64_to_binary32("1", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("1", "[b391025d42033846]", "[f0c15f64]", "0x20")
    self.bid64_to_binary32("1", "[b3d608e7907c5218]", "[f443b54d]", "0x20")
    self.bid64_to_binary32("1", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("1", "[b4ac16d993f27f89]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[ead840293ad68f5b]", "[85410ff3]", "0x20")
    self.bid64_to_binary32("1", "[eb426a519502caeb]", "[9aea37ec]", "0x20")
    self.bid64_to_binary32("1", "[ebfb86ebe2df8032]", "[c11fffe3]", "0x20")
    self.bid64_to_binary32("1", "[ec1386f26fc0ffff]", "[c61c4000]", "0x20")
    self.bid64_to_binary32("1", "[ec6386f258ffffff]", "[d6b5e621]", "0x20")
    self.bid64_to_binary32("1", "[ec7b86f133333333]", "[dbb1a2b6]", "0x20")
    self.bid64_to_binary32("1", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("2", "[0000000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[01e0000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[0200000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[2a319c03c40b2180]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[2a44fa793930bcd2]", "[00000002]", "0x30")
    self.bid64_to_binary32("2", "[2aa3affb0f2905fd]", "[000002e5]", "0x30")
    self.bid64_to_binary32("2", "[2b158c3cf6ba79d1]", "[00420b39]", "0x30")
    self.bid64_to_binary32("2", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("2", "[2b242d1b1b375b90]", "[00800001]", "0x20")
    self.bid64_to_binary32("2", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("2", "[2b285a36366eb720]", "[01000001]", "0x20")
    self.bid64_to_binary32("2", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("2", "[2c442f5df29aeee1]", "[0f6eec3f]", "0x20")
    self.bid64_to_binary32("2", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("2", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("2", "[2de2ec6b64bf3205]", "[24bdbf34]", "0x20")
    self.bid64_to_binary32("2", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("2", "[2ea132645e1ba93f]", "[2e142981]", "0x20")
    self.bid64_to_binary32("2", "[2f20fe93dea50b6c]", "[349646af]", "0x20")
    self.bid64_to_binary32("2", "[2f86ecf96983918e]", "[3aff8335]", "0x20")
    self.bid64_to_binary32("2", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("2", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("2", "[312c34ffffffffff]", "[51000000]", "0x20")
    self.bid64_to_binary32("2", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("2", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("2", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("2", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("2", "[32cab8b4dd16f1df]", "[667f9ee7]", "0x20")
    self.bid64_to_binary32("2", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("2", "[3391025d42033846]", "[70c15f64]", "0x20")
    self.bid64_to_binary32("2", "[33d608e7907c5218]", "[7443b54d]", "0x20")
    self.bid64_to_binary32("2", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("2", "[34ac16d993f27f89]", "[7f800000]", "0x28")
    self.bid64_to_binary32("2", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("2", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("2", "[6ad840293ad68f5b]", "[05410ff3]", "0x20")
    self.bid64_to_binary32("2", "[6b426a519502caeb]", "[1aea37ec]", "0x20")
    self.bid64_to_binary32("2", "[6bfb86ebe2df8032]", "[411fffe3]", "0x20")
    self.bid64_to_binary32("2", "[6c1386f26fc0ffff]", "[461c4000]", "0x20")
    self.bid64_to_binary32("2", "[6c6386f258ffffff]", "[56b5e621]", "0x20")
    self.bid64_to_binary32("2", "[6c7b86f133333333]", "[5bb1a2b6]", "0x20")
    self.bid64_to_binary32("2", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("2", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("2", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("2", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("2", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("2", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("2", "[aa44fa793930bcd1]", "[80000000]", "0x30")
    self.bid64_to_binary32("2", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[aaa3affb0f2905fd]", "[800002e4]", "0x30")
    self.bid64_to_binary32("2", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("2", "[ab242d1b1b375b8f]", "[807fffff]", "0x30")
    self.bid64_to_binary32("2", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("2", "[ab285a36366eb71f]", "[80ffffff]", "0x20")
    self.bid64_to_binary32("2", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("2", "[abe1345d833d6b0b]", "[898cd61b]", "0x20")
    self.bid64_to_binary32("2", "[ac442f5df29aeee1]", "[8f6eec3e]", "0x20")
    self.bid64_to_binary32("2", "[acb70105df3d47cb]", "[95a0507f]", "0x20")
    self.bid64_to_binary32("2", "[ad814c1d40d23351]", "[9f2c718e]", "0x20")
    self.bid64_to_binary32("2", "[ade2ec6b64bf3205]", "[a4bdbf33]", "0x20")
    self.bid64_to_binary32("2", "[ae5100e91aa27c10]", "[ab06b74f]", "0x20")
    self.bid64_to_binary32("2", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("2", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("2", "[af86ecf96983918e]", "[baff8334]", "0x20")
    self.bid64_to_binary32("2", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("2", "[b0c2faf07fffffff]", "[caffffff]", "0x20")
    self.bid64_to_binary32("2", "[b12c34ffffffffff]", "[d0ffffff]", "0x20")
    self.bid64_to_binary32("2", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("2", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("2", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("2", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("2", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("2", "[b25a369f8a0902de]", "[e07ffd6d]", "0x20")
    self.bid64_to_binary32("2", "[b2cab8b4dd16f1df]", "[e67f9ee6]", "0x20")
    self.bid64_to_binary32("2", "[b3319b96f36ec68b]", "[ebccfb3f]", "0x20")
    self.bid64_to_binary32("2", "[b391025d42033846]", "[f0c15f63]", "0x20")
    self.bid64_to_binary32("2", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("2", "[b4ac16d993f27f88]", "[ff7ffffe]", "0x20")
    self.bid64_to_binary32("2", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("2", "[b4ac16d9a0095928]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("2", "[b4ac16d9a0095929]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("2", "[ead840293ad68f5b]", "[85410ff2]", "0x20")
    self.bid64_to_binary32("2", "[eb426a519502caeb]", "[9aea37eb]", "0x20")
    self.bid64_to_binary32("2", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("2", "[ec1386f26fc0ffff]", "[c61c3fff]", "0x20")
    self.bid64_to_binary32("2", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("2", "[ec7b86f133333333]", "[dbb1a2b5]", "0x20")
    self.bid64_to_binary32("2", "[f7fb86f26fc0ffff]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("2", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("3", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("3", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("3", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("3", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("3", "[2a44fa793930bcd1]", "[00000000]", "0x30")
    self.bid64_to_binary32("3", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[2aa3affb0f2905fd]", "[000002e4]", "0x30")
    self.bid64_to_binary32("3", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("3", "[2b242d1b1b375b8f]", "[007fffff]", "0x30")
    self.bid64_to_binary32("3", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("3", "[2b285a36366eb71f]", "[00ffffff]", "0x20")
    self.bid64_to_binary32("3", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("3", "[2be1345d833d6b0b]", "[098cd61b]", "0x20")
    self.bid64_to_binary32("3", "[2c442f5df29aeee1]", "[0f6eec3e]", "0x20")
    self.bid64_to_binary32("3", "[2cb70105df3d47cb]", "[15a0507f]", "0x20")
    self.bid64_to_binary32("3", "[2d814c1d40d23351]", "[1f2c718e]", "0x20")
    self.bid64_to_binary32("3", "[2de2ec6b64bf3205]", "[24bdbf33]", "0x20")
    self.bid64_to_binary32("3", "[2e5100e91aa27c10]", "[2b06b74f]", "0x20")
    self.bid64_to_binary32("3", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("3", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("3", "[2f86ecf96983918e]", "[3aff8334]", "0x20")
    self.bid64_to_binary32("3", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("3", "[30c2faf07fffffff]", "[4affffff]", "0x20")
    self.bid64_to_binary32("3", "[312c34ffffffffff]", "[50ffffff]", "0x20")
    self.bid64_to_binary32("3", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("3", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("3", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("3", "[325a369f8a0902de]", "[607ffd6d]", "0x20")
    self.bid64_to_binary32("3", "[32cab8b4dd16f1df]", "[667f9ee6]", "0x20")
    self.bid64_to_binary32("3", "[33319b96f36ec68b]", "[6bccfb3f]", "0x20")
    self.bid64_to_binary32("3", "[3391025d42033846]", "[70c15f63]", "0x20")
    self.bid64_to_binary32("3", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("3", "[34ac16d993f27f88]", "[7f7ffffe]", "0x20")
    self.bid64_to_binary32("3", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("3", "[34ac16d9a0095928]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("3", "[34ac16d9a0095929]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("3", "[6ad840293ad68f5b]", "[05410ff2]", "0x20")
    self.bid64_to_binary32("3", "[6b426a519502caeb]", "[1aea37eb]", "0x20")
    self.bid64_to_binary32("3", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("3", "[6c1386f26fc0ffff]", "[461c3fff]", "0x20")
    self.bid64_to_binary32("3", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("3", "[6c7b86f133333333]", "[5bb1a2b5]", "0x20")
    self.bid64_to_binary32("3", "[77fb86f26fc0ffff]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("3", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("3", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa44fa793930bcd1]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("3", "[aaa3affb0f2905fd]", "[800002e4]", "0x30")
    self.bid64_to_binary32("3", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("3", "[ab242d1b1b375b8f]", "[807fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("3", "[ab285a36366eb71f]", "[80ffffff]", "0x20")
    self.bid64_to_binary32("3", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("3", "[abe1345d833d6b0b]", "[898cd61b]", "0x20")
    self.bid64_to_binary32("3", "[ac442f5df29aeee1]", "[8f6eec3e]", "0x20")
    self.bid64_to_binary32("3", "[acb70105df3d47cb]", "[95a0507f]", "0x20")
    self.bid64_to_binary32("3", "[ad814c1d40d23351]", "[9f2c718e]", "0x20")
    self.bid64_to_binary32("3", "[ade2ec6b64bf3205]", "[a4bdbf33]", "0x20")
    self.bid64_to_binary32("3", "[ae5100e91aa27c10]", "[ab06b74f]", "0x20")
    self.bid64_to_binary32("3", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("3", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("3", "[af86ecf96983918e]", "[baff8334]", "0x20")
    self.bid64_to_binary32("3", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("3", "[b0c2faf07fffffff]", "[caffffff]", "0x20")
    self.bid64_to_binary32("3", "[b12c34ffffffffff]", "[d0ffffff]", "0x20")
    self.bid64_to_binary32("3", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("3", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("3", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("3", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("3", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("3", "[b25a369f8a0902de]", "[e07ffd6d]", "0x20")
    self.bid64_to_binary32("3", "[b2cab8b4dd16f1df]", "[e67f9ee6]", "0x20")
    self.bid64_to_binary32("3", "[b3319b96f36ec68b]", "[ebccfb3f]", "0x20")
    self.bid64_to_binary32("3", "[b391025d42033846]", "[f0c15f63]", "0x20")
    self.bid64_to_binary32("3", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d993f27f88]", "[ff7ffffe]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d9a0095928]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d9a0095929]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("3", "[ead840293ad68f5b]", "[85410ff2]", "0x20")
    self.bid64_to_binary32("3", "[eb426a519502caeb]", "[9aea37eb]", "0x20")
    self.bid64_to_binary32("3", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("3", "[ec1386f26fc0ffff]", "[c61c3fff]", "0x20")
    self.bid64_to_binary32("3", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("3", "[ec7b86f133333333]", "[dbb1a2b5]", "0x20")
    self.bid64_to_binary32("3", "[f7fb86f26fc0ffff]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("3", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("4", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("4", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("4", "[2aa3affb0f2905fd]", "[000002e5]", "0x30")
    self.bid64_to_binary32("4", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("4", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("4", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("4", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("4", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("4", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("4", "[2c442f5df29aeee1]", "[0f6eec3e]", "0x20")
    self.bid64_to_binary32("4", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("4", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("4", "[2de2ec6b64bf3205]", "[24bdbf34]", "0x20")
    self.bid64_to_binary32("4", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("4", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("4", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("4", "[2f86ecf96983918e]", "[3aff8334]", "0x20")
    self.bid64_to_binary32("4", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("4", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("4", "[312c34ffffffffff]", "[51000000]", "0x20")
    self.bid64_to_binary32("4", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("4", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("4", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("4", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("4", "[32cab8b4dd16f1df]", "[667f9ee7]", "0x20")
    self.bid64_to_binary32("4", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("4", "[3391025d42033846]", "[70c15f64]", "0x20")
    self.bid64_to_binary32("4", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("4", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("4", "[6ad840293ad68f5b]", "[05410ff2]", "0x20")
    self.bid64_to_binary32("4", "[6b426a519502caeb]", "[1aea37ec]", "0x20")
    self.bid64_to_binary32("4", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("4", "[6c1386f26fc0ffff]", "[461c4000]", "0x20")
    self.bid64_to_binary32("4", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("4", "[6c7b86f133333333]", "[5bb1a2b6]", "0x20")
    self.bid64_to_binary32("4", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("4", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("4", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("4", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("4", "[aaa3affb0f2905fd]", "[800002e5]", "0x30")
    self.bid64_to_binary32("4", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("4", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("4", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("4", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("4", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("4", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("4", "[ac442f5df29aeee1]", "[8f6eec3e]", "0x20")
    self.bid64_to_binary32("4", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("4", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("4", "[ade2ec6b64bf3205]", "[a4bdbf34]", "0x20")
    self.bid64_to_binary32("4", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("4", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("4", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("4", "[af86ecf96983918e]", "[baff8334]", "0x20")
    self.bid64_to_binary32("4", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("4", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("4", "[b12c34ffffffffff]", "[d1000000]", "0x20")
    self.bid64_to_binary32("4", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("4", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("4", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("4", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("4", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("4", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("4", "[b2cab8b4dd16f1df]", "[e67f9ee7]", "0x20")
    self.bid64_to_binary32("4", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("4", "[b391025d42033846]", "[f0c15f64]", "0x20")
    self.bid64_to_binary32("4", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("4", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("4", "[ead840293ad68f5b]", "[85410ff2]", "0x20")
    self.bid64_to_binary32("4", "[eb426a519502caeb]", "[9aea37ec]", "0x20")
    self.bid64_to_binary32("4", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("4", "[ec1386f26fc0ffff]", "[c61c4000]", "0x20")
    self.bid64_to_binary32("4", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("4", "[ec7b86f133333333]", "[dbb1a2b6]", "0x20")
    self.bid64_to_binary32("4", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("4", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("0", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[0000000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[0000000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[00038d7ea4c67fff]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[00038d7ea4c67fff]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[00038d7ea4c67fff]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[00038d7ea4c67fff]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[00038d7ea4c67fff]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[01e0000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[01e0000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[0200000000000001]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[0200000000000001]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("1", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[2a319c03c40b2180]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[2a319c03c40b2180]", "[00000000]", "0x30")
    self.bid64_to_binary32("0", "[2a44f1aa50561d26]", "[00000001]", "0x30")
    self.bid64_to_binary32("1", "[2a44f1aa50561d26]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[2a44f1aa50561d26]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[2a44f1aa50561d26]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[2a44f1aa50561d26]", "[00000001]", "0x30")
    self.bid64_to_binary32("0", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("1", "[2a44fa793930bcd1]", "[00000000]", "0x30")
    self.bid64_to_binary32("2", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("3", "[2a44fa793930bcd1]", "[00000000]", "0x30")
    self.bid64_to_binary32("4", "[2a44fa793930bcd1]", "[00000001]", "0x30")
    self.bid64_to_binary32("0", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("1", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("2", "[2a44fa793930bcd2]", "[00000002]", "0x30")
    self.bid64_to_binary32("3", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("4", "[2a44fa793930bcd2]", "[00000001]", "0x30")
    self.bid64_to_binary32("0", "[2a6e94fa71ab1db7]", "[0000001d]", "0x30")
    self.bid64_to_binary32("1", "[2a6e94fa71ab1db7]", "[0000001d]", "0x30")
    self.bid64_to_binary32("2", "[2a6e94fa71ab1db7]", "[0000001e]", "0x30")
    self.bid64_to_binary32("3", "[2a6e94fa71ab1db7]", "[0000001d]", "0x30")
    self.bid64_to_binary32("4", "[2a6e94fa71ab1db7]", "[0000001d]", "0x30")
    self.bid64_to_binary32("0", "[2a81ed766d11001d]", "[00000027]", "0x30")
    self.bid64_to_binary32("1", "[2a81ed766d11001d]", "[00000026]", "0x30")
    self.bid64_to_binary32("2", "[2a81ed766d11001d]", "[00000027]", "0x30")
    self.bid64_to_binary32("3", "[2a81ed766d11001d]", "[00000026]", "0x30")
    self.bid64_to_binary32("4", "[2a81ed766d11001d]", "[00000027]", "0x30")
    self.bid64_to_binary32("0", "[2aa141af412d1729]", "[000000fc]", "0x30")
    self.bid64_to_binary32("1", "[2aa141af412d1729]", "[000000fc]", "0x30")
    self.bid64_to_binary32("2", "[2aa141af412d1729]", "[000000fd]", "0x30")
    self.bid64_to_binary32("3", "[2aa141af412d1729]", "[000000fc]", "0x30")
    self.bid64_to_binary32("4", "[2aa141af412d1729]", "[000000fc]", "0x30")
    self.bid64_to_binary32("0", "[2aa75ff61e520bfa]", "[000005c9]", "0x30")
    self.bid64_to_binary32("1", "[2aa75ff61e520bfa]", "[000005c9]", "0x30")
    self.bid64_to_binary32("2", "[2aa75ff61e520bfa]", "[000005ca]", "0x30")
    self.bid64_to_binary32("3", "[2aa75ff61e520bfa]", "[000005c9]", "0x30")
    self.bid64_to_binary32("4", "[2aa75ff61e520bfa]", "[000005c9]", "0x30")
    self.bid64_to_binary32("0", "[2ac75ff61e520bfa]", "[000039de]", "0x30")
    self.bid64_to_binary32("1", "[2ac75ff61e520bfa]", "[000039dd]", "0x30")
    self.bid64_to_binary32("2", "[2ac75ff61e520bfa]", "[000039de]", "0x30")
    self.bid64_to_binary32("3", "[2ac75ff61e520bfa]", "[000039dd]", "0x30")
    self.bid64_to_binary32("4", "[2ac75ff61e520bfa]", "[000039de]", "0x30")
    self.bid64_to_binary32("0", "[2ae123cc906326f3]", "[00005970]", "0x30")
    self.bid64_to_binary32("1", "[2ae123cc906326f3]", "[0000596f]", "0x30")
    self.bid64_to_binary32("2", "[2ae123cc906326f3]", "[00005970]", "0x30")
    self.bid64_to_binary32("3", "[2ae123cc906326f3]", "[0000596f]", "0x30")
    self.bid64_to_binary32("4", "[2ae123cc906326f3]", "[00005970]", "0x30")
    self.bid64_to_binary32("0", "[2ae48f32418c9bcc]", "[000165bf]", "0x30")
    self.bid64_to_binary32("1", "[2ae48f32418c9bcc]", "[000165be]", "0x30")
    self.bid64_to_binary32("2", "[2ae48f32418c9bcc]", "[000165bf]", "0x30")
    self.bid64_to_binary32("3", "[2ae48f32418c9bcc]", "[000165be]", "0x30")
    self.bid64_to_binary32("4", "[2ae48f32418c9bcc]", "[000165bf]", "0x30")
    self.bid64_to_binary32("0", "[2b0a70c3af28dd5e]", "[00200000]", "0x30")
    self.bid64_to_binary32("1", "[2b0a70c3af28dd5e]", "[001fffff]", "0x30")
    self.bid64_to_binary32("2", "[2b0a70c3af28dd5e]", "[00200000]", "0x30")
    self.bid64_to_binary32("3", "[2b0a70c3af28dd5e]", "[001fffff]", "0x30")
    self.bid64_to_binary32("4", "[2b0a70c3af28dd5e]", "[00200000]", "0x30")
    self.bid64_to_binary32("0", "[2b0a70c3af28dd5f]", "[00200000]", "0x30")
    self.bid64_to_binary32("1", "[2b0a70c3af28dd5f]", "[001fffff]", "0x30")
    self.bid64_to_binary32("2", "[2b0a70c3af28dd5f]", "[00200000]", "0x30")
    self.bid64_to_binary32("3", "[2b0a70c3af28dd5f]", "[001fffff]", "0x30")
    self.bid64_to_binary32("4", "[2b0a70c3af28dd5f]", "[00200000]", "0x30")
    self.bid64_to_binary32("0", "[2b14e1875e51babd]", "[003fffff]", "0x30")
    self.bid64_to_binary32("1", "[2b14e1875e51babd]", "[003fffff]", "0x30")
    self.bid64_to_binary32("2", "[2b14e1875e51babd]", "[00400000]", "0x30")
    self.bid64_to_binary32("3", "[2b14e1875e51babd]", "[003fffff]", "0x30")
    self.bid64_to_binary32("4", "[2b14e1875e51babd]", "[003fffff]", "0x30")
    self.bid64_to_binary32("0", "[2b14e1875e51babe]", "[00400000]", "0x30")
    self.bid64_to_binary32("1", "[2b14e1875e51babe]", "[003fffff]", "0x30")
    self.bid64_to_binary32("2", "[2b14e1875e51babe]", "[00400000]", "0x30")
    self.bid64_to_binary32("3", "[2b14e1875e51babe]", "[003fffff]", "0x30")
    self.bid64_to_binary32("4", "[2b14e1875e51babe]", "[00400000]", "0x30")
    self.bid64_to_binary32("0", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("1", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("2", "[2b158c3cf6ba79d1]", "[00420b39]", "0x30")
    self.bid64_to_binary32("3", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("4", "[2b158c3cf6ba79d1]", "[00420b38]", "0x30")
    self.bid64_to_binary32("0", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("1", "[2b242d1b1b375b8f]", "[007fffff]", "0x30")
    self.bid64_to_binary32("2", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("3", "[2b242d1b1b375b8f]", "[007fffff]", "0x30")
    self.bid64_to_binary32("4", "[2b242d1b1b375b8f]", "[00800000]", "0x20")
    self.bid64_to_binary32("0", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("1", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("2", "[2b242d1b1b375b90]", "[00800001]", "0x20")
    self.bid64_to_binary32("3", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("4", "[2b242d1b1b375b90]", "[00800000]", "0x20")
    self.bid64_to_binary32("0", "[2b27b50e5594de5e]", "[00ec39fe]", "0x20")
    self.bid64_to_binary32("1", "[2b27b50e5594de5e]", "[00ec39fd]", "0x20")
    self.bid64_to_binary32("2", "[2b27b50e5594de5e]", "[00ec39fe]", "0x20")
    self.bid64_to_binary32("3", "[2b27b50e5594de5e]", "[00ec39fd]", "0x20")
    self.bid64_to_binary32("4", "[2b27b50e5594de5e]", "[00ec39fe]", "0x20")
    self.bid64_to_binary32("0", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("1", "[2b285a36366eb71f]", "[00ffffff]", "0x20")
    self.bid64_to_binary32("2", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("3", "[2b285a36366eb71f]", "[00ffffff]", "0x20")
    self.bid64_to_binary32("4", "[2b285a36366eb71f]", "[01000000]", "0x20")
    self.bid64_to_binary32("0", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("1", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("2", "[2b285a36366eb720]", "[01000001]", "0x20")
    self.bid64_to_binary32("3", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("4", "[2b285a36366eb720]", "[01000000]", "0x20")
    self.bid64_to_binary32("0", "[2b4050960200d375]", "[00607b87]", "0x30")
    self.bid64_to_binary32("1", "[2b4050960200d375]", "[00607b87]", "0x30")
    self.bid64_to_binary32("2", "[2b4050960200d375]", "[00607b88]", "0x30")
    self.bid64_to_binary32("3", "[2b4050960200d375]", "[00607b87]", "0x30")
    self.bid64_to_binary32("4", "[2b4050960200d375]", "[00607b87]", "0x30")
    self.bid64_to_binary32("0", "[2b4ec8f0a72815d2]", "[030d9c86]", "0x20")
    self.bid64_to_binary32("1", "[2b4ec8f0a72815d2]", "[030d9c85]", "0x20")
    self.bid64_to_binary32("2", "[2b4ec8f0a72815d2]", "[030d9c86]", "0x20")
    self.bid64_to_binary32("3", "[2b4ec8f0a72815d2]", "[030d9c85]", "0x20")
    self.bid64_to_binary32("4", "[2b4ec8f0a72815d2]", "[030d9c86]", "0x20")
    self.bid64_to_binary32("0", "[2b6ec8f0a72815d2]", "[04b103a7]", "0x20")
    self.bid64_to_binary32("1", "[2b6ec8f0a72815d2]", "[04b103a7]", "0x20")
    self.bid64_to_binary32("2", "[2b6ec8f0a72815d2]", "[04b103a8]", "0x20")
    self.bid64_to_binary32("3", "[2b6ec8f0a72815d2]", "[04b103a7]", "0x20")
    self.bid64_to_binary32("4", "[2b6ec8f0a72815d2]", "[04b103a7]", "0x20")
    self.bid64_to_binary32("0", "[2b840854fc62021f]", "[05716699]", "0x20")
    self.bid64_to_binary32("1", "[2b840854fc62021f]", "[05716699]", "0x20")
    self.bid64_to_binary32("2", "[2b840854fc62021f]", "[0571669a]", "0x20")
    self.bid64_to_binary32("3", "[2b840854fc62021f]", "[05716699]", "0x20")
    self.bid64_to_binary32("4", "[2b840854fc62021f]", "[05716699]", "0x20")
    self.bid64_to_binary32("0", "[2b95820c3849fd45]", "[06a0f124]", "0x20")
    self.bid64_to_binary32("1", "[2b95820c3849fd45]", "[06a0f123]", "0x20")
    self.bid64_to_binary32("2", "[2b95820c3849fd45]", "[06a0f124]", "0x20")
    self.bid64_to_binary32("3", "[2b95820c3849fd45]", "[06a0f123]", "0x20")
    self.bid64_to_binary32("4", "[2b95820c3849fd45]", "[06a0f124]", "0x20")
    self.bid64_to_binary32("0", "[2bace6f69f948677]", "[07f15d44]", "0x20")
    self.bid64_to_binary32("1", "[2bace6f69f948677]", "[07f15d44]", "0x20")
    self.bid64_to_binary32("2", "[2bace6f69f948677]", "[07f15d45]", "0x20")
    self.bid64_to_binary32("3", "[2bace6f69f948677]", "[07f15d44]", "0x20")
    self.bid64_to_binary32("4", "[2bace6f69f948677]", "[07f15d44]", "0x20")
    self.bid64_to_binary32("0", "[2bc9766517e3ced7]", "[095d4558]", "0x20")
    self.bid64_to_binary32("1", "[2bc9766517e3ced7]", "[095d4558]", "0x20")
    self.bid64_to_binary32("2", "[2bc9766517e3ced7]", "[095d4559]", "0x20")
    self.bid64_to_binary32("3", "[2bc9766517e3ced7]", "[095d4558]", "0x20")
    self.bid64_to_binary32("4", "[2bc9766517e3ced7]", "[095d4558]", "0x20")
    self.bid64_to_binary32("0", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("1", "[2be1345d833d6b0b]", "[098cd61b]", "0x20")
    self.bid64_to_binary32("2", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("3", "[2be1345d833d6b0b]", "[098cd61b]", "0x20")
    self.bid64_to_binary32("4", "[2be1345d833d6b0b]", "[098cd61c]", "0x20")
    self.bid64_to_binary32("0", "[2c1ae83da9c69d5e]", "[0d75c7d8]", "0x20")
    self.bid64_to_binary32("1", "[2c1ae83da9c69d5e]", "[0d75c7d8]", "0x20")
    self.bid64_to_binary32("2", "[2c1ae83da9c69d5e]", "[0d75c7d9]", "0x20")
    self.bid64_to_binary32("3", "[2c1ae83da9c69d5e]", "[0d75c7d8]", "0x20")
    self.bid64_to_binary32("4", "[2c1ae83da9c69d5e]", "[0d75c7d8]", "0x20")
    self.bid64_to_binary32("0", "[2c23a7842d2b655f]", "[0da6e6d5]", "0x20")
    self.bid64_to_binary32("1", "[2c23a7842d2b655f]", "[0da6e6d4]", "0x20")
    self.bid64_to_binary32("2", "[2c23a7842d2b655f]", "[0da6e6d5]", "0x20")
    self.bid64_to_binary32("3", "[2c23a7842d2b655f]", "[0da6e6d4]", "0x20")
    self.bid64_to_binary32("4", "[2c23a7842d2b655f]", "[0da6e6d5]", "0x20")
    self.bid64_to_binary32("0", "[2c4043ece2b7c4c1]", "[0d725d9e]", "0x20")
    self.bid64_to_binary32("1", "[2c4043ece2b7c4c1]", "[0d725d9e]", "0x20")
    self.bid64_to_binary32("2", "[2c4043ece2b7c4c1]", "[0d725d9f]", "0x20")
    self.bid64_to_binary32("3", "[2c4043ece2b7c4c1]", "[0d725d9e]", "0x20")
    self.bid64_to_binary32("4", "[2c4043ece2b7c4c1]", "[0d725d9e]", "0x20")
    self.bid64_to_binary32("0", "[2c6d6149635c502d]", "[11eeb528]", "0x20")
    self.bid64_to_binary32("1", "[2c6d6149635c502d]", "[11eeb528]", "0x20")
    self.bid64_to_binary32("2", "[2c6d6149635c502d]", "[11eeb529]", "0x20")
    self.bid64_to_binary32("3", "[2c6d6149635c502d]", "[11eeb528]", "0x20")
    self.bid64_to_binary32("4", "[2c6d6149635c502d]", "[11eeb528]", "0x20")
    self.bid64_to_binary32("0", "[2c82b33b9106354f]", "[1270dc04]", "0x20")
    self.bid64_to_binary32("1", "[2c82b33b9106354f]", "[1270dc04]", "0x20")
    self.bid64_to_binary32("2", "[2c82b33b9106354f]", "[1270dc05]", "0x20")
    self.bid64_to_binary32("3", "[2c82b33b9106354f]", "[1270dc04]", "0x20")
    self.bid64_to_binary32("4", "[2c82b33b9106354f]", "[1270dc04]", "0x20")
    self.bid64_to_binary32("0", "[2c9d94aec9819007]", "[1424eb1e]", "0x20")
    self.bid64_to_binary32("1", "[2c9d94aec9819007]", "[1424eb1e]", "0x20")
    self.bid64_to_binary32("2", "[2c9d94aec9819007]", "[1424eb1f]", "0x20")
    self.bid64_to_binary32("3", "[2c9d94aec9819007]", "[1424eb1e]", "0x20")
    self.bid64_to_binary32("4", "[2c9d94aec9819007]", "[1424eb1e]", "0x20")
    self.bid64_to_binary32("0", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("1", "[2cb70105df3d47cb]", "[15a0507f]", "0x20")
    self.bid64_to_binary32("2", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("3", "[2cb70105df3d47cb]", "[15a0507f]", "0x20")
    self.bid64_to_binary32("4", "[2cb70105df3d47cb]", "[15a05080]", "0x20")
    self.bid64_to_binary32("0", "[2cc3192f36748489]", "[15d7ece3]", "0x20")
    self.bid64_to_binary32("1", "[2cc3192f36748489]", "[15d7ece2]", "0x20")
    self.bid64_to_binary32("2", "[2cc3192f36748489]", "[15d7ece3]", "0x20")
    self.bid64_to_binary32("3", "[2cc3192f36748489]", "[15d7ece2]", "0x20")
    self.bid64_to_binary32("4", "[2cc3192f36748489]", "[15d7ece3]", "0x20")
    self.bid64_to_binary32("0", "[2ce05b4a5dae2c19]", "[15f88430]", "0x20")
    self.bid64_to_binary32("1", "[2ce05b4a5dae2c19]", "[15f8842f]", "0x20")
    self.bid64_to_binary32("2", "[2ce05b4a5dae2c19]", "[15f88430]", "0x20")
    self.bid64_to_binary32("3", "[2ce05b4a5dae2c19]", "[15f8842f]", "0x20")
    self.bid64_to_binary32("4", "[2ce05b4a5dae2c19]", "[15f88430]", "0x20")
    self.bid64_to_binary32("0", "[2cf70105df3d47cb]", "[18fa7dc8]", "0x20")
    self.bid64_to_binary32("1", "[2cf70105df3d47cb]", "[18fa7dc7]", "0x20")
    self.bid64_to_binary32("2", "[2cf70105df3d47cb]", "[18fa7dc8]", "0x20")
    self.bid64_to_binary32("3", "[2cf70105df3d47cb]", "[18fa7dc7]", "0x20")
    self.bid64_to_binary32("4", "[2cf70105df3d47cb]", "[18fa7dc8]", "0x20")
    self.bid64_to_binary32("0", "[2d11d5274fe72614]", "[1a72b9a7]", "0x20")
    self.bid64_to_binary32("1", "[2d11d5274fe72614]", "[1a72b9a6]", "0x20")
    self.bid64_to_binary32("2", "[2d11d5274fe72614]", "[1a72b9a7]", "0x20")
    self.bid64_to_binary32("3", "[2d11d5274fe72614]", "[1a72b9a6]", "0x20")
    self.bid64_to_binary32("4", "[2d11d5274fe72614]", "[1a72b9a7]", "0x20")
    self.bid64_to_binary32("0", "[2d2108c61caad38b]", "[1a0cc727]", "0x20")
    self.bid64_to_binary32("1", "[2d2108c61caad38b]", "[1a0cc726]", "0x20")
    self.bid64_to_binary32("2", "[2d2108c61caad38b]", "[1a0cc727]", "0x20")
    self.bid64_to_binary32("3", "[2d2108c61caad38b]", "[1a0cc726]", "0x20")
    self.bid64_to_binary32("4", "[2d2108c61caad38b]", "[1a0cc727]", "0x20")
    self.bid64_to_binary32("0", "[2d3e75a79609be4a]", "[1c818f8e]", "0x20")
    self.bid64_to_binary32("1", "[2d3e75a79609be4a]", "[1c818f8e]", "0x20")
    self.bid64_to_binary32("2", "[2d3e75a79609be4a]", "[1c818f8f]", "0x20")
    self.bid64_to_binary32("3", "[2d3e75a79609be4a]", "[1c818f8e]", "0x20")
    self.bid64_to_binary32("4", "[2d3e75a79609be4a]", "[1c818f8e]", "0x20")
    self.bid64_to_binary32("0", "[2d548590cda34c17]", "[1dda397e]", "0x20")
    self.bid64_to_binary32("1", "[2d548590cda34c17]", "[1dda397e]", "0x20")
    self.bid64_to_binary32("2", "[2d548590cda34c17]", "[1dda397f]", "0x20")
    self.bid64_to_binary32("3", "[2d548590cda34c17]", "[1dda397e]", "0x20")
    self.bid64_to_binary32("4", "[2d548590cda34c17]", "[1dda397e]", "0x20")
    self.bid64_to_binary32("0", "[2d66c088c46f932b]", "[1eb38052]", "0x20")
    self.bid64_to_binary32("1", "[2d66c088c46f932b]", "[1eb38052]", "0x20")
    self.bid64_to_binary32("2", "[2d66c088c46f932b]", "[1eb38053]", "0x20")
    self.bid64_to_binary32("3", "[2d66c088c46f932b]", "[1eb38052]", "0x20")
    self.bid64_to_binary32("4", "[2d66c088c46f932b]", "[1eb38052]", "0x20")
    self.bid64_to_binary32("0", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("1", "[2d814c1d40d23351]", "[1f2c718e]", "0x20")
    self.bid64_to_binary32("2", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("3", "[2d814c1d40d23351]", "[1f2c718e]", "0x20")
    self.bid64_to_binary32("4", "[2d814c1d40d23351]", "[1f2c718f]", "0x20")
    self.bid64_to_binary32("0", "[2db7f43203347727]", "[22f8c05c]", "0x20")
    self.bid64_to_binary32("1", "[2db7f43203347727]", "[22f8c05b]", "0x20")
    self.bid64_to_binary32("2", "[2db7f43203347727]", "[22f8c05c]", "0x20")
    self.bid64_to_binary32("3", "[2db7f43203347727]", "[22f8c05b]", "0x20")
    self.bid64_to_binary32("4", "[2db7f43203347727]", "[22f8c05c]", "0x20")
    self.bid64_to_binary32("0", "[2dc4ca70670a7e3b]", "[2378c05c]", "0x20")
    self.bid64_to_binary32("1", "[2dc4ca70670a7e3b]", "[2378c05b]", "0x20")
    self.bid64_to_binary32("2", "[2dc4ca70670a7e3b]", "[2378c05c]", "0x20")
    self.bid64_to_binary32("3", "[2dc4ca70670a7e3b]", "[2378c05b]", "0x20")
    self.bid64_to_binary32("4", "[2dc4ca70670a7e3b]", "[2378c05c]", "0x20")
    self.bid64_to_binary32("0", "[2de0cf9e9fd76667]", "[23d28d23]", "0x20")
    self.bid64_to_binary32("1", "[2de0cf9e9fd76667]", "[23d28d23]", "0x20")
    self.bid64_to_binary32("2", "[2de0cf9e9fd76667]", "[23d28d24]", "0x20")
    self.bid64_to_binary32("3", "[2de0cf9e9fd76667]", "[23d28d23]", "0x20")
    self.bid64_to_binary32("4", "[2de0cf9e9fd76667]", "[23d28d23]", "0x20")
    self.bid64_to_binary32("0", "[2de5d8d6c97e640a]", "[253dbf34]", "0x20")
    self.bid64_to_binary32("1", "[2de5d8d6c97e640a]", "[253dbf33]", "0x20")
    self.bid64_to_binary32("2", "[2de5d8d6c97e640a]", "[253dbf34]", "0x20")
    self.bid64_to_binary32("3", "[2de5d8d6c97e640a]", "[253dbf33]", "0x20")
    self.bid64_to_binary32("4", "[2de5d8d6c97e640a]", "[253dbf34]", "0x20")
    self.bid64_to_binary32("0", "[2e05d8d6c97e640a]", "[26ed2f01]", "0x20")
    self.bid64_to_binary32("1", "[2e05d8d6c97e640a]", "[26ed2f00]", "0x20")
    self.bid64_to_binary32("2", "[2e05d8d6c97e640a]", "[26ed2f01]", "0x20")
    self.bid64_to_binary32("3", "[2e05d8d6c97e640a]", "[26ed2f00]", "0x20")
    self.bid64_to_binary32("4", "[2e05d8d6c97e640a]", "[26ed2f01]", "0x20")
    self.bid64_to_binary32("0", "[2e20888df12b9d45]", "[26d86112]", "0x20")
    self.bid64_to_binary32("1", "[2e20888df12b9d45]", "[26d86111]", "0x20")
    self.bid64_to_binary32("2", "[2e20888df12b9d45]", "[26d86112]", "0x20")
    self.bid64_to_binary32("3", "[2e20888df12b9d45]", "[26d86111]", "0x20")
    self.bid64_to_binary32("4", "[2e20888df12b9d45]", "[26d86112]", "0x20")
    self.bid64_to_binary32("0", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("1", "[2e5100e91aa27c10]", "[2b06b74f]", "0x20")
    self.bid64_to_binary32("2", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("3", "[2e5100e91aa27c10]", "[2b06b74f]", "0x20")
    self.bid64_to_binary32("4", "[2e5100e91aa27c10]", "[2b06b750]", "0x20")
    self.bid64_to_binary32("0", "[2e63d29032408016]", "[2b976ce3]", "0x20")
    self.bid64_to_binary32("1", "[2e63d29032408016]", "[2b976ce2]", "0x20")
    self.bid64_to_binary32("2", "[2e63d29032408016]", "[2b976ce3]", "0x20")
    self.bid64_to_binary32("3", "[2e63d29032408016]", "[2b976ce2]", "0x20")
    self.bid64_to_binary32("4", "[2e63d29032408016]", "[2b976ce3]", "0x20")
    self.bid64_to_binary32("0", "[2e808db8d9fce5fb]", "[2bdb4de6]", "0x20")
    self.bid64_to_binary32("1", "[2e808db8d9fce5fb]", "[2bdb4de5]", "0x20")
    self.bid64_to_binary32("2", "[2e808db8d9fce5fb]", "[2bdb4de6]", "0x20")
    self.bid64_to_binary32("3", "[2e808db8d9fce5fb]", "[2bdb4de5]", "0x20")
    self.bid64_to_binary32("4", "[2e808db8d9fce5fb]", "[2bdb4de6]", "0x20")
    self.bid64_to_binary32("0", "[2e9daf06ecb15bd6]", "[2eb7bbb3]", "0x20")
    self.bid64_to_binary32("1", "[2e9daf06ecb15bd6]", "[2eb7bbb2]", "0x20")
    self.bid64_to_binary32("2", "[2e9daf06ecb15bd6]", "[2eb7bbb3]", "0x20")
    self.bid64_to_binary32("3", "[2e9daf06ecb15bd6]", "[2eb7bbb2]", "0x20")
    self.bid64_to_binary32("4", "[2e9daf06ecb15bd6]", "[2eb7bbb3]", "0x20")
    self.bid64_to_binary32("0", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("1", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("2", "[2ea132645e1ba93f]", "[2e142981]", "0x20")
    self.bid64_to_binary32("3", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("4", "[2ea132645e1ba93f]", "[2e142980]", "0x20")
    self.bid64_to_binary32("0", "[2ec132645e1ba93f]", "[2fb933e0]", "0x20")
    self.bid64_to_binary32("1", "[2ec132645e1ba93f]", "[2fb933e0]", "0x20")
    self.bid64_to_binary32("2", "[2ec132645e1ba93f]", "[2fb933e1]", "0x20")
    self.bid64_to_binary32("3", "[2ec132645e1ba93f]", "[2fb933e0]", "0x20")
    self.bid64_to_binary32("4", "[2ec132645e1ba93f]", "[2fb933e0]", "0x20")
    self.bid64_to_binary32("0", "[2ec264c8bc37527e]", "[303933e0]", "0x20")
    self.bid64_to_binary32("1", "[2ec264c8bc37527e]", "[303933e0]", "0x20")
    self.bid64_to_binary32("2", "[2ec264c8bc37527e]", "[303933e1]", "0x20")
    self.bid64_to_binary32("3", "[2ec264c8bc37527e]", "[303933e0]", "0x20")
    self.bid64_to_binary32("4", "[2ec264c8bc37527e]", "[303933e0]", "0x20")
    self.bid64_to_binary32("0", "[2f06139ec6ef984b]", "[3437a7bc]", "0x20")
    self.bid64_to_binary32("1", "[2f06139ec6ef984b]", "[3437a7bc]", "0x20")
    self.bid64_to_binary32("2", "[2f06139ec6ef984b]", "[3437a7bd]", "0x20")
    self.bid64_to_binary32("3", "[2f06139ec6ef984b]", "[3437a7bc]", "0x20")
    self.bid64_to_binary32("4", "[2f06139ec6ef984b]", "[3437a7bc]", "0x20")
    self.bid64_to_binary32("0", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("1", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("2", "[2f20fe93dea50b6c]", "[349646af]", "0x20")
    self.bid64_to_binary32("3", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("4", "[2f20fe93dea50b6c]", "[349646ae]", "0x20")
    self.bid64_to_binary32("0", "[2f55a1ae8f631b44]", "[387f6168]", "0x20")
    self.bid64_to_binary32("1", "[2f55a1ae8f631b44]", "[387f6168]", "0x20")
    self.bid64_to_binary32("2", "[2f55a1ae8f631b44]", "[387f6169]", "0x20")
    self.bid64_to_binary32("3", "[2f55a1ae8f631b44]", "[387f6168]", "0x20")
    self.bid64_to_binary32("4", "[2f55a1ae8f631b44]", "[387f6168]", "0x20")
    self.bid64_to_binary32("0", "[2f6448ca2ed1de44]", "[38fce70a]", "0x20")
    self.bid64_to_binary32("1", "[2f6448ca2ed1de44]", "[38fce70a]", "0x20")
    self.bid64_to_binary32("2", "[2f6448ca2ed1de44]", "[38fce70b]", "0x20")
    self.bid64_to_binary32("3", "[2f6448ca2ed1de44]", "[38fce70a]", "0x20")
    self.bid64_to_binary32("4", "[2f6448ca2ed1de44]", "[38fce70a]", "0x20")
    self.bid64_to_binary32("0", "[2fab197a685a3dae]", "[3cfff006]", "0x20")
    self.bid64_to_binary32("1", "[2fab197a685a3dae]", "[3cfff006]", "0x20")
    self.bid64_to_binary32("2", "[2fab197a685a3dae]", "[3cfff007]", "0x20")
    self.bid64_to_binary32("3", "[2fab197a685a3dae]", "[3cfff006]", "0x20")
    self.bid64_to_binary32("4", "[2fab197a685a3dae]", "[3cfff006]", "0x20")
    self.bid64_to_binary32("0", "[2fc2384be833bcb2]", "[3d7ff020]", "0x20")
    self.bid64_to_binary32("1", "[2fc2384be833bcb2]", "[3d7ff020]", "0x20")
    self.bid64_to_binary32("2", "[2fc2384be833bcb2]", "[3d7ff021]", "0x20")
    self.bid64_to_binary32("3", "[2fc2384be833bcb2]", "[3d7ff020]", "0x20")
    self.bid64_to_binary32("4", "[2fc2384be833bcb2]", "[3d7ff020]", "0x20")
    self.bid64_to_binary32("0", "[300b5e61319787d6]", "[41ffffec]", "0x20")
    self.bid64_to_binary32("1", "[300b5e61319787d6]", "[41ffffec]", "0x20")
    self.bid64_to_binary32("2", "[300b5e61319787d6]", "[41ffffed]", "0x20")
    self.bid64_to_binary32("3", "[300b5e61319787d6]", "[41ffffec]", "0x20")
    self.bid64_to_binary32("4", "[300b5e61319787d6]", "[41ffffec]", "0x20")
    self.bid64_to_binary32("0", "[30224613993ee295]", "[427ffffe]", "0x20")
    self.bid64_to_binary32("1", "[30224613993ee295]", "[427ffffe]", "0x20")
    self.bid64_to_binary32("2", "[30224613993ee295]", "[427fffff]", "0x20")
    self.bid64_to_binary32("3", "[30224613993ee295]", "[427ffffe]", "0x20")
    self.bid64_to_binary32("4", "[30224613993ee295]", "[427ffffe]", "0x20")
    self.bid64_to_binary32("0", "[305d1a94a1ffffff]", "[46000000]", "0x20")
    self.bid64_to_binary32("1", "[305d1a94a1ffffff]", "[45ffffff]", "0x20")
    self.bid64_to_binary32("2", "[305d1a94a1ffffff]", "[46000000]", "0x20")
    self.bid64_to_binary32("3", "[305d1a94a1ffffff]", "[45ffffff]", "0x20")
    self.bid64_to_binary32("4", "[305d1a94a1ffffff]", "[46000000]", "0x20")
    self.bid64_to_binary32("0", "[3065d21db9ffffff]", "[46800000]", "0x20")
    self.bid64_to_binary32("1", "[3065d21db9ffffff]", "[467fffff]", "0x20")
    self.bid64_to_binary32("2", "[3065d21db9ffffff]", "[46800000]", "0x20")
    self.bid64_to_binary32("3", "[3065d21db9ffffff]", "[467fffff]", "0x20")
    self.bid64_to_binary32("4", "[3065d21db9ffffff]", "[46800000]", "0x20")
    self.bid64_to_binary32("0", "[30812a05f1ffffff]", "[47000000]", "0x20")
    self.bid64_to_binary32("1", "[30812a05f1ffffff]", "[46ffffff]", "0x20")
    self.bid64_to_binary32("2", "[30812a05f1ffffff]", "[47000000]", "0x20")
    self.bid64_to_binary32("3", "[30812a05f1ffffff]", "[46ffffff]", "0x20")
    self.bid64_to_binary32("4", "[30812a05f1ffffff]", "[47000000]", "0x20")
    self.bid64_to_binary32("0", "[30aee6b27fffffff]", "[4a800000]", "0x20")
    self.bid64_to_binary32("1", "[30aee6b27fffffff]", "[4a7fffff]", "0x20")
    self.bid64_to_binary32("2", "[30aee6b27fffffff]", "[4a800000]", "0x20")
    self.bid64_to_binary32("3", "[30aee6b27fffffff]", "[4a7fffff]", "0x20")
    self.bid64_to_binary32("4", "[30aee6b27fffffff]", "[4a800000]", "0x20")
    self.bid64_to_binary32("0", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("1", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("2", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("3", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("4", "[30c00000004d7c6d]", "[3d500000]", "0x00")
    self.bid64_to_binary32("0", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("1", "[30c2faf07fffffff]", "[4affffff]", "0x20")
    self.bid64_to_binary32("2", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("3", "[30c2faf07fffffff]", "[4affffff]", "0x20")
    self.bid64_to_binary32("4", "[30c2faf07fffffff]", "[4b000000]", "0x20")
    self.bid64_to_binary32("0", "[3107a11fffffffff]", "[4f000000]", "0x20")
    self.bid64_to_binary32("1", "[3107a11fffffffff]", "[4effffff]", "0x20")
    self.bid64_to_binary32("2", "[3107a11fffffffff]", "[4f000000]", "0x20")
    self.bid64_to_binary32("3", "[3107a11fffffffff]", "[4effffff]", "0x20")
    self.bid64_to_binary32("4", "[3107a11fffffffff]", "[4f000000]", "0x20")
    self.bid64_to_binary32("0", "[3121869fffffffff]", "[4f800000]", "0x20")
    self.bid64_to_binary32("1", "[3121869fffffffff]", "[4f7fffff]", "0x20")
    self.bid64_to_binary32("2", "[3121869fffffffff]", "[4f800000]", "0x20")
    self.bid64_to_binary32("3", "[3121869fffffffff]", "[4f7fffff]", "0x20")
    self.bid64_to_binary32("4", "[3121869fffffffff]", "[4f800000]", "0x20")
    self.bid64_to_binary32("0", "[315387ffffffffff]", "[53000000]", "0x20")
    self.bid64_to_binary32("1", "[315387ffffffffff]", "[52ffffff]", "0x20")
    self.bid64_to_binary32("2", "[315387ffffffffff]", "[53000000]", "0x20")
    self.bid64_to_binary32("3", "[315387ffffffffff]", "[52ffffff]", "0x20")
    self.bid64_to_binary32("4", "[315387ffffffffff]", "[53000000]", "0x20")
    self.bid64_to_binary32("0", "[3163e7ffffffffff]", "[53800000]", "0x20")
    self.bid64_to_binary32("1", "[3163e7ffffffffff]", "[537fffff]", "0x20")
    self.bid64_to_binary32("2", "[3163e7ffffffffff]", "[53800000]", "0x20")
    self.bid64_to_binary32("3", "[3163e7ffffffffff]", "[537fffff]", "0x20")
    self.bid64_to_binary32("4", "[3163e7ffffffffff]", "[53800000]", "0x20")
    self.bid64_to_binary32("0", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("1", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("2", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("3", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("4", "[31a000000000000f]", "[3fc00000]", "0x00")
    self.bid64_to_binary32("0", "[31a9ffffffffffff]", "[57800000]", "0x20")
    self.bid64_to_binary32("1", "[31a9ffffffffffff]", "[577fffff]", "0x20")
    self.bid64_to_binary32("2", "[31a9ffffffffffff]", "[57800000]", "0x20")
    self.bid64_to_binary32("3", "[31a9ffffffffffff]", "[577fffff]", "0x20")
    self.bid64_to_binary32("4", "[31a9ffffffffffff]", "[57800000]", "0x20")
    self.bid64_to_binary32("0", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000000]", "[00000000]", "0x00")
    self.bid64_to_binary32("0", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000001]", "[3f800000]", "0x00")
    self.bid64_to_binary32("0", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("1", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("2", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("3", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("4", "[31c0000000000040]", "[42800000]", "0x00")
    self.bid64_to_binary32("0", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("1", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("2", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("3", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("4", "[31c00000000003e7]", "[4479c000]", "0x00")
    self.bid64_to_binary32("0", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("1", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("2", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("3", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("4", "[31c00000000003e8]", "[447a0000]", "0x00")
    self.bid64_to_binary32("0", "[31c1ffffffffffff]", "[58000000]", "0x20")
    self.bid64_to_binary32("1", "[31c1ffffffffffff]", "[57ffffff]", "0x20")
    self.bid64_to_binary32("2", "[31c1ffffffffffff]", "[58000000]", "0x20")
    self.bid64_to_binary32("3", "[31c1ffffffffffff]", "[57ffffff]", "0x20")
    self.bid64_to_binary32("4", "[31c1ffffffffffff]", "[58000000]", "0x20")
    self.bid64_to_binary32("0", "[31f9999973333333]", "[5b7ffffe]", "0x20")
    self.bid64_to_binary32("1", "[31f9999973333333]", "[5b7ffffe]", "0x20")
    self.bid64_to_binary32("2", "[31f9999973333333]", "[5b7fffff]", "0x20")
    self.bid64_to_binary32("3", "[31f9999973333333]", "[5b7ffffe]", "0x20")
    self.bid64_to_binary32("4", "[31f9999973333333]", "[5b7ffffe]", "0x20")
    self.bid64_to_binary32("0", "[32051eb83d70a3d7]", "[5bfffffc]", "0x20")
    self.bid64_to_binary32("1", "[32051eb83d70a3d7]", "[5bfffffb]", "0x20")
    self.bid64_to_binary32("2", "[32051eb83d70a3d7]", "[5bfffffc]", "0x20")
    self.bid64_to_binary32("3", "[32051eb83d70a3d7]", "[5bfffffb]", "0x20")
    self.bid64_to_binary32("4", "[32051eb83d70a3d7]", "[5bfffffc]", "0x20")
    self.bid64_to_binary32("0", "[320a3d707ae147ae]", "[5c7ffffc]", "0x20")
    self.bid64_to_binary32("1", "[320a3d707ae147ae]", "[5c7ffffb]", "0x20")
    self.bid64_to_binary32("2", "[320a3d707ae147ae]", "[5c7ffffc]", "0x20")
    self.bid64_to_binary32("3", "[320a3d707ae147ae]", "[5c7ffffb]", "0x20")
    self.bid64_to_binary32("4", "[320a3d707ae147ae]", "[5c7ffffc]", "0x20")
    self.bid64_to_binary32("0", "[324d1b6fc504816f]", "[5fffffdf]", "0x20")
    self.bid64_to_binary32("1", "[324d1b6fc504816f]", "[5fffffde]", "0x20")
    self.bid64_to_binary32("2", "[324d1b6fc504816f]", "[5fffffdf]", "0x20")
    self.bid64_to_binary32("3", "[324d1b6fc504816f]", "[5fffffde]", "0x20")
    self.bid64_to_binary32("4", "[324d1b6fc504816f]", "[5fffffdf]", "0x20")
    self.bid64_to_binary32("0", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("1", "[325a369f8a0902de]", "[607ffd6d]", "0x20")
    self.bid64_to_binary32("2", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("3", "[325a369f8a0902de]", "[607ffd6d]", "0x20")
    self.bid64_to_binary32("4", "[325a369f8a0902de]", "[607ffd6e]", "0x20")
    self.bid64_to_binary32("0", "[32a6b3885172b95b]", "[647fa25f]", "0x20")
    self.bid64_to_binary32("1", "[32a6b3885172b95b]", "[647fa25e]", "0x20")
    self.bid64_to_binary32("2", "[32a6b3885172b95b]", "[647fa25f]", "0x20")
    self.bid64_to_binary32("3", "[32a6b3885172b95b]", "[647fa25e]", "0x20")
    self.bid64_to_binary32("4", "[32a6b3885172b95b]", "[647fa25f]", "0x20")
    self.bid64_to_binary32("0", "[32ad4f10a2e572b6]", "[64fdd89b]", "0x20")
    self.bid64_to_binary32("1", "[32ad4f10a2e572b6]", "[64fdd89b]", "0x20")
    self.bid64_to_binary32("2", "[32ad4f10a2e572b6]", "[64fdd89c]", "0x20")
    self.bid64_to_binary32("3", "[32ad4f10a2e572b6]", "[64fdd89b]", "0x20")
    self.bid64_to_binary32("4", "[32ad4f10a2e572b6]", "[64fdd89b]", "0x20")
    self.bid64_to_binary32("0", "[32f031bdc5d16393]", "[6871505c]", "0x20")
    self.bid64_to_binary32("1", "[32f031bdc5d16393]", "[6871505b]", "0x20")
    self.bid64_to_binary32("2", "[32f031bdc5d16393]", "[6871505c]", "0x20")
    self.bid64_to_binary32("3", "[32f031bdc5d16393]", "[6871505b]", "0x20")
    self.bid64_to_binary32("4", "[32f031bdc5d16393]", "[6871505c]", "0x20")
    self.bid64_to_binary32("0", "[32fe637b8ba2c726]", "[68e269a9]", "0x20")
    self.bid64_to_binary32("1", "[32fe637b8ba2c726]", "[68e269a9]", "0x20")
    self.bid64_to_binary32("2", "[32fe637b8ba2c726]", "[68e269aa]", "0x20")
    self.bid64_to_binary32("3", "[32fe637b8ba2c726]", "[68e269a9]", "0x20")
    self.bid64_to_binary32("4", "[32fe637b8ba2c726]", "[68e269a9]", "0x20")
    self.bid64_to_binary32("0", "[331809f2c129e0b7]", "[6a5fe11c]", "0x20")
    self.bid64_to_binary32("1", "[331809f2c129e0b7]", "[6a5fe11b]", "0x20")
    self.bid64_to_binary32("2", "[331809f2c129e0b7]", "[6a5fe11c]", "0x20")
    self.bid64_to_binary32("3", "[331809f2c129e0b7]", "[6a5fe11b]", "0x20")
    self.bid64_to_binary32("4", "[331809f2c129e0b7]", "[6a5fe11c]", "0x20")
    self.bid64_to_binary32("0", "[3326bdf1d70a1fe4]", "[6b1cf948]", "0x20")
    self.bid64_to_binary32("1", "[3326bdf1d70a1fe4]", "[6b1cf947]", "0x20")
    self.bid64_to_binary32("2", "[3326bdf1d70a1fe4]", "[6b1cf948]", "0x20")
    self.bid64_to_binary32("3", "[3326bdf1d70a1fe4]", "[6b1cf947]", "0x20")
    self.bid64_to_binary32("4", "[3326bdf1d70a1fe4]", "[6b1cf948]", "0x20")
    self.bid64_to_binary32("0", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("1", "[33319b96f36ec68b]", "[6bccfb3f]", "0x20")
    self.bid64_to_binary32("2", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("3", "[33319b96f36ec68b]", "[6bccfb3f]", "0x20")
    self.bid64_to_binary32("4", "[33319b96f36ec68b]", "[6bccfb40]", "0x20")
    self.bid64_to_binary32("0", "[3345c1c39ea07d62]", "[6ca78c2f]", "0x20")
    self.bid64_to_binary32("1", "[3345c1c39ea07d62]", "[6ca78c2e]", "0x20")
    self.bid64_to_binary32("2", "[3345c1c39ea07d62]", "[6ca78c2f]", "0x20")
    self.bid64_to_binary32("3", "[3345c1c39ea07d62]", "[6ca78c2e]", "0x20")
    self.bid64_to_binary32("4", "[3345c1c39ea07d62]", "[6ca78c2f]", "0x20")
    self.bid64_to_binary32("0", "[336bf881dc671d64]", "[6ed9bf10]", "0x20")
    self.bid64_to_binary32("1", "[336bf881dc671d64]", "[6ed9bf10]", "0x20")
    self.bid64_to_binary32("2", "[336bf881dc671d64]", "[6ed9bf11]", "0x20")
    self.bid64_to_binary32("3", "[336bf881dc671d64]", "[6ed9bf10]", "0x20")
    self.bid64_to_binary32("4", "[336bf881dc671d64]", "[6ed9bf10]", "0x20")
    self.bid64_to_binary32("0", "[33719b96f36ec68b]", "[6f20244a]", "0x20")
    self.bid64_to_binary32("1", "[33719b96f36ec68b]", "[6f202449]", "0x20")
    self.bid64_to_binary32("2", "[33719b96f36ec68b]", "[6f20244a]", "0x20")
    self.bid64_to_binary32("3", "[33719b96f36ec68b]", "[6f202449]", "0x20")
    self.bid64_to_binary32("4", "[33719b96f36ec68b]", "[6f20244a]", "0x20")
    self.bid64_to_binary32("0", "[338bf881dc671d64]", "[7088176a]", "0x20")
    self.bid64_to_binary32("1", "[338bf881dc671d64]", "[7088176a]", "0x20")
    self.bid64_to_binary32("2", "[338bf881dc671d64]", "[7088176b]", "0x20")
    self.bid64_to_binary32("3", "[338bf881dc671d64]", "[7088176a]", "0x20")
    self.bid64_to_binary32("4", "[338bf881dc671d64]", "[7088176a]", "0x20")
    self.bid64_to_binary32("0", "[33919b96f36ec68b]", "[70c82d5c]", "0x20")
    self.bid64_to_binary32("1", "[33919b96f36ec68b]", "[70c82d5c]", "0x20")
    self.bid64_to_binary32("2", "[33919b96f36ec68b]", "[70c82d5d]", "0x20")
    self.bid64_to_binary32("3", "[33919b96f36ec68b]", "[70c82d5c]", "0x20")
    self.bid64_to_binary32("4", "[33919b96f36ec68b]", "[70c82d5c]", "0x20")
    self.bid64_to_binary32("0", "[33ce5f9eb18201d8]", "[73ff532e]", "0x20")
    self.bid64_to_binary32("1", "[33ce5f9eb18201d8]", "[73ff532e]", "0x20")
    self.bid64_to_binary32("2", "[33ce5f9eb18201d8]", "[73ff532f]", "0x20")
    self.bid64_to_binary32("3", "[33ce5f9eb18201d8]", "[73ff532e]", "0x20")
    self.bid64_to_binary32("4", "[33ce5f9eb18201d8]", "[73ff532e]", "0x20")
    self.bid64_to_binary32("0", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("1", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("2", "[33d608e7907c5218]", "[7443b54d]", "0x20")
    self.bid64_to_binary32("3", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("4", "[33d608e7907c5218]", "[7443b54c]", "0x20")
    self.bid64_to_binary32("0", "[33e6a2c98ebde545]", "[751358a8]", "0x20")
    self.bid64_to_binary32("1", "[33e6a2c98ebde545]", "[751358a7]", "0x20")
    self.bid64_to_binary32("2", "[33e6a2c98ebde545]", "[751358a8]", "0x20")
    self.bid64_to_binary32("3", "[33e6a2c98ebde545]", "[751358a7]", "0x20")
    self.bid64_to_binary32("4", "[33e6a2c98ebde545]", "[751358a8]", "0x20")
    self.bid64_to_binary32("0", "[341a8b263af79514]", "[77b82ed2]", "0x20")
    self.bid64_to_binary32("1", "[341a8b263af79514]", "[77b82ed1]", "0x20")
    self.bid64_to_binary32("2", "[341a8b263af79514]", "[77b82ed2]", "0x20")
    self.bid64_to_binary32("3", "[341a8b263af79514]", "[77b82ed1]", "0x20")
    self.bid64_to_binary32("4", "[341a8b263af79514]", "[77b82ed2]", "0x20")
    self.bid64_to_binary32("0", "[3431f55b23c8bf2d]", "[791bc3b5]", "0x20")
    self.bid64_to_binary32("1", "[3431f55b23c8bf2d]", "[791bc3b4]", "0x20")
    self.bid64_to_binary32("2", "[3431f55b23c8bf2d]", "[791bc3b5]", "0x20")
    self.bid64_to_binary32("3", "[3431f55b23c8bf2d]", "[791bc3b4]", "0x20")
    self.bid64_to_binary32("4", "[3431f55b23c8bf2d]", "[791bc3b5]", "0x20")
    self.bid64_to_binary32("0", "[344577623ce08817]", "[79ed1099]", "0x20")
    self.bid64_to_binary32("1", "[344577623ce08817]", "[79ed1098]", "0x20")
    self.bid64_to_binary32("2", "[344577623ce08817]", "[79ed1099]", "0x20")
    self.bid64_to_binary32("3", "[344577623ce08817]", "[79ed1098]", "0x20")
    self.bid64_to_binary32("4", "[344577623ce08817]", "[79ed1099]", "0x20")
    self.bid64_to_binary32("0", "[344aeec479c1102e]", "[7a6d1099]", "0x20")
    self.bid64_to_binary32("1", "[344aeec479c1102e]", "[7a6d1098]", "0x20")
    self.bid64_to_binary32("2", "[344aeec479c1102e]", "[7a6d1099]", "0x20")
    self.bid64_to_binary32("3", "[344aeec479c1102e]", "[7a6d1098]", "0x20")
    self.bid64_to_binary32("4", "[344aeec479c1102e]", "[7a6d1099]", "0x20")
    self.bid64_to_binary32("0", "[3478849dd33c95af]", "[7ca62402]", "0x20")
    self.bid64_to_binary32("1", "[3478849dd33c95af]", "[7ca62402]", "0x20")
    self.bid64_to_binary32("2", "[3478849dd33c95af]", "[7ca62403]", "0x20")
    self.bid64_to_binary32("3", "[3478849dd33c95af]", "[7ca62402]", "0x20")
    self.bid64_to_binary32("4", "[3478849dd33c95af]", "[7ca62402]", "0x20")
    self.bid64_to_binary32("0", "[34842fc69945497a]", "[7d0dd92d]", "0x20")
    self.bid64_to_binary32("1", "[34842fc69945497a]", "[7d0dd92d]", "0x20")
    self.bid64_to_binary32("2", "[34842fc69945497a]", "[7d0dd92e]", "0x20")
    self.bid64_to_binary32("3", "[34842fc69945497a]", "[7d0dd92d]", "0x20")
    self.bid64_to_binary32("4", "[34842fc69945497a]", "[7d0dd92d]", "0x20")
    self.bid64_to_binary32("0", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d993f27f88]", "[7f7ffffe]", "0x20")
    self.bid64_to_binary32("2", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("3", "[34ac16d993f27f88]", "[7f7ffffe]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d993f27f88]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("0", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("1", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("2", "[34ac16d993f27f89]", "[7f800000]", "0x28")
    self.bid64_to_binary32("3", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d993f27f89]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("0", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("1", "[34ac16d9a0095928]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("2", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("3", "[34ac16d9a0095928]", "[7f7fffff]", "0x20")
    self.bid64_to_binary32("4", "[34ac16d9a0095928]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("1", "[34ac16d9a0095929]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("2", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("3", "[34ac16d9a0095929]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("4", "[34ac16d9a0095929]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[6af98a5fcdb8d437]", "[0bf51900]", "0x20")
    self.bid64_to_binary32("1", "[6af98a5fcdb8d437]", "[0bf51900]", "0x20")
    self.bid64_to_binary32("2", "[6af98a5fcdb8d437]", "[0bf51901]", "0x20")
    self.bid64_to_binary32("3", "[6af98a5fcdb8d437]", "[0bf51900]", "0x20")
    self.bid64_to_binary32("4", "[6af98a5fcdb8d437]", "[0bf51900]", "0x20")
    self.bid64_to_binary32("0", "[6b116b7f5bf619d9]", "[10ee7e12]", "0x20")
    self.bid64_to_binary32("1", "[6b116b7f5bf619d9]", "[10ee7e11]", "0x20")
    self.bid64_to_binary32("2", "[6b116b7f5bf619d9]", "[10ee7e12]", "0x20")
    self.bid64_to_binary32("3", "[6b116b7f5bf619d9]", "[10ee7e11]", "0x20")
    self.bid64_to_binary32("4", "[6b116b7f5bf619d9]", "[10ee7e12]", "0x20")
    self.bid64_to_binary32("0", "[6b6206a25682726d]", "[218d568f]", "0x20")
    self.bid64_to_binary32("1", "[6b6206a25682726d]", "[218d568e]", "0x20")
    self.bid64_to_binary32("2", "[6b6206a25682726d]", "[218d568f]", "0x20")
    self.bid64_to_binary32("3", "[6b6206a25682726d]", "[218d568e]", "0x20")
    self.bid64_to_binary32("4", "[6b6206a25682726d]", "[218d568f]", "0x20")
    self.bid64_to_binary32("0", "[6b8b0fc62594fa4f]", "[29de3aba]", "0x20")
    self.bid64_to_binary32("1", "[6b8b0fc62594fa4f]", "[29de3aba]", "0x20")
    self.bid64_to_binary32("2", "[6b8b0fc62594fa4f]", "[29de3abb]", "0x20")
    self.bid64_to_binary32("3", "[6b8b0fc62594fa4f]", "[29de3aba]", "0x20")
    self.bid64_to_binary32("4", "[6b8b0fc62594fa4f]", "[29de3aba]", "0x20")
    self.bid64_to_binary32("0", "[6bbb2bab5b1c9e73]", "[33d497d7]", "0x20")
    self.bid64_to_binary32("1", "[6bbb2bab5b1c9e73]", "[33d497d7]", "0x20")
    self.bid64_to_binary32("2", "[6bbb2bab5b1c9e73]", "[33d497d8]", "0x20")
    self.bid64_to_binary32("3", "[6bbb2bab5b1c9e73]", "[33d497d7]", "0x20")
    self.bid64_to_binary32("4", "[6bbb2bab5b1c9e73]", "[33d497d7]", "0x20")
    self.bid64_to_binary32("0", "[6bcad86484f1bcbb]", "[37248d5d]", "0x20")
    self.bid64_to_binary32("1", "[6bcad86484f1bcbb]", "[37248d5c]", "0x20")
    self.bid64_to_binary32("2", "[6bcad86484f1bcbb]", "[37248d5d]", "0x20")
    self.bid64_to_binary32("3", "[6bcad86484f1bcbb]", "[37248d5c]", "0x20")
    self.bid64_to_binary32("4", "[6bcad86484f1bcbb]", "[37248d5d]", "0x20")
    self.bid64_to_binary32("0", "[6bdb783cd788d689]", "[3a82dc2a]", "0x20")
    self.bid64_to_binary32("1", "[6bdb783cd788d689]", "[3a82dc29]", "0x20")
    self.bid64_to_binary32("2", "[6bdb783cd788d689]", "[3a82dc2a]", "0x20")
    self.bid64_to_binary32("3", "[6bdb783cd788d689]", "[3a82dc29]", "0x20")
    self.bid64_to_binary32("4", "[6bdb783cd788d689]", "[3a82dc2a]", "0x20")
    self.bid64_to_binary32("0", "[6be3861d8e3c7ded]", "[3c23d334]", "0x20")
    self.bid64_to_binary32("1", "[6be3861d8e3c7ded]", "[3c23d334]", "0x20")
    self.bid64_to_binary32("2", "[6be3861d8e3c7ded]", "[3c23d335]", "0x20")
    self.bid64_to_binary32("3", "[6be3861d8e3c7ded]", "[3c23d334]", "0x20")
    self.bid64_to_binary32("4", "[6be3861d8e3c7ded]", "[3c23d334]", "0x20")
    self.bid64_to_binary32("0", "[6bf386e0f355acff]", "[3f7fff82]", "0x20")
    self.bid64_to_binary32("1", "[6bf386e0f355acff]", "[3f7fff81]", "0x20")
    self.bid64_to_binary32("2", "[6bf386e0f355acff]", "[3f7fff82]", "0x20")
    self.bid64_to_binary32("3", "[6bf386e0f355acff]", "[3f7fff81]", "0x20")
    self.bid64_to_binary32("4", "[6bf386e0f355acff]", "[3f7fff82]", "0x20")
    self.bid64_to_binary32("0", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("1", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("2", "[6bfb86ebe2df8032]", "[411fffe3]", "0x20")
    self.bid64_to_binary32("3", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("4", "[6bfb86ebe2df8032]", "[411fffe2]", "0x20")
    self.bid64_to_binary32("0", "[6c0b86f26fc0ffff]", "[447a0000]", "0x20")
    self.bid64_to_binary32("1", "[6c0b86f26fc0ffff]", "[4479ffff]", "0x20")
    self.bid64_to_binary32("2", "[6c0b86f26fc0ffff]", "[447a0000]", "0x20")
    self.bid64_to_binary32("3", "[6c0b86f26fc0ffff]", "[4479ffff]", "0x20")
    self.bid64_to_binary32("4", "[6c0b86f26fc0ffff]", "[447a0000]", "0x20")
    self.bid64_to_binary32("0", "[6c2386f26fc0ffff]", "[49742400]", "0x20")
    self.bid64_to_binary32("1", "[6c2386f26fc0ffff]", "[497423ff]", "0x20")
    self.bid64_to_binary32("2", "[6c2386f26fc0ffff]", "[49742400]", "0x20")
    self.bid64_to_binary32("3", "[6c2386f26fc0ffff]", "[497423ff]", "0x20")
    self.bid64_to_binary32("4", "[6c2386f26fc0ffff]", "[49742400]", "0x20")
    self.bid64_to_binary32("0", "[6c3386f26fc0ffff]", "[4cbebc20]", "0x20")
    self.bid64_to_binary32("1", "[6c3386f26fc0ffff]", "[4cbebc1f]", "0x20")
    self.bid64_to_binary32("2", "[6c3386f26fc0ffff]", "[4cbebc20]", "0x20")
    self.bid64_to_binary32("3", "[6c3386f26fc0ffff]", "[4cbebc1f]", "0x20")
    self.bid64_to_binary32("4", "[6c3386f26fc0ffff]", "[4cbebc20]", "0x20")
    self.bid64_to_binary32("0", "[6c3b86f26fc0ffff]", "[4e6e6b28]", "0x20")
    self.bid64_to_binary32("1", "[6c3b86f26fc0ffff]", "[4e6e6b27]", "0x20")
    self.bid64_to_binary32("2", "[6c3b86f26fc0ffff]", "[4e6e6b28]", "0x20")
    self.bid64_to_binary32("3", "[6c3b86f26fc0ffff]", "[4e6e6b27]", "0x20")
    self.bid64_to_binary32("4", "[6c3b86f26fc0ffff]", "[4e6e6b28]", "0x20")
    self.bid64_to_binary32("0", "[6c4b86f2638bffff]", "[51ba43b7]", "0x20")
    self.bid64_to_binary32("1", "[6c4b86f2638bffff]", "[51ba43b6]", "0x20")
    self.bid64_to_binary32("2", "[6c4b86f2638bffff]", "[51ba43b7]", "0x20")
    self.bid64_to_binary32("3", "[6c4b86f2638bffff]", "[51ba43b6]", "0x20")
    self.bid64_to_binary32("4", "[6c4b86f2638bffff]", "[51ba43b7]", "0x20")
    self.bid64_to_binary32("0", "[6c5b86f226ffffff]", "[551184e6]", "0x20")
    self.bid64_to_binary32("1", "[6c5b86f226ffffff]", "[551184e5]", "0x20")
    self.bid64_to_binary32("2", "[6c5b86f226ffffff]", "[551184e6]", "0x20")
    self.bid64_to_binary32("3", "[6c5b86f226ffffff]", "[551184e5]", "0x20")
    self.bid64_to_binary32("4", "[6c5b86f226ffffff]", "[551184e6]", "0x20")
    self.bid64_to_binary32("0", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("1", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("2", "[6c6386f258ffffff]", "[56b5e621]", "0x20")
    self.bid64_to_binary32("3", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("4", "[6c6386f258ffffff]", "[56b5e620]", "0x20")
    self.bid64_to_binary32("0", "[6c7386f23fffffff]", "[5a0e1bc9]", "0x20")
    self.bid64_to_binary32("1", "[6c7386f23fffffff]", "[5a0e1bc8]", "0x20")
    self.bid64_to_binary32("2", "[6c7386f23fffffff]", "[5a0e1bc9]", "0x20")
    self.bid64_to_binary32("3", "[6c7386f23fffffff]", "[5a0e1bc8]", "0x20")
    self.bid64_to_binary32("4", "[6c7386f23fffffff]", "[5a0e1bc9]", "0x20")
    self.bid64_to_binary32("0", "[6c8b86eed916872b]", "[5f0ac715]", "0x20")
    self.bid64_to_binary32("1", "[6c8b86eed916872b]", "[5f0ac714]", "0x20")
    self.bid64_to_binary32("2", "[6c8b86eed916872b]", "[5f0ac715]", "0x20")
    self.bid64_to_binary32("3", "[6c8b86eed916872b]", "[5f0ac714]", "0x20")
    self.bid64_to_binary32("4", "[6c8b86eed916872b]", "[5f0ac715]", "0x20")
    self.bid64_to_binary32("0", "[6c9b844ff43419e3]", "[6258c712]", "0x20")
    self.bid64_to_binary32("1", "[6c9b844ff43419e3]", "[6258c711]", "0x20")
    self.bid64_to_binary32("2", "[6c9b844ff43419e3]", "[6258c712]", "0x20")
    self.bid64_to_binary32("3", "[6c9b844ff43419e3]", "[6258c711]", "0x20")
    self.bid64_to_binary32("4", "[6c9b844ff43419e3]", "[6258c712]", "0x20")
    self.bid64_to_binary32("0", "[6ca18da9973d9ec7]", "[63fffdec]", "0x20")
    self.bid64_to_binary32("1", "[6ca18da9973d9ec7]", "[63fffdec]", "0x20")
    self.bid64_to_binary32("2", "[6ca18da9973d9ec7]", "[63fffded]", "0x20")
    self.bid64_to_binary32("3", "[6ca18da9973d9ec7]", "[63fffdec]", "0x20")
    self.bid64_to_binary32("4", "[6ca18da9973d9ec7]", "[63fffdec]", "0x20")
    self.bid64_to_binary32("0", "[6cb2f8b4dd16f1df]", "[6750724a]", "0x20")
    self.bid64_to_binary32("1", "[6cb2f8b4dd16f1df]", "[67507249]", "0x20")
    self.bid64_to_binary32("2", "[6cb2f8b4dd16f1df]", "[6750724a]", "0x20")
    self.bid64_to_binary32("3", "[6cb2f8b4dd16f1df]", "[67507249]", "0x20")
    self.bid64_to_binary32("4", "[6cb2f8b4dd16f1df]", "[6750724a]", "0x20")
    self.bid64_to_binary32("0", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("1", "[77fb86f26fc0ffff]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("2", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("3", "[77fb86f26fc0ffff]", "[7f7fffff]", "0x28")
    self.bid64_to_binary32("4", "[77fb86f26fc0ffff]", "[7f800000]", "0x28")
    self.bid64_to_binary32("0", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("1", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("2", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("3", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("4", "[7800000000000000]", "[7f800000]", "0x00")
    self.bid64_to_binary32("0", "[7c03080000000000]", "[7ff08000]", "0x00")
    self.bid64_to_binary32("0", "[7e03080000000000]", "[7ff08000]", "0x01")
    self.bid64_to_binary32("0", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("1", "[8000000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[8000000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[80038d7ea4c67fff]", "[80000000]", "0x30")
    self.bid64_to_binary32("1", "[80038d7ea4c67fff]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[80038d7ea4c67fff]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[80038d7ea4c67fff]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[80038d7ea4c67fff]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("1", "[81e0000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[81e0000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("1", "[8200000000000001]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[8200000000000001]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("1", "[aa319c03c40b2180]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[aa319c03c40b2180]", "[80000000]", "0x30")
    self.bid64_to_binary32("0", "[aa44f1aa50561d26]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa44f1aa50561d26]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[aa44f1aa50561d26]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa44f1aa50561d26]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[aa44f1aa50561d26]", "[80000001]", "0x30")
    self.bid64_to_binary32("0", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("2", "[aa44fa793930bcd1]", "[80000000]", "0x30")
    self.bid64_to_binary32("3", "[aa44fa793930bcd1]", "[80000000]", "0x30")
    self.bid64_to_binary32("4", "[aa44fa793930bcd1]", "[80000001]", "0x30")
    self.bid64_to_binary32("0", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("1", "[aa44fa793930bcd2]", "[80000002]", "0x30")
    self.bid64_to_binary32("2", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("3", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("4", "[aa44fa793930bcd2]", "[80000001]", "0x30")
    self.bid64_to_binary32("0", "[aa6e94fa71ab1db7]", "[8000001d]", "0x30")
    self.bid64_to_binary32("1", "[aa6e94fa71ab1db7]", "[8000001e]", "0x30")
    self.bid64_to_binary32("2", "[aa6e94fa71ab1db7]", "[8000001d]", "0x30")
    self.bid64_to_binary32("3", "[aa6e94fa71ab1db7]", "[8000001d]", "0x30")
    self.bid64_to_binary32("4", "[aa6e94fa71ab1db7]", "[8000001d]", "0x30")
    self.bid64_to_binary32("0", "[aa81ed766d11001d]", "[80000027]", "0x30")
    self.bid64_to_binary32("1", "[aa81ed766d11001d]", "[80000027]", "0x30")
    self.bid64_to_binary32("2", "[aa81ed766d11001d]", "[80000026]", "0x30")
    self.bid64_to_binary32("3", "[aa81ed766d11001d]", "[80000026]", "0x30")
    self.bid64_to_binary32("4", "[aa81ed766d11001d]", "[80000027]", "0x30")
    self.bid64_to_binary32("0", "[aaa141af412d1729]", "[800000fc]", "0x30")
    self.bid64_to_binary32("1", "[aaa141af412d1729]", "[800000fd]", "0x30")
    self.bid64_to_binary32("2", "[aaa141af412d1729]", "[800000fc]", "0x30")
    self.bid64_to_binary32("3", "[aaa141af412d1729]", "[800000fc]", "0x30")
    self.bid64_to_binary32("4", "[aaa141af412d1729]", "[800000fc]", "0x30")
    self.bid64_to_binary32("0", "[aaa75ff61e520bfa]", "[800005c9]", "0x30")
    self.bid64_to_binary32("1", "[aaa75ff61e520bfa]", "[800005ca]", "0x30")
    self.bid64_to_binary32("2", "[aaa75ff61e520bfa]", "[800005c9]", "0x30")
    self.bid64_to_binary32("3", "[aaa75ff61e520bfa]", "[800005c9]", "0x30")
    self.bid64_to_binary32("4", "[aaa75ff61e520bfa]", "[800005c9]", "0x30")
    self.bid64_to_binary32("0", "[aac75ff61e520bfa]", "[800039de]", "0x30")
    self.bid64_to_binary32("1", "[aac75ff61e520bfa]", "[800039de]", "0x30")
    self.bid64_to_binary32("2", "[aac75ff61e520bfa]", "[800039dd]", "0x30")
    self.bid64_to_binary32("3", "[aac75ff61e520bfa]", "[800039dd]", "0x30")
    self.bid64_to_binary32("4", "[aac75ff61e520bfa]", "[800039de]", "0x30")
    self.bid64_to_binary32("0", "[aae123cc906326f3]", "[80005970]", "0x30")
    self.bid64_to_binary32("1", "[aae123cc906326f3]", "[80005970]", "0x30")
    self.bid64_to_binary32("2", "[aae123cc906326f3]", "[8000596f]", "0x30")
    self.bid64_to_binary32("3", "[aae123cc906326f3]", "[8000596f]", "0x30")
    self.bid64_to_binary32("4", "[aae123cc906326f3]", "[80005970]", "0x30")
    self.bid64_to_binary32("0", "[aae48f32418c9bcc]", "[800165bf]", "0x30")
    self.bid64_to_binary32("1", "[aae48f32418c9bcc]", "[800165bf]", "0x30")
    self.bid64_to_binary32("2", "[aae48f32418c9bcc]", "[800165be]", "0x30")
    self.bid64_to_binary32("3", "[aae48f32418c9bcc]", "[800165be]", "0x30")
    self.bid64_to_binary32("4", "[aae48f32418c9bcc]", "[800165bf]", "0x30")
    self.bid64_to_binary32("0", "[ab0a70c3af28dd5e]", "[80200000]", "0x30")
    self.bid64_to_binary32("1", "[ab0a70c3af28dd5e]", "[80200000]", "0x30")
    self.bid64_to_binary32("2", "[ab0a70c3af28dd5e]", "[801fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab0a70c3af28dd5e]", "[801fffff]", "0x30")
    self.bid64_to_binary32("4", "[ab0a70c3af28dd5e]", "[80200000]", "0x30")
    self.bid64_to_binary32("0", "[ab0a70c3af28dd5f]", "[80200000]", "0x30")
    self.bid64_to_binary32("1", "[ab0a70c3af28dd5f]", "[80200000]", "0x30")
    self.bid64_to_binary32("2", "[ab0a70c3af28dd5f]", "[801fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab0a70c3af28dd5f]", "[801fffff]", "0x30")
    self.bid64_to_binary32("4", "[ab0a70c3af28dd5f]", "[80200000]", "0x30")
    self.bid64_to_binary32("0", "[ab14e1875e51babd]", "[803fffff]", "0x30")
    self.bid64_to_binary32("1", "[ab14e1875e51babd]", "[80400000]", "0x30")
    self.bid64_to_binary32("2", "[ab14e1875e51babd]", "[803fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab14e1875e51babd]", "[803fffff]", "0x30")
    self.bid64_to_binary32("4", "[ab14e1875e51babd]", "[803fffff]", "0x30")
    self.bid64_to_binary32("0", "[ab14e1875e51babe]", "[80400000]", "0x30")
    self.bid64_to_binary32("1", "[ab14e1875e51babe]", "[80400000]", "0x30")
    self.bid64_to_binary32("2", "[ab14e1875e51babe]", "[803fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab14e1875e51babe]", "[803fffff]", "0x30")
    self.bid64_to_binary32("4", "[ab14e1875e51babe]", "[80400000]", "0x30")
    self.bid64_to_binary32("0", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("1", "[ab158c3cf6ba79d1]", "[80420b39]", "0x30")
    self.bid64_to_binary32("2", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("3", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("4", "[ab158c3cf6ba79d1]", "[80420b38]", "0x30")
    self.bid64_to_binary32("0", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("1", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("2", "[ab242d1b1b375b8f]", "[807fffff]", "0x30")
    self.bid64_to_binary32("3", "[ab242d1b1b375b8f]", "[807fffff]", "0x30")
    self.bid64_to_binary32("4", "[ab242d1b1b375b8f]", "[80800000]", "0x20")
    self.bid64_to_binary32("0", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("1", "[ab242d1b1b375b90]", "[80800001]", "0x20")
    self.bid64_to_binary32("2", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("3", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("4", "[ab242d1b1b375b90]", "[80800000]", "0x20")
    self.bid64_to_binary32("0", "[ab27b50e5594de5e]", "[80ec39fe]", "0x20")
    self.bid64_to_binary32("1", "[ab27b50e5594de5e]", "[80ec39fe]", "0x20")
    self.bid64_to_binary32("2", "[ab27b50e5594de5e]", "[80ec39fd]", "0x20")
    self.bid64_to_binary32("3", "[ab27b50e5594de5e]", "[80ec39fd]", "0x20")
    self.bid64_to_binary32("4", "[ab27b50e5594de5e]", "[80ec39fe]", "0x20")
    self.bid64_to_binary32("0", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("1", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("2", "[ab285a36366eb71f]", "[80ffffff]", "0x20")
    self.bid64_to_binary32("3", "[ab285a36366eb71f]", "[80ffffff]", "0x20")
    self.bid64_to_binary32("4", "[ab285a36366eb71f]", "[81000000]", "0x20")
    self.bid64_to_binary32("0", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("1", "[ab285a36366eb720]", "[81000001]", "0x20")
    self.bid64_to_binary32("2", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("3", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("4", "[ab285a36366eb720]", "[81000000]", "0x20")
    self.bid64_to_binary32("0", "[ab4050960200d375]", "[80607b87]", "0x30")
    self.bid64_to_binary32("1", "[ab4050960200d375]", "[80607b88]", "0x30")
    self.bid64_to_binary32("2", "[ab4050960200d375]", "[80607b87]", "0x30")
    self.bid64_to_binary32("3", "[ab4050960200d375]", "[80607b87]", "0x30")
    self.bid64_to_binary32("4", "[ab4050960200d375]", "[80607b87]", "0x30")
    self.bid64_to_binary32("0", "[ab4ec8f0a72815d2]", "[830d9c86]", "0x20")
    self.bid64_to_binary32("1", "[ab4ec8f0a72815d2]", "[830d9c86]", "0x20")
    self.bid64_to_binary32("2", "[ab4ec8f0a72815d2]", "[830d9c85]", "0x20")
    self.bid64_to_binary32("3", "[ab4ec8f0a72815d2]", "[830d9c85]", "0x20")
    self.bid64_to_binary32("4", "[ab4ec8f0a72815d2]", "[830d9c86]", "0x20")
    self.bid64_to_binary32("0", "[ab6ec8f0a72815d2]", "[84b103a7]", "0x20")
    self.bid64_to_binary32("1", "[ab6ec8f0a72815d2]", "[84b103a8]", "0x20")
    self.bid64_to_binary32("2", "[ab6ec8f0a72815d2]", "[84b103a7]", "0x20")
    self.bid64_to_binary32("3", "[ab6ec8f0a72815d2]", "[84b103a7]", "0x20")
    self.bid64_to_binary32("4", "[ab6ec8f0a72815d2]", "[84b103a7]", "0x20")
    self.bid64_to_binary32("0", "[ab840854fc62021f]", "[85716699]", "0x20")
    self.bid64_to_binary32("1", "[ab840854fc62021f]", "[8571669a]", "0x20")
    self.bid64_to_binary32("2", "[ab840854fc62021f]", "[85716699]", "0x20")
    self.bid64_to_binary32("3", "[ab840854fc62021f]", "[85716699]", "0x20")
    self.bid64_to_binary32("4", "[ab840854fc62021f]", "[85716699]", "0x20")
    self.bid64_to_binary32("0", "[ab95820c3849fd45]", "[86a0f124]", "0x20")
    self.bid64_to_binary32("1", "[ab95820c3849fd45]", "[86a0f124]", "0x20")
    self.bid64_to_binary32("2", "[ab95820c3849fd45]", "[86a0f123]", "0x20")
    self.bid64_to_binary32("3", "[ab95820c3849fd45]", "[86a0f123]", "0x20")
    self.bid64_to_binary32("4", "[ab95820c3849fd45]", "[86a0f124]", "0x20")
    self.bid64_to_binary32("0", "[abace6f69f948677]", "[87f15d44]", "0x20")
    self.bid64_to_binary32("1", "[abace6f69f948677]", "[87f15d45]", "0x20")
    self.bid64_to_binary32("2", "[abace6f69f948677]", "[87f15d44]", "0x20")
    self.bid64_to_binary32("3", "[abace6f69f948677]", "[87f15d44]", "0x20")
    self.bid64_to_binary32("4", "[abace6f69f948677]", "[87f15d44]", "0x20")
    self.bid64_to_binary32("0", "[abc9766517e3ced7]", "[895d4558]", "0x20")
    self.bid64_to_binary32("1", "[abc9766517e3ced7]", "[895d4559]", "0x20")
    self.bid64_to_binary32("2", "[abc9766517e3ced7]", "[895d4558]", "0x20")
    self.bid64_to_binary32("3", "[abc9766517e3ced7]", "[895d4558]", "0x20")
    self.bid64_to_binary32("4", "[abc9766517e3ced7]", "[895d4558]", "0x20")
    self.bid64_to_binary32("0", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("1", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("2", "[abe1345d833d6b0b]", "[898cd61b]", "0x20")
    self.bid64_to_binary32("3", "[abe1345d833d6b0b]", "[898cd61b]", "0x20")
    self.bid64_to_binary32("4", "[abe1345d833d6b0b]", "[898cd61c]", "0x20")
    self.bid64_to_binary32("0", "[ac1ae83da9c69d5e]", "[8d75c7d8]", "0x20")
    self.bid64_to_binary32("1", "[ac1ae83da9c69d5e]", "[8d75c7d9]", "0x20")
    self.bid64_to_binary32("2", "[ac1ae83da9c69d5e]", "[8d75c7d8]", "0x20")
    self.bid64_to_binary32("3", "[ac1ae83da9c69d5e]", "[8d75c7d8]", "0x20")
    self.bid64_to_binary32("4", "[ac1ae83da9c69d5e]", "[8d75c7d8]", "0x20")
    self.bid64_to_binary32("0", "[ac23a7842d2b655f]", "[8da6e6d5]", "0x20")
    self.bid64_to_binary32("1", "[ac23a7842d2b655f]", "[8da6e6d5]", "0x20")
    self.bid64_to_binary32("2", "[ac23a7842d2b655f]", "[8da6e6d4]", "0x20")
    self.bid64_to_binary32("3", "[ac23a7842d2b655f]", "[8da6e6d4]", "0x20")
    self.bid64_to_binary32("4", "[ac23a7842d2b655f]", "[8da6e6d5]", "0x20")
    self.bid64_to_binary32("0", "[ac4043ece2b7c4c1]", "[8d725d9e]", "0x20")
    self.bid64_to_binary32("1", "[ac4043ece2b7c4c1]", "[8d725d9f]", "0x20")
    self.bid64_to_binary32("2", "[ac4043ece2b7c4c1]", "[8d725d9e]", "0x20")
    self.bid64_to_binary32("3", "[ac4043ece2b7c4c1]", "[8d725d9e]", "0x20")
    self.bid64_to_binary32("4", "[ac4043ece2b7c4c1]", "[8d725d9e]", "0x20")
    self.bid64_to_binary32("0", "[ac6d6149635c502d]", "[91eeb528]", "0x20")
    self.bid64_to_binary32("1", "[ac6d6149635c502d]", "[91eeb529]", "0x20")
    self.bid64_to_binary32("2", "[ac6d6149635c502d]", "[91eeb528]", "0x20")
    self.bid64_to_binary32("3", "[ac6d6149635c502d]", "[91eeb528]", "0x20")
    self.bid64_to_binary32("4", "[ac6d6149635c502d]", "[91eeb528]", "0x20")
    self.bid64_to_binary32("0", "[ac82b33b9106354f]", "[9270dc04]", "0x20")
    self.bid64_to_binary32("1", "[ac82b33b9106354f]", "[9270dc05]", "0x20")
    self.bid64_to_binary32("2", "[ac82b33b9106354f]", "[9270dc04]", "0x20")
    self.bid64_to_binary32("3", "[ac82b33b9106354f]", "[9270dc04]", "0x20")
    self.bid64_to_binary32("4", "[ac82b33b9106354f]", "[9270dc04]", "0x20")
    self.bid64_to_binary32("0", "[ac9d94aec9819007]", "[9424eb1e]", "0x20")
    self.bid64_to_binary32("1", "[ac9d94aec9819007]", "[9424eb1f]", "0x20")
    self.bid64_to_binary32("2", "[ac9d94aec9819007]", "[9424eb1e]", "0x20")
    self.bid64_to_binary32("3", "[ac9d94aec9819007]", "[9424eb1e]", "0x20")
    self.bid64_to_binary32("4", "[ac9d94aec9819007]", "[9424eb1e]", "0x20")
    self.bid64_to_binary32("0", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("1", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("2", "[acb70105df3d47cb]", "[95a0507f]", "0x20")
    self.bid64_to_binary32("3", "[acb70105df3d47cb]", "[95a0507f]", "0x20")
    self.bid64_to_binary32("4", "[acb70105df3d47cb]", "[95a05080]", "0x20")
    self.bid64_to_binary32("0", "[acc3192f36748489]", "[95d7ece3]", "0x20")
    self.bid64_to_binary32("1", "[acc3192f36748489]", "[95d7ece3]", "0x20")
    self.bid64_to_binary32("2", "[acc3192f36748489]", "[95d7ece2]", "0x20")
    self.bid64_to_binary32("3", "[acc3192f36748489]", "[95d7ece2]", "0x20")
    self.bid64_to_binary32("4", "[acc3192f36748489]", "[95d7ece3]", "0x20")
    self.bid64_to_binary32("0", "[ace05b4a5dae2c19]", "[95f88430]", "0x20")
    self.bid64_to_binary32("1", "[ace05b4a5dae2c19]", "[95f88430]", "0x20")
    self.bid64_to_binary32("2", "[ace05b4a5dae2c19]", "[95f8842f]", "0x20")
    self.bid64_to_binary32("3", "[ace05b4a5dae2c19]", "[95f8842f]", "0x20")
    self.bid64_to_binary32("4", "[ace05b4a5dae2c19]", "[95f88430]", "0x20")
    self.bid64_to_binary32("0", "[acf70105df3d47cb]", "[98fa7dc8]", "0x20")
    self.bid64_to_binary32("1", "[acf70105df3d47cb]", "[98fa7dc8]", "0x20")
    self.bid64_to_binary32("2", "[acf70105df3d47cb]", "[98fa7dc7]", "0x20")
    self.bid64_to_binary32("3", "[acf70105df3d47cb]", "[98fa7dc7]", "0x20")
    self.bid64_to_binary32("4", "[acf70105df3d47cb]", "[98fa7dc8]", "0x20")
    self.bid64_to_binary32("0", "[ad11d5274fe72614]", "[9a72b9a7]", "0x20")
    self.bid64_to_binary32("1", "[ad11d5274fe72614]", "[9a72b9a7]", "0x20")
    self.bid64_to_binary32("2", "[ad11d5274fe72614]", "[9a72b9a6]", "0x20")
    self.bid64_to_binary32("3", "[ad11d5274fe72614]", "[9a72b9a6]", "0x20")
    self.bid64_to_binary32("4", "[ad11d5274fe72614]", "[9a72b9a7]", "0x20")
    self.bid64_to_binary32("0", "[ad2108c61caad38b]", "[9a0cc727]", "0x20")
    self.bid64_to_binary32("1", "[ad2108c61caad38b]", "[9a0cc727]", "0x20")
    self.bid64_to_binary32("2", "[ad2108c61caad38b]", "[9a0cc726]", "0x20")
    self.bid64_to_binary32("3", "[ad2108c61caad38b]", "[9a0cc726]", "0x20")
    self.bid64_to_binary32("4", "[ad2108c61caad38b]", "[9a0cc727]", "0x20")
    self.bid64_to_binary32("0", "[ad3e75a79609be4a]", "[9c818f8e]", "0x20")
    self.bid64_to_binary32("1", "[ad3e75a79609be4a]", "[9c818f8f]", "0x20")
    self.bid64_to_binary32("2", "[ad3e75a79609be4a]", "[9c818f8e]", "0x20")
    self.bid64_to_binary32("3", "[ad3e75a79609be4a]", "[9c818f8e]", "0x20")
    self.bid64_to_binary32("4", "[ad3e75a79609be4a]", "[9c818f8e]", "0x20")
    self.bid64_to_binary32("0", "[ad548590cda34c17]", "[9dda397e]", "0x20")
    self.bid64_to_binary32("1", "[ad548590cda34c17]", "[9dda397f]", "0x20")
    self.bid64_to_binary32("2", "[ad548590cda34c17]", "[9dda397e]", "0x20")
    self.bid64_to_binary32("3", "[ad548590cda34c17]", "[9dda397e]", "0x20")
    self.bid64_to_binary32("4", "[ad548590cda34c17]", "[9dda397e]", "0x20")
    self.bid64_to_binary32("0", "[ad66c088c46f932b]", "[9eb38052]", "0x20")
    self.bid64_to_binary32("1", "[ad66c088c46f932b]", "[9eb38053]", "0x20")
    self.bid64_to_binary32("2", "[ad66c088c46f932b]", "[9eb38052]", "0x20")
    self.bid64_to_binary32("3", "[ad66c088c46f932b]", "[9eb38052]", "0x20")
    self.bid64_to_binary32("4", "[ad66c088c46f932b]", "[9eb38052]", "0x20")
    self.bid64_to_binary32("0", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("1", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("2", "[ad814c1d40d23351]", "[9f2c718e]", "0x20")
    self.bid64_to_binary32("3", "[ad814c1d40d23351]", "[9f2c718e]", "0x20")
    self.bid64_to_binary32("4", "[ad814c1d40d23351]", "[9f2c718f]", "0x20")
    self.bid64_to_binary32("0", "[adb7f43203347727]", "[a2f8c05c]", "0x20")
    self.bid64_to_binary32("1", "[adb7f43203347727]", "[a2f8c05c]", "0x20")
    self.bid64_to_binary32("2", "[adb7f43203347727]", "[a2f8c05b]", "0x20")
    self.bid64_to_binary32("3", "[adb7f43203347727]", "[a2f8c05b]", "0x20")
    self.bid64_to_binary32("4", "[adb7f43203347727]", "[a2f8c05c]", "0x20")
    self.bid64_to_binary32("0", "[adc4ca70670a7e3b]", "[a378c05c]", "0x20")
    self.bid64_to_binary32("1", "[adc4ca70670a7e3b]", "[a378c05c]", "0x20")
    self.bid64_to_binary32("2", "[adc4ca70670a7e3b]", "[a378c05b]", "0x20")
    self.bid64_to_binary32("3", "[adc4ca70670a7e3b]", "[a378c05b]", "0x20")
    self.bid64_to_binary32("4", "[adc4ca70670a7e3b]", "[a378c05c]", "0x20")
    self.bid64_to_binary32("0", "[ade0cf9e9fd76667]", "[a3d28d23]", "0x20")
    self.bid64_to_binary32("1", "[ade0cf9e9fd76667]", "[a3d28d24]", "0x20")
    self.bid64_to_binary32("2", "[ade0cf9e9fd76667]", "[a3d28d23]", "0x20")
    self.bid64_to_binary32("3", "[ade0cf9e9fd76667]", "[a3d28d23]", "0x20")
    self.bid64_to_binary32("4", "[ade0cf9e9fd76667]", "[a3d28d23]", "0x20")
    self.bid64_to_binary32("0", "[ade5d8d6c97e640a]", "[a53dbf34]", "0x20")
    self.bid64_to_binary32("1", "[ade5d8d6c97e640a]", "[a53dbf34]", "0x20")
    self.bid64_to_binary32("2", "[ade5d8d6c97e640a]", "[a53dbf33]", "0x20")
    self.bid64_to_binary32("3", "[ade5d8d6c97e640a]", "[a53dbf33]", "0x20")
    self.bid64_to_binary32("4", "[ade5d8d6c97e640a]", "[a53dbf34]", "0x20")
    self.bid64_to_binary32("0", "[ae05d8d6c97e640a]", "[a6ed2f01]", "0x20")
    self.bid64_to_binary32("1", "[ae05d8d6c97e640a]", "[a6ed2f01]", "0x20")
    self.bid64_to_binary32("2", "[ae05d8d6c97e640a]", "[a6ed2f00]", "0x20")
    self.bid64_to_binary32("3", "[ae05d8d6c97e640a]", "[a6ed2f00]", "0x20")
    self.bid64_to_binary32("4", "[ae05d8d6c97e640a]", "[a6ed2f01]", "0x20")
    self.bid64_to_binary32("0", "[ae20888df12b9d45]", "[a6d86112]", "0x20")
    self.bid64_to_binary32("1", "[ae20888df12b9d45]", "[a6d86112]", "0x20")
    self.bid64_to_binary32("2", "[ae20888df12b9d45]", "[a6d86111]", "0x20")
    self.bid64_to_binary32("3", "[ae20888df12b9d45]", "[a6d86111]", "0x20")
    self.bid64_to_binary32("4", "[ae20888df12b9d45]", "[a6d86112]", "0x20")
    self.bid64_to_binary32("0", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("1", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("2", "[ae5100e91aa27c10]", "[ab06b74f]", "0x20")
    self.bid64_to_binary32("3", "[ae5100e91aa27c10]", "[ab06b74f]", "0x20")
    self.bid64_to_binary32("4", "[ae5100e91aa27c10]", "[ab06b750]", "0x20")
    self.bid64_to_binary32("0", "[ae63d29032408016]", "[ab976ce3]", "0x20")
    self.bid64_to_binary32("1", "[ae63d29032408016]", "[ab976ce3]", "0x20")
    self.bid64_to_binary32("2", "[ae63d29032408016]", "[ab976ce2]", "0x20")
    self.bid64_to_binary32("3", "[ae63d29032408016]", "[ab976ce2]", "0x20")
    self.bid64_to_binary32("4", "[ae63d29032408016]", "[ab976ce3]", "0x20")
    self.bid64_to_binary32("0", "[ae808db8d9fce5fb]", "[abdb4de6]", "0x20")
    self.bid64_to_binary32("1", "[ae808db8d9fce5fb]", "[abdb4de6]", "0x20")
    self.bid64_to_binary32("2", "[ae808db8d9fce5fb]", "[abdb4de5]", "0x20")
    self.bid64_to_binary32("3", "[ae808db8d9fce5fb]", "[abdb4de5]", "0x20")
    self.bid64_to_binary32("4", "[ae808db8d9fce5fb]", "[abdb4de6]", "0x20")
    self.bid64_to_binary32("0", "[ae9daf06ecb15bd6]", "[aeb7bbb3]", "0x20")
    self.bid64_to_binary32("1", "[ae9daf06ecb15bd6]", "[aeb7bbb3]", "0x20")
    self.bid64_to_binary32("2", "[ae9daf06ecb15bd6]", "[aeb7bbb2]", "0x20")
    self.bid64_to_binary32("3", "[ae9daf06ecb15bd6]", "[aeb7bbb2]", "0x20")
    self.bid64_to_binary32("4", "[ae9daf06ecb15bd6]", "[aeb7bbb3]", "0x20")
    self.bid64_to_binary32("0", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("1", "[aea132645e1ba93f]", "[ae142981]", "0x20")
    self.bid64_to_binary32("2", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("3", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("4", "[aea132645e1ba93f]", "[ae142980]", "0x20")
    self.bid64_to_binary32("0", "[aec132645e1ba93f]", "[afb933e0]", "0x20")
    self.bid64_to_binary32("1", "[aec132645e1ba93f]", "[afb933e1]", "0x20")
    self.bid64_to_binary32("2", "[aec132645e1ba93f]", "[afb933e0]", "0x20")
    self.bid64_to_binary32("3", "[aec132645e1ba93f]", "[afb933e0]", "0x20")
    self.bid64_to_binary32("4", "[aec132645e1ba93f]", "[afb933e0]", "0x20")
    self.bid64_to_binary32("0", "[aec264c8bc37527e]", "[b03933e0]", "0x20")
    self.bid64_to_binary32("1", "[aec264c8bc37527e]", "[b03933e1]", "0x20")
    self.bid64_to_binary32("2", "[aec264c8bc37527e]", "[b03933e0]", "0x20")
    self.bid64_to_binary32("3", "[aec264c8bc37527e]", "[b03933e0]", "0x20")
    self.bid64_to_binary32("4", "[aec264c8bc37527e]", "[b03933e0]", "0x20")
    self.bid64_to_binary32("0", "[af06139ec6ef984b]", "[b437a7bc]", "0x20")
    self.bid64_to_binary32("1", "[af06139ec6ef984b]", "[b437a7bd]", "0x20")
    self.bid64_to_binary32("2", "[af06139ec6ef984b]", "[b437a7bc]", "0x20")
    self.bid64_to_binary32("3", "[af06139ec6ef984b]", "[b437a7bc]", "0x20")
    self.bid64_to_binary32("4", "[af06139ec6ef984b]", "[b437a7bc]", "0x20")
    self.bid64_to_binary32("0", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("1", "[af20fe93dea50b6c]", "[b49646af]", "0x20")
    self.bid64_to_binary32("2", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("3", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("4", "[af20fe93dea50b6c]", "[b49646ae]", "0x20")
    self.bid64_to_binary32("0", "[af55a1ae8f631b44]", "[b87f6168]", "0x20")
    self.bid64_to_binary32("1", "[af55a1ae8f631b44]", "[b87f6169]", "0x20")
    self.bid64_to_binary32("2", "[af55a1ae8f631b44]", "[b87f6168]", "0x20")
    self.bid64_to_binary32("3", "[af55a1ae8f631b44]", "[b87f6168]", "0x20")
    self.bid64_to_binary32("4", "[af55a1ae8f631b44]", "[b87f6168]", "0x20")
    self.bid64_to_binary32("0", "[af6448ca2ed1de44]", "[b8fce70a]", "0x20")
    self.bid64_to_binary32("1", "[af6448ca2ed1de44]", "[b8fce70b]", "0x20")
    self.bid64_to_binary32("2", "[af6448ca2ed1de44]", "[b8fce70a]", "0x20")
    self.bid64_to_binary32("3", "[af6448ca2ed1de44]", "[b8fce70a]", "0x20")
    self.bid64_to_binary32("4", "[af6448ca2ed1de44]", "[b8fce70a]", "0x20")
    self.bid64_to_binary32("0", "[afab197a685a3dae]", "[bcfff006]", "0x20")
    self.bid64_to_binary32("1", "[afab197a685a3dae]", "[bcfff007]", "0x20")
    self.bid64_to_binary32("2", "[afab197a685a3dae]", "[bcfff006]", "0x20")
    self.bid64_to_binary32("3", "[afab197a685a3dae]", "[bcfff006]", "0x20")
    self.bid64_to_binary32("4", "[afab197a685a3dae]", "[bcfff006]", "0x20")
    self.bid64_to_binary32("0", "[afc2384be833bcb2]", "[bd7ff020]", "0x20")
    self.bid64_to_binary32("1", "[afc2384be833bcb2]", "[bd7ff021]", "0x20")
    self.bid64_to_binary32("2", "[afc2384be833bcb2]", "[bd7ff020]", "0x20")
    self.bid64_to_binary32("3", "[afc2384be833bcb2]", "[bd7ff020]", "0x20")
    self.bid64_to_binary32("4", "[afc2384be833bcb2]", "[bd7ff020]", "0x20")
    self.bid64_to_binary32("0", "[b00b5e61319787d6]", "[c1ffffec]", "0x20")
    self.bid64_to_binary32("1", "[b00b5e61319787d6]", "[c1ffffed]", "0x20")
    self.bid64_to_binary32("2", "[b00b5e61319787d6]", "[c1ffffec]", "0x20")
    self.bid64_to_binary32("3", "[b00b5e61319787d6]", "[c1ffffec]", "0x20")
    self.bid64_to_binary32("4", "[b00b5e61319787d6]", "[c1ffffec]", "0x20")
    self.bid64_to_binary32("0", "[b0224613993ee295]", "[c27ffffe]", "0x20")
    self.bid64_to_binary32("1", "[b0224613993ee295]", "[c27fffff]", "0x20")
    self.bid64_to_binary32("2", "[b0224613993ee295]", "[c27ffffe]", "0x20")
    self.bid64_to_binary32("3", "[b0224613993ee295]", "[c27ffffe]", "0x20")
    self.bid64_to_binary32("4", "[b0224613993ee295]", "[c27ffffe]", "0x20")
    self.bid64_to_binary32("0", "[b05d1a94a1ffffff]", "[c6000000]", "0x20")
    self.bid64_to_binary32("1", "[b05d1a94a1ffffff]", "[c6000000]", "0x20")
    self.bid64_to_binary32("2", "[b05d1a94a1ffffff]", "[c5ffffff]", "0x20")
    self.bid64_to_binary32("3", "[b05d1a94a1ffffff]", "[c5ffffff]", "0x20")
    self.bid64_to_binary32("4", "[b05d1a94a1ffffff]", "[c6000000]", "0x20")
    self.bid64_to_binary32("0", "[b065d21db9ffffff]", "[c6800000]", "0x20")
    self.bid64_to_binary32("1", "[b065d21db9ffffff]", "[c6800000]", "0x20")
    self.bid64_to_binary32("2", "[b065d21db9ffffff]", "[c67fffff]", "0x20")
    self.bid64_to_binary32("3", "[b065d21db9ffffff]", "[c67fffff]", "0x20")
    self.bid64_to_binary32("4", "[b065d21db9ffffff]", "[c6800000]", "0x20")
    self.bid64_to_binary32("0", "[b0812a05f1ffffff]", "[c7000000]", "0x20")
    self.bid64_to_binary32("1", "[b0812a05f1ffffff]", "[c7000000]", "0x20")
    self.bid64_to_binary32("2", "[b0812a05f1ffffff]", "[c6ffffff]", "0x20")
    self.bid64_to_binary32("3", "[b0812a05f1ffffff]", "[c6ffffff]", "0x20")
    self.bid64_to_binary32("4", "[b0812a05f1ffffff]", "[c7000000]", "0x20")
    self.bid64_to_binary32("0", "[b0aee6b27fffffff]", "[ca800000]", "0x20")
    self.bid64_to_binary32("1", "[b0aee6b27fffffff]", "[ca800000]", "0x20")
    self.bid64_to_binary32("2", "[b0aee6b27fffffff]", "[ca7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b0aee6b27fffffff]", "[ca7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b0aee6b27fffffff]", "[ca800000]", "0x20")
    self.bid64_to_binary32("0", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("1", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("2", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("3", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("4", "[b0c00000004d7c6d]", "[bd500000]", "0x00")
    self.bid64_to_binary32("0", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("1", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("2", "[b0c2faf07fffffff]", "[caffffff]", "0x20")
    self.bid64_to_binary32("3", "[b0c2faf07fffffff]", "[caffffff]", "0x20")
    self.bid64_to_binary32("4", "[b0c2faf07fffffff]", "[cb000000]", "0x20")
    self.bid64_to_binary32("0", "[b107a11fffffffff]", "[cf000000]", "0x20")
    self.bid64_to_binary32("1", "[b107a11fffffffff]", "[cf000000]", "0x20")
    self.bid64_to_binary32("2", "[b107a11fffffffff]", "[ceffffff]", "0x20")
    self.bid64_to_binary32("3", "[b107a11fffffffff]", "[ceffffff]", "0x20")
    self.bid64_to_binary32("4", "[b107a11fffffffff]", "[cf000000]", "0x20")
    self.bid64_to_binary32("0", "[b121869fffffffff]", "[cf800000]", "0x20")
    self.bid64_to_binary32("1", "[b121869fffffffff]", "[cf800000]", "0x20")
    self.bid64_to_binary32("2", "[b121869fffffffff]", "[cf7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b121869fffffffff]", "[cf7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b121869fffffffff]", "[cf800000]", "0x20")
    self.bid64_to_binary32("0", "[b15387ffffffffff]", "[d3000000]", "0x20")
    self.bid64_to_binary32("1", "[b15387ffffffffff]", "[d3000000]", "0x20")
    self.bid64_to_binary32("2", "[b15387ffffffffff]", "[d2ffffff]", "0x20")
    self.bid64_to_binary32("3", "[b15387ffffffffff]", "[d2ffffff]", "0x20")
    self.bid64_to_binary32("4", "[b15387ffffffffff]", "[d3000000]", "0x20")
    self.bid64_to_binary32("0", "[b163e7ffffffffff]", "[d3800000]", "0x20")
    self.bid64_to_binary32("1", "[b163e7ffffffffff]", "[d3800000]", "0x20")
    self.bid64_to_binary32("2", "[b163e7ffffffffff]", "[d37fffff]", "0x20")
    self.bid64_to_binary32("3", "[b163e7ffffffffff]", "[d37fffff]", "0x20")
    self.bid64_to_binary32("4", "[b163e7ffffffffff]", "[d3800000]", "0x20")
    self.bid64_to_binary32("0", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("1", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("2", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("3", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("4", "[b1a000000000000f]", "[bfc00000]", "0x00")
    self.bid64_to_binary32("0", "[b1a9ffffffffffff]", "[d7800000]", "0x20")
    self.bid64_to_binary32("1", "[b1a9ffffffffffff]", "[d7800000]", "0x20")
    self.bid64_to_binary32("2", "[b1a9ffffffffffff]", "[d77fffff]", "0x20")
    self.bid64_to_binary32("3", "[b1a9ffffffffffff]", "[d77fffff]", "0x20")
    self.bid64_to_binary32("4", "[b1a9ffffffffffff]", "[d7800000]", "0x20")
    self.bid64_to_binary32("0", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("1", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("2", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("3", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("4", "[b1c0000000000001]", "[bf800000]", "0x00")
    self.bid64_to_binary32("0", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("1", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("2", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("3", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("4", "[b1c0000000000040]", "[c2800000]", "0x00")
    self.bid64_to_binary32("0", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("1", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("2", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("3", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("4", "[b1c00000000003e7]", "[c479c000]", "0x00")
    self.bid64_to_binary32("0", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("1", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("2", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("3", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("4", "[b1c00000000003e8]", "[c47a0000]", "0x00")
    self.bid64_to_binary32("0", "[b1c1ffffffffffff]", "[d8000000]", "0x20")
    self.bid64_to_binary32("1", "[b1c1ffffffffffff]", "[d8000000]", "0x20")
    self.bid64_to_binary32("2", "[b1c1ffffffffffff]", "[d7ffffff]", "0x20")
    self.bid64_to_binary32("3", "[b1c1ffffffffffff]", "[d7ffffff]", "0x20")
    self.bid64_to_binary32("4", "[b1c1ffffffffffff]", "[d8000000]", "0x20")
    self.bid64_to_binary32("0", "[b1f9999973333333]", "[db7ffffe]", "0x20")
    self.bid64_to_binary32("1", "[b1f9999973333333]", "[db7fffff]", "0x20")
    self.bid64_to_binary32("2", "[b1f9999973333333]", "[db7ffffe]", "0x20")
    self.bid64_to_binary32("3", "[b1f9999973333333]", "[db7ffffe]", "0x20")
    self.bid64_to_binary32("4", "[b1f9999973333333]", "[db7ffffe]", "0x20")
    self.bid64_to_binary32("0", "[b2051eb83d70a3d7]", "[dbfffffc]", "0x20")
    self.bid64_to_binary32("1", "[b2051eb83d70a3d7]", "[dbfffffc]", "0x20")
    self.bid64_to_binary32("2", "[b2051eb83d70a3d7]", "[dbfffffb]", "0x20")
    self.bid64_to_binary32("3", "[b2051eb83d70a3d7]", "[dbfffffb]", "0x20")
    self.bid64_to_binary32("4", "[b2051eb83d70a3d7]", "[dbfffffc]", "0x20")
    self.bid64_to_binary32("0", "[b20a3d707ae147ae]", "[dc7ffffc]", "0x20")
    self.bid64_to_binary32("1", "[b20a3d707ae147ae]", "[dc7ffffc]", "0x20")
    self.bid64_to_binary32("2", "[b20a3d707ae147ae]", "[dc7ffffb]", "0x20")
    self.bid64_to_binary32("3", "[b20a3d707ae147ae]", "[dc7ffffb]", "0x20")
    self.bid64_to_binary32("4", "[b20a3d707ae147ae]", "[dc7ffffc]", "0x20")
    self.bid64_to_binary32("0", "[b24d1b6fc504816f]", "[dfffffdf]", "0x20")
    self.bid64_to_binary32("1", "[b24d1b6fc504816f]", "[dfffffdf]", "0x20")
    self.bid64_to_binary32("2", "[b24d1b6fc504816f]", "[dfffffde]", "0x20")
    self.bid64_to_binary32("3", "[b24d1b6fc504816f]", "[dfffffde]", "0x20")
    self.bid64_to_binary32("4", "[b24d1b6fc504816f]", "[dfffffdf]", "0x20")
    self.bid64_to_binary32("0", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("1", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("2", "[b25a369f8a0902de]", "[e07ffd6d]", "0x20")
    self.bid64_to_binary32("3", "[b25a369f8a0902de]", "[e07ffd6d]", "0x20")
    self.bid64_to_binary32("4", "[b25a369f8a0902de]", "[e07ffd6e]", "0x20")
    self.bid64_to_binary32("0", "[b2a6b3885172b95b]", "[e47fa25f]", "0x20")
    self.bid64_to_binary32("1", "[b2a6b3885172b95b]", "[e47fa25f]", "0x20")
    self.bid64_to_binary32("2", "[b2a6b3885172b95b]", "[e47fa25e]", "0x20")
    self.bid64_to_binary32("3", "[b2a6b3885172b95b]", "[e47fa25e]", "0x20")
    self.bid64_to_binary32("4", "[b2a6b3885172b95b]", "[e47fa25f]", "0x20")
    self.bid64_to_binary32("0", "[b2ad4f10a2e572b6]", "[e4fdd89b]", "0x20")
    self.bid64_to_binary32("1", "[b2ad4f10a2e572b6]", "[e4fdd89c]", "0x20")
    self.bid64_to_binary32("2", "[b2ad4f10a2e572b6]", "[e4fdd89b]", "0x20")
    self.bid64_to_binary32("3", "[b2ad4f10a2e572b6]", "[e4fdd89b]", "0x20")
    self.bid64_to_binary32("4", "[b2ad4f10a2e572b6]", "[e4fdd89b]", "0x20")
    self.bid64_to_binary32("0", "[b2f031bdc5d16393]", "[e871505c]", "0x20")
    self.bid64_to_binary32("1", "[b2f031bdc5d16393]", "[e871505c]", "0x20")
    self.bid64_to_binary32("2", "[b2f031bdc5d16393]", "[e871505b]", "0x20")
    self.bid64_to_binary32("3", "[b2f031bdc5d16393]", "[e871505b]", "0x20")
    self.bid64_to_binary32("4", "[b2f031bdc5d16393]", "[e871505c]", "0x20")
    self.bid64_to_binary32("0", "[b2fe637b8ba2c726]", "[e8e269a9]", "0x20")
    self.bid64_to_binary32("1", "[b2fe637b8ba2c726]", "[e8e269aa]", "0x20")
    self.bid64_to_binary32("2", "[b2fe637b8ba2c726]", "[e8e269a9]", "0x20")
    self.bid64_to_binary32("3", "[b2fe637b8ba2c726]", "[e8e269a9]", "0x20")
    self.bid64_to_binary32("4", "[b2fe637b8ba2c726]", "[e8e269a9]", "0x20")
    self.bid64_to_binary32("0", "[b31809f2c129e0b7]", "[ea5fe11c]", "0x20")
    self.bid64_to_binary32("1", "[b31809f2c129e0b7]", "[ea5fe11c]", "0x20")
    self.bid64_to_binary32("2", "[b31809f2c129e0b7]", "[ea5fe11b]", "0x20")
    self.bid64_to_binary32("3", "[b31809f2c129e0b7]", "[ea5fe11b]", "0x20")
    self.bid64_to_binary32("4", "[b31809f2c129e0b7]", "[ea5fe11c]", "0x20")
    self.bid64_to_binary32("0", "[b326bdf1d70a1fe4]", "[eb1cf948]", "0x20")
    self.bid64_to_binary32("1", "[b326bdf1d70a1fe4]", "[eb1cf948]", "0x20")
    self.bid64_to_binary32("2", "[b326bdf1d70a1fe4]", "[eb1cf947]", "0x20")
    self.bid64_to_binary32("3", "[b326bdf1d70a1fe4]", "[eb1cf947]", "0x20")
    self.bid64_to_binary32("4", "[b326bdf1d70a1fe4]", "[eb1cf948]", "0x20")
    self.bid64_to_binary32("0", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("1", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("2", "[b3319b96f36ec68b]", "[ebccfb3f]", "0x20")
    self.bid64_to_binary32("3", "[b3319b96f36ec68b]", "[ebccfb3f]", "0x20")
    self.bid64_to_binary32("4", "[b3319b96f36ec68b]", "[ebccfb40]", "0x20")
    self.bid64_to_binary32("0", "[b345c1c39ea07d62]", "[eca78c2f]", "0x20")
    self.bid64_to_binary32("1", "[b345c1c39ea07d62]", "[eca78c2f]", "0x20")
    self.bid64_to_binary32("2", "[b345c1c39ea07d62]", "[eca78c2e]", "0x20")
    self.bid64_to_binary32("3", "[b345c1c39ea07d62]", "[eca78c2e]", "0x20")
    self.bid64_to_binary32("4", "[b345c1c39ea07d62]", "[eca78c2f]", "0x20")
    self.bid64_to_binary32("0", "[b36bf881dc671d64]", "[eed9bf10]", "0x20")
    self.bid64_to_binary32("1", "[b36bf881dc671d64]", "[eed9bf11]", "0x20")
    self.bid64_to_binary32("2", "[b36bf881dc671d64]", "[eed9bf10]", "0x20")
    self.bid64_to_binary32("3", "[b36bf881dc671d64]", "[eed9bf10]", "0x20")
    self.bid64_to_binary32("4", "[b36bf881dc671d64]", "[eed9bf10]", "0x20")
    self.bid64_to_binary32("0", "[b3719b96f36ec68b]", "[ef20244a]", "0x20")
    self.bid64_to_binary32("1", "[b3719b96f36ec68b]", "[ef20244a]", "0x20")
    self.bid64_to_binary32("2", "[b3719b96f36ec68b]", "[ef202449]", "0x20")
    self.bid64_to_binary32("3", "[b3719b96f36ec68b]", "[ef202449]", "0x20")
    self.bid64_to_binary32("4", "[b3719b96f36ec68b]", "[ef20244a]", "0x20")
    self.bid64_to_binary32("0", "[b38bf881dc671d64]", "[f088176a]", "0x20")
    self.bid64_to_binary32("1", "[b38bf881dc671d64]", "[f088176b]", "0x20")
    self.bid64_to_binary32("2", "[b38bf881dc671d64]", "[f088176a]", "0x20")
    self.bid64_to_binary32("3", "[b38bf881dc671d64]", "[f088176a]", "0x20")
    self.bid64_to_binary32("4", "[b38bf881dc671d64]", "[f088176a]", "0x20")
    self.bid64_to_binary32("0", "[b3919b96f36ec68b]", "[f0c82d5c]", "0x20")
    self.bid64_to_binary32("1", "[b3919b96f36ec68b]", "[f0c82d5d]", "0x20")
    self.bid64_to_binary32("2", "[b3919b96f36ec68b]", "[f0c82d5c]", "0x20")
    self.bid64_to_binary32("3", "[b3919b96f36ec68b]", "[f0c82d5c]", "0x20")
    self.bid64_to_binary32("4", "[b3919b96f36ec68b]", "[f0c82d5c]", "0x20")
    self.bid64_to_binary32("0", "[b3ce5f9eb18201d8]", "[f3ff532e]", "0x20")
    self.bid64_to_binary32("1", "[b3ce5f9eb18201d8]", "[f3ff532f]", "0x20")
    self.bid64_to_binary32("2", "[b3ce5f9eb18201d8]", "[f3ff532e]", "0x20")
    self.bid64_to_binary32("3", "[b3ce5f9eb18201d8]", "[f3ff532e]", "0x20")
    self.bid64_to_binary32("4", "[b3ce5f9eb18201d8]", "[f3ff532e]", "0x20")
    self.bid64_to_binary32("0", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("1", "[b3d608e7907c5218]", "[f443b54d]", "0x20")
    self.bid64_to_binary32("2", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("3", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("4", "[b3d608e7907c5218]", "[f443b54c]", "0x20")
    self.bid64_to_binary32("0", "[b3e6a2c98ebde545]", "[f51358a8]", "0x20")
    self.bid64_to_binary32("1", "[b3e6a2c98ebde545]", "[f51358a8]", "0x20")
    self.bid64_to_binary32("2", "[b3e6a2c98ebde545]", "[f51358a7]", "0x20")
    self.bid64_to_binary32("3", "[b3e6a2c98ebde545]", "[f51358a7]", "0x20")
    self.bid64_to_binary32("4", "[b3e6a2c98ebde545]", "[f51358a8]", "0x20")
    self.bid64_to_binary32("0", "[b41a8b263af79514]", "[f7b82ed2]", "0x20")
    self.bid64_to_binary32("1", "[b41a8b263af79514]", "[f7b82ed2]", "0x20")
    self.bid64_to_binary32("2", "[b41a8b263af79514]", "[f7b82ed1]", "0x20")
    self.bid64_to_binary32("3", "[b41a8b263af79514]", "[f7b82ed1]", "0x20")
    self.bid64_to_binary32("4", "[b41a8b263af79514]", "[f7b82ed2]", "0x20")
    self.bid64_to_binary32("0", "[b431f55b23c8bf2d]", "[f91bc3b5]", "0x20")
    self.bid64_to_binary32("1", "[b431f55b23c8bf2d]", "[f91bc3b5]", "0x20")
    self.bid64_to_binary32("2", "[b431f55b23c8bf2d]", "[f91bc3b4]", "0x20")
    self.bid64_to_binary32("3", "[b431f55b23c8bf2d]", "[f91bc3b4]", "0x20")
    self.bid64_to_binary32("4", "[b431f55b23c8bf2d]", "[f91bc3b5]", "0x20")
    self.bid64_to_binary32("0", "[b44577623ce08817]", "[f9ed1099]", "0x20")
    self.bid64_to_binary32("1", "[b44577623ce08817]", "[f9ed1099]", "0x20")
    self.bid64_to_binary32("2", "[b44577623ce08817]", "[f9ed1098]", "0x20")
    self.bid64_to_binary32("3", "[b44577623ce08817]", "[f9ed1098]", "0x20")
    self.bid64_to_binary32("4", "[b44577623ce08817]", "[f9ed1099]", "0x20")
    self.bid64_to_binary32("0", "[b44aeec479c1102e]", "[fa6d1099]", "0x20")
    self.bid64_to_binary32("1", "[b44aeec479c1102e]", "[fa6d1099]", "0x20")
    self.bid64_to_binary32("2", "[b44aeec479c1102e]", "[fa6d1098]", "0x20")
    self.bid64_to_binary32("3", "[b44aeec479c1102e]", "[fa6d1098]", "0x20")
    self.bid64_to_binary32("4", "[b44aeec479c1102e]", "[fa6d1099]", "0x20")
    self.bid64_to_binary32("0", "[b478849dd33c95af]", "[fca62402]", "0x20")
    self.bid64_to_binary32("1", "[b478849dd33c95af]", "[fca62403]", "0x20")
    self.bid64_to_binary32("2", "[b478849dd33c95af]", "[fca62402]", "0x20")
    self.bid64_to_binary32("3", "[b478849dd33c95af]", "[fca62402]", "0x20")
    self.bid64_to_binary32("4", "[b478849dd33c95af]", "[fca62402]", "0x20")
    self.bid64_to_binary32("0", "[b4842fc69945497a]", "[fd0dd92d]", "0x20")
    self.bid64_to_binary32("1", "[b4842fc69945497a]", "[fd0dd92e]", "0x20")
    self.bid64_to_binary32("2", "[b4842fc69945497a]", "[fd0dd92d]", "0x20")
    self.bid64_to_binary32("3", "[b4842fc69945497a]", "[fd0dd92d]", "0x20")
    self.bid64_to_binary32("4", "[b4842fc69945497a]", "[fd0dd92d]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("1", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("2", "[b4ac16d993f27f88]", "[ff7ffffe]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d993f27f88]", "[ff7ffffe]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d993f27f88]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("1", "[b4ac16d993f27f89]", "[ff800000]", "0x28")
    self.bid64_to_binary32("2", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d993f27f89]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("0", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("2", "[b4ac16d9a0095928]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("3", "[b4ac16d9a0095928]", "[ff7fffff]", "0x20")
    self.bid64_to_binary32("4", "[b4ac16d9a0095928]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("2", "[b4ac16d9a0095929]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("3", "[b4ac16d9a0095929]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("4", "[b4ac16d9a0095929]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[eaf98a5fcdb8d437]", "[8bf51900]", "0x20")
    self.bid64_to_binary32("1", "[eaf98a5fcdb8d437]", "[8bf51901]", "0x20")
    self.bid64_to_binary32("2", "[eaf98a5fcdb8d437]", "[8bf51900]", "0x20")
    self.bid64_to_binary32("3", "[eaf98a5fcdb8d437]", "[8bf51900]", "0x20")
    self.bid64_to_binary32("4", "[eaf98a5fcdb8d437]", "[8bf51900]", "0x20")
    self.bid64_to_binary32("0", "[eb116b7f5bf619d9]", "[90ee7e12]", "0x20")
    self.bid64_to_binary32("1", "[eb116b7f5bf619d9]", "[90ee7e12]", "0x20")
    self.bid64_to_binary32("2", "[eb116b7f5bf619d9]", "[90ee7e11]", "0x20")
    self.bid64_to_binary32("3", "[eb116b7f5bf619d9]", "[90ee7e11]", "0x20")
    self.bid64_to_binary32("4", "[eb116b7f5bf619d9]", "[90ee7e12]", "0x20")
    self.bid64_to_binary32("0", "[eb6206a25682726d]", "[a18d568f]", "0x20")
    self.bid64_to_binary32("1", "[eb6206a25682726d]", "[a18d568f]", "0x20")
    self.bid64_to_binary32("2", "[eb6206a25682726d]", "[a18d568e]", "0x20")
    self.bid64_to_binary32("3", "[eb6206a25682726d]", "[a18d568e]", "0x20")
    self.bid64_to_binary32("4", "[eb6206a25682726d]", "[a18d568f]", "0x20")
    self.bid64_to_binary32("0", "[eb8b0fc62594fa4f]", "[a9de3aba]", "0x20")
    self.bid64_to_binary32("1", "[eb8b0fc62594fa4f]", "[a9de3abb]", "0x20")
    self.bid64_to_binary32("2", "[eb8b0fc62594fa4f]", "[a9de3aba]", "0x20")
    self.bid64_to_binary32("3", "[eb8b0fc62594fa4f]", "[a9de3aba]", "0x20")
    self.bid64_to_binary32("4", "[eb8b0fc62594fa4f]", "[a9de3aba]", "0x20")
    self.bid64_to_binary32("0", "[ebbb2bab5b1c9e73]", "[b3d497d7]", "0x20")
    self.bid64_to_binary32("1", "[ebbb2bab5b1c9e73]", "[b3d497d8]", "0x20")
    self.bid64_to_binary32("2", "[ebbb2bab5b1c9e73]", "[b3d497d7]", "0x20")
    self.bid64_to_binary32("3", "[ebbb2bab5b1c9e73]", "[b3d497d7]", "0x20")
    self.bid64_to_binary32("4", "[ebbb2bab5b1c9e73]", "[b3d497d7]", "0x20")
    self.bid64_to_binary32("0", "[ebcad86484f1bcbb]", "[b7248d5d]", "0x20")
    self.bid64_to_binary32("1", "[ebcad86484f1bcbb]", "[b7248d5d]", "0x20")
    self.bid64_to_binary32("2", "[ebcad86484f1bcbb]", "[b7248d5c]", "0x20")
    self.bid64_to_binary32("3", "[ebcad86484f1bcbb]", "[b7248d5c]", "0x20")
    self.bid64_to_binary32("4", "[ebcad86484f1bcbb]", "[b7248d5d]", "0x20")
    self.bid64_to_binary32("0", "[ebdb783cd788d689]", "[ba82dc2a]", "0x20")
    self.bid64_to_binary32("1", "[ebdb783cd788d689]", "[ba82dc2a]", "0x20")
    self.bid64_to_binary32("2", "[ebdb783cd788d689]", "[ba82dc29]", "0x20")
    self.bid64_to_binary32("3", "[ebdb783cd788d689]", "[ba82dc29]", "0x20")
    self.bid64_to_binary32("4", "[ebdb783cd788d689]", "[ba82dc2a]", "0x20")
    self.bid64_to_binary32("0", "[ebe3861d8e3c7ded]", "[bc23d334]", "0x20")
    self.bid64_to_binary32("1", "[ebe3861d8e3c7ded]", "[bc23d335]", "0x20")
    self.bid64_to_binary32("2", "[ebe3861d8e3c7ded]", "[bc23d334]", "0x20")
    self.bid64_to_binary32("3", "[ebe3861d8e3c7ded]", "[bc23d334]", "0x20")
    self.bid64_to_binary32("4", "[ebe3861d8e3c7ded]", "[bc23d334]", "0x20")
    self.bid64_to_binary32("0", "[ebf386e0f355acff]", "[bf7fff82]", "0x20")
    self.bid64_to_binary32("1", "[ebf386e0f355acff]", "[bf7fff82]", "0x20")
    self.bid64_to_binary32("2", "[ebf386e0f355acff]", "[bf7fff81]", "0x20")
    self.bid64_to_binary32("3", "[ebf386e0f355acff]", "[bf7fff81]", "0x20")
    self.bid64_to_binary32("4", "[ebf386e0f355acff]", "[bf7fff82]", "0x20")
    self.bid64_to_binary32("0", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("1", "[ebfb86ebe2df8032]", "[c11fffe3]", "0x20")
    self.bid64_to_binary32("2", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("3", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("4", "[ebfb86ebe2df8032]", "[c11fffe2]", "0x20")
    self.bid64_to_binary32("0", "[ec0b86f26fc0ffff]", "[c47a0000]", "0x20")
    self.bid64_to_binary32("1", "[ec0b86f26fc0ffff]", "[c47a0000]", "0x20")
    self.bid64_to_binary32("2", "[ec0b86f26fc0ffff]", "[c479ffff]", "0x20")
    self.bid64_to_binary32("3", "[ec0b86f26fc0ffff]", "[c479ffff]", "0x20")
    self.bid64_to_binary32("4", "[ec0b86f26fc0ffff]", "[c47a0000]", "0x20")
    self.bid64_to_binary32("0", "[ec2386f26fc0ffff]", "[c9742400]", "0x20")
    self.bid64_to_binary32("1", "[ec2386f26fc0ffff]", "[c9742400]", "0x20")
    self.bid64_to_binary32("2", "[ec2386f26fc0ffff]", "[c97423ff]", "0x20")
    self.bid64_to_binary32("3", "[ec2386f26fc0ffff]", "[c97423ff]", "0x20")
    self.bid64_to_binary32("4", "[ec2386f26fc0ffff]", "[c9742400]", "0x20")
    self.bid64_to_binary32("0", "[ec3386f26fc0ffff]", "[ccbebc20]", "0x20")
    self.bid64_to_binary32("1", "[ec3386f26fc0ffff]", "[ccbebc20]", "0x20")
    self.bid64_to_binary32("2", "[ec3386f26fc0ffff]", "[ccbebc1f]", "0x20")
    self.bid64_to_binary32("3", "[ec3386f26fc0ffff]", "[ccbebc1f]", "0x20")
    self.bid64_to_binary32("4", "[ec3386f26fc0ffff]", "[ccbebc20]", "0x20")
    self.bid64_to_binary32("0", "[ec3b86f26fc0ffff]", "[ce6e6b28]", "0x20")
    self.bid64_to_binary32("1", "[ec3b86f26fc0ffff]", "[ce6e6b28]", "0x20")
    self.bid64_to_binary32("2", "[ec3b86f26fc0ffff]", "[ce6e6b27]", "0x20")
    self.bid64_to_binary32("3", "[ec3b86f26fc0ffff]", "[ce6e6b27]", "0x20")
    self.bid64_to_binary32("4", "[ec3b86f26fc0ffff]", "[ce6e6b28]", "0x20")
    self.bid64_to_binary32("0", "[ec4b86f2638bffff]", "[d1ba43b7]", "0x20")
    self.bid64_to_binary32("1", "[ec4b86f2638bffff]", "[d1ba43b7]", "0x20")
    self.bid64_to_binary32("2", "[ec4b86f2638bffff]", "[d1ba43b6]", "0x20")
    self.bid64_to_binary32("3", "[ec4b86f2638bffff]", "[d1ba43b6]", "0x20")
    self.bid64_to_binary32("4", "[ec4b86f2638bffff]", "[d1ba43b7]", "0x20")
    self.bid64_to_binary32("0", "[ec5b86f226ffffff]", "[d51184e6]", "0x20")
    self.bid64_to_binary32("1", "[ec5b86f226ffffff]", "[d51184e6]", "0x20")
    self.bid64_to_binary32("2", "[ec5b86f226ffffff]", "[d51184e5]", "0x20")
    self.bid64_to_binary32("3", "[ec5b86f226ffffff]", "[d51184e5]", "0x20")
    self.bid64_to_binary32("4", "[ec5b86f226ffffff]", "[d51184e6]", "0x20")
    self.bid64_to_binary32("0", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("1", "[ec6386f258ffffff]", "[d6b5e621]", "0x20")
    self.bid64_to_binary32("2", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("3", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("4", "[ec6386f258ffffff]", "[d6b5e620]", "0x20")
    self.bid64_to_binary32("0", "[ec7386f23fffffff]", "[da0e1bc9]", "0x20")
    self.bid64_to_binary32("1", "[ec7386f23fffffff]", "[da0e1bc9]", "0x20")
    self.bid64_to_binary32("2", "[ec7386f23fffffff]", "[da0e1bc8]", "0x20")
    self.bid64_to_binary32("3", "[ec7386f23fffffff]", "[da0e1bc8]", "0x20")
    self.bid64_to_binary32("4", "[ec7386f23fffffff]", "[da0e1bc9]", "0x20")
    self.bid64_to_binary32("0", "[ec8b86eed916872b]", "[df0ac715]", "0x20")
    self.bid64_to_binary32("1", "[ec8b86eed916872b]", "[df0ac715]", "0x20")
    self.bid64_to_binary32("2", "[ec8b86eed916872b]", "[df0ac714]", "0x20")
    self.bid64_to_binary32("3", "[ec8b86eed916872b]", "[df0ac714]", "0x20")
    self.bid64_to_binary32("4", "[ec8b86eed916872b]", "[df0ac715]", "0x20")
    self.bid64_to_binary32("0", "[ec9b844ff43419e3]", "[e258c712]", "0x20")
    self.bid64_to_binary32("1", "[ec9b844ff43419e3]", "[e258c712]", "0x20")
    self.bid64_to_binary32("2", "[ec9b844ff43419e3]", "[e258c711]", "0x20")
    self.bid64_to_binary32("3", "[ec9b844ff43419e3]", "[e258c711]", "0x20")
    self.bid64_to_binary32("4", "[ec9b844ff43419e3]", "[e258c712]", "0x20")
    self.bid64_to_binary32("0", "[eca18da9973d9ec7]", "[e3fffdec]", "0x20")
    self.bid64_to_binary32("1", "[eca18da9973d9ec7]", "[e3fffded]", "0x20")
    self.bid64_to_binary32("2", "[eca18da9973d9ec7]", "[e3fffdec]", "0x20")
    self.bid64_to_binary32("3", "[eca18da9973d9ec7]", "[e3fffdec]", "0x20")
    self.bid64_to_binary32("4", "[eca18da9973d9ec7]", "[e3fffdec]", "0x20")
    self.bid64_to_binary32("0", "[ecb2f8b4dd16f1df]", "[e750724a]", "0x20")
    self.bid64_to_binary32("1", "[ecb2f8b4dd16f1df]", "[e750724a]", "0x20")
    self.bid64_to_binary32("2", "[ecb2f8b4dd16f1df]", "[e7507249]", "0x20")
    self.bid64_to_binary32("3", "[ecb2f8b4dd16f1df]", "[e7507249]", "0x20")
    self.bid64_to_binary32("4", "[ecb2f8b4dd16f1df]", "[e750724a]", "0x20")
    self.bid64_to_binary32("0", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("1", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("2", "[f7fb86f26fc0ffff]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("3", "[f7fb86f26fc0ffff]", "[ff7fffff]", "0x28")
    self.bid64_to_binary32("4", "[f7fb86f26fc0ffff]", "[ff800000]", "0x28")
    self.bid64_to_binary32("0", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("1", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("2", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("3", "[f800000000000000]", "[ff800000]", "0x00")
    self.bid64_to_binary32("4", "[f800000000000000]", "[ff800000]", "0x00")
  }

  private func bid64_to_binary32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseFloat(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toFloat(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_binary64() {
    self.bid64_to_binary64("0", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0000000000000001]", "[0000000000000000]", "30")
    self.bid64_to_binary64("0", "[002386F26FC10000]", "[0000000000000000]", "30")
    self.bid64_to_binary64("0", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0755F0E047737E1E]", "[0000000000000000]", "30")
    self.bid64_to_binary64("0", "[0755F0E1B78F093B]", "[0000000000000000]", "30")
    self.bid64_to_binary64("0", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0768C6C01C9498D9]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[0768C6C0AFD2D07E]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[076D2A202ADEE545]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[07718D80392931B1]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[07718D815FA5A0FC]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[077A544055BDCA8A]", "[0000000000000001]", "30")
    self.bid64_to_binary64("0", "[07C8FCAC257558EE]", "[0000000000000200]", "30")
    self.bid64_to_binary64("0", "[07C8FCACBC3C39D9]", "[0000000000000200]", "30")
    self.bid64_to_binary64("0", "[0967E7B160EF71C0]", "[000FFFFFFFFFFFFD]", "30")
    self.bid64_to_binary64("0", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[0967E7B160EF71C1]", "[000FFFFFFFFFFFFF]", "30")
    self.bid64_to_binary64("0", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("0", "[0967E7B160EF71C2]", "[0010000000000001]", "20")
    self.bid64_to_binary64("0", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("0", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("0", "[0a97365796617f83]", "[0205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("0", "[0dc10dbea1eb65e6]", "[0724897e27bfee55]", "0x20")
    self.bid64_to_binary64("0", "[10ec8294d1bdbf11]", "[0c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("0", "[14068f76c44a7dcf]", "[11b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("0", "[1739ab8261990292]", "[17014894813761f2]", "0x20")
    self.bid64_to_binary64("0", "[1a6202c6bc0e7a35]", "[1c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("0", "[1d88e19000389faf]", "[217ff6d970238791]", "0x20")
    self.bid64_to_binary64("0", "[20bf3cbdc494bf4b]", "[26cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("0", "[2700e16c4aa51b83]", "[31118452f93667d3]", "0x20")
    self.bid64_to_binary64("0", "[2a255a6f69795a8b]", "[366b870de5d9326f]", "0x20")
    self.bid64_to_binary64("0", "[2A263917877CEC05]", "[366FFFFFFFFFFFFE]", "20")
    self.bid64_to_binary64("0", "[2A263917EFE491AE]", "[367000010C6F7A0C]", "20")
    self.bid64_to_binary64("0", "[2A38E45E1DF3B015]", "[3690000000000000]", "20")
    self.bid64_to_binary64("0", "[2A38E45FBF9246B7]", "[369000010C6F7A0B]", "20")
    self.bid64_to_binary64("0", "[2A43BBDAEAE48D9D]", "[3698000000000001]", "20")
    self.bid64_to_binary64("0", "[2A44FA793930BCD1]", "[36A0000000000000]", "20")
    self.bid64_to_binary64("0", "[2A44FA798CB6DAF1]", "[36A000010C6F7A0A]", "20")
    self.bid64_to_binary64("0", "[2A4777B5D5C91B3A]", "[36A8000000000001]", "20")
    self.bid64_to_binary64("0", "[2A997D4DF19D6057]", "[372FFFFFFFFFFFFF]", "20")
    self.bid64_to_binary64("0", "[2A997D4F9D41D1A1]", "[373000010C6F7A0C]", "20")
    self.bid64_to_binary64("0", "[2B242d1b1b375b8f]", "[380FFFFFFFFFFFFC]", "20")
    self.bid64_to_binary64("0", "[2d515b57b7912b6b]", "[3bb7123726f69593]", "0x20")
    self.bid64_to_binary64("0", "[3040000000000001]", "[3D719799812DEA11]", "20")
    self.bid64_to_binary64("0", "[30400001ffffffff]", "[3F81979981251E44]", "20")
    self.bid64_to_binary64("0", "[30400003ffffffff]", "[3F9197998129842B]", "20")
    self.bid64_to_binary64("0", "[30400007ffffffff]", "[3FA19799812BB71E]", "20")
    self.bid64_to_binary64("0", "[3040000fffffffff]", "[3FB19799812CD098]", "20")
    self.bid64_to_binary64("0", "[3041ffffffffffff]", "[40819799812DEA08]", "20")
    self.bid64_to_binary64("0", "[304fffffffffffff]", "[40B19799812DEA10]", "20")
    self.bid64_to_binary64("0", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("0", "[338b424d5d7eb34e]", "[460ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("0", "[34AC13C157F0C34F]", "[47EFF7CED916872A]", "20")
    self.bid64_to_binary64("0", "[34B22246700E05BD]", "[47F8000000000000]", "20")
    self.bid64_to_binary64("0", "[34C570AEBB37681F]", "[4812000000000000]", "20")
    self.bid64_to_binary64("0", "[36c394f170eed7db]", "[4b5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("0", "[39e4c7680bf36616]", "[509226c684c87261]", "0x20")
    self.bid64_to_binary64("0", "[3d0bf1cc3c8b534f]", "[55d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("0", "[43477ac00b6ce36c]", "[602f6768b6321b82]", "0x20")
    self.bid64_to_binary64("0", "[468a88caf33b1fc1]", "[659c9548eab35381]", "0x20")
    self.bid64_to_binary64("0", "[4ccdb676714ca307]", "[7003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("0", "[4ff46d10f9119672]", "[753ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("0", "[53277b95cded4e66]", "[7a8d020192cc2618]", "0x20")
    self.bid64_to_binary64("0", "[5666615B7DDB9FDE]", "[7FEFF7CED916872D]", "20")
    self.bid64_to_binary64("0", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("0", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[5669947D1313F3E2]", "[7FF0000000000000]", "28")
    self.bid64_to_binary64("0", "[567CBD77393BDBA6]", "[7FF0000000000000]", "28")
    self.bid64_to_binary64("0", "[68f1f5a9e5a7fc7a]", "[2c00557dd789805b]", "0x20")
    self.bid64_to_binary64("0", "[6c1b86f26dab4575]", "[40f869fffe913975]", "0x20")
    self.bid64_to_binary64("0", "[6C7386F26FC10000]", "[0000000000000000]", "00")
    self.bid64_to_binary64("0", "[700a8ebab81862f2]", "[5b218a7f36172332]", "0x20")
    self.bid64_to_binary64("0", "[726b181fdc73eb71]", "[6ae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("0", "[75137407EB641FFF]", "[7C90000000000000]", "20")
    self.bid64_to_binary64("0", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[77FB86F26FC0FFFF]", "[7FF0000000000000]", "28")
    self.bid64_to_binary64("0", "[77fb86f26fc10000]", "[0000000000000000]", "00")
    self.bid64_to_binary64("0", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[7c00000000000000]", "[7FF8000000000000]", "00")
    self.bid64_to_binary64("0", "[7c038D7EA4C67FFF]", "[7FFF1AFD498CFFFE]", "00")
    self.bid64_to_binary64("0", "[7c038D7EA4C68000]", "[7FF8000000000000]", "00")
    self.bid64_to_binary64("0", "[7e00000000000000]", "[7FF8000000000000]", "01")
    self.bid64_to_binary64("0", "[7e038D7EA4C67FFF]", "[7FFF1AFD498CFFFE]", "01")
    self.bid64_to_binary64("0", "[7e038D7EA4C68000]", "[7FF8000000000000]", "01")
    self.bid64_to_binary64("0", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("0", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("0", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("0", "[8a97365796617f83]", "[8205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("0", "[8dc10dbea1eb65e6]", "[8724897e27bfee55]", "0x20")
    self.bid64_to_binary64("0", "[90ec8294d1bdbf11]", "[8c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("0", "[94068f76c44a7dcf]", "[91b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("0", "[9739ab8261990292]", "[97014894813761f2]", "0x20")
    self.bid64_to_binary64("0", "[9a6202c6bc0e7a35]", "[9c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("0", "[9d88e19000389faf]", "[a17ff6d970238791]", "0x20")
    self.bid64_to_binary64("0", "[a0bf3cbdc494bf4b]", "[a6cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("0", "[a700e16c4aa51b83]", "[b1118452f93667d3]", "0x20")
    self.bid64_to_binary64("0", "[aa255a6f69795a8b]", "[b66b870de5d9326f]", "0x20")
    self.bid64_to_binary64("0", "[ad515b57b7912b6b]", "[bbb7123726f69593]", "0x20")
    self.bid64_to_binary64("0", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("0", "[b38b424d5d7eb34e]", "[c60ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("0", "[b6c394f170eed7db]", "[cb5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("0", "[b9e4c7680bf36616]", "[d09226c684c87261]", "0x20")
    self.bid64_to_binary64("0", "[bd0bf1cc3c8b534f]", "[d5d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("0", "[c3477ac00b6ce36c]", "[e02f6768b6321b82]", "0x20")
    self.bid64_to_binary64("0", "[c68a88caf33b1fc1]", "[e59c9548eab35381]", "0x20")
    self.bid64_to_binary64("0", "[cccdb676714ca307]", "[f003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("0", "[cff46d10f9119672]", "[f53ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("0", "[d3277b95cded4e66]", "[fa8d020192cc2618]", "0x20")
    self.bid64_to_binary64("0", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("0", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[e8f1f5a9e5a7fc7a]", "[ac00557dd789805b]", "0x20")
    self.bid64_to_binary64("0", "[ec1b86f26dab4575]", "[c0f869fffe913975]", "0x20")
    self.bid64_to_binary64("0", "[f00a8ebab81862f2]", "[db218a7f36172332]", "0x20")
    self.bid64_to_binary64("0", "[f26b181fdc73eb71]", "[eae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("0", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[07718d80392931b1]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("1", "[0967E7B160EF71C1]", "[000fffffffffffff]", "30")
    self.bid64_to_binary64("1", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("1", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("1", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("1", "[0a97365796617f83]", "[0205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("1", "[0dc10dbea1eb65e6]", "[0724897e27bfee55]", "0x20")
    self.bid64_to_binary64("1", "[10ec8294d1bdbf11]", "[0c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("1", "[14068f76c44a7dcf]", "[11b1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("1", "[1739ab8261990292]", "[17014894813761f1]", "0x20")
    self.bid64_to_binary64("1", "[1a6202c6bc0e7a35]", "[1c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("1", "[1d88e19000389faf]", "[217ff6d970238790]", "0x20")
    self.bid64_to_binary64("1", "[20bf3cbdc494bf4b]", "[26cd0fcbf97f8d10]", "0x20")
    self.bid64_to_binary64("1", "[2700e16c4aa51b83]", "[31118452f93667d2]", "0x20")
    self.bid64_to_binary64("1", "[2a255a6f69795a8b]", "[366b870de5d9326f]", "0x20")
    self.bid64_to_binary64("1", "[2d515b57b7912b6b]", "[3bb7123726f69592]", "0x20")
    self.bid64_to_binary64("1", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("1", "[338b424d5d7eb34e]", "[460ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("1", "[36c394f170eed7db]", "[4b5a50a259963ca5]", "0x20")
    self.bid64_to_binary64("1", "[39e4c7680bf36616]", "[509226c684c87260]", "0x20")
    self.bid64_to_binary64("1", "[3d0bf1cc3c8b534f]", "[55d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("1", "[43477ac00b6ce36c]", "[602f6768b6321b81]", "0x20")
    self.bid64_to_binary64("1", "[468a88caf33b1fc1]", "[659c9548eab35381]", "0x20")
    self.bid64_to_binary64("1", "[4ccdb676714ca307]", "[7003e3a32c6f9727]", "0x20")
    self.bid64_to_binary64("1", "[4ff46d10f9119672]", "[753ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("1", "[53277b95cded4e66]", "[7a8d020192cc2617]", "0x20")
    self.bid64_to_binary64("1", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("1", "[566662fe0cb7f7ec]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("1", "[68f1f5a9e5a7fc7a]", "[2c00557dd789805a]", "0x20")
    self.bid64_to_binary64("1", "[6c1b86f26dab4575]", "[40f869fffe913974]", "0x20")
    self.bid64_to_binary64("1", "[700a8ebab81862f2]", "[5b218a7f36172332]", "0x20")
    self.bid64_to_binary64("1", "[726b181fdc73eb71]", "[6ae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("1", "[77fb86f26fc0ffff]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("1", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[8000000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[81e0000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[8200000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[87674569785223d2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[87718d80392931b2]", "[8000000000000002]", "0x30")
    self.bid64_to_binary64("1", "[8967e7b160ef71c1]", "[8010000000000000]", "0x30")
    self.bid64_to_binary64("1", "[8967E7B160EF71C1]", "[8010000000000000]", "30")
    self.bid64_to_binary64("1", "[8967e7b160ef71c2]", "[8010000000000002]", "0x20")
    self.bid64_to_binary64("1", "[896fcf62c1dee382]", "[801fffffffffffff]", "0x20")
    self.bid64_to_binary64("1", "[896fcf62c1dee383]", "[8020000000000001]", "0x20")
    self.bid64_to_binary64("1", "[8a97365796617f83]", "[8205e0b5e88edcad]", "0x20")
    self.bid64_to_binary64("1", "[8dc10dbea1eb65e6]", "[8724897e27bfee56]", "0x20")
    self.bid64_to_binary64("1", "[90ec8294d1bdbf11]", "[8c8f83a32f69f12a]", "0x20")
    self.bid64_to_binary64("1", "[94068f76c44a7dcf]", "[91b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("1", "[9739ab8261990292]", "[97014894813761f2]", "0x20")
    self.bid64_to_binary64("1", "[9a6202c6bc0e7a35]", "[9c2bff78226c56a8]", "0x20")
    self.bid64_to_binary64("1", "[9d88e19000389faf]", "[a17ff6d970238791]", "0x20")
    self.bid64_to_binary64("1", "[a0bf3cbdc494bf4b]", "[a6cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("1", "[a700e16c4aa51b83]", "[b1118452f93667d3]", "0x20")
    self.bid64_to_binary64("1", "[aa255a6f69795a8b]", "[b66b870de5d93270]", "0x20")
    self.bid64_to_binary64("1", "[ad515b57b7912b6b]", "[bbb7123726f69593]", "0x20")
    self.bid64_to_binary64("1", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("1", "[b38b424d5d7eb34e]", "[c60ffffede9c4cbc]", "0x20")
    self.bid64_to_binary64("1", "[b6c394f170eed7db]", "[cb5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("1", "[b9e4c7680bf36616]", "[d09226c684c87261]", "0x20")
    self.bid64_to_binary64("1", "[bd0bf1cc3c8b534f]", "[d5d77467f4a92f6d]", "0x20")
    self.bid64_to_binary64("1", "[c3477ac00b6ce36c]", "[e02f6768b6321b82]", "0x20")
    self.bid64_to_binary64("1", "[c68a88caf33b1fc1]", "[e59c9548eab35382]", "0x20")
    self.bid64_to_binary64("1", "[cccdb676714ca307]", "[f003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("1", "[cff46d10f9119672]", "[f53ea2039a1fa249]", "0x20")
    self.bid64_to_binary64("1", "[d3277b95cded4e66]", "[fa8d020192cc2618]", "0x20")
    self.bid64_to_binary64("1", "[d66662fe0cb7f7eb]", "[ffeffffffffffffc]", "0x20")
    self.bid64_to_binary64("1", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[e8f1f5a9e5a7fc7a]", "[ac00557dd789805b]", "0x20")
    self.bid64_to_binary64("1", "[ec1b86f26dab4575]", "[c0f869fffe913975]", "0x20")
    self.bid64_to_binary64("1", "[f00a8ebab81862f2]", "[db218a7f36172333]", "0x20")
    self.bid64_to_binary64("1", "[f26b181fdc73eb71]", "[eae89d46b1fa3165]", "0x20")
    self.bid64_to_binary64("1", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[0000000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[01e0000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[0200000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[07674569785223d2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[07718d80392931b2]", "[0000000000000002]", "0x30")
    self.bid64_to_binary64("2", "[0967e7b160ef71c1]", "[0010000000000000]", "0x30")
    self.bid64_to_binary64("2", "[0967E7B160EF71C1]", "[0010000000000000]", "30")
    self.bid64_to_binary64("2", "[0967e7b160ef71c2]", "[0010000000000002]", "0x20")
    self.bid64_to_binary64("2", "[096fcf62c1dee382]", "[001fffffffffffff]", "0x20")
    self.bid64_to_binary64("2", "[096fcf62c1dee383]", "[0020000000000001]", "0x20")
    self.bid64_to_binary64("2", "[0a97365796617f83]", "[0205e0b5e88edcad]", "0x20")
    self.bid64_to_binary64("2", "[0dc10dbea1eb65e6]", "[0724897e27bfee56]", "0x20")
    self.bid64_to_binary64("2", "[10ec8294d1bdbf11]", "[0c8f83a32f69f12a]", "0x20")
    self.bid64_to_binary64("2", "[14068f76c44a7dcf]", "[11b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("2", "[1739ab8261990292]", "[17014894813761f2]", "0x20")
    self.bid64_to_binary64("2", "[1a6202c6bc0e7a35]", "[1c2bff78226c56a8]", "0x20")
    self.bid64_to_binary64("2", "[1d88e19000389faf]", "[217ff6d970238791]", "0x20")
    self.bid64_to_binary64("2", "[20bf3cbdc494bf4b]", "[26cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("2", "[2700e16c4aa51b83]", "[31118452f93667d3]", "0x20")
    self.bid64_to_binary64("2", "[2a255a6f69795a8b]", "[366b870de5d93270]", "0x20")
    self.bid64_to_binary64("2", "[2d515b57b7912b6b]", "[3bb7123726f69593]", "0x20")
    self.bid64_to_binary64("2", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("2", "[338b424d5d7eb34e]", "[460ffffede9c4cbc]", "0x20")
    self.bid64_to_binary64("2", "[36c394f170eed7db]", "[4b5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("2", "[39e4c7680bf36616]", "[509226c684c87261]", "0x20")
    self.bid64_to_binary64("2", "[3d0bf1cc3c8b534f]", "[55d77467f4a92f6d]", "0x20")
    self.bid64_to_binary64("2", "[43477ac00b6ce36c]", "[602f6768b6321b82]", "0x20")
    self.bid64_to_binary64("2", "[468a88caf33b1fc1]", "[659c9548eab35382]", "0x20")
    self.bid64_to_binary64("2", "[4ccdb676714ca307]", "[7003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("2", "[4ff46d10f9119672]", "[753ea2039a1fa249]", "0x20")
    self.bid64_to_binary64("2", "[53277b95cded4e66]", "[7a8d020192cc2618]", "0x20")
    self.bid64_to_binary64("2", "[566662fe0cb7f7eb]", "[7feffffffffffffc]", "0x20")
    self.bid64_to_binary64("2", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("2", "[68f1f5a9e5a7fc7a]", "[2c00557dd789805b]", "0x20")
    self.bid64_to_binary64("2", "[6c1b86f26dab4575]", "[40f869fffe913975]", "0x20")
    self.bid64_to_binary64("2", "[700a8ebab81862f2]", "[5b218a7f36172333]", "0x20")
    self.bid64_to_binary64("2", "[726b181fdc73eb71]", "[6ae89d46b1fa3165]", "0x20")
    self.bid64_to_binary64("2", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("2", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[87718d80392931b1]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("2", "[8967E7B160EF71C1]", "[800fffffffffffff]", "30")
    self.bid64_to_binary64("2", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("2", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("2", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("2", "[8a97365796617f83]", "[8205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("2", "[8dc10dbea1eb65e6]", "[8724897e27bfee55]", "0x20")
    self.bid64_to_binary64("2", "[90ec8294d1bdbf11]", "[8c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("2", "[94068f76c44a7dcf]", "[91b1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("2", "[9739ab8261990292]", "[97014894813761f1]", "0x20")
    self.bid64_to_binary64("2", "[9a6202c6bc0e7a35]", "[9c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("2", "[9d88e19000389faf]", "[a17ff6d970238790]", "0x20")
    self.bid64_to_binary64("2", "[a0bf3cbdc494bf4b]", "[a6cd0fcbf97f8d10]", "0x20")
    self.bid64_to_binary64("2", "[a700e16c4aa51b83]", "[b1118452f93667d2]", "0x20")
    self.bid64_to_binary64("2", "[aa255a6f69795a8b]", "[b66b870de5d9326f]", "0x20")
    self.bid64_to_binary64("2", "[ad515b57b7912b6b]", "[bbb7123726f69592]", "0x20")
    self.bid64_to_binary64("2", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("2", "[b38b424d5d7eb34e]", "[c60ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("2", "[b6c394f170eed7db]", "[cb5a50a259963ca5]", "0x20")
    self.bid64_to_binary64("2", "[b9e4c7680bf36616]", "[d09226c684c87260]", "0x20")
    self.bid64_to_binary64("2", "[bd0bf1cc3c8b534f]", "[d5d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("2", "[c3477ac00b6ce36c]", "[e02f6768b6321b81]", "0x20")
    self.bid64_to_binary64("2", "[c68a88caf33b1fc1]", "[e59c9548eab35381]", "0x20")
    self.bid64_to_binary64("2", "[cccdb676714ca307]", "[f003e3a32c6f9727]", "0x20")
    self.bid64_to_binary64("2", "[cff46d10f9119672]", "[f53ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("2", "[d3277b95cded4e66]", "[fa8d020192cc2617]", "0x20")
    self.bid64_to_binary64("2", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("2", "[d66662fe0cb7f7ec]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("2", "[e8f1f5a9e5a7fc7a]", "[ac00557dd789805a]", "0x20")
    self.bid64_to_binary64("2", "[ec1b86f26dab4575]", "[c0f869fffe913974]", "0x20")
    self.bid64_to_binary64("2", "[f00a8ebab81862f2]", "[db218a7f36172332]", "0x20")
    self.bid64_to_binary64("2", "[f26b181fdc73eb71]", "[eae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("2", "[f7fb86f26fc0ffff]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("2", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[07718d80392931b1]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("3", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("3", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("3", "[0a97365796617f83]", "[0205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("3", "[0dc10dbea1eb65e6]", "[0724897e27bfee55]", "0x20")
    self.bid64_to_binary64("3", "[10ec8294d1bdbf11]", "[0c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("3", "[14068f76c44a7dcf]", "[11b1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("3", "[1739ab8261990292]", "[17014894813761f1]", "0x20")
    self.bid64_to_binary64("3", "[1a6202c6bc0e7a35]", "[1c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("3", "[1d88e19000389faf]", "[217ff6d970238790]", "0x20")
    self.bid64_to_binary64("3", "[20bf3cbdc494bf4b]", "[26cd0fcbf97f8d10]", "0x20")
    self.bid64_to_binary64("3", "[2700e16c4aa51b83]", "[31118452f93667d2]", "0x20")
    self.bid64_to_binary64("3", "[2a255a6f69795a8b]", "[366b870de5d9326f]", "0x20")
    self.bid64_to_binary64("3", "[2d515b57b7912b6b]", "[3bb7123726f69592]", "0x20")
    self.bid64_to_binary64("3", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("3", "[338b424d5d7eb34e]", "[460ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("3", "[36c394f170eed7db]", "[4b5a50a259963ca5]", "0x20")
    self.bid64_to_binary64("3", "[39e4c7680bf36616]", "[509226c684c87260]", "0x20")
    self.bid64_to_binary64("3", "[3d0bf1cc3c8b534f]", "[55d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("3", "[43477ac00b6ce36c]", "[602f6768b6321b81]", "0x20")
    self.bid64_to_binary64("3", "[468a88caf33b1fc1]", "[659c9548eab35381]", "0x20")
    self.bid64_to_binary64("3", "[4ccdb676714ca307]", "[7003e3a32c6f9727]", "0x20")
    self.bid64_to_binary64("3", "[4ff46d10f9119672]", "[753ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("3", "[53277b95cded4e66]", "[7a8d020192cc2617]", "0x20")
    self.bid64_to_binary64("3", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("3", "[566662fe0cb7f7ec]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[68f1f5a9e5a7fc7a]", "[2c00557dd789805a]", "0x20")
    self.bid64_to_binary64("3", "[6c1b86f26dab4575]", "[40f869fffe913974]", "0x20")
    self.bid64_to_binary64("3", "[700a8ebab81862f2]", "[5b218a7f36172332]", "0x20")
    self.bid64_to_binary64("3", "[726b181fdc73eb71]", "[6ae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("3", "[77fb86f26fc0ffff]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[87718d80392931b1]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("3", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("3", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("3", "[8a97365796617f83]", "[8205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("3", "[8dc10dbea1eb65e6]", "[8724897e27bfee55]", "0x20")
    self.bid64_to_binary64("3", "[90ec8294d1bdbf11]", "[8c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("3", "[94068f76c44a7dcf]", "[91b1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("3", "[9739ab8261990292]", "[97014894813761f1]", "0x20")
    self.bid64_to_binary64("3", "[9a6202c6bc0e7a35]", "[9c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("3", "[9d88e19000389faf]", "[a17ff6d970238790]", "0x20")
    self.bid64_to_binary64("3", "[a0bf3cbdc494bf4b]", "[a6cd0fcbf97f8d10]", "0x20")
    self.bid64_to_binary64("3", "[a700e16c4aa51b83]", "[b1118452f93667d2]", "0x20")
    self.bid64_to_binary64("3", "[aa255a6f69795a8b]", "[b66b870de5d9326f]", "0x20")
    self.bid64_to_binary64("3", "[ad515b57b7912b6b]", "[bbb7123726f69592]", "0x20")
    self.bid64_to_binary64("3", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("3", "[b38b424d5d7eb34e]", "[c60ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("3", "[b6c394f170eed7db]", "[cb5a50a259963ca5]", "0x20")
    self.bid64_to_binary64("3", "[b9e4c7680bf36616]", "[d09226c684c87260]", "0x20")
    self.bid64_to_binary64("3", "[bd0bf1cc3c8b534f]", "[d5d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("3", "[c3477ac00b6ce36c]", "[e02f6768b6321b81]", "0x20")
    self.bid64_to_binary64("3", "[c68a88caf33b1fc1]", "[e59c9548eab35381]", "0x20")
    self.bid64_to_binary64("3", "[cccdb676714ca307]", "[f003e3a32c6f9727]", "0x20")
    self.bid64_to_binary64("3", "[cff46d10f9119672]", "[f53ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("3", "[d3277b95cded4e66]", "[fa8d020192cc2617]", "0x20")
    self.bid64_to_binary64("3", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("3", "[d66662fe0cb7f7ec]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[e8f1f5a9e5a7fc7a]", "[ac00557dd789805a]", "0x20")
    self.bid64_to_binary64("3", "[ec1b86f26dab4575]", "[c0f869fffe913974]", "0x20")
    self.bid64_to_binary64("3", "[f00a8ebab81862f2]", "[db218a7f36172332]", "0x20")
    self.bid64_to_binary64("3", "[f26b181fdc73eb71]", "[eae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("3", "[f7fb86f26fc0ffff]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("4", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("4", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("4", "[0a97365796617f83]", "[0205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("4", "[0dc10dbea1eb65e6]", "[0724897e27bfee55]", "0x20")
    self.bid64_to_binary64("4", "[10ec8294d1bdbf11]", "[0c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("4", "[14068f76c44a7dcf]", "[11b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("4", "[1739ab8261990292]", "[17014894813761f2]", "0x20")
    self.bid64_to_binary64("4", "[1a6202c6bc0e7a35]", "[1c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("4", "[1d88e19000389faf]", "[217ff6d970238791]", "0x20")
    self.bid64_to_binary64("4", "[20bf3cbdc494bf4b]", "[26cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("4", "[2700e16c4aa51b83]", "[31118452f93667d3]", "0x20")
    self.bid64_to_binary64("4", "[2a255a6f69795a8b]", "[366b870de5d9326f]", "0x20")
    self.bid64_to_binary64("4", "[2d515b57b7912b6b]", "[3bb7123726f69593]", "0x20")
    self.bid64_to_binary64("4", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("4", "[338b424d5d7eb34e]", "[460ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("4", "[36c394f170eed7db]", "[4b5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("4", "[39e4c7680bf36616]", "[509226c684c87261]", "0x20")
    self.bid64_to_binary64("4", "[3d0bf1cc3c8b534f]", "[55d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("4", "[43477ac00b6ce36c]", "[602f6768b6321b82]", "0x20")
    self.bid64_to_binary64("4", "[468a88caf33b1fc1]", "[659c9548eab35381]", "0x20")
    self.bid64_to_binary64("4", "[4ccdb676714ca307]", "[7003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("4", "[4ff46d10f9119672]", "[753ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("4", "[53277b95cded4e66]", "[7a8d020192cc2618]", "0x20")
    self.bid64_to_binary64("4", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("4", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("4", "[68f1f5a9e5a7fc7a]", "[2c00557dd789805b]", "0x20")
    self.bid64_to_binary64("4", "[6c1b86f26dab4575]", "[40f869fffe913975]", "0x20")
    self.bid64_to_binary64("4", "[700a8ebab81862f2]", "[5b218a7f36172332]", "0x20")
    self.bid64_to_binary64("4", "[726b181fdc73eb71]", "[6ae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("4", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("4", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("4", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("4", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("4", "[8a97365796617f83]", "[8205e0b5e88edcac]", "0x20")
    self.bid64_to_binary64("4", "[8dc10dbea1eb65e6]", "[8724897e27bfee55]", "0x20")
    self.bid64_to_binary64("4", "[90ec8294d1bdbf11]", "[8c8f83a32f69f129]", "0x20")
    self.bid64_to_binary64("4", "[94068f76c44a7dcf]", "[91b1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("4", "[9739ab8261990292]", "[97014894813761f2]", "0x20")
    self.bid64_to_binary64("4", "[9a6202c6bc0e7a35]", "[9c2bff78226c56a7]", "0x20")
    self.bid64_to_binary64("4", "[9d88e19000389faf]", "[a17ff6d970238791]", "0x20")
    self.bid64_to_binary64("4", "[a0bf3cbdc494bf4b]", "[a6cd0fcbf97f8d11]", "0x20")
    self.bid64_to_binary64("4", "[a700e16c4aa51b83]", "[b1118452f93667d3]", "0x20")
    self.bid64_to_binary64("4", "[aa255a6f69795a8b]", "[b66b870de5d9326f]", "0x20")
    self.bid64_to_binary64("4", "[ad515b57b7912b6b]", "[bbb7123726f69593]", "0x20")
    self.bid64_to_binary64("4", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("4", "[b38b424d5d7eb34e]", "[c60ffffede9c4cbb]", "0x20")
    self.bid64_to_binary64("4", "[b6c394f170eed7db]", "[cb5a50a259963ca6]", "0x20")
    self.bid64_to_binary64("4", "[b9e4c7680bf36616]", "[d09226c684c87261]", "0x20")
    self.bid64_to_binary64("4", "[bd0bf1cc3c8b534f]", "[d5d77467f4a92f6c]", "0x20")
    self.bid64_to_binary64("4", "[c3477ac00b6ce36c]", "[e02f6768b6321b82]", "0x20")
    self.bid64_to_binary64("4", "[c68a88caf33b1fc1]", "[e59c9548eab35381]", "0x20")
    self.bid64_to_binary64("4", "[cccdb676714ca307]", "[f003e3a32c6f9728]", "0x20")
    self.bid64_to_binary64("4", "[cff46d10f9119672]", "[f53ea2039a1fa248]", "0x20")
    self.bid64_to_binary64("4", "[d3277b95cded4e66]", "[fa8d020192cc2618]", "0x20")
    self.bid64_to_binary64("4", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("4", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("4", "[e8f1f5a9e5a7fc7a]", "[ac00557dd789805b]", "0x20")
    self.bid64_to_binary64("4", "[ec1b86f26dab4575]", "[c0f869fffe913975]", "0x20")
    self.bid64_to_binary64("4", "[f00a8ebab81862f2]", "[db218a7f36172332]", "0x20")
    self.bid64_to_binary64("4", "[f26b181fdc73eb71]", "[eae89d46b1fa3164]", "0x20")
    self.bid64_to_binary64("4", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("4", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[0000000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[0000000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[00038d7ea4c67fff]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[00038d7ea4c67fff]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[00038d7ea4c67fff]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[00038d7ea4c67fff]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[00038d7ea4c67fff]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[01e0000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[01e0000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[0200000000000001]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[0200000000000001]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[07674569785223d2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[07674569785223d2]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[07718d80392931b1]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("2", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[07718d80392931b1]", "[0000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[07718d80392931b1]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[07718d80392931b2]", "[0000000000000002]", "0x30")
    self.bid64_to_binary64("3", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[07718d80392931b2]", "[0000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[084032920461e7a6]", "[000000000001b79d]", "0x30")
    self.bid64_to_binary64("1", "[084032920461e7a6]", "[000000000001b79d]", "0x30")
    self.bid64_to_binary64("2", "[084032920461e7a6]", "[000000000001b79e]", "0x30")
    self.bid64_to_binary64("3", "[084032920461e7a6]", "[000000000001b79d]", "0x30")
    self.bid64_to_binary64("4", "[084032920461e7a6]", "[000000000001b79d]", "0x30")
    self.bid64_to_binary64("0", "[0902262b1e95004c]", "[0000011d11d469c5]", "0x30")
    self.bid64_to_binary64("1", "[0902262b1e95004c]", "[0000011d11d469c4]", "0x30")
    self.bid64_to_binary64("2", "[0902262b1e95004c]", "[0000011d11d469c5]", "0x30")
    self.bid64_to_binary64("3", "[0902262b1e95004c]", "[0000011d11d469c4]", "0x30")
    self.bid64_to_binary64("4", "[0902262b1e95004c]", "[0000011d11d469c5]", "0x30")
    self.bid64_to_binary64("0", "[0953c33b72569c62]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("1", "[0953c33b72569c62]", "[0003ffffffffffff]", "0x30")
    self.bid64_to_binary64("2", "[0953c33b72569c62]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("3", "[0953c33b72569c62]", "[0003ffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[0953c33b72569c62]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0953c33b72569c63]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("1", "[0953c33b72569c63]", "[0003ffffffffffff]", "0x30")
    self.bid64_to_binary64("2", "[0953c33b72569c63]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("3", "[0953c33b72569c63]", "[0003ffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[0953c33b72569c63]", "[0004000000000000]", "0x30")
    self.bid64_to_binary64("0", "[0963f3d8b077b8e1]", "[0008000000000001]", "0x30")
    self.bid64_to_binary64("1", "[0963f3d8b077b8e1]", "[0008000000000000]", "0x30")
    self.bid64_to_binary64("2", "[0963f3d8b077b8e1]", "[0008000000000001]", "0x30")
    self.bid64_to_binary64("3", "[0963f3d8b077b8e1]", "[0008000000000000]", "0x30")
    self.bid64_to_binary64("4", "[0963f3d8b077b8e1]", "[0008000000000001]", "0x30")
    self.bid64_to_binary64("0", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("1", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("2", "[0967e7b160ef71c1]", "[0010000000000000]", "0x30")
    self.bid64_to_binary64("3", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[0967e7b160ef71c1]", "[000fffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("1", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("2", "[0967e7b160ef71c2]", "[0010000000000002]", "0x20")
    self.bid64_to_binary64("3", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("4", "[0967e7b160ef71c2]", "[0010000000000001]", "0x20")
    self.bid64_to_binary64("0", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("1", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("2", "[096fcf62c1dee382]", "[001fffffffffffff]", "0x20")
    self.bid64_to_binary64("3", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("4", "[096fcf62c1dee382]", "[001ffffffffffffe]", "0x20")
    self.bid64_to_binary64("0", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("1", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("2", "[096fcf62c1dee383]", "[0020000000000001]", "0x20")
    self.bid64_to_binary64("3", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("4", "[096fcf62c1dee383]", "[0020000000000000]", "0x20")
    self.bid64_to_binary64("0", "[09a00a1e53af46f8]", "[0007ffffffffffff]", "0x30")
    self.bid64_to_binary64("1", "[09a00a1e53af46f8]", "[0007fffffffffffe]", "0x30")
    self.bid64_to_binary64("2", "[09a00a1e53af46f8]", "[0007ffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[09a00a1e53af46f8]", "[0007fffffffffffe]", "0x30")
    self.bid64_to_binary64("4", "[09a00a1e53af46f8]", "[0007ffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[09c951d35341d6a3]", "[00b26bc92333a617]", "0x20")
    self.bid64_to_binary64("1", "[09c951d35341d6a3]", "[00b26bc92333a617]", "0x20")
    self.bid64_to_binary64("2", "[09c951d35341d6a3]", "[00b26bc92333a618]", "0x20")
    self.bid64_to_binary64("3", "[09c951d35341d6a3]", "[00b26bc92333a617]", "0x20")
    self.bid64_to_binary64("4", "[09c951d35341d6a3]", "[00b26bc92333a617]", "0x20")
    self.bid64_to_binary64("0", "[0a93f518b145d1a7]", "[0202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("1", "[0a93f518b145d1a7]", "[0202cf5e7bb9a311]", "0x20")
    self.bid64_to_binary64("2", "[0a93f518b145d1a7]", "[0202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("3", "[0a93f518b145d1a7]", "[0202cf5e7bb9a311]", "0x20")
    self.bid64_to_binary64("4", "[0a93f518b145d1a7]", "[0202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("0", "[0b6043ba42fd29c2]", "[03130622f599bb7d]", "0x20")
    self.bid64_to_binary64("1", "[0b6043ba42fd29c2]", "[03130622f599bb7c]", "0x20")
    self.bid64_to_binary64("2", "[0b6043ba42fd29c2]", "[03130622f599bb7d]", "0x20")
    self.bid64_to_binary64("3", "[0b6043ba42fd29c2]", "[03130622f599bb7c]", "0x20")
    self.bid64_to_binary64("4", "[0b6043ba42fd29c2]", "[03130622f599bb7d]", "0x20")
    self.bid64_to_binary64("0", "[0c2377b788355de1]", "[048db99211b097a6]", "0x20")
    self.bid64_to_binary64("1", "[0c2377b788355de1]", "[048db99211b097a5]", "0x20")
    self.bid64_to_binary64("2", "[0c2377b788355de1]", "[048db99211b097a6]", "0x20")
    self.bid64_to_binary64("3", "[0c2377b788355de1]", "[048db99211b097a5]", "0x20")
    self.bid64_to_binary64("4", "[0c2377b788355de1]", "[048db99211b097a6]", "0x20")
    self.bid64_to_binary64("0", "[0d016dcd3fefdd80]", "[05ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("1", "[0d016dcd3fefdd80]", "[05ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("2", "[0d016dcd3fefdd80]", "[05ed3409dfbca270]", "0x20")
    self.bid64_to_binary64("3", "[0d016dcd3fefdd80]", "[05ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("4", "[0d016dcd3fefdd80]", "[05ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("0", "[0da62a52ed86615b]", "[07180881446f8c64]", "0x20")
    self.bid64_to_binary64("1", "[0da62a52ed86615b]", "[07180881446f8c63]", "0x20")
    self.bid64_to_binary64("2", "[0da62a52ed86615b]", "[07180881446f8c64]", "0x20")
    self.bid64_to_binary64("3", "[0da62a52ed86615b]", "[07180881446f8c63]", "0x20")
    self.bid64_to_binary64("4", "[0da62a52ed86615b]", "[07180881446f8c64]", "0x20")
    self.bid64_to_binary64("0", "[0e6c32b9e6650875]", "[0866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("1", "[0e6c32b9e6650875]", "[0866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("2", "[0e6c32b9e6650875]", "[0866ac6eeaf26239]", "0x20")
    self.bid64_to_binary64("3", "[0e6c32b9e6650875]", "[0866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("4", "[0e6c32b9e6650875]", "[0866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("0", "[0f418e7988380eb1]", "[09ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("1", "[0f418e7988380eb1]", "[09ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("2", "[0f418e7988380eb1]", "[09ab979c828dc5dc]", "0x20")
    self.bid64_to_binary64("3", "[0f418e7988380eb1]", "[09ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("4", "[0f418e7988380eb1]", "[09ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("0", "[1000b1bcd739e247]", "[0ad7797619b14480]", "0x20")
    self.bid64_to_binary64("1", "[1000b1bcd739e247]", "[0ad7797619b1447f]", "0x20")
    self.bid64_to_binary64("2", "[1000b1bcd739e247]", "[0ad7797619b14480]", "0x20")
    self.bid64_to_binary64("3", "[1000b1bcd739e247]", "[0ad7797619b1447f]", "0x20")
    self.bid64_to_binary64("4", "[1000b1bcd739e247]", "[0ad7797619b14480]", "0x20")
    self.bid64_to_binary64("0", "[10d8aa591e997f2d]", "[0c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("1", "[10d8aa591e997f2d]", "[0c68da99f7a4eabe]", "0x20")
    self.bid64_to_binary64("2", "[10d8aa591e997f2d]", "[0c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("3", "[10d8aa591e997f2d]", "[0c68da99f7a4eabe]", "0x20")
    self.bid64_to_binary64("4", "[10d8aa591e997f2d]", "[0c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("0", "[11869461670b3ada]", "[0d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("1", "[11869461670b3ada]", "[0d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("2", "[11869461670b3ada]", "[0d894a80ea17c1d1]", "0x20")
    self.bid64_to_binary64("3", "[11869461670b3ada]", "[0d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("4", "[11869461670b3ada]", "[0d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("0", "[1262e2f7926738a9]", "[0eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("1", "[1262e2f7926738a9]", "[0eea7439edbb8d61]", "0x20")
    self.bid64_to_binary64("2", "[1262e2f7926738a9]", "[0eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("3", "[1262e2f7926738a9]", "[0eea7439edbb8d61]", "0x20")
    self.bid64_to_binary64("4", "[1262e2f7926738a9]", "[0eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("0", "[132e511fd727e31b]", "[104f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("1", "[132e511fd727e31b]", "[104f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("2", "[132e511fd727e31b]", "[104f48347c60a1be]", "0x20")
    self.bid64_to_binary64("3", "[132e511fd727e31b]", "[104f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("4", "[132e511fd727e31b]", "[104f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("0", "[14bbf51de62602b9]", "[12dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("1", "[14bbf51de62602b9]", "[12dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("2", "[14bbf51de62602b9]", "[12dbc764e4f07201]", "0x20")
    self.bid64_to_binary64("3", "[14bbf51de62602b9]", "[12dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("4", "[14bbf51de62602b9]", "[12dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("0", "[15832ee933c4afad]", "[141e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("1", "[15832ee933c4afad]", "[141e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("2", "[15832ee933c4afad]", "[141e29f2bb04a5b7]", "0x20")
    self.bid64_to_binary64("3", "[15832ee933c4afad]", "[141e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("4", "[15832ee933c4afad]", "[141e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("0", "[16405d95b55d4beb]", "[152a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("1", "[16405d95b55d4beb]", "[152a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("2", "[16405d95b55d4beb]", "[152a6db0b81fd171]", "0x20")
    self.bid64_to_binary64("3", "[16405d95b55d4beb]", "[152a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("4", "[16405d95b55d4beb]", "[152a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("0", "[1716ff406c702454]", "[16c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("1", "[1716ff406c702454]", "[16c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("2", "[1716ff406c702454]", "[16c8c631a5471f28]", "0x20")
    self.bid64_to_binary64("3", "[1716ff406c702454]", "[16c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("4", "[1716ff406c702454]", "[16c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("0", "[17d1752aa924e55d]", "[1801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("1", "[17d1752aa924e55d]", "[1801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("2", "[17d1752aa924e55d]", "[1801ef7d320fffa1]", "0x20")
    self.bid64_to_binary64("3", "[17d1752aa924e55d]", "[1801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("4", "[17d1752aa924e55d]", "[1801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("0", "[18a31a6cdc57b822]", "[194e6797d38da244]", "0x20")
    self.bid64_to_binary64("1", "[18a31a6cdc57b822]", "[194e6797d38da244]", "0x20")
    self.bid64_to_binary64("2", "[18a31a6cdc57b822]", "[194e6797d38da245]", "0x20")
    self.bid64_to_binary64("3", "[18a31a6cdc57b822]", "[194e6797d38da244]", "0x20")
    self.bid64_to_binary64("4", "[18a31a6cdc57b822]", "[194e6797d38da244]", "0x20")
    self.bid64_to_binary64("0", "[1965c7ac69ce79eb]", "[1a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("1", "[1965c7ac69ce79eb]", "[1a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("2", "[1965c7ac69ce79eb]", "[1a9b00f1cf2d5ad9]", "0x20")
    self.bid64_to_binary64("3", "[1965c7ac69ce79eb]", "[1a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("4", "[1965c7ac69ce79eb]", "[1a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("0", "[1a3b575d01088b9c]", "[1bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("1", "[1a3b575d01088b9c]", "[1bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("2", "[1a3b575d01088b9c]", "[1bfe746e367600fc]", "0x20")
    self.bid64_to_binary64("3", "[1a3b575d01088b9c]", "[1bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("4", "[1a3b575d01088b9c]", "[1bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("0", "[1bc2d40b08dcee27]", "[1e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("1", "[1bc2d40b08dcee27]", "[1e7ca7079534ef8d]", "0x20")
    self.bid64_to_binary64("2", "[1bc2d40b08dcee27]", "[1e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("3", "[1bc2d40b08dcee27]", "[1e7ca7079534ef8d]", "0x20")
    self.bid64_to_binary64("4", "[1bc2d40b08dcee27]", "[1e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("0", "[1c88f72bf0709241]", "[1fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("1", "[1c88f72bf0709241]", "[1fd5a79c4e71d027]", "0x20")
    self.bid64_to_binary64("2", "[1c88f72bf0709241]", "[1fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("3", "[1c88f72bf0709241]", "[1fd5a79c4e71d027]", "0x20")
    self.bid64_to_binary64("4", "[1c88f72bf0709241]", "[1fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("0", "[1d541717ab11a367]", "[21272369916132a9]", "0x20")
    self.bid64_to_binary64("1", "[1d541717ab11a367]", "[21272369916132a9]", "0x20")
    self.bid64_to_binary64("2", "[1d541717ab11a367]", "[21272369916132aa]", "0x20")
    self.bid64_to_binary64("3", "[1d541717ab11a367]", "[21272369916132a9]", "0x20")
    self.bid64_to_binary64("4", "[1d541717ab11a367]", "[21272369916132a9]", "0x20")
    self.bid64_to_binary64("0", "[1ee10c35312de9d1]", "[2395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("1", "[1ee10c35312de9d1]", "[2395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("2", "[1ee10c35312de9d1]", "[2395f2df5e675a10]", "0x20")
    self.bid64_to_binary64("3", "[1ee10c35312de9d1]", "[2395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("4", "[1ee10c35312de9d1]", "[2395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("0", "[1fa688c5ef991edf]", "[25005194f202b111]", "0x20")
    self.bid64_to_binary64("1", "[1fa688c5ef991edf]", "[25005194f202b111]", "0x20")
    self.bid64_to_binary64("2", "[1fa688c5ef991edf]", "[25005194f202b112]", "0x20")
    self.bid64_to_binary64("3", "[1fa688c5ef991edf]", "[25005194f202b111]", "0x20")
    self.bid64_to_binary64("4", "[1fa688c5ef991edf]", "[25005194f202b111]", "0x20")
    self.bid64_to_binary64("0", "[212135b288f43676]", "[2755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("1", "[212135b288f43676]", "[2755fb806a1e933f]", "0x20")
    self.bid64_to_binary64("2", "[212135b288f43676]", "[2755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("3", "[212135b288f43676]", "[2755fb806a1e933f]", "0x20")
    self.bid64_to_binary64("4", "[212135b288f43676]", "[2755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("0", "[222022bcebe955bd]", "[28cd64c29852639b]", "0x20")
    self.bid64_to_binary64("1", "[222022bcebe955bd]", "[28cd64c29852639b]", "0x20")
    self.bid64_to_binary64("2", "[222022bcebe955bd]", "[28cd64c29852639c]", "0x20")
    self.bid64_to_binary64("3", "[222022bcebe955bd]", "[28cd64c29852639b]", "0x20")
    self.bid64_to_binary64("4", "[222022bcebe955bd]", "[28cd64c29852639b]", "0x20")
    self.bid64_to_binary64("0", "[22cbfb13ad3c7481]", "[2a3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("1", "[22cbfb13ad3c7481]", "[2a3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("2", "[22cbfb13ad3c7481]", "[2a3eeff57768f88c]", "0x20")
    self.bid64_to_binary64("3", "[22cbfb13ad3c7481]", "[2a3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("4", "[22cbfb13ad3c7481]", "[2a3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("0", "[238382dea4888745]", "[2b614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("1", "[238382dea4888745]", "[2b614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("2", "[238382dea4888745]", "[2b614b289f08fcc9]", "0x20")
    self.bid64_to_binary64("3", "[238382dea4888745]", "[2b614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("4", "[238382dea4888745]", "[2b614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("0", "[25223443606e7eae]", "[2e08af070ea2513b]", "0x20")
    self.bid64_to_binary64("1", "[25223443606e7eae]", "[2e08af070ea2513b]", "0x20")
    self.bid64_to_binary64("2", "[25223443606e7eae]", "[2e08af070ea2513c]", "0x20")
    self.bid64_to_binary64("3", "[25223443606e7eae]", "[2e08af070ea2513b]", "0x20")
    self.bid64_to_binary64("4", "[25223443606e7eae]", "[2e08af070ea2513b]", "0x20")
    self.bid64_to_binary64("0", "[25e440088f15f335]", "[2f56b210327f4071]", "0x20")
    self.bid64_to_binary64("1", "[25e440088f15f335]", "[2f56b210327f4071]", "0x20")
    self.bid64_to_binary64("2", "[25e440088f15f335]", "[2f56b210327f4072]", "0x20")
    self.bid64_to_binary64("3", "[25e440088f15f335]", "[2f56b210327f4071]", "0x20")
    self.bid64_to_binary64("4", "[25e440088f15f335]", "[2f56b210327f4071]", "0x20")
    self.bid64_to_binary64("0", "[26a961c32eaa12f8]", "[30a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("1", "[26a961c32eaa12f8]", "[30a7e3987916a69d]", "0x20")
    self.bid64_to_binary64("2", "[26a961c32eaa12f8]", "[30a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("3", "[26a961c32eaa12f8]", "[30a7e3987916a69d]", "0x20")
    self.bid64_to_binary64("4", "[26a961c32eaa12f8]", "[30a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("0", "[277a7aee9d901bd7]", "[32001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("1", "[277a7aee9d901bd7]", "[32001361a3c7cdeb]", "0x20")
    self.bid64_to_binary64("2", "[277a7aee9d901bd7]", "[32001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("3", "[277a7aee9d901bd7]", "[32001361a3c7cdeb]", "0x20")
    self.bid64_to_binary64("4", "[277a7aee9d901bd7]", "[32001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("0", "[2841ef57f0b861f7]", "[333667afa252e8dd]", "0x20")
    self.bid64_to_binary64("1", "[2841ef57f0b861f7]", "[333667afa252e8dc]", "0x20")
    self.bid64_to_binary64("2", "[2841ef57f0b861f7]", "[333667afa252e8dd]", "0x20")
    self.bid64_to_binary64("3", "[2841ef57f0b861f7]", "[333667afa252e8dc]", "0x20")
    self.bid64_to_binary64("4", "[2841ef57f0b861f7]", "[333667afa252e8dd]", "0x20")
    self.bid64_to_binary64("0", "[2901f80f19d050c5]", "[3475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("1", "[2901f80f19d050c5]", "[3475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("2", "[2901f80f19d050c5]", "[3475be383a7b9b0b]", "0x20")
    self.bid64_to_binary64("3", "[2901f80f19d050c5]", "[3475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("4", "[2901f80f19d050c5]", "[3475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("0", "[29d226c684c87261]", "[35e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("1", "[29d226c684c87261]", "[35e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("2", "[29d226c684c87261]", "[35e7e5083bc0fe6f]", "0x20")
    self.bid64_to_binary64("3", "[29d226c684c87261]", "[35e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("4", "[29d226c684c87261]", "[35e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("0", "[2a9a203af992bfed]", "[373066452ee269aa]", "0x20")
    self.bid64_to_binary64("1", "[2a9a203af992bfed]", "[373066452ee269a9]", "0x20")
    self.bid64_to_binary64("2", "[2a9a203af992bfed]", "[373066452ee269aa]", "0x20")
    self.bid64_to_binary64("3", "[2a9a203af992bfed]", "[373066452ee269a9]", "0x20")
    self.bid64_to_binary64("4", "[2a9a203af992bfed]", "[373066452ee269aa]", "0x20")
    self.bid64_to_binary64("0", "[2b61f4dd458b7eb7]", "[38676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("1", "[2b61f4dd458b7eb7]", "[38676ca8be2021d5]", "0x20")
    self.bid64_to_binary64("2", "[2b61f4dd458b7eb7]", "[38676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("3", "[2b61f4dd458b7eb7]", "[38676ca8be2021d5]", "0x20")
    self.bid64_to_binary64("4", "[2b61f4dd458b7eb7]", "[38676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("0", "[2c2b34c69d8a1d85]", "[39cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("1", "[2c2b34c69d8a1d85]", "[39cffce84b6dbad7]", "0x20")
    self.bid64_to_binary64("2", "[2c2b34c69d8a1d85]", "[39cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("3", "[2c2b34c69d8a1d85]", "[39cffce84b6dbad7]", "0x20")
    self.bid64_to_binary64("4", "[2c2b34c69d8a1d85]", "[39cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("0", "[2cf253acb830bcdf]", "[3b18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("1", "[2cf253acb830bcdf]", "[3b18f1fa06dd6a7d]", "0x20")
    self.bid64_to_binary64("2", "[2cf253acb830bcdf]", "[3b18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("3", "[2cf253acb830bcdf]", "[3b18f1fa06dd6a7d]", "0x20")
    self.bid64_to_binary64("4", "[2cf253acb830bcdf]", "[3b18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("0", "[2dba04f802bebb6d]", "[3c60e337464faa08]", "0x20")
    self.bid64_to_binary64("1", "[2dba04f802bebb6d]", "[3c60e337464faa07]", "0x20")
    self.bid64_to_binary64("2", "[2dba04f802bebb6d]", "[3c60e337464faa08]", "0x20")
    self.bid64_to_binary64("3", "[2dba04f802bebb6d]", "[3c60e337464faa07]", "0x20")
    self.bid64_to_binary64("4", "[2dba04f802bebb6d]", "[3c60e337464faa08]", "0x20")
    self.bid64_to_binary64("0", "[2e81c24cc5617549]", "[3d95c6714def374c]", "0x20")
    self.bid64_to_binary64("1", "[2e81c24cc5617549]", "[3d95c6714def374c]", "0x20")
    self.bid64_to_binary64("2", "[2e81c24cc5617549]", "[3d95c6714def374d]", "0x20")
    self.bid64_to_binary64("3", "[2e81c24cc5617549]", "[3d95c6714def374c]", "0x20")
    self.bid64_to_binary64("4", "[2e81c24cc5617549]", "[3d95c6714def374c]", "0x20")
    self.bid64_to_binary64("0", "[2f4ad2c1ce56c0eb]", "[3efff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("1", "[2f4ad2c1ce56c0eb]", "[3efff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("2", "[2f4ad2c1ce56c0eb]", "[3efff1d4d6ef6169]", "0x20")
    self.bid64_to_binary64("3", "[2f4ad2c1ce56c0eb]", "[3efff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("4", "[2f4ad2c1ce56c0eb]", "[3efff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("0", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("1", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("2", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("3", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("4", "[30c00000004d7c6d]", "[3faa000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31a000000000000f]", "[3ff8000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31a27ffffffffffe]", "[42cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("1", "[31a27ffffffffffe]", "[42cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("2", "[31a27ffffffffffe]", "[42cfffffffffffe7]", "0x20")
    self.bid64_to_binary64("3", "[31a27ffffffffffe]", "[42cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("4", "[31a27ffffffffffe]", "[42cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("0", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000000]", "[0000000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000001]", "[3ff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c0000000000040]", "[4050000000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c00000000003e7]", "[408f380000000000]", "0x00")
    self.bid64_to_binary64("0", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("1", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("2", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("3", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("4", "[31c00000000003e8]", "[408f400000000000]", "0x00")
    self.bid64_to_binary64("0", "[326a7c5ac471b3e3]", "[442ffffffffffe38]", "0x20")
    self.bid64_to_binary64("1", "[326a7c5ac471b3e3]", "[442ffffffffffe38]", "0x20")
    self.bid64_to_binary64("2", "[326a7c5ac471b3e3]", "[442ffffffffffe39]", "0x20")
    self.bid64_to_binary64("3", "[326a7c5ac471b3e3]", "[442ffffffffffe38]", "0x20")
    self.bid64_to_binary64("4", "[326a7c5ac471b3e3]", "[442ffffffffffe38]", "0x20")
    self.bid64_to_binary64("0", "[34b79e9a5073c06c]", "[47ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("1", "[34b79e9a5073c06c]", "[47ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("2", "[34b79e9a5073c06c]", "[47ff429cb67eb076]", "0x20")
    self.bid64_to_binary64("3", "[34b79e9a5073c06c]", "[47ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("4", "[34b79e9a5073c06c]", "[47ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("0", "[358406840eaecb9f]", "[4949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("1", "[358406840eaecb9f]", "[4949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("2", "[358406840eaecb9f]", "[4949677825a0c0eb]", "0x20")
    self.bid64_to_binary64("3", "[358406840eaecb9f]", "[4949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("4", "[358406840eaecb9f]", "[4949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("0", "[36548cddb2fa9a98]", "[4aaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("1", "[36548cddb2fa9a98]", "[4aaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("2", "[36548cddb2fa9a98]", "[4aaeebabe0957af4]", "0x20")
    self.bid64_to_binary64("3", "[36548cddb2fa9a98]", "[4aaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("4", "[36548cddb2fa9a98]", "[4aaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("0", "[37096b98447a0285]", "[4bdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("1", "[37096b98447a0285]", "[4bdb08f0094136af]", "0x20")
    self.bid64_to_binary64("2", "[37096b98447a0285]", "[4bdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("3", "[37096b98447a0285]", "[4bdb08f0094136af]", "0x20")
    self.bid64_to_binary64("4", "[37096b98447a0285]", "[4bdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("0", "[37cd102e2b854b5e]", "[4d21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("1", "[37cd102e2b854b5e]", "[4d21e05cb2a12025]", "0x20")
    self.bid64_to_binary64("2", "[37cd102e2b854b5e]", "[4d21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("3", "[37cd102e2b854b5e]", "[4d21e05cb2a12025]", "0x20")
    self.bid64_to_binary64("4", "[37cd102e2b854b5e]", "[4d21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("0", "[38a5353c9c2f4cf9]", "[4e80fde34c996086]", "0x20")
    self.bid64_to_binary64("1", "[38a5353c9c2f4cf9]", "[4e80fde34c996085]", "0x20")
    self.bid64_to_binary64("2", "[38a5353c9c2f4cf9]", "[4e80fde34c996086]", "0x20")
    self.bid64_to_binary64("3", "[38a5353c9c2f4cf9]", "[4e80fde34c996085]", "0x20")
    self.bid64_to_binary64("4", "[38a5353c9c2f4cf9]", "[4e80fde34c996086]", "0x20")
    self.bid64_to_binary64("0", "[3973c1c76091d8ec]", "[4fdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("1", "[3973c1c76091d8ec]", "[4fdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("2", "[3973c1c76091d8ec]", "[4fdebca8a16a5ce0]", "0x20")
    self.bid64_to_binary64("3", "[3973c1c76091d8ec]", "[4fdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("4", "[3973c1c76091d8ec]", "[4fdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("0", "[3a3c7601883ddded]", "[51251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("1", "[3a3c7601883ddded]", "[51251d0f44c0239b]", "0x20")
    self.bid64_to_binary64("2", "[3a3c7601883ddded]", "[51251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("3", "[3a3c7601883ddded]", "[51251d0f44c0239b]", "0x20")
    self.bid64_to_binary64("4", "[3a3c7601883ddded]", "[51251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("0", "[3af5a3c5467f12c2]", "[525e9e7f64376799]", "0x20")
    self.bid64_to_binary64("1", "[3af5a3c5467f12c2]", "[525e9e7f64376798]", "0x20")
    self.bid64_to_binary64("2", "[3af5a3c5467f12c2]", "[525e9e7f64376799]", "0x20")
    self.bid64_to_binary64("3", "[3af5a3c5467f12c2]", "[525e9e7f64376798]", "0x20")
    self.bid64_to_binary64("4", "[3af5a3c5467f12c2]", "[525e9e7f64376799]", "0x20")
    self.bid64_to_binary64("0", "[3bc6c81d2c7f1715]", "[53b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("1", "[3bc6c81d2c7f1715]", "[53b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("2", "[3bc6c81d2c7f1715]", "[53b6e0c94774af96]", "0x20")
    self.bid64_to_binary64("3", "[3bc6c81d2c7f1715]", "[53b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("4", "[3bc6c81d2c7f1715]", "[53b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("0", "[3d5dbd4dc085903b]", "[5656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("1", "[3d5dbd4dc085903b]", "[5656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("2", "[3d5dbd4dc085903b]", "[5656cfc0c80bda55]", "0x20")
    self.bid64_to_binary64("3", "[3d5dbd4dc085903b]", "[5656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("4", "[3d5dbd4dc085903b]", "[5656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("0", "[3e05ec7ad2ae9964]", "[5771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("1", "[3e05ec7ad2ae9964]", "[5771554acd6fab8e]", "0x20")
    self.bid64_to_binary64("2", "[3e05ec7ad2ae9964]", "[5771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("3", "[3e05ec7ad2ae9964]", "[5771554acd6fab8e]", "0x20")
    self.bid64_to_binary64("4", "[3e05ec7ad2ae9964]", "[5771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("0", "[3ee488e6d7ba9343]", "[58dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("1", "[3ee488e6d7ba9343]", "[58dfa2bb0f9ffe0d]", "0x20")
    self.bid64_to_binary64("2", "[3ee488e6d7ba9343]", "[58dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("3", "[3ee488e6d7ba9343]", "[58dfa2bb0f9ffe0d]", "0x20")
    self.bid64_to_binary64("4", "[3ee488e6d7ba9343]", "[58dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("0", "[3fbc45fc32b914f1]", "[5a478358811cbc95]", "0x20")
    self.bid64_to_binary64("1", "[3fbc45fc32b914f1]", "[5a478358811cbc95]", "0x20")
    self.bid64_to_binary64("2", "[3fbc45fc32b914f1]", "[5a478358811cbc96]", "0x20")
    self.bid64_to_binary64("3", "[3fbc45fc32b914f1]", "[5a478358811cbc95]", "0x20")
    self.bid64_to_binary64("4", "[3fbc45fc32b914f1]", "[5a478358811cbc95]", "0x20")
    self.bid64_to_binary64("0", "[40799418eab49a8b]", "[5b84495736b8d90e]", "0x20")
    self.bid64_to_binary64("1", "[40799418eab49a8b]", "[5b84495736b8d90d]", "0x20")
    self.bid64_to_binary64("2", "[40799418eab49a8b]", "[5b84495736b8d90e]", "0x20")
    self.bid64_to_binary64("3", "[40799418eab49a8b]", "[5b84495736b8d90d]", "0x20")
    self.bid64_to_binary64("4", "[40799418eab49a8b]", "[5b84495736b8d90e]", "0x20")
    self.bid64_to_binary64("0", "[4128bf02d472e2b6]", "[5caa760b389de2d6]", "0x20")
    self.bid64_to_binary64("1", "[4128bf02d472e2b6]", "[5caa760b389de2d6]", "0x20")
    self.bid64_to_binary64("2", "[4128bf02d472e2b6]", "[5caa760b389de2d7]", "0x20")
    self.bid64_to_binary64("3", "[4128bf02d472e2b6]", "[5caa760b389de2d6]", "0x20")
    self.bid64_to_binary64("4", "[4128bf02d472e2b6]", "[5caa760b389de2d6]", "0x20")
    self.bid64_to_binary64("0", "[42068426f34f8cfb]", "[5e1780695036a67a]", "0x20")
    self.bid64_to_binary64("1", "[42068426f34f8cfb]", "[5e1780695036a679]", "0x20")
    self.bid64_to_binary64("2", "[42068426f34f8cfb]", "[5e1780695036a67a]", "0x20")
    self.bid64_to_binary64("3", "[42068426f34f8cfb]", "[5e1780695036a679]", "0x20")
    self.bid64_to_binary64("4", "[42068426f34f8cfb]", "[5e1780695036a67a]", "0x20")
    self.bid64_to_binary64("0", "[42dd0fcbf97f8d11]", "[5f78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("1", "[42dd0fcbf97f8d11]", "[5f78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("2", "[42dd0fcbf97f8d11]", "[5f78fd649d43cc3d]", "0x20")
    self.bid64_to_binary64("3", "[42dd0fcbf97f8d11]", "[5f78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("4", "[42dd0fcbf97f8d11]", "[5f78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("0", "[444dc38f2c7e06b2]", "[61e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("1", "[444dc38f2c7e06b2]", "[61e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("2", "[444dc38f2c7e06b2]", "[61e5874bb0e0b995]", "0x20")
    self.bid64_to_binary64("3", "[444dc38f2c7e06b2]", "[61e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("4", "[444dc38f2c7e06b2]", "[61e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("0", "[4518e6274e4e7450]", "[6332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("1", "[4518e6274e4e7450]", "[6332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("2", "[4518e6274e4e7450]", "[6332920f96e7f9f0]", "0x20")
    self.bid64_to_binary64("3", "[4518e6274e4e7450]", "[6332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("4", "[4518e6274e4e7450]", "[6332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("0", "[45fea70395028db9]", "[64ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("1", "[45fea70395028db9]", "[64ab40cebf1c8d1e]", "0x20")
    self.bid64_to_binary64("2", "[45fea70395028db9]", "[64ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("3", "[45fea70395028db9]", "[64ab40cebf1c8d1e]", "0x20")
    self.bid64_to_binary64("4", "[45fea70395028db9]", "[64ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("0", "[46b0f0d091cd4027]", "[65dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("1", "[46b0f0d091cd4027]", "[65dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("2", "[46b0f0d091cd4027]", "[65dcba8083b7b569]", "0x20")
    self.bid64_to_binary64("3", "[46b0f0d091cd4027]", "[65dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("4", "[46b0f0d091cd4027]", "[65dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("0", "[476eab61979e30a6]", "[6717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("1", "[476eab61979e30a6]", "[6717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("2", "[476eab61979e30a6]", "[6717b976fd49b8ea]", "0x20")
    self.bid64_to_binary64("3", "[476eab61979e30a6]", "[6717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("4", "[476eab61979e30a6]", "[6717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("0", "[481d925a58adbc4c]", "[68323e731b1eb118]", "0x20")
    self.bid64_to_binary64("1", "[481d925a58adbc4c]", "[68323e731b1eb118]", "0x20")
    self.bid64_to_binary64("2", "[481d925a58adbc4c]", "[68323e731b1eb119]", "0x20")
    self.bid64_to_binary64("3", "[481d925a58adbc4c]", "[68323e731b1eb118]", "0x20")
    self.bid64_to_binary64("4", "[481d925a58adbc4c]", "[68323e731b1eb118]", "0x20")
    self.bid64_to_binary64("0", "[4905c8499d093258]", "[69b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("1", "[4905c8499d093258]", "[69b543619dddb7e9]", "0x20")
    self.bid64_to_binary64("2", "[4905c8499d093258]", "[69b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("3", "[4905c8499d093258]", "[69b543619dddb7e9]", "0x20")
    self.bid64_to_binary64("4", "[4905c8499d093258]", "[69b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("0", "[49dc43cc45f364e6]", "[6b18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("1", "[49dc43cc45f364e6]", "[6b18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("2", "[49dc43cc45f364e6]", "[6b18c7cbbb955137]", "0x20")
    self.bid64_to_binary64("3", "[49dc43cc45f364e6]", "[6b18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("4", "[49dc43cc45f364e6]", "[6b18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("0", "[4a8dfebc08eb1542]", "[6c47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("1", "[4a8dfebc08eb1542]", "[6c47671ccdd1fd0e]", "0x20")
    self.bid64_to_binary64("2", "[4a8dfebc08eb1542]", "[6c47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("3", "[4a8dfebc08eb1542]", "[6c47671ccdd1fd0e]", "0x20")
    self.bid64_to_binary64("4", "[4a8dfebc08eb1542]", "[6c47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("0", "[4b4ccb69c4ab2d3a]", "[6d84677812d3a606]", "0x20")
    self.bid64_to_binary64("1", "[4b4ccb69c4ab2d3a]", "[6d84677812d3a606]", "0x20")
    self.bid64_to_binary64("2", "[4b4ccb69c4ab2d3a]", "[6d84677812d3a607]", "0x20")
    self.bid64_to_binary64("3", "[4b4ccb69c4ab2d3a]", "[6d84677812d3a606]", "0x20")
    self.bid64_to_binary64("4", "[4b4ccb69c4ab2d3a]", "[6d84677812d3a606]", "0x20")
    self.bid64_to_binary64("0", "[4cfbdf142478c707]", "[704944072c923fc2]", "0x20")
    self.bid64_to_binary64("1", "[4cfbdf142478c707]", "[704944072c923fc2]", "0x20")
    self.bid64_to_binary64("2", "[4cfbdf142478c707]", "[704944072c923fc3]", "0x20")
    self.bid64_to_binary64("3", "[4cfbdf142478c707]", "[704944072c923fc2]", "0x20")
    self.bid64_to_binary64("4", "[4cfbdf142478c707]", "[704944072c923fc2]", "0x20")
    self.bid64_to_binary64("0", "[4dac4e5df2ccc036]", "[717547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("1", "[4dac4e5df2ccc036]", "[717547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("2", "[4dac4e5df2ccc036]", "[717547166a3a2b10]", "0x20")
    self.bid64_to_binary64("3", "[4dac4e5df2ccc036]", "[717547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("4", "[4dac4e5df2ccc036]", "[717547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("0", "[4e86c82e21e4b3d5]", "[72dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("1", "[4e86c82e21e4b3d5]", "[72dbf51de62602b8]", "0x20")
    self.bid64_to_binary64("2", "[4e86c82e21e4b3d5]", "[72dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("3", "[4e86c82e21e4b3d5]", "[72dbf51de62602b8]", "0x20")
    self.bid64_to_binary64("4", "[4e86c82e21e4b3d5]", "[72dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("0", "[4f4e473f6e39be15]", "[742c110e96414eec]", "0x20")
    self.bid64_to_binary64("1", "[4f4e473f6e39be15]", "[742c110e96414eeb]", "0x20")
    self.bid64_to_binary64("2", "[4f4e473f6e39be15]", "[742c110e96414eec]", "0x20")
    self.bid64_to_binary64("3", "[4f4e473f6e39be15]", "[742c110e96414eeb]", "0x20")
    self.bid64_to_binary64("4", "[4f4e473f6e39be15]", "[742c110e96414eec]", "0x20")
    self.bid64_to_binary64("0", "[501ffb94728ec1b3]", "[757dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("1", "[501ffb94728ec1b3]", "[757dfa4dfde9f70d]", "0x20")
    self.bid64_to_binary64("2", "[501ffb94728ec1b3]", "[757dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("3", "[501ffb94728ec1b3]", "[757dfa4dfde9f70d]", "0x20")
    self.bid64_to_binary64("4", "[501ffb94728ec1b3]", "[757dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("0", "[50c937c7233ad9ca]", "[76a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("1", "[50c937c7233ad9ca]", "[76a07ac23fca339b]", "0x20")
    self.bid64_to_binary64("2", "[50c937c7233ad9ca]", "[76a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("3", "[50c937c7233ad9ca]", "[76a07ac23fca339b]", "0x20")
    self.bid64_to_binary64("4", "[50c937c7233ad9ca]", "[76a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("0", "[518edb73058f955a]", "[77e954b88b26687c]", "0x20")
    self.bid64_to_binary64("1", "[518edb73058f955a]", "[77e954b88b26687c]", "0x20")
    self.bid64_to_binary64("2", "[518edb73058f955a]", "[77e954b88b26687d]", "0x20")
    self.bid64_to_binary64("3", "[518edb73058f955a]", "[77e954b88b26687c]", "0x20")
    self.bid64_to_binary64("4", "[518edb73058f955a]", "[77e954b88b26687c]", "0x20")
    self.bid64_to_binary64("0", "[527bcc60266a98e1]", "[796c3fe74995d448]", "0x20")
    self.bid64_to_binary64("1", "[527bcc60266a98e1]", "[796c3fe74995d447]", "0x20")
    self.bid64_to_binary64("2", "[527bcc60266a98e1]", "[796c3fe74995d448]", "0x20")
    self.bid64_to_binary64("3", "[527bcc60266a98e1]", "[796c3fe74995d447]", "0x20")
    self.bid64_to_binary64("4", "[527bcc60266a98e1]", "[796c3fe74995d448]", "0x20")
    self.bid64_to_binary64("0", "[533cf2a660b312d7]", "[7aac0e1413d40908]", "0x20")
    self.bid64_to_binary64("1", "[533cf2a660b312d7]", "[7aac0e1413d40907]", "0x20")
    self.bid64_to_binary64("2", "[533cf2a660b312d7]", "[7aac0e1413d40908]", "0x20")
    self.bid64_to_binary64("3", "[533cf2a660b312d7]", "[7aac0e1413d40907]", "0x20")
    self.bid64_to_binary64("4", "[533cf2a660b312d7]", "[7aac0e1413d40908]", "0x20")
    self.bid64_to_binary64("0", "[53ef589c11503ae2]", "[7bdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("1", "[53ef589c11503ae2]", "[7bdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("2", "[53ef589c11503ae2]", "[7bdc5e1c16c19d26]", "0x20")
    self.bid64_to_binary64("3", "[53ef589c11503ae2]", "[7bdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("4", "[53ef589c11503ae2]", "[7bdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("0", "[54ac885821cb3e74]", "[7d1617f1418c7316]", "0x20")
    self.bid64_to_binary64("1", "[54ac885821cb3e74]", "[7d1617f1418c7316]", "0x20")
    self.bid64_to_binary64("2", "[54ac885821cb3e74]", "[7d1617f1418c7317]", "0x20")
    self.bid64_to_binary64("3", "[54ac885821cb3e74]", "[7d1617f1418c7316]", "0x20")
    self.bid64_to_binary64("4", "[54ac885821cb3e74]", "[7d1617f1418c7316]", "0x20")
    self.bid64_to_binary64("0", "[559ba4e78c319775]", "[7e9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("1", "[559ba4e78c319775]", "[7e9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("2", "[559ba4e78c319775]", "[7e9d0c2361d7af4c]", "0x20")
    self.bid64_to_binary64("3", "[559ba4e78c319775]", "[7e9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("4", "[559ba4e78c319775]", "[7e9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("0", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("1", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("2", "[566662fe0cb7f7eb]", "[7feffffffffffffc]", "0x20")
    self.bid64_to_binary64("3", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("4", "[566662fe0cb7f7eb]", "[7feffffffffffffb]", "0x20")
    self.bid64_to_binary64("0", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[566662fe0cb7f7ec]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("2", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("3", "[566662fe0cb7f7ec]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("4", "[566662fe0cb7f7ec]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[64f8cd51d574750b]", "[11a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("1", "[64f8cd51d574750b]", "[11a1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("2", "[64f8cd51d574750b]", "[11a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("3", "[64f8cd51d574750b]", "[11a1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("4", "[64f8cd51d574750b]", "[11a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("0", "[66ba5bcff2af15e5]", "[1d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("1", "[66ba5bcff2af15e5]", "[1d423fca433dcbe3]", "0x20")
    self.bid64_to_binary64("2", "[66ba5bcff2af15e5]", "[1d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("3", "[66ba5bcff2af15e5]", "[1d423fca433dcbe3]", "0x20")
    self.bid64_to_binary64("4", "[66ba5bcff2af15e5]", "[1d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("0", "[67825427b548dfc7]", "[2272da500205778a]", "0x20")
    self.bid64_to_binary64("1", "[67825427b548dfc7]", "[2272da500205778a]", "0x20")
    self.bid64_to_binary64("2", "[67825427b548dfc7]", "[2272da500205778b]", "0x20")
    self.bid64_to_binary64("3", "[67825427b548dfc7]", "[2272da500205778a]", "0x20")
    self.bid64_to_binary64("4", "[67825427b548dfc7]", "[2272da500205778a]", "0x20")
    self.bid64_to_binary64("0", "[68195b108182b498]", "[2663dc6227de9148]", "0x20")
    self.bid64_to_binary64("1", "[68195b108182b498]", "[2663dc6227de9148]", "0x20")
    self.bid64_to_binary64("2", "[68195b108182b498]", "[2663dc6227de9149]", "0x20")
    self.bid64_to_binary64("3", "[68195b108182b498]", "[2663dc6227de9148]", "0x20")
    self.bid64_to_binary64("4", "[68195b108182b498]", "[2663dc6227de9148]", "0x20")
    self.bid64_to_binary64("0", "[6912bc7cefdf17da]", "[2cd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("1", "[6912bc7cefdf17da]", "[2cd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("2", "[6912bc7cefdf17da]", "[2cd46518c19d90eb]", "0x20")
    self.bid64_to_binary64("3", "[6912bc7cefdf17da]", "[2cd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("4", "[6912bc7cefdf17da]", "[2cd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("0", "[6c0386f1dcd9db15]", "[4058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("1", "[6c0386f1dcd9db15]", "[4058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("2", "[6c0386f1dcd9db15]", "[4058ffff98a0532d]", "0x20")
    self.bid64_to_binary64("3", "[6c0386f1dcd9db15]", "[4058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("4", "[6c0386f1dcd9db15]", "[4058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("0", "[6c3386f26fbe2f2b]", "[4197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("1", "[6c3386f26fbe2f2b]", "[4197d783fffe1c41]", "0x20")
    self.bid64_to_binary64("2", "[6c3386f26fbe2f2b]", "[4197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("3", "[6c3386f26fbe2f2b]", "[4197d783fffe1c41]", "0x20")
    self.bid64_to_binary64("4", "[6c3386f26fbe2f2b]", "[4197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("0", "[6ccb86f26f6ec68b]", "[4589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("1", "[6ccb86f26f6ec68b]", "[4589d971e4c2b082]", "0x20")
    self.bid64_to_binary64("2", "[6ccb86f26f6ec68b]", "[4589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("3", "[6ccb86f26f6ec68b]", "[4589d971e4c2b082]", "0x20")
    self.bid64_to_binary64("4", "[6ccb86f26f6ec68b]", "[4589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("0", "[6cfb86261a3adff3]", "[46c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("1", "[6cfb86261a3adff3]", "[46c8a6555940ba6f]", "0x20")
    self.bid64_to_binary64("2", "[6cfb86261a3adff3]", "[46c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("3", "[6cfb86261a3adff3]", "[46c8a6555940ba6f]", "0x20")
    self.bid64_to_binary64("4", "[6cfb86261a3adff3]", "[46c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("0", "[6f21db37ad7fa007]", "[551b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("1", "[6f21db37ad7fa007]", "[551b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("2", "[6f21db37ad7fa007]", "[551b3b180c0ae027]", "0x20")
    self.bid64_to_binary64("3", "[6f21db37ad7fa007]", "[551b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("4", "[6f21db37ad7fa007]", "[551b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("0", "[70dae3657476a586]", "[6086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("1", "[70dae3657476a586]", "[6086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("2", "[70dae3657476a586]", "[6086e36058bfb9a1]", "0x20")
    self.bid64_to_binary64("3", "[70dae3657476a586]", "[6086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("4", "[70dae3657476a586]", "[6086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("0", "[730920d09ebfd32f]", "[6f0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("1", "[730920d09ebfd32f]", "[6f0f7d6721f7f143]", "0x20")
    self.bid64_to_binary64("2", "[730920d09ebfd32f]", "[6f0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("3", "[730920d09ebfd32f]", "[6f0f7d6721f7f143]", "0x20")
    self.bid64_to_binary64("4", "[730920d09ebfd32f]", "[6f0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("0", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[77fb86f26fc0ffff]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("2", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("3", "[77fb86f26fc0ffff]", "[7fefffffffffffff]", "0x28")
    self.bid64_to_binary64("4", "[77fb86f26fc0ffff]", "[7ff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[7800000000000000]", "[7ff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[7c03080000000000]", "[7ffe100000000000]", "0x00")
    self.bid64_to_binary64("0", "[7e03080000000000]", "[7ffe100000000000]", "0x01")
    self.bid64_to_binary64("0", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[8000000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[8000000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[80038d7ea4c67fff]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[80038d7ea4c67fff]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[80038d7ea4c67fff]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[80038d7ea4c67fff]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[80038d7ea4c67fff]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[81e0000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[81e0000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[8200000000000001]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[8200000000000001]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("1", "[87674569785223d2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[87674569785223d2]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("0", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("2", "[87718d80392931b1]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("3", "[87718d80392931b1]", "[8000000000000000]", "0x30")
    self.bid64_to_binary64("4", "[87718d80392931b1]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("1", "[87718d80392931b2]", "[8000000000000002]", "0x30")
    self.bid64_to_binary64("2", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("3", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("4", "[87718d80392931b2]", "[8000000000000001]", "0x30")
    self.bid64_to_binary64("0", "[884032920461e7a6]", "[800000000001b79d]", "0x30")
    self.bid64_to_binary64("1", "[884032920461e7a6]", "[800000000001b79e]", "0x30")
    self.bid64_to_binary64("2", "[884032920461e7a6]", "[800000000001b79d]", "0x30")
    self.bid64_to_binary64("3", "[884032920461e7a6]", "[800000000001b79d]", "0x30")
    self.bid64_to_binary64("4", "[884032920461e7a6]", "[800000000001b79d]", "0x30")
    self.bid64_to_binary64("0", "[8902262b1e95004c]", "[8000011d11d469c5]", "0x30")
    self.bid64_to_binary64("1", "[8902262b1e95004c]", "[8000011d11d469c5]", "0x30")
    self.bid64_to_binary64("2", "[8902262b1e95004c]", "[8000011d11d469c4]", "0x30")
    self.bid64_to_binary64("3", "[8902262b1e95004c]", "[8000011d11d469c4]", "0x30")
    self.bid64_to_binary64("4", "[8902262b1e95004c]", "[8000011d11d469c5]", "0x30")
    self.bid64_to_binary64("0", "[8953c33b72569c62]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("1", "[8953c33b72569c62]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("2", "[8953c33b72569c62]", "[8003ffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[8953c33b72569c62]", "[8003ffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[8953c33b72569c62]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("0", "[8953c33b72569c63]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("1", "[8953c33b72569c63]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("2", "[8953c33b72569c63]", "[8003ffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[8953c33b72569c63]", "[8003ffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[8953c33b72569c63]", "[8004000000000000]", "0x30")
    self.bid64_to_binary64("0", "[8963f3d8b077b8e1]", "[8008000000000001]", "0x30")
    self.bid64_to_binary64("1", "[8963f3d8b077b8e1]", "[8008000000000001]", "0x30")
    self.bid64_to_binary64("2", "[8963f3d8b077b8e1]", "[8008000000000000]", "0x30")
    self.bid64_to_binary64("3", "[8963f3d8b077b8e1]", "[8008000000000000]", "0x30")
    self.bid64_to_binary64("4", "[8963f3d8b077b8e1]", "[8008000000000001]", "0x30")
    self.bid64_to_binary64("0", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("1", "[8967e7b160ef71c1]", "[8010000000000000]", "0x30")
    self.bid64_to_binary64("2", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("3", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("4", "[8967e7b160ef71c1]", "[800fffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("1", "[8967e7b160ef71c2]", "[8010000000000002]", "0x20")
    self.bid64_to_binary64("2", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("3", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("4", "[8967e7b160ef71c2]", "[8010000000000001]", "0x20")
    self.bid64_to_binary64("0", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("1", "[896fcf62c1dee382]", "[801fffffffffffff]", "0x20")
    self.bid64_to_binary64("2", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("3", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("4", "[896fcf62c1dee382]", "[801ffffffffffffe]", "0x20")
    self.bid64_to_binary64("0", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("1", "[896fcf62c1dee383]", "[8020000000000001]", "0x20")
    self.bid64_to_binary64("2", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("3", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("4", "[896fcf62c1dee383]", "[8020000000000000]", "0x20")
    self.bid64_to_binary64("0", "[89a00a1e53af46f8]", "[8007ffffffffffff]", "0x30")
    self.bid64_to_binary64("1", "[89a00a1e53af46f8]", "[8007ffffffffffff]", "0x30")
    self.bid64_to_binary64("2", "[89a00a1e53af46f8]", "[8007fffffffffffe]", "0x30")
    self.bid64_to_binary64("3", "[89a00a1e53af46f8]", "[8007fffffffffffe]", "0x30")
    self.bid64_to_binary64("4", "[89a00a1e53af46f8]", "[8007ffffffffffff]", "0x30")
    self.bid64_to_binary64("0", "[89c951d35341d6a3]", "[80b26bc92333a617]", "0x20")
    self.bid64_to_binary64("1", "[89c951d35341d6a3]", "[80b26bc92333a618]", "0x20")
    self.bid64_to_binary64("2", "[89c951d35341d6a3]", "[80b26bc92333a617]", "0x20")
    self.bid64_to_binary64("3", "[89c951d35341d6a3]", "[80b26bc92333a617]", "0x20")
    self.bid64_to_binary64("4", "[89c951d35341d6a3]", "[80b26bc92333a617]", "0x20")
    self.bid64_to_binary64("0", "[8a93f518b145d1a7]", "[8202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("1", "[8a93f518b145d1a7]", "[8202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("2", "[8a93f518b145d1a7]", "[8202cf5e7bb9a311]", "0x20")
    self.bid64_to_binary64("3", "[8a93f518b145d1a7]", "[8202cf5e7bb9a311]", "0x20")
    self.bid64_to_binary64("4", "[8a93f518b145d1a7]", "[8202cf5e7bb9a312]", "0x20")
    self.bid64_to_binary64("0", "[8b6043ba42fd29c2]", "[83130622f599bb7d]", "0x20")
    self.bid64_to_binary64("1", "[8b6043ba42fd29c2]", "[83130622f599bb7d]", "0x20")
    self.bid64_to_binary64("2", "[8b6043ba42fd29c2]", "[83130622f599bb7c]", "0x20")
    self.bid64_to_binary64("3", "[8b6043ba42fd29c2]", "[83130622f599bb7c]", "0x20")
    self.bid64_to_binary64("4", "[8b6043ba42fd29c2]", "[83130622f599bb7d]", "0x20")
    self.bid64_to_binary64("0", "[8c2377b788355de1]", "[848db99211b097a6]", "0x20")
    self.bid64_to_binary64("1", "[8c2377b788355de1]", "[848db99211b097a6]", "0x20")
    self.bid64_to_binary64("2", "[8c2377b788355de1]", "[848db99211b097a5]", "0x20")
    self.bid64_to_binary64("3", "[8c2377b788355de1]", "[848db99211b097a5]", "0x20")
    self.bid64_to_binary64("4", "[8c2377b788355de1]", "[848db99211b097a6]", "0x20")
    self.bid64_to_binary64("0", "[8d016dcd3fefdd80]", "[85ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("1", "[8d016dcd3fefdd80]", "[85ed3409dfbca270]", "0x20")
    self.bid64_to_binary64("2", "[8d016dcd3fefdd80]", "[85ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("3", "[8d016dcd3fefdd80]", "[85ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("4", "[8d016dcd3fefdd80]", "[85ed3409dfbca26f]", "0x20")
    self.bid64_to_binary64("0", "[8da62a52ed86615b]", "[87180881446f8c64]", "0x20")
    self.bid64_to_binary64("1", "[8da62a52ed86615b]", "[87180881446f8c64]", "0x20")
    self.bid64_to_binary64("2", "[8da62a52ed86615b]", "[87180881446f8c63]", "0x20")
    self.bid64_to_binary64("3", "[8da62a52ed86615b]", "[87180881446f8c63]", "0x20")
    self.bid64_to_binary64("4", "[8da62a52ed86615b]", "[87180881446f8c64]", "0x20")
    self.bid64_to_binary64("0", "[8e6c32b9e6650875]", "[8866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("1", "[8e6c32b9e6650875]", "[8866ac6eeaf26239]", "0x20")
    self.bid64_to_binary64("2", "[8e6c32b9e6650875]", "[8866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("3", "[8e6c32b9e6650875]", "[8866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("4", "[8e6c32b9e6650875]", "[8866ac6eeaf26238]", "0x20")
    self.bid64_to_binary64("0", "[8f418e7988380eb1]", "[89ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("1", "[8f418e7988380eb1]", "[89ab979c828dc5dc]", "0x20")
    self.bid64_to_binary64("2", "[8f418e7988380eb1]", "[89ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("3", "[8f418e7988380eb1]", "[89ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("4", "[8f418e7988380eb1]", "[89ab979c828dc5db]", "0x20")
    self.bid64_to_binary64("0", "[9000b1bcd739e247]", "[8ad7797619b14480]", "0x20")
    self.bid64_to_binary64("1", "[9000b1bcd739e247]", "[8ad7797619b14480]", "0x20")
    self.bid64_to_binary64("2", "[9000b1bcd739e247]", "[8ad7797619b1447f]", "0x20")
    self.bid64_to_binary64("3", "[9000b1bcd739e247]", "[8ad7797619b1447f]", "0x20")
    self.bid64_to_binary64("4", "[9000b1bcd739e247]", "[8ad7797619b14480]", "0x20")
    self.bid64_to_binary64("0", "[90d8aa591e997f2d]", "[8c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("1", "[90d8aa591e997f2d]", "[8c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("2", "[90d8aa591e997f2d]", "[8c68da99f7a4eabe]", "0x20")
    self.bid64_to_binary64("3", "[90d8aa591e997f2d]", "[8c68da99f7a4eabe]", "0x20")
    self.bid64_to_binary64("4", "[90d8aa591e997f2d]", "[8c68da99f7a4eabf]", "0x20")
    self.bid64_to_binary64("0", "[91869461670b3ada]", "[8d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("1", "[91869461670b3ada]", "[8d894a80ea17c1d1]", "0x20")
    self.bid64_to_binary64("2", "[91869461670b3ada]", "[8d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("3", "[91869461670b3ada]", "[8d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("4", "[91869461670b3ada]", "[8d894a80ea17c1d0]", "0x20")
    self.bid64_to_binary64("0", "[9262e2f7926738a9]", "[8eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("1", "[9262e2f7926738a9]", "[8eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("2", "[9262e2f7926738a9]", "[8eea7439edbb8d61]", "0x20")
    self.bid64_to_binary64("3", "[9262e2f7926738a9]", "[8eea7439edbb8d61]", "0x20")
    self.bid64_to_binary64("4", "[9262e2f7926738a9]", "[8eea7439edbb8d62]", "0x20")
    self.bid64_to_binary64("0", "[932e511fd727e31b]", "[904f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("1", "[932e511fd727e31b]", "[904f48347c60a1be]", "0x20")
    self.bid64_to_binary64("2", "[932e511fd727e31b]", "[904f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("3", "[932e511fd727e31b]", "[904f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("4", "[932e511fd727e31b]", "[904f48347c60a1bd]", "0x20")
    self.bid64_to_binary64("0", "[94bbf51de62602b9]", "[92dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("1", "[94bbf51de62602b9]", "[92dbc764e4f07201]", "0x20")
    self.bid64_to_binary64("2", "[94bbf51de62602b9]", "[92dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("3", "[94bbf51de62602b9]", "[92dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("4", "[94bbf51de62602b9]", "[92dbc764e4f07200]", "0x20")
    self.bid64_to_binary64("0", "[95832ee933c4afad]", "[941e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("1", "[95832ee933c4afad]", "[941e29f2bb04a5b7]", "0x20")
    self.bid64_to_binary64("2", "[95832ee933c4afad]", "[941e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("3", "[95832ee933c4afad]", "[941e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("4", "[95832ee933c4afad]", "[941e29f2bb04a5b6]", "0x20")
    self.bid64_to_binary64("0", "[96405d95b55d4beb]", "[952a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("1", "[96405d95b55d4beb]", "[952a6db0b81fd171]", "0x20")
    self.bid64_to_binary64("2", "[96405d95b55d4beb]", "[952a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("3", "[96405d95b55d4beb]", "[952a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("4", "[96405d95b55d4beb]", "[952a6db0b81fd170]", "0x20")
    self.bid64_to_binary64("0", "[9716ff406c702454]", "[96c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("1", "[9716ff406c702454]", "[96c8c631a5471f28]", "0x20")
    self.bid64_to_binary64("2", "[9716ff406c702454]", "[96c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("3", "[9716ff406c702454]", "[96c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("4", "[9716ff406c702454]", "[96c8c631a5471f27]", "0x20")
    self.bid64_to_binary64("0", "[97d1752aa924e55d]", "[9801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("1", "[97d1752aa924e55d]", "[9801ef7d320fffa1]", "0x20")
    self.bid64_to_binary64("2", "[97d1752aa924e55d]", "[9801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("3", "[97d1752aa924e55d]", "[9801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("4", "[97d1752aa924e55d]", "[9801ef7d320fffa0]", "0x20")
    self.bid64_to_binary64("0", "[98a31a6cdc57b822]", "[994e6797d38da244]", "0x20")
    self.bid64_to_binary64("1", "[98a31a6cdc57b822]", "[994e6797d38da245]", "0x20")
    self.bid64_to_binary64("2", "[98a31a6cdc57b822]", "[994e6797d38da244]", "0x20")
    self.bid64_to_binary64("3", "[98a31a6cdc57b822]", "[994e6797d38da244]", "0x20")
    self.bid64_to_binary64("4", "[98a31a6cdc57b822]", "[994e6797d38da244]", "0x20")
    self.bid64_to_binary64("0", "[9965c7ac69ce79eb]", "[9a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("1", "[9965c7ac69ce79eb]", "[9a9b00f1cf2d5ad9]", "0x20")
    self.bid64_to_binary64("2", "[9965c7ac69ce79eb]", "[9a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("3", "[9965c7ac69ce79eb]", "[9a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("4", "[9965c7ac69ce79eb]", "[9a9b00f1cf2d5ad8]", "0x20")
    self.bid64_to_binary64("0", "[9a3b575d01088b9c]", "[9bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("1", "[9a3b575d01088b9c]", "[9bfe746e367600fc]", "0x20")
    self.bid64_to_binary64("2", "[9a3b575d01088b9c]", "[9bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("3", "[9a3b575d01088b9c]", "[9bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("4", "[9a3b575d01088b9c]", "[9bfe746e367600fb]", "0x20")
    self.bid64_to_binary64("0", "[9bc2d40b08dcee27]", "[9e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("1", "[9bc2d40b08dcee27]", "[9e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("2", "[9bc2d40b08dcee27]", "[9e7ca7079534ef8d]", "0x20")
    self.bid64_to_binary64("3", "[9bc2d40b08dcee27]", "[9e7ca7079534ef8d]", "0x20")
    self.bid64_to_binary64("4", "[9bc2d40b08dcee27]", "[9e7ca7079534ef8e]", "0x20")
    self.bid64_to_binary64("0", "[9c88f72bf0709241]", "[9fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("1", "[9c88f72bf0709241]", "[9fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("2", "[9c88f72bf0709241]", "[9fd5a79c4e71d027]", "0x20")
    self.bid64_to_binary64("3", "[9c88f72bf0709241]", "[9fd5a79c4e71d027]", "0x20")
    self.bid64_to_binary64("4", "[9c88f72bf0709241]", "[9fd5a79c4e71d028]", "0x20")
    self.bid64_to_binary64("0", "[9d541717ab11a367]", "[a1272369916132a9]", "0x20")
    self.bid64_to_binary64("1", "[9d541717ab11a367]", "[a1272369916132aa]", "0x20")
    self.bid64_to_binary64("2", "[9d541717ab11a367]", "[a1272369916132a9]", "0x20")
    self.bid64_to_binary64("3", "[9d541717ab11a367]", "[a1272369916132a9]", "0x20")
    self.bid64_to_binary64("4", "[9d541717ab11a367]", "[a1272369916132a9]", "0x20")
    self.bid64_to_binary64("0", "[9ee10c35312de9d1]", "[a395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("1", "[9ee10c35312de9d1]", "[a395f2df5e675a10]", "0x20")
    self.bid64_to_binary64("2", "[9ee10c35312de9d1]", "[a395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("3", "[9ee10c35312de9d1]", "[a395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("4", "[9ee10c35312de9d1]", "[a395f2df5e675a0f]", "0x20")
    self.bid64_to_binary64("0", "[9fa688c5ef991edf]", "[a5005194f202b111]", "0x20")
    self.bid64_to_binary64("1", "[9fa688c5ef991edf]", "[a5005194f202b112]", "0x20")
    self.bid64_to_binary64("2", "[9fa688c5ef991edf]", "[a5005194f202b111]", "0x20")
    self.bid64_to_binary64("3", "[9fa688c5ef991edf]", "[a5005194f202b111]", "0x20")
    self.bid64_to_binary64("4", "[9fa688c5ef991edf]", "[a5005194f202b111]", "0x20")
    self.bid64_to_binary64("0", "[a12135b288f43676]", "[a755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("1", "[a12135b288f43676]", "[a755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("2", "[a12135b288f43676]", "[a755fb806a1e933f]", "0x20")
    self.bid64_to_binary64("3", "[a12135b288f43676]", "[a755fb806a1e933f]", "0x20")
    self.bid64_to_binary64("4", "[a12135b288f43676]", "[a755fb806a1e9340]", "0x20")
    self.bid64_to_binary64("0", "[a22022bcebe955bd]", "[a8cd64c29852639b]", "0x20")
    self.bid64_to_binary64("1", "[a22022bcebe955bd]", "[a8cd64c29852639c]", "0x20")
    self.bid64_to_binary64("2", "[a22022bcebe955bd]", "[a8cd64c29852639b]", "0x20")
    self.bid64_to_binary64("3", "[a22022bcebe955bd]", "[a8cd64c29852639b]", "0x20")
    self.bid64_to_binary64("4", "[a22022bcebe955bd]", "[a8cd64c29852639b]", "0x20")
    self.bid64_to_binary64("0", "[a2cbfb13ad3c7481]", "[aa3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("1", "[a2cbfb13ad3c7481]", "[aa3eeff57768f88c]", "0x20")
    self.bid64_to_binary64("2", "[a2cbfb13ad3c7481]", "[aa3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("3", "[a2cbfb13ad3c7481]", "[aa3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("4", "[a2cbfb13ad3c7481]", "[aa3eeff57768f88b]", "0x20")
    self.bid64_to_binary64("0", "[a38382dea4888745]", "[ab614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("1", "[a38382dea4888745]", "[ab614b289f08fcc9]", "0x20")
    self.bid64_to_binary64("2", "[a38382dea4888745]", "[ab614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("3", "[a38382dea4888745]", "[ab614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("4", "[a38382dea4888745]", "[ab614b289f08fcc8]", "0x20")
    self.bid64_to_binary64("0", "[a5223443606e7eae]", "[ae08af070ea2513b]", "0x20")
    self.bid64_to_binary64("1", "[a5223443606e7eae]", "[ae08af070ea2513c]", "0x20")
    self.bid64_to_binary64("2", "[a5223443606e7eae]", "[ae08af070ea2513b]", "0x20")
    self.bid64_to_binary64("3", "[a5223443606e7eae]", "[ae08af070ea2513b]", "0x20")
    self.bid64_to_binary64("4", "[a5223443606e7eae]", "[ae08af070ea2513b]", "0x20")
    self.bid64_to_binary64("0", "[a5e440088f15f335]", "[af56b210327f4071]", "0x20")
    self.bid64_to_binary64("1", "[a5e440088f15f335]", "[af56b210327f4072]", "0x20")
    self.bid64_to_binary64("2", "[a5e440088f15f335]", "[af56b210327f4071]", "0x20")
    self.bid64_to_binary64("3", "[a5e440088f15f335]", "[af56b210327f4071]", "0x20")
    self.bid64_to_binary64("4", "[a5e440088f15f335]", "[af56b210327f4071]", "0x20")
    self.bid64_to_binary64("0", "[a6a961c32eaa12f8]", "[b0a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("1", "[a6a961c32eaa12f8]", "[b0a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("2", "[a6a961c32eaa12f8]", "[b0a7e3987916a69d]", "0x20")
    self.bid64_to_binary64("3", "[a6a961c32eaa12f8]", "[b0a7e3987916a69d]", "0x20")
    self.bid64_to_binary64("4", "[a6a961c32eaa12f8]", "[b0a7e3987916a69e]", "0x20")
    self.bid64_to_binary64("0", "[a77a7aee9d901bd7]", "[b2001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("1", "[a77a7aee9d901bd7]", "[b2001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("2", "[a77a7aee9d901bd7]", "[b2001361a3c7cdeb]", "0x20")
    self.bid64_to_binary64("3", "[a77a7aee9d901bd7]", "[b2001361a3c7cdeb]", "0x20")
    self.bid64_to_binary64("4", "[a77a7aee9d901bd7]", "[b2001361a3c7cdec]", "0x20")
    self.bid64_to_binary64("0", "[a841ef57f0b861f7]", "[b33667afa252e8dd]", "0x20")
    self.bid64_to_binary64("1", "[a841ef57f0b861f7]", "[b33667afa252e8dd]", "0x20")
    self.bid64_to_binary64("2", "[a841ef57f0b861f7]", "[b33667afa252e8dc]", "0x20")
    self.bid64_to_binary64("3", "[a841ef57f0b861f7]", "[b33667afa252e8dc]", "0x20")
    self.bid64_to_binary64("4", "[a841ef57f0b861f7]", "[b33667afa252e8dd]", "0x20")
    self.bid64_to_binary64("0", "[a901f80f19d050c5]", "[b475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("1", "[a901f80f19d050c5]", "[b475be383a7b9b0b]", "0x20")
    self.bid64_to_binary64("2", "[a901f80f19d050c5]", "[b475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("3", "[a901f80f19d050c5]", "[b475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("4", "[a901f80f19d050c5]", "[b475be383a7b9b0a]", "0x20")
    self.bid64_to_binary64("0", "[a9d226c684c87261]", "[b5e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("1", "[a9d226c684c87261]", "[b5e7e5083bc0fe6f]", "0x20")
    self.bid64_to_binary64("2", "[a9d226c684c87261]", "[b5e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("3", "[a9d226c684c87261]", "[b5e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("4", "[a9d226c684c87261]", "[b5e7e5083bc0fe6e]", "0x20")
    self.bid64_to_binary64("0", "[aa9a203af992bfed]", "[b73066452ee269aa]", "0x20")
    self.bid64_to_binary64("1", "[aa9a203af992bfed]", "[b73066452ee269aa]", "0x20")
    self.bid64_to_binary64("2", "[aa9a203af992bfed]", "[b73066452ee269a9]", "0x20")
    self.bid64_to_binary64("3", "[aa9a203af992bfed]", "[b73066452ee269a9]", "0x20")
    self.bid64_to_binary64("4", "[aa9a203af992bfed]", "[b73066452ee269aa]", "0x20")
    self.bid64_to_binary64("0", "[ab61f4dd458b7eb7]", "[b8676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("1", "[ab61f4dd458b7eb7]", "[b8676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("2", "[ab61f4dd458b7eb7]", "[b8676ca8be2021d5]", "0x20")
    self.bid64_to_binary64("3", "[ab61f4dd458b7eb7]", "[b8676ca8be2021d5]", "0x20")
    self.bid64_to_binary64("4", "[ab61f4dd458b7eb7]", "[b8676ca8be2021d6]", "0x20")
    self.bid64_to_binary64("0", "[ac2b34c69d8a1d85]", "[b9cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("1", "[ac2b34c69d8a1d85]", "[b9cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("2", "[ac2b34c69d8a1d85]", "[b9cffce84b6dbad7]", "0x20")
    self.bid64_to_binary64("3", "[ac2b34c69d8a1d85]", "[b9cffce84b6dbad7]", "0x20")
    self.bid64_to_binary64("4", "[ac2b34c69d8a1d85]", "[b9cffce84b6dbad8]", "0x20")
    self.bid64_to_binary64("0", "[acf253acb830bcdf]", "[bb18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("1", "[acf253acb830bcdf]", "[bb18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("2", "[acf253acb830bcdf]", "[bb18f1fa06dd6a7d]", "0x20")
    self.bid64_to_binary64("3", "[acf253acb830bcdf]", "[bb18f1fa06dd6a7d]", "0x20")
    self.bid64_to_binary64("4", "[acf253acb830bcdf]", "[bb18f1fa06dd6a7e]", "0x20")
    self.bid64_to_binary64("0", "[adba04f802bebb6d]", "[bc60e337464faa08]", "0x20")
    self.bid64_to_binary64("1", "[adba04f802bebb6d]", "[bc60e337464faa08]", "0x20")
    self.bid64_to_binary64("2", "[adba04f802bebb6d]", "[bc60e337464faa07]", "0x20")
    self.bid64_to_binary64("3", "[adba04f802bebb6d]", "[bc60e337464faa07]", "0x20")
    self.bid64_to_binary64("4", "[adba04f802bebb6d]", "[bc60e337464faa08]", "0x20")
    self.bid64_to_binary64("0", "[ae81c24cc5617549]", "[bd95c6714def374c]", "0x20")
    self.bid64_to_binary64("1", "[ae81c24cc5617549]", "[bd95c6714def374d]", "0x20")
    self.bid64_to_binary64("2", "[ae81c24cc5617549]", "[bd95c6714def374c]", "0x20")
    self.bid64_to_binary64("3", "[ae81c24cc5617549]", "[bd95c6714def374c]", "0x20")
    self.bid64_to_binary64("4", "[ae81c24cc5617549]", "[bd95c6714def374c]", "0x20")
    self.bid64_to_binary64("0", "[af4ad2c1ce56c0eb]", "[befff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("1", "[af4ad2c1ce56c0eb]", "[befff1d4d6ef6169]", "0x20")
    self.bid64_to_binary64("2", "[af4ad2c1ce56c0eb]", "[befff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("3", "[af4ad2c1ce56c0eb]", "[befff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("4", "[af4ad2c1ce56c0eb]", "[befff1d4d6ef6168]", "0x20")
    self.bid64_to_binary64("0", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b0c00000004d7c6d]", "[bfaa000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1a000000000000f]", "[bff8000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1a27ffffffffffe]", "[c2cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("1", "[b1a27ffffffffffe]", "[c2cfffffffffffe7]", "0x20")
    self.bid64_to_binary64("2", "[b1a27ffffffffffe]", "[c2cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("3", "[b1a27ffffffffffe]", "[c2cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("4", "[b1a27ffffffffffe]", "[c2cfffffffffffe6]", "0x20")
    self.bid64_to_binary64("0", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c0000000000001]", "[bff0000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c0000000000040]", "[c050000000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c00000000003e7]", "[c08f380000000000]", "0x00")
    self.bid64_to_binary64("0", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("1", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("2", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("3", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("4", "[b1c00000000003e8]", "[c08f400000000000]", "0x00")
    self.bid64_to_binary64("0", "[b26a7c5ac471b3e3]", "[c42ffffffffffe38]", "0x20")
    self.bid64_to_binary64("1", "[b26a7c5ac471b3e3]", "[c42ffffffffffe39]", "0x20")
    self.bid64_to_binary64("2", "[b26a7c5ac471b3e3]", "[c42ffffffffffe38]", "0x20")
    self.bid64_to_binary64("3", "[b26a7c5ac471b3e3]", "[c42ffffffffffe38]", "0x20")
    self.bid64_to_binary64("4", "[b26a7c5ac471b3e3]", "[c42ffffffffffe38]", "0x20")
    self.bid64_to_binary64("0", "[b4b79e9a5073c06c]", "[c7ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("1", "[b4b79e9a5073c06c]", "[c7ff429cb67eb076]", "0x20")
    self.bid64_to_binary64("2", "[b4b79e9a5073c06c]", "[c7ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("3", "[b4b79e9a5073c06c]", "[c7ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("4", "[b4b79e9a5073c06c]", "[c7ff429cb67eb075]", "0x20")
    self.bid64_to_binary64("0", "[b58406840eaecb9f]", "[c949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("1", "[b58406840eaecb9f]", "[c949677825a0c0eb]", "0x20")
    self.bid64_to_binary64("2", "[b58406840eaecb9f]", "[c949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("3", "[b58406840eaecb9f]", "[c949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("4", "[b58406840eaecb9f]", "[c949677825a0c0ea]", "0x20")
    self.bid64_to_binary64("0", "[b6548cddb2fa9a98]", "[caaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("1", "[b6548cddb2fa9a98]", "[caaeebabe0957af4]", "0x20")
    self.bid64_to_binary64("2", "[b6548cddb2fa9a98]", "[caaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("3", "[b6548cddb2fa9a98]", "[caaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("4", "[b6548cddb2fa9a98]", "[caaeebabe0957af3]", "0x20")
    self.bid64_to_binary64("0", "[b7096b98447a0285]", "[cbdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("1", "[b7096b98447a0285]", "[cbdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("2", "[b7096b98447a0285]", "[cbdb08f0094136af]", "0x20")
    self.bid64_to_binary64("3", "[b7096b98447a0285]", "[cbdb08f0094136af]", "0x20")
    self.bid64_to_binary64("4", "[b7096b98447a0285]", "[cbdb08f0094136b0]", "0x20")
    self.bid64_to_binary64("0", "[b7cd102e2b854b5e]", "[cd21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("1", "[b7cd102e2b854b5e]", "[cd21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("2", "[b7cd102e2b854b5e]", "[cd21e05cb2a12025]", "0x20")
    self.bid64_to_binary64("3", "[b7cd102e2b854b5e]", "[cd21e05cb2a12025]", "0x20")
    self.bid64_to_binary64("4", "[b7cd102e2b854b5e]", "[cd21e05cb2a12026]", "0x20")
    self.bid64_to_binary64("0", "[b8a5353c9c2f4cf9]", "[ce80fde34c996086]", "0x20")
    self.bid64_to_binary64("1", "[b8a5353c9c2f4cf9]", "[ce80fde34c996086]", "0x20")
    self.bid64_to_binary64("2", "[b8a5353c9c2f4cf9]", "[ce80fde34c996085]", "0x20")
    self.bid64_to_binary64("3", "[b8a5353c9c2f4cf9]", "[ce80fde34c996085]", "0x20")
    self.bid64_to_binary64("4", "[b8a5353c9c2f4cf9]", "[ce80fde34c996086]", "0x20")
    self.bid64_to_binary64("0", "[b973c1c76091d8ec]", "[cfdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("1", "[b973c1c76091d8ec]", "[cfdebca8a16a5ce0]", "0x20")
    self.bid64_to_binary64("2", "[b973c1c76091d8ec]", "[cfdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("3", "[b973c1c76091d8ec]", "[cfdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("4", "[b973c1c76091d8ec]", "[cfdebca8a16a5cdf]", "0x20")
    self.bid64_to_binary64("0", "[ba3c7601883ddded]", "[d1251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("1", "[ba3c7601883ddded]", "[d1251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("2", "[ba3c7601883ddded]", "[d1251d0f44c0239b]", "0x20")
    self.bid64_to_binary64("3", "[ba3c7601883ddded]", "[d1251d0f44c0239b]", "0x20")
    self.bid64_to_binary64("4", "[ba3c7601883ddded]", "[d1251d0f44c0239c]", "0x20")
    self.bid64_to_binary64("0", "[baf5a3c5467f12c2]", "[d25e9e7f64376799]", "0x20")
    self.bid64_to_binary64("1", "[baf5a3c5467f12c2]", "[d25e9e7f64376799]", "0x20")
    self.bid64_to_binary64("2", "[baf5a3c5467f12c2]", "[d25e9e7f64376798]", "0x20")
    self.bid64_to_binary64("3", "[baf5a3c5467f12c2]", "[d25e9e7f64376798]", "0x20")
    self.bid64_to_binary64("4", "[baf5a3c5467f12c2]", "[d25e9e7f64376799]", "0x20")
    self.bid64_to_binary64("0", "[bbc6c81d2c7f1715]", "[d3b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("1", "[bbc6c81d2c7f1715]", "[d3b6e0c94774af96]", "0x20")
    self.bid64_to_binary64("2", "[bbc6c81d2c7f1715]", "[d3b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("3", "[bbc6c81d2c7f1715]", "[d3b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("4", "[bbc6c81d2c7f1715]", "[d3b6e0c94774af95]", "0x20")
    self.bid64_to_binary64("0", "[bd5dbd4dc085903b]", "[d656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("1", "[bd5dbd4dc085903b]", "[d656cfc0c80bda55]", "0x20")
    self.bid64_to_binary64("2", "[bd5dbd4dc085903b]", "[d656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("3", "[bd5dbd4dc085903b]", "[d656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("4", "[bd5dbd4dc085903b]", "[d656cfc0c80bda54]", "0x20")
    self.bid64_to_binary64("0", "[be05ec7ad2ae9964]", "[d771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("1", "[be05ec7ad2ae9964]", "[d771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("2", "[be05ec7ad2ae9964]", "[d771554acd6fab8e]", "0x20")
    self.bid64_to_binary64("3", "[be05ec7ad2ae9964]", "[d771554acd6fab8e]", "0x20")
    self.bid64_to_binary64("4", "[be05ec7ad2ae9964]", "[d771554acd6fab8f]", "0x20")
    self.bid64_to_binary64("0", "[bee488e6d7ba9343]", "[d8dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("1", "[bee488e6d7ba9343]", "[d8dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("2", "[bee488e6d7ba9343]", "[d8dfa2bb0f9ffe0d]", "0x20")
    self.bid64_to_binary64("3", "[bee488e6d7ba9343]", "[d8dfa2bb0f9ffe0d]", "0x20")
    self.bid64_to_binary64("4", "[bee488e6d7ba9343]", "[d8dfa2bb0f9ffe0e]", "0x20")
    self.bid64_to_binary64("0", "[bfbc45fc32b914f1]", "[da478358811cbc95]", "0x20")
    self.bid64_to_binary64("1", "[bfbc45fc32b914f1]", "[da478358811cbc96]", "0x20")
    self.bid64_to_binary64("2", "[bfbc45fc32b914f1]", "[da478358811cbc95]", "0x20")
    self.bid64_to_binary64("3", "[bfbc45fc32b914f1]", "[da478358811cbc95]", "0x20")
    self.bid64_to_binary64("4", "[bfbc45fc32b914f1]", "[da478358811cbc95]", "0x20")
    self.bid64_to_binary64("0", "[c0799418eab49a8b]", "[db84495736b8d90e]", "0x20")
    self.bid64_to_binary64("1", "[c0799418eab49a8b]", "[db84495736b8d90e]", "0x20")
    self.bid64_to_binary64("2", "[c0799418eab49a8b]", "[db84495736b8d90d]", "0x20")
    self.bid64_to_binary64("3", "[c0799418eab49a8b]", "[db84495736b8d90d]", "0x20")
    self.bid64_to_binary64("4", "[c0799418eab49a8b]", "[db84495736b8d90e]", "0x20")
    self.bid64_to_binary64("0", "[c128bf02d472e2b6]", "[dcaa760b389de2d6]", "0x20")
    self.bid64_to_binary64("1", "[c128bf02d472e2b6]", "[dcaa760b389de2d7]", "0x20")
    self.bid64_to_binary64("2", "[c128bf02d472e2b6]", "[dcaa760b389de2d6]", "0x20")
    self.bid64_to_binary64("3", "[c128bf02d472e2b6]", "[dcaa760b389de2d6]", "0x20")
    self.bid64_to_binary64("4", "[c128bf02d472e2b6]", "[dcaa760b389de2d6]", "0x20")
    self.bid64_to_binary64("0", "[c2068426f34f8cfb]", "[de1780695036a67a]", "0x20")
    self.bid64_to_binary64("1", "[c2068426f34f8cfb]", "[de1780695036a67a]", "0x20")
    self.bid64_to_binary64("2", "[c2068426f34f8cfb]", "[de1780695036a679]", "0x20")
    self.bid64_to_binary64("3", "[c2068426f34f8cfb]", "[de1780695036a679]", "0x20")
    self.bid64_to_binary64("4", "[c2068426f34f8cfb]", "[de1780695036a67a]", "0x20")
    self.bid64_to_binary64("0", "[c2dd0fcbf97f8d11]", "[df78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("1", "[c2dd0fcbf97f8d11]", "[df78fd649d43cc3d]", "0x20")
    self.bid64_to_binary64("2", "[c2dd0fcbf97f8d11]", "[df78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("3", "[c2dd0fcbf97f8d11]", "[df78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("4", "[c2dd0fcbf97f8d11]", "[df78fd649d43cc3c]", "0x20")
    self.bid64_to_binary64("0", "[c44dc38f2c7e06b2]", "[e1e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("1", "[c44dc38f2c7e06b2]", "[e1e5874bb0e0b995]", "0x20")
    self.bid64_to_binary64("2", "[c44dc38f2c7e06b2]", "[e1e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("3", "[c44dc38f2c7e06b2]", "[e1e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("4", "[c44dc38f2c7e06b2]", "[e1e5874bb0e0b994]", "0x20")
    self.bid64_to_binary64("0", "[c518e6274e4e7450]", "[e332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("1", "[c518e6274e4e7450]", "[e332920f96e7f9f0]", "0x20")
    self.bid64_to_binary64("2", "[c518e6274e4e7450]", "[e332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("3", "[c518e6274e4e7450]", "[e332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("4", "[c518e6274e4e7450]", "[e332920f96e7f9ef]", "0x20")
    self.bid64_to_binary64("0", "[c5fea70395028db9]", "[e4ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("1", "[c5fea70395028db9]", "[e4ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("2", "[c5fea70395028db9]", "[e4ab40cebf1c8d1e]", "0x20")
    self.bid64_to_binary64("3", "[c5fea70395028db9]", "[e4ab40cebf1c8d1e]", "0x20")
    self.bid64_to_binary64("4", "[c5fea70395028db9]", "[e4ab40cebf1c8d1f]", "0x20")
    self.bid64_to_binary64("0", "[c6b0f0d091cd4027]", "[e5dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("1", "[c6b0f0d091cd4027]", "[e5dcba8083b7b569]", "0x20")
    self.bid64_to_binary64("2", "[c6b0f0d091cd4027]", "[e5dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("3", "[c6b0f0d091cd4027]", "[e5dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("4", "[c6b0f0d091cd4027]", "[e5dcba8083b7b568]", "0x20")
    self.bid64_to_binary64("0", "[c76eab61979e30a6]", "[e717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("1", "[c76eab61979e30a6]", "[e717b976fd49b8ea]", "0x20")
    self.bid64_to_binary64("2", "[c76eab61979e30a6]", "[e717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("3", "[c76eab61979e30a6]", "[e717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("4", "[c76eab61979e30a6]", "[e717b976fd49b8e9]", "0x20")
    self.bid64_to_binary64("0", "[c81d925a58adbc4c]", "[e8323e731b1eb118]", "0x20")
    self.bid64_to_binary64("1", "[c81d925a58adbc4c]", "[e8323e731b1eb119]", "0x20")
    self.bid64_to_binary64("2", "[c81d925a58adbc4c]", "[e8323e731b1eb118]", "0x20")
    self.bid64_to_binary64("3", "[c81d925a58adbc4c]", "[e8323e731b1eb118]", "0x20")
    self.bid64_to_binary64("4", "[c81d925a58adbc4c]", "[e8323e731b1eb118]", "0x20")
    self.bid64_to_binary64("0", "[c905c8499d093258]", "[e9b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("1", "[c905c8499d093258]", "[e9b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("2", "[c905c8499d093258]", "[e9b543619dddb7e9]", "0x20")
    self.bid64_to_binary64("3", "[c905c8499d093258]", "[e9b543619dddb7e9]", "0x20")
    self.bid64_to_binary64("4", "[c905c8499d093258]", "[e9b543619dddb7ea]", "0x20")
    self.bid64_to_binary64("0", "[c9dc43cc45f364e6]", "[eb18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("1", "[c9dc43cc45f364e6]", "[eb18c7cbbb955137]", "0x20")
    self.bid64_to_binary64("2", "[c9dc43cc45f364e6]", "[eb18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("3", "[c9dc43cc45f364e6]", "[eb18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("4", "[c9dc43cc45f364e6]", "[eb18c7cbbb955136]", "0x20")
    self.bid64_to_binary64("0", "[ca8dfebc08eb1542]", "[ec47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("1", "[ca8dfebc08eb1542]", "[ec47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("2", "[ca8dfebc08eb1542]", "[ec47671ccdd1fd0e]", "0x20")
    self.bid64_to_binary64("3", "[ca8dfebc08eb1542]", "[ec47671ccdd1fd0e]", "0x20")
    self.bid64_to_binary64("4", "[ca8dfebc08eb1542]", "[ec47671ccdd1fd0f]", "0x20")
    self.bid64_to_binary64("0", "[cb4ccb69c4ab2d3a]", "[ed84677812d3a606]", "0x20")
    self.bid64_to_binary64("1", "[cb4ccb69c4ab2d3a]", "[ed84677812d3a607]", "0x20")
    self.bid64_to_binary64("2", "[cb4ccb69c4ab2d3a]", "[ed84677812d3a606]", "0x20")
    self.bid64_to_binary64("3", "[cb4ccb69c4ab2d3a]", "[ed84677812d3a606]", "0x20")
    self.bid64_to_binary64("4", "[cb4ccb69c4ab2d3a]", "[ed84677812d3a606]", "0x20")
    self.bid64_to_binary64("0", "[ccfbdf142478c707]", "[f04944072c923fc2]", "0x20")
    self.bid64_to_binary64("1", "[ccfbdf142478c707]", "[f04944072c923fc3]", "0x20")
    self.bid64_to_binary64("2", "[ccfbdf142478c707]", "[f04944072c923fc2]", "0x20")
    self.bid64_to_binary64("3", "[ccfbdf142478c707]", "[f04944072c923fc2]", "0x20")
    self.bid64_to_binary64("4", "[ccfbdf142478c707]", "[f04944072c923fc2]", "0x20")
    self.bid64_to_binary64("0", "[cdac4e5df2ccc036]", "[f17547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("1", "[cdac4e5df2ccc036]", "[f17547166a3a2b10]", "0x20")
    self.bid64_to_binary64("2", "[cdac4e5df2ccc036]", "[f17547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("3", "[cdac4e5df2ccc036]", "[f17547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("4", "[cdac4e5df2ccc036]", "[f17547166a3a2b0f]", "0x20")
    self.bid64_to_binary64("0", "[ce86c82e21e4b3d5]", "[f2dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("1", "[ce86c82e21e4b3d5]", "[f2dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("2", "[ce86c82e21e4b3d5]", "[f2dbf51de62602b8]", "0x20")
    self.bid64_to_binary64("3", "[ce86c82e21e4b3d5]", "[f2dbf51de62602b8]", "0x20")
    self.bid64_to_binary64("4", "[ce86c82e21e4b3d5]", "[f2dbf51de62602b9]", "0x20")
    self.bid64_to_binary64("0", "[cf4e473f6e39be15]", "[f42c110e96414eec]", "0x20")
    self.bid64_to_binary64("1", "[cf4e473f6e39be15]", "[f42c110e96414eec]", "0x20")
    self.bid64_to_binary64("2", "[cf4e473f6e39be15]", "[f42c110e96414eeb]", "0x20")
    self.bid64_to_binary64("3", "[cf4e473f6e39be15]", "[f42c110e96414eeb]", "0x20")
    self.bid64_to_binary64("4", "[cf4e473f6e39be15]", "[f42c110e96414eec]", "0x20")
    self.bid64_to_binary64("0", "[d01ffb94728ec1b3]", "[f57dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("1", "[d01ffb94728ec1b3]", "[f57dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("2", "[d01ffb94728ec1b3]", "[f57dfa4dfde9f70d]", "0x20")
    self.bid64_to_binary64("3", "[d01ffb94728ec1b3]", "[f57dfa4dfde9f70d]", "0x20")
    self.bid64_to_binary64("4", "[d01ffb94728ec1b3]", "[f57dfa4dfde9f70e]", "0x20")
    self.bid64_to_binary64("0", "[d0c937c7233ad9ca]", "[f6a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("1", "[d0c937c7233ad9ca]", "[f6a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("2", "[d0c937c7233ad9ca]", "[f6a07ac23fca339b]", "0x20")
    self.bid64_to_binary64("3", "[d0c937c7233ad9ca]", "[f6a07ac23fca339b]", "0x20")
    self.bid64_to_binary64("4", "[d0c937c7233ad9ca]", "[f6a07ac23fca339c]", "0x20")
    self.bid64_to_binary64("0", "[d18edb73058f955a]", "[f7e954b88b26687c]", "0x20")
    self.bid64_to_binary64("1", "[d18edb73058f955a]", "[f7e954b88b26687d]", "0x20")
    self.bid64_to_binary64("2", "[d18edb73058f955a]", "[f7e954b88b26687c]", "0x20")
    self.bid64_to_binary64("3", "[d18edb73058f955a]", "[f7e954b88b26687c]", "0x20")
    self.bid64_to_binary64("4", "[d18edb73058f955a]", "[f7e954b88b26687c]", "0x20")
    self.bid64_to_binary64("0", "[d27bcc60266a98e1]", "[f96c3fe74995d448]", "0x20")
    self.bid64_to_binary64("1", "[d27bcc60266a98e1]", "[f96c3fe74995d448]", "0x20")
    self.bid64_to_binary64("2", "[d27bcc60266a98e1]", "[f96c3fe74995d447]", "0x20")
    self.bid64_to_binary64("3", "[d27bcc60266a98e1]", "[f96c3fe74995d447]", "0x20")
    self.bid64_to_binary64("4", "[d27bcc60266a98e1]", "[f96c3fe74995d448]", "0x20")
    self.bid64_to_binary64("0", "[d33cf2a660b312d7]", "[faac0e1413d40908]", "0x20")
    self.bid64_to_binary64("1", "[d33cf2a660b312d7]", "[faac0e1413d40908]", "0x20")
    self.bid64_to_binary64("2", "[d33cf2a660b312d7]", "[faac0e1413d40907]", "0x20")
    self.bid64_to_binary64("3", "[d33cf2a660b312d7]", "[faac0e1413d40907]", "0x20")
    self.bid64_to_binary64("4", "[d33cf2a660b312d7]", "[faac0e1413d40908]", "0x20")
    self.bid64_to_binary64("0", "[d3ef589c11503ae2]", "[fbdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("1", "[d3ef589c11503ae2]", "[fbdc5e1c16c19d26]", "0x20")
    self.bid64_to_binary64("2", "[d3ef589c11503ae2]", "[fbdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("3", "[d3ef589c11503ae2]", "[fbdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("4", "[d3ef589c11503ae2]", "[fbdc5e1c16c19d25]", "0x20")
    self.bid64_to_binary64("0", "[d4ac885821cb3e74]", "[fd1617f1418c7316]", "0x20")
    self.bid64_to_binary64("1", "[d4ac885821cb3e74]", "[fd1617f1418c7317]", "0x20")
    self.bid64_to_binary64("2", "[d4ac885821cb3e74]", "[fd1617f1418c7316]", "0x20")
    self.bid64_to_binary64("3", "[d4ac885821cb3e74]", "[fd1617f1418c7316]", "0x20")
    self.bid64_to_binary64("4", "[d4ac885821cb3e74]", "[fd1617f1418c7316]", "0x20")
    self.bid64_to_binary64("0", "[d59ba4e78c319775]", "[fe9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("1", "[d59ba4e78c319775]", "[fe9d0c2361d7af4c]", "0x20")
    self.bid64_to_binary64("2", "[d59ba4e78c319775]", "[fe9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("3", "[d59ba4e78c319775]", "[fe9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("4", "[d59ba4e78c319775]", "[fe9d0c2361d7af4b]", "0x20")
    self.bid64_to_binary64("0", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("1", "[d66662fe0cb7f7eb]", "[ffeffffffffffffc]", "0x20")
    self.bid64_to_binary64("2", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("3", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("4", "[d66662fe0cb7f7eb]", "[ffeffffffffffffb]", "0x20")
    self.bid64_to_binary64("0", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("2", "[d66662fe0cb7f7ec]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[d66662fe0cb7f7ec]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("4", "[d66662fe0cb7f7ec]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[e4f8cd51d574750b]", "[91a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("1", "[e4f8cd51d574750b]", "[91a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("2", "[e4f8cd51d574750b]", "[91a1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("3", "[e4f8cd51d574750b]", "[91a1167cf9686bf5]", "0x20")
    self.bid64_to_binary64("4", "[e4f8cd51d574750b]", "[91a1167cf9686bf6]", "0x20")
    self.bid64_to_binary64("0", "[e6ba5bcff2af15e5]", "[9d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("1", "[e6ba5bcff2af15e5]", "[9d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("2", "[e6ba5bcff2af15e5]", "[9d423fca433dcbe3]", "0x20")
    self.bid64_to_binary64("3", "[e6ba5bcff2af15e5]", "[9d423fca433dcbe3]", "0x20")
    self.bid64_to_binary64("4", "[e6ba5bcff2af15e5]", "[9d423fca433dcbe4]", "0x20")
    self.bid64_to_binary64("0", "[e7825427b548dfc7]", "[a272da500205778a]", "0x20")
    self.bid64_to_binary64("1", "[e7825427b548dfc7]", "[a272da500205778b]", "0x20")
    self.bid64_to_binary64("2", "[e7825427b548dfc7]", "[a272da500205778a]", "0x20")
    self.bid64_to_binary64("3", "[e7825427b548dfc7]", "[a272da500205778a]", "0x20")
    self.bid64_to_binary64("4", "[e7825427b548dfc7]", "[a272da500205778a]", "0x20")
    self.bid64_to_binary64("0", "[e8195b108182b498]", "[a663dc6227de9148]", "0x20")
    self.bid64_to_binary64("1", "[e8195b108182b498]", "[a663dc6227de9149]", "0x20")
    self.bid64_to_binary64("2", "[e8195b108182b498]", "[a663dc6227de9148]", "0x20")
    self.bid64_to_binary64("3", "[e8195b108182b498]", "[a663dc6227de9148]", "0x20")
    self.bid64_to_binary64("4", "[e8195b108182b498]", "[a663dc6227de9148]", "0x20")
    self.bid64_to_binary64("0", "[e912bc7cefdf17da]", "[acd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("1", "[e912bc7cefdf17da]", "[acd46518c19d90eb]", "0x20")
    self.bid64_to_binary64("2", "[e912bc7cefdf17da]", "[acd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("3", "[e912bc7cefdf17da]", "[acd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("4", "[e912bc7cefdf17da]", "[acd46518c19d90ea]", "0x20")
    self.bid64_to_binary64("0", "[ec0386f1dcd9db15]", "[c058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("1", "[ec0386f1dcd9db15]", "[c058ffff98a0532d]", "0x20")
    self.bid64_to_binary64("2", "[ec0386f1dcd9db15]", "[c058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("3", "[ec0386f1dcd9db15]", "[c058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("4", "[ec0386f1dcd9db15]", "[c058ffff98a0532c]", "0x20")
    self.bid64_to_binary64("0", "[ec3386f26fbe2f2b]", "[c197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("1", "[ec3386f26fbe2f2b]", "[c197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("2", "[ec3386f26fbe2f2b]", "[c197d783fffe1c41]", "0x20")
    self.bid64_to_binary64("3", "[ec3386f26fbe2f2b]", "[c197d783fffe1c41]", "0x20")
    self.bid64_to_binary64("4", "[ec3386f26fbe2f2b]", "[c197d783fffe1c42]", "0x20")
    self.bid64_to_binary64("0", "[eccb86f26f6ec68b]", "[c589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("1", "[eccb86f26f6ec68b]", "[c589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("2", "[eccb86f26f6ec68b]", "[c589d971e4c2b082]", "0x20")
    self.bid64_to_binary64("3", "[eccb86f26f6ec68b]", "[c589d971e4c2b082]", "0x20")
    self.bid64_to_binary64("4", "[eccb86f26f6ec68b]", "[c589d971e4c2b083]", "0x20")
    self.bid64_to_binary64("0", "[ecfb86261a3adff3]", "[c6c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("1", "[ecfb86261a3adff3]", "[c6c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("2", "[ecfb86261a3adff3]", "[c6c8a6555940ba6f]", "0x20")
    self.bid64_to_binary64("3", "[ecfb86261a3adff3]", "[c6c8a6555940ba6f]", "0x20")
    self.bid64_to_binary64("4", "[ecfb86261a3adff3]", "[c6c8a6555940ba70]", "0x20")
    self.bid64_to_binary64("0", "[ef21db37ad7fa007]", "[d51b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("1", "[ef21db37ad7fa007]", "[d51b3b180c0ae027]", "0x20")
    self.bid64_to_binary64("2", "[ef21db37ad7fa007]", "[d51b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("3", "[ef21db37ad7fa007]", "[d51b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("4", "[ef21db37ad7fa007]", "[d51b3b180c0ae026]", "0x20")
    self.bid64_to_binary64("0", "[f0dae3657476a586]", "[e086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("1", "[f0dae3657476a586]", "[e086e36058bfb9a1]", "0x20")
    self.bid64_to_binary64("2", "[f0dae3657476a586]", "[e086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("3", "[f0dae3657476a586]", "[e086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("4", "[f0dae3657476a586]", "[e086e36058bfb9a0]", "0x20")
    self.bid64_to_binary64("0", "[f30920d09ebfd32f]", "[ef0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("1", "[f30920d09ebfd32f]", "[ef0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("2", "[f30920d09ebfd32f]", "[ef0f7d6721f7f143]", "0x20")
    self.bid64_to_binary64("3", "[f30920d09ebfd32f]", "[ef0f7d6721f7f143]", "0x20")
    self.bid64_to_binary64("4", "[f30920d09ebfd32f]", "[ef0f7d6721f7f144]", "0x20")
    self.bid64_to_binary64("0", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("1", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("2", "[f7fb86f26fc0ffff]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("3", "[f7fb86f26fc0ffff]", "[ffefffffffffffff]", "0x28")
    self.bid64_to_binary64("4", "[f7fb86f26fc0ffff]", "[fff0000000000000]", "0x28")
    self.bid64_to_binary64("0", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("2", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("3", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("4", "[f800000000000000]", "[fff0000000000000]", "0x00")
    self.bid64_to_binary64("1", "[8967e7b160ef71c1]", "[8010000000000000]", "0x30")
  }

  private func bid64_to_binary64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDouble(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toDouble(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_binary80() {
    self.bid64_to_binary80("0", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("0", "[0000000000000001]", "[3AD4EA5DA4EC2A406827]", "20")
    self.bid64_to_binary80("0", "[002386F26FC10000]", "[3B0A81299BED14612869]", "20")
    self.bid64_to_binary80("0", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("0", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("0", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("0", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("0", "[0755F0E047737E1E]", "[3BCA8000000000000127]", "20")
    self.bid64_to_binary80("0", "[0755F0E1B78F093B]", "[3BCA800008637BD05C07]", "20")
    self.bid64_to_binary80("0", "[0768C6C01C9498D9]", "[3BCC8000000000000412]", "20")
    self.bid64_to_binary80("0", "[0768C6C0AFD2D07E]", "[3BCC800008637BD05C07]", "20")
    self.bid64_to_binary80("0", "[076D2A202ADEE545]", "[3BCCBFFFFFFFFFFFFED0]", "20")
    self.bid64_to_binary80("0", "[07718D80392931B1]", "[3BCCFFFFFFFFFFFFF98F]", "20")
    self.bid64_to_binary80("0", "[07718D815FA5A0FC]", "[3BCD800008637BD05C07]", "20")
    self.bid64_to_binary80("0", "[077A544055BDCA8A]", "[3BCDBFFFFFFFFFFFFED0]", "20")
    self.bid64_to_binary80("0", "[07C8FCAC257558EE]", "[3BD5FFFFFFFFFFFFF747]", "20")
    self.bid64_to_binary80("0", "[07C8FCACBC3C39D9]", "[3BD6800008637BD05AC6]", "20")
    self.bid64_to_binary80("0", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("0", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("0", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("0", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("0", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("0", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("0", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("0", "[2A263917877CEC05]", "[3F66FFFFFFFFFFFFF212]", "20")
    self.bid64_to_binary80("0", "[2A263917EFE491AE]", "[3F67800008637BD06037]", "20")
    self.bid64_to_binary80("0", "[2A38E45E1DF3B015]", "[3F68FFFFFFFFFFFFFC5A]", "20")
    self.bid64_to_binary80("0", "[2A38E45FBF9246B7]", "[3F69800008637BD05B13]", "20")
    self.bid64_to_binary80("0", "[2A43BBDAEAE48D9D]", "[3F69C000000000000A1F]", "20")
    self.bid64_to_binary80("0", "[2A44FA793930BCD1]", "[3F69FFFFFFFFFFFFFC5A]", "20")
    self.bid64_to_binary80("0", "[2A44FA798CB6DAF1]", "[3F6A800008637BD050CA]", "20")
    self.bid64_to_binary80("0", "[2A4777B5D5C91B3A]", "[3F6AC000000000000A1F]", "20")
    self.bid64_to_binary80("0", "[2A997D4DF19D6057]", "[3F72FFFFFFFFFFFFFBF4]", "20")
    self.bid64_to_binary80("0", "[2A997D4F9D41D1A1]", "[3F73800008637BD05C3D]", "20")
    self.bid64_to_binary80("0", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("0", "[3040000000000001]", "[3FD78CBCCC096F5088CC]", "20")
    self.bid64_to_binary80("0", "[30400001ffffffff]", "[3FF88CBCCC0928F222C7]", "20")
    self.bid64_to_binary80("0", "[30400003ffffffff]", "[3FF98CBCCC094C2155CA]", "20")
    self.bid64_to_binary80("0", "[30400007ffffffff]", "[3FFA8CBCCC095DB8EF4B]", "20")
    self.bid64_to_binary80("0", "[3040000fffffffff]", "[3FFB8CBCCC096684BC0B]", "20")
    self.bid64_to_binary80("0", "[3041ffffffffffff]", "[40088CBCCC096F50426E]", "20")
    self.bid64_to_binary80("0", "[304fffffffffffff]", "[400B8CBCCC096F508000]", "20")
    self.bid64_to_binary80("0", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("0", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("0", "[34AC13C157F0C34F]", "[407EFFBE76C8B43952C5]", "20")
    self.bid64_to_binary80("0", "[34B22246700E05BD]", "[407FC000000000000082]", "20")
    self.bid64_to_binary80("0", "[34C570AEBB37681F]", "[40818FFFFFFFFFFFFDBC]", "20")
    self.bid64_to_binary80("0", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("0", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("0", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("0", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("0", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("0", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("0", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("0", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("0", "[5666615B7DDB9FDE]", "[43FEFFBE76C8B439686D]", "20")
    self.bid64_to_binary80("0", "[5669947D1313F3E2]", "[43FFC0000000000002C6]", "20")
    self.bid64_to_binary80("0", "[567CBD77393BDBA6]", "[44019000000000000215]", "20")
    self.bid64_to_binary80("0", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("0", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("0", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("0", "[6C7386F26FC10000]", "[00000000000000000000]", "00")
    self.bid64_to_binary80("0", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("0", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("0", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("0", "[77FB86F26FC0FFFF]", "[44FDF5F75BD4DAB6CDB0]", "20")
    self.bid64_to_binary80("0", "[77fb86f26fc10000]", "[00000000000000000000]", "00")
    self.bid64_to_binary80("0", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[7c00000000000000]", "[7FFFC000000000000000]", "00")
    self.bid64_to_binary80("0", "[7c038D7EA4C67FFF]", "[7FFFF8D7EA4C67FFF000]", "00")
    self.bid64_to_binary80("0", "[7c038D7EA4C68000]", "[7FFFC000000000000000]", "00")
    self.bid64_to_binary80("0", "[7e00000000000000]", "[7FFFC000000000000000]", "01")
    self.bid64_to_binary80("0", "[7e038D7EA4C67FFF]", "[7FFFF8D7EA4C67FFF000]", "01")
    self.bid64_to_binary80("0", "[7e038D7EA4C68000]", "[7FFFC000000000000000]", "01")
    self.bid64_to_binary80("0", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("0", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("0", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("0", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("0", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("0", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("0", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("0", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("0", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("0", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("0", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("0", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("0", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("0", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("0", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("0", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("0", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("0", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("0", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("0", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("0", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("0", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("0", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("0", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("0", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("0", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("0", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("0", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("0", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[0000000000000001]", "[3ad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("1", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("1", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("1", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("1", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("1", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("1", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("1", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("1", "[19837fa0bfc30bed]", "[3daca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("1", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("1", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("1", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("1", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("1", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("1", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("1", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("1", "[38b6d99681faa149]", "[40ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("1", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("1", "[4078dbd18832f14c]", "[41b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("1", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("1", "[4c2c78c3a2c70833]", "[42efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("1", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("1", "[5404a46ec58033d7]", "[43bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("1", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("1", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("1", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("1", "[7212e93d1248086f]", "[428a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("1", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("1", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("1", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("1", "[81e0000000000001]", "[bb06d0289ce2dd61ca6e]", "0x20")
    self.bid64_to_binary80("1", "[8200000000000001]", "[bb0a8219620dca5d1e85]", "0x20")
    self.bid64_to_binary80("1", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b4]", "0x20")
    self.bid64_to_binary80("1", "[85e989eed46f5407]", "[bba498f6bc430c01f8eb]", "0x20")
    self.bid64_to_binary80("1", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89d]", "0x20")
    self.bid64_to_binary80("1", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd0a]", "0x20")
    self.bid64_to_binary80("1", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("1", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("1", "[9d4d4cceef639565]", "[be11f516476cc975b501]", "0x20")
    self.bid64_to_binary80("1", "[a1603e0f9904bfbf]", "[be79dc415b94e220b278]", "0x20")
    self.bid64_to_binary80("1", "[a5410fc0828b9660]", "[bee2edc1826fbc946764]", "0x20")
    self.bid64_to_binary80("1", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("1", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a353]", "0x20")
    self.bid64_to_binary80("1", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f3]", "0x20")
    self.bid64_to_binary80("1", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("1", "[bc89533dd7d11516]", "[c14ff00251426b9d3861]", "0x20")
    self.bid64_to_binary80("1", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("1", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb45]", "0x20")
    self.bid64_to_binary80("1", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("1", "[cff5cdff60c5392c]", "[c35482cd3744491323e5]", "0x20")
    self.bid64_to_binary80("1", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("1", "[d7fca12a33a33b13]", "[c4298276a5a2da731bca]", "0x20")
    self.bid64_to_binary80("1", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7423]", "0x20")
    self.bid64_to_binary80("1", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c6]", "0x20")
    self.bid64_to_binary80("1", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("1", "[f6f10688c9f158bb]", "[c49094667517a8a1048b]", "0x20")
    self.bid64_to_binary80("1", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb1]", "0x20")
    self.bid64_to_binary80("1", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("2", "[01e0000000000001]", "[3b06d0289ce2dd61ca6e]", "0x20")
    self.bid64_to_binary80("2", "[0200000000000001]", "[3b0a8219620dca5d1e85]", "0x20")
    self.bid64_to_binary80("2", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b4]", "0x20")
    self.bid64_to_binary80("2", "[05e989eed46f5407]", "[3ba498f6bc430c01f8eb]", "0x20")
    self.bid64_to_binary80("2", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89d]", "0x20")
    self.bid64_to_binary80("2", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd0a]", "0x20")
    self.bid64_to_binary80("2", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("2", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("2", "[1d4d4cceef639565]", "[3e11f516476cc975b501]", "0x20")
    self.bid64_to_binary80("2", "[21603e0f9904bfbf]", "[3e79dc415b94e220b278]", "0x20")
    self.bid64_to_binary80("2", "[25410fc0828b9660]", "[3ee2edc1826fbc946764]", "0x20")
    self.bid64_to_binary80("2", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("2", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a353]", "0x20")
    self.bid64_to_binary80("2", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("2", "[34d356548405c99f]", "[4082ffed12e96ae3e1f3]", "0x20")
    self.bid64_to_binary80("2", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("2", "[3c89533dd7d11516]", "[414ff00251426b9d3861]", "0x20")
    self.bid64_to_binary80("2", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("2", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb45]", "0x20")
    self.bid64_to_binary80("2", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("2", "[4ff5cdff60c5392c]", "[435482cd3744491323e5]", "0x20")
    self.bid64_to_binary80("2", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("2", "[57fca12a33a33b13]", "[44298276a5a2da731bca]", "0x20")
    self.bid64_to_binary80("2", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7423]", "0x20")
    self.bid64_to_binary80("2", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c6]", "0x20")
    self.bid64_to_binary80("2", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("2", "[76f10688c9f158bb]", "[449094667517a8a1048b]", "0x20")
    self.bid64_to_binary80("2", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb1]", "0x20")
    self.bid64_to_binary80("2", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[8000000000000001]", "[bad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("2", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("2", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("2", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("2", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("2", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("2", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("2", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("2", "[99837fa0bfc30bed]", "[bdaca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("2", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("2", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("2", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("2", "[acea34f9eb3fbe09]", "[bfb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("2", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("2", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("2", "[b8b6d99681faa149]", "[c0ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("2", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("2", "[c078dbd18832f14c]", "[c1b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("2", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("2", "[cc2c78c3a2c70833]", "[c2efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("2", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("2", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("2", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("2", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("2", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("2", "[f212e93d1248086f]", "[c28a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("2", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("2", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("2", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[0000000000000001]", "[3ad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("3", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("3", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("3", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("3", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("3", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("3", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("3", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("3", "[19837fa0bfc30bed]", "[3daca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("3", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("3", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("3", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("3", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("3", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("3", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("3", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("3", "[38b6d99681faa149]", "[40ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("3", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("3", "[4078dbd18832f14c]", "[41b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("3", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("3", "[4c2c78c3a2c70833]", "[42efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("3", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("3", "[5404a46ec58033d7]", "[43bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("3", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("3", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("3", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("3", "[7212e93d1248086f]", "[428a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("3", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("3", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("3", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[8000000000000001]", "[bad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("3", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("3", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("3", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("3", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("3", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("3", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("3", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("3", "[99837fa0bfc30bed]", "[bdaca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("3", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("3", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("3", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("3", "[acea34f9eb3fbe09]", "[bfb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("3", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("3", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("3", "[b8b6d99681faa149]", "[c0ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("3", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("3", "[c078dbd18832f14c]", "[c1b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("3", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("3", "[cc2c78c3a2c70833]", "[c2efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("3", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("3", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("3", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("3", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("3", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("3", "[f212e93d1248086f]", "[c28a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("3", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("3", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("3", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("4", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("4", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("4", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("4", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("4", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("4", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("4", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("4", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("4", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("4", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("4", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("4", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("4", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("4", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("4", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("4", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("4", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("4", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("4", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("4", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("4", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("4", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("4", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("4", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("4", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("4", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("4", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("4", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("4", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("4", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("4", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("4", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("4", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("4", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("4", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("4", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("4", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("4", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("4", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("4", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("4", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("4", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("4", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("4", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("4", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("4", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("4", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("4", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("4", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("4", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("4", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("4", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("4", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("4", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("4", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("4", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("4", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("1", "[0000000000000001]", "[3ad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("2", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("3", "[0000000000000001]", "[3ad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("4", "[0000000000000001]", "[3ad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("0", "[000000000481e5b5]", "[3aef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("1", "[000000000481e5b5]", "[3aef840c41e88ce51b52]", "0x20")
    self.bid64_to_binary80("2", "[000000000481e5b5]", "[3aef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("3", "[000000000481e5b5]", "[3aef840c41e88ce51b52]", "0x20")
    self.bid64_to_binary80("4", "[000000000481e5b5]", "[3aef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("0", "[00038d7ea4c67fff]", "[3b06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("1", "[00038d7ea4c67fff]", "[3b06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("2", "[00038d7ea4c67fff]", "[3b06d0289ce2dd618fd7]", "0x20")
    self.bid64_to_binary80("3", "[00038d7ea4c67fff]", "[3b06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("4", "[00038d7ea4c67fff]", "[3b06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("0", "[00180d0cf395d960]", "[3b09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("1", "[00180d0cf395d960]", "[3b09b025d0973e127b8b]", "0x20")
    self.bid64_to_binary80("2", "[00180d0cf395d960]", "[3b09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("3", "[00180d0cf395d960]", "[3b09b025d0973e127b8b]", "0x20")
    self.bid64_to_binary80("4", "[00180d0cf395d960]", "[3b09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("0", "[01065f280e451fc9]", "[3b228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("1", "[01065f280e451fc9]", "[3b228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("2", "[01065f280e451fc9]", "[3b228b13472c8260fa85]", "0x20")
    self.bid64_to_binary80("3", "[01065f280e451fc9]", "[3b228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("4", "[01065f280e451fc9]", "[3b228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("0", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("1", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("2", "[01e0000000000001]", "[3b06d0289ce2dd61ca6e]", "0x20")
    self.bid64_to_binary80("3", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("4", "[01e0000000000001]", "[3b06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("0", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("1", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("2", "[0200000000000001]", "[3b0a8219620dca5d1e85]", "0x20")
    self.bid64_to_binary80("3", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("4", "[0200000000000001]", "[3b0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("0", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("1", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("2", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b4]", "0x20")
    self.bid64_to_binary80("3", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("4", "[02017304a7852948]", "[3b3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("0", "[030122c1071ca197]", "[3b54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("1", "[030122c1071ca197]", "[3b54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("2", "[030122c1071ca197]", "[3b54dc2e667705af5f64]", "0x20")
    self.bid64_to_binary80("3", "[030122c1071ca197]", "[3b54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("4", "[030122c1071ca197]", "[3b54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("0", "[03fa5bc2d0c842dd]", "[3b70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("1", "[03fa5bc2d0c842dd]", "[3b70be5c0486d0a8f67f]", "0x20")
    self.bid64_to_binary80("2", "[03fa5bc2d0c842dd]", "[3b70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("3", "[03fa5bc2d0c842dd]", "[3b70be5c0486d0a8f67f]", "0x20")
    self.bid64_to_binary80("4", "[03fa5bc2d0c842dd]", "[3b70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("0", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("1", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("2", "[05e989eed46f5407]", "[3ba498f6bc430c01f8eb]", "0x20")
    self.bid64_to_binary80("3", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("4", "[05e989eed46f5407]", "[3ba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("0", "[06e24fee82ff5d07]", "[3bbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("1", "[06e24fee82ff5d07]", "[3bbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("2", "[06e24fee82ff5d07]", "[3bbcdd01df96b18b24a6]", "0x20")
    self.bid64_to_binary80("3", "[06e24fee82ff5d07]", "[3bbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("4", "[06e24fee82ff5d07]", "[3bbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("0", "[07e11aa2b5755dbb]", "[3bd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("1", "[07e11aa2b5755dbb]", "[3bd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("2", "[07e11aa2b5755dbb]", "[3bd69d3f32f52266da36]", "0x20")
    self.bid64_to_binary80("3", "[07e11aa2b5755dbb]", "[3bd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("4", "[07e11aa2b5755dbb]", "[3bd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("0", "[08c6269b6f5e080d]", "[3bf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("1", "[08c6269b6f5e080d]", "[3bf0828a8a66a3c3addf]", "0x20")
    self.bid64_to_binary80("2", "[08c6269b6f5e080d]", "[3bf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("3", "[08c6269b6f5e080d]", "[3bf0828a8a66a3c3addf]", "0x20")
    self.bid64_to_binary80("4", "[08c6269b6f5e080d]", "[3bf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("0", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("1", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("2", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89d]", "0x20")
    self.bid64_to_binary80("3", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("4", "[09ca6ac1bb258907]", "[3c0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("0", "[0ad039b35ba81aa1]", "[3c26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("1", "[0ad039b35ba81aa1]", "[3c26bf283fde4142c8c9]", "0x20")
    self.bid64_to_binary80("2", "[0ad039b35ba81aa1]", "[3c26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("3", "[0ad039b35ba81aa1]", "[3c26bf283fde4142c8c9]", "0x20")
    self.bid64_to_binary80("4", "[0ad039b35ba81aa1]", "[3c26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("0", "[0bc195f940bef1ed]", "[3c3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("1", "[0bc195f940bef1ed]", "[3c3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("2", "[0bc195f940bef1ed]", "[3c3ddeb8e0a97b8b5e21]", "0x20")
    self.bid64_to_binary80("3", "[0bc195f940bef1ed]", "[3c3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("4", "[0bc195f940bef1ed]", "[3c3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("0", "[0cc08717332a5319]", "[3c56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("1", "[0cc08717332a5319]", "[3c56dcdf44afe4a8d1b9]", "0x20")
    self.bid64_to_binary80("2", "[0cc08717332a5319]", "[3c56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("3", "[0cc08717332a5319]", "[3c56dcdf44afe4a8d1b9]", "0x20")
    self.bid64_to_binary80("4", "[0cc08717332a5319]", "[3c56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("0", "[0eb1dd4cb546b4dd]", "[3c8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("1", "[0eb1dd4cb546b4dd]", "[3c8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("2", "[0eb1dd4cb546b4dd]", "[3c8dcf897bc99e20a06d]", "0x20")
    self.bid64_to_binary80("3", "[0eb1dd4cb546b4dd]", "[3c8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("4", "[0eb1dd4cb546b4dd]", "[3c8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("0", "[0fbb79d1a45c195d]", "[3ca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("1", "[0fbb79d1a45c195d]", "[3ca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("2", "[0fbb79d1a45c195d]", "[3ca8edd1c3f2c0bb6acd]", "0x20")
    self.bid64_to_binary80("3", "[0fbb79d1a45c195d]", "[3ca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("4", "[0fbb79d1a45c195d]", "[3ca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("0", "[10c015f60a747594]", "[3cbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("1", "[10c015f60a747594]", "[3cbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("2", "[10c015f60a747594]", "[3cbeb1080775580797ad]", "0x20")
    self.bid64_to_binary80("3", "[10c015f60a747594]", "[3cbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("4", "[10c015f60a747594]", "[3cbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("0", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("1", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("2", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd0a]", "0x20")
    self.bid64_to_binary80("3", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("4", "[11a16a7d8e584721]", "[3cd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("0", "[12a03a03b9294519]", "[3cf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("1", "[12a03a03b9294519]", "[3cf1cfaf227051e5be53]", "0x20")
    self.bid64_to_binary80("2", "[12a03a03b9294519]", "[3cf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("3", "[12a03a03b9294519]", "[3cf1cfaf227051e5be53]", "0x20")
    self.bid64_to_binary80("4", "[12a03a03b9294519]", "[3cf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("0", "[1380f23a585e19f3]", "[3d0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("1", "[1380f23a585e19f3]", "[3d0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("2", "[1380f23a585e19f3]", "[3d0b8136dec12a865961]", "0x20")
    self.bid64_to_binary80("3", "[1380f23a585e19f3]", "[3d0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("4", "[1380f23a585e19f3]", "[3d0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("0", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("1", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("2", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("3", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("4", "[1584a79bc956ff3c]", "[3d42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("0", "[1683eac93730957f]", "[3d5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("1", "[1683eac93730957f]", "[3d5cdd3da2157d482b28]", "0x20")
    self.bid64_to_binary80("2", "[1683eac93730957f]", "[3d5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("3", "[1683eac93730957f]", "[3d5cdd3da2157d482b28]", "0x20")
    self.bid64_to_binary80("4", "[1683eac93730957f]", "[3d5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("0", "[17809126ad6a3191]", "[3d74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("1", "[17809126ad6a3191]", "[3d74bee0ec5b00d77c25]", "0x20")
    self.bid64_to_binary80("2", "[17809126ad6a3191]", "[3d74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("3", "[17809126ad6a3191]", "[3d74bee0ec5b00d77c25]", "0x20")
    self.bid64_to_binary80("4", "[17809126ad6a3191]", "[3d74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("0", "[186c7e8297928a1f]", "[3d909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("1", "[186c7e8297928a1f]", "[3d909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("2", "[186c7e8297928a1f]", "[3d909cb0f7a460b2c379]", "0x20")
    self.bid64_to_binary80("3", "[186c7e8297928a1f]", "[3d909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("4", "[186c7e8297928a1f]", "[3d909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("0", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("1", "[19837fa0bfc30bed]", "[3daca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("2", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("3", "[19837fa0bfc30bed]", "[3daca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("4", "[19837fa0bfc30bed]", "[3daca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("0", "[1a674d06ae6f67f1]", "[3dc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("1", "[1a674d06ae6f67f1]", "[3dc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("2", "[1a674d06ae6f67f1]", "[3dc4cb4ea26c1955c3c8]", "0x20")
    self.bid64_to_binary80("3", "[1a674d06ae6f67f1]", "[3dc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("4", "[1a674d06ae6f67f1]", "[3dc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("0", "[1b660d25f569a6e3]", "[3ddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("1", "[1b660d25f569a6e3]", "[3ddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("2", "[1b660d25f569a6e3]", "[3ddefb1a261e060ce7f8]", "0x20")
    self.bid64_to_binary80("3", "[1b660d25f569a6e3]", "[3ddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("4", "[1b660d25f569a6e3]", "[3ddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("0", "[1c60e4e58893346a]", "[3df6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("1", "[1c60e4e58893346a]", "[3df6dd25177c250ec592]", "0x20")
    self.bid64_to_binary80("2", "[1c60e4e58893346a]", "[3df6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("3", "[1c60e4e58893346a]", "[3df6dd25177c250ec592]", "0x20")
    self.bid64_to_binary80("4", "[1c60e4e58893346a]", "[3df6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("0", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("1", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("2", "[1d4d4cceef639565]", "[3e11f516476cc975b501]", "0x20")
    self.bid64_to_binary80("3", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("4", "[1d4d4cceef639565]", "[3e11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("0", "[1e51007c76e030d5]", "[3e2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("1", "[1e51007c76e030d5]", "[3e2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("2", "[1e51007c76e030d5]", "[3e2ce96ddfbf28fd8461]", "0x20")
    self.bid64_to_binary80("3", "[1e51007c76e030d5]", "[3e2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("4", "[1e51007c76e030d5]", "[3e2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("0", "[1f4913f0deea2bdb]", "[3e46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("1", "[1f4913f0deea2bdb]", "[3e46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("2", "[1f4913f0deea2bdb]", "[3e46b9b8ca1ca9abe1f6]", "0x20")
    self.bid64_to_binary80("3", "[1f4913f0deea2bdb]", "[3e46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("4", "[1f4913f0deea2bdb]", "[3e46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("0", "[2042923b55a17450]", "[3e5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("1", "[2042923b55a17450]", "[3e5f9cc57a73e26f9da0]", "0x20")
    self.bid64_to_binary80("2", "[2042923b55a17450]", "[3e5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("3", "[2042923b55a17450]", "[3e5f9cc57a73e26f9da0]", "0x20")
    self.bid64_to_binary80("4", "[2042923b55a17450]", "[3e5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("0", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("1", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("2", "[21603e0f9904bfbf]", "[3e79dc415b94e220b278]", "0x20")
    self.bid64_to_binary80("3", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("4", "[21603e0f9904bfbf]", "[3e79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("0", "[2240759990fa9957]", "[3e91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("1", "[2240759990fa9957]", "[3e91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("2", "[2240759990fa9957]", "[3e91f8c4af9085b92793]", "0x20")
    self.bid64_to_binary80("3", "[2240759990fa9957]", "[3e91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("4", "[2240759990fa9957]", "[3e91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("0", "[242743748f4e7c51]", "[3ec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("1", "[242743748f4e7c51]", "[3ec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("2", "[242743748f4e7c51]", "[3ec7da59ba4da57cebb3]", "0x20")
    self.bid64_to_binary80("3", "[242743748f4e7c51]", "[3ec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("4", "[242743748f4e7c51]", "[3ec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("0", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("1", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("2", "[25410fc0828b9660]", "[3ee2edc1826fbc946764]", "0x20")
    self.bid64_to_binary80("3", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("4", "[25410fc0828b9660]", "[3ee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("0", "[2623cbeb33ad5d6e]", "[3efbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("1", "[2623cbeb33ad5d6e]", "[3efbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("2", "[2623cbeb33ad5d6e]", "[3efbfd6b2eec96b9337b]", "0x20")
    self.bid64_to_binary80("3", "[2623cbeb33ad5d6e]", "[3efbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("4", "[2623cbeb33ad5d6e]", "[3efbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("0", "[272124d65a445d2a]", "[3f14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("1", "[272124d65a445d2a]", "[3f14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("2", "[272124d65a445d2a]", "[3f14e38deba3cea2f10d]", "0x20")
    self.bid64_to_binary80("3", "[272124d65a445d2a]", "[3f14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("4", "[272124d65a445d2a]", "[3f14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("0", "[280bdff99b6c7f83]", "[3f2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("1", "[280bdff99b6c7f83]", "[3f2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("2", "[280bdff99b6c7f83]", "[3f2fb000a5cbda7f82f1]", "0x20")
    self.bid64_to_binary80("3", "[280bdff99b6c7f83]", "[3f2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("4", "[280bdff99b6c7f83]", "[3f2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("0", "[2a0bc9f26111b76d]", "[3f64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("1", "[2a0bc9f26111b76d]", "[3f64c1fc73b80da40f5d]", "0x20")
    self.bid64_to_binary80("2", "[2a0bc9f26111b76d]", "[3f64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("3", "[2a0bc9f26111b76d]", "[3f64c1fc73b80da40f5d]", "0x20")
    self.bid64_to_binary80("4", "[2a0bc9f26111b76d]", "[3f64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("0", "[2b03fe4ab6bf0f6c]", "[3f7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("1", "[2b03fe4ab6bf0f6c]", "[3f7dc3d50be7604908b2]", "0x20")
    self.bid64_to_binary80("2", "[2b03fe4ab6bf0f6c]", "[3f7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("3", "[2b03fe4ab6bf0f6c]", "[3f7dc3d50be7604908b2]", "0x20")
    self.bid64_to_binary80("4", "[2b03fe4ab6bf0f6c]", "[3f7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("0", "[2c0135f19da7d301]", "[3f96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("1", "[2c0135f19da7d301]", "[3f96b0f256bf2f71da34]", "0x20")
    self.bid64_to_binary80("2", "[2c0135f19da7d301]", "[3f96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("3", "[2c0135f19da7d301]", "[3f96b0f256bf2f71da34]", "0x20")
    self.bid64_to_binary80("4", "[2c0135f19da7d301]", "[3f96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("0", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("1", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("2", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("3", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("4", "[2cea34f9eb3fbe09]", "[3fb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("0", "[2dff71ffb1056361]", "[3fccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("1", "[2dff71ffb1056361]", "[3fccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("2", "[2dff71ffb1056361]", "[3fccff1d5961ac8e2db9]", "0x20")
    self.bid64_to_binary80("3", "[2dff71ffb1056361]", "[3fccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("4", "[2dff71ffb1056361]", "[3fccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("0", "[2ef3b8b367cbe982]", "[3fe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("1", "[2ef3b8b367cbe982]", "[3fe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("2", "[2ef3b8b367cbe982]", "[3fe6ee6b0c2cb5f187f3]", "0x20")
    self.bid64_to_binary80("3", "[2ef3b8b367cbe982]", "[3fe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("4", "[2ef3b8b367cbe982]", "[3fe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("0", "[2fee35f4166a149b]", "[4000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("1", "[2fee35f4166a149b]", "[4000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("2", "[2fee35f4166a149b]", "[4000ffff8b23b82010a3]", "0x20")
    self.bid64_to_binary80("3", "[2fee35f4166a149b]", "[4000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("4", "[2fee35f4166a149b]", "[4000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("0", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[30c00000004d7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("1", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("2", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a353]", "0x20")
    self.bid64_to_binary80("3", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("4", "[30e4c4b3ffff3dd0]", "[4019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("0", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31a000000000000f]", "[3fffc000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000000]", "[00000000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000001]", "[3fff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c0000000000040]", "[40058000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c00000000003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("1", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("2", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("3", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("4", "[31c00000000003e8]", "[4008fa00000000000000]", "0x00")
    self.bid64_to_binary80("0", "[31cffffffffffffa]", "[4032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("1", "[31cffffffffffffa]", "[4032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("2", "[31cffffffffffffa]", "[4032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("3", "[31cffffffffffffa]", "[4032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("4", "[31cffffffffffffa]", "[4032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("0", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("1", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("2", "[34d356548405c99f]", "[4082ffed12e96ae3e1f3]", "0x20")
    self.bid64_to_binary80("3", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("4", "[34d356548405c99f]", "[4082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("0", "[35bdaaab8fd29f30]", "[409aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("1", "[35bdaaab8fd29f30]", "[409aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("2", "[35bdaaab8fd29f30]", "[409aea076240a41c5c00]", "0x20")
    self.bid64_to_binary80("3", "[35bdaaab8fd29f30]", "[409aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("4", "[35bdaaab8fd29f30]", "[409aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("0", "[36af4ccdd8311634]", "[40b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("1", "[36af4ccdd8311634]", "[40b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("2", "[36af4ccdd8311634]", "[40b4b3d9cf89a52da47a]", "0x20")
    self.bid64_to_binary80("3", "[36af4ccdd8311634]", "[40b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("4", "[36af4ccdd8311634]", "[40b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("0", "[37be6309ea8f3c66]", "[40d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("1", "[37be6309ea8f3c66]", "[40d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("2", "[37be6309ea8f3c66]", "[40d08510dc06ea0d20c7]", "0x20")
    self.bid64_to_binary80("3", "[37be6309ea8f3c66]", "[40d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("4", "[37be6309ea8f3c66]", "[40d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("0", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("1", "[38b6d99681faa149]", "[40ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("2", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("3", "[38b6d99681faa149]", "[40ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("4", "[38b6d99681faa149]", "[40ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("0", "[3984c0a08a8d6f72]", "[40ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("1", "[3984c0a08a8d6f72]", "[40ff93df7212707c7c4f]", "0x20")
    self.bid64_to_binary80("2", "[3984c0a08a8d6f72]", "[40ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("3", "[3984c0a08a8d6f72]", "[40ff93df7212707c7c4f]", "0x20")
    self.bid64_to_binary80("4", "[3984c0a08a8d6f72]", "[40ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("0", "[3aa65c0d9b8829c5]", "[411db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("1", "[3aa65c0d9b8829c5]", "[411db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("2", "[3aa65c0d9b8829c5]", "[411db84a018c68c4f2ae]", "0x20")
    self.bid64_to_binary80("3", "[3aa65c0d9b8829c5]", "[411db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("4", "[3aa65c0d9b8829c5]", "[411db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("0", "[3b95ecf21370e88a]", "[4136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("1", "[3b95ecf21370e88a]", "[4136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("2", "[3b95ecf21370e88a]", "[4136bd5a5828b57eaec3]", "0x20")
    self.bid64_to_binary80("3", "[3b95ecf21370e88a]", "[4136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("4", "[3b95ecf21370e88a]", "[4136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("0", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("1", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("2", "[3c89533dd7d11516]", "[414ff00251426b9d3861]", "0x20")
    self.bid64_to_binary80("3", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("4", "[3c89533dd7d11516]", "[414ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("0", "[3e85df3d86ed8b27]", "[4184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("1", "[3e85df3d86ed8b27]", "[4184a7ca9e6e3da82541]", "0x20")
    self.bid64_to_binary80("2", "[3e85df3d86ed8b27]", "[4184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("3", "[3e85df3d86ed8b27]", "[4184a7ca9e6e3da82541]", "0x20")
    self.bid64_to_binary80("4", "[3e85df3d86ed8b27]", "[4184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("0", "[3f8aa4ce7b1a9b39]", "[419fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("1", "[3f8aa4ce7b1a9b39]", "[419fe29a95ab726f358f]", "0x20")
    self.bid64_to_binary80("2", "[3f8aa4ce7b1a9b39]", "[419fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("3", "[3f8aa4ce7b1a9b39]", "[419fe29a95ab726f358f]", "0x20")
    self.bid64_to_binary80("4", "[3f8aa4ce7b1a9b39]", "[419fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("0", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("1", "[4078dbd18832f14c]", "[41b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("2", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("3", "[4078dbd18832f14c]", "[41b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("4", "[4078dbd18832f14c]", "[41b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("0", "[416cd531e693deac]", "[41d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("1", "[416cd531e693deac]", "[41d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("2", "[416cd531e693deac]", "[41d1f2a836212b3ad5ef]", "0x20")
    self.bid64_to_binary80("3", "[416cd531e693deac]", "[41d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("4", "[416cd531e693deac]", "[41d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("0", "[4377f25698022b2f]", "[4207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("1", "[4377f25698022b2f]", "[4207fb5c3529c178d7c0]", "0x20")
    self.bid64_to_binary80("2", "[4377f25698022b2f]", "[4207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("3", "[4377f25698022b2f]", "[4207fb5c3529c178d7c0]", "0x20")
    self.bid64_to_binary80("4", "[4377f25698022b2f]", "[4207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("0", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("1", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("2", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb45]", "0x20")
    self.bid64_to_binary80("3", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("4", "[4451c3505acd6bf6]", "[421ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("0", "[454b41253f1f7042]", "[4238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("1", "[454b41253f1f7042]", "[4238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("2", "[454b41253f1f7042]", "[4238d1d96977c8b18f89]", "0x20")
    self.bid64_to_binary80("3", "[454b41253f1f7042]", "[4238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("4", "[454b41253f1f7042]", "[4238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("0", "[464d879135d87d4e]", "[4253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("1", "[464d879135d87d4e]", "[4253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("2", "[464d879135d87d4e]", "[4253bbf4b6f9edb01b35]", "0x20")
    self.bid64_to_binary80("3", "[464d879135d87d4e]", "[4253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("4", "[464d879135d87d4e]", "[4253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("0", "[4754ec0b28e85fcf]", "[426ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("1", "[4754ec0b28e85fcf]", "[426ed88ddfb51dc5863b]", "0x20")
    self.bid64_to_binary80("2", "[4754ec0b28e85fcf]", "[426ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("3", "[4754ec0b28e85fcf]", "[426ed88ddfb51dc5863b]", "0x20")
    self.bid64_to_binary80("4", "[4754ec0b28e85fcf]", "[426ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("0", "[4947c5d69c4d35ec]", "[42a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("1", "[4947c5d69c4d35ec]", "[42a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("2", "[4947c5d69c4d35ec]", "[42a2b2a407a98b63733a]", "0x20")
    self.bid64_to_binary80("3", "[4947c5d69c4d35ec]", "[42a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("4", "[4947c5d69c4d35ec]", "[42a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("0", "[4a46bd6b3bd66460]", "[42bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("1", "[4a46bd6b3bd66460]", "[42bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("2", "[4a46bd6b3bd66460]", "[42bce6d274f1beb0bcba]", "0x20")
    self.bid64_to_binary80("3", "[4a46bd6b3bd66460]", "[42bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("4", "[4a46bd6b3bd66460]", "[42bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("0", "[4b2e4f5b8693901a]", "[42d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("1", "[4b2e4f5b8693901a]", "[42d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("2", "[4b2e4f5b8693901a]", "[42d5920db85ccbd3fb98]", "0x20")
    self.bid64_to_binary80("3", "[4b2e4f5b8693901a]", "[42d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("4", "[4b2e4f5b8693901a]", "[42d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("0", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("1", "[4c2c78c3a2c70833]", "[42efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("2", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("3", "[4c2c78c3a2c70833]", "[42efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("4", "[4c2c78c3a2c70833]", "[42efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("0", "[4d3ff33e8dcd1212]", "[430bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("1", "[4d3ff33e8dcd1212]", "[430bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("2", "[4d3ff33e8dcd1212]", "[430bb505194511dcd5d0]", "0x20")
    self.bid64_to_binary80("3", "[4d3ff33e8dcd1212]", "[430bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("4", "[4d3ff33e8dcd1212]", "[430bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("0", "[4e33b37156817df1]", "[4325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("1", "[4e33b37156817df1]", "[4325a6537ac9a87d5dfc]", "0x20")
    self.bid64_to_binary80("2", "[4e33b37156817df1]", "[4325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("3", "[4e33b37156817df1]", "[4325a6537ac9a87d5dfc]", "0x20")
    self.bid64_to_binary80("4", "[4e33b37156817df1]", "[4325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("0", "[4f250db878ed7ad3]", "[433dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("1", "[4f250db878ed7ad3]", "[433dfe4deda3dbd9736f]", "0x20")
    self.bid64_to_binary80("2", "[4f250db878ed7ad3]", "[433dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("3", "[4f250db878ed7ad3]", "[433dfe4deda3dbd9736f]", "0x20")
    self.bid64_to_binary80("4", "[4f250db878ed7ad3]", "[433dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("0", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("1", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("2", "[4ff5cdff60c5392c]", "[435482cd3744491323e5]", "0x20")
    self.bid64_to_binary80("3", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("4", "[4ff5cdff60c5392c]", "[435482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("0", "[50ebe619dea131d4]", "[436dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("1", "[50ebe619dea131d4]", "[436dd4b9859fba5ce7cb]", "0x20")
    self.bid64_to_binary80("2", "[50ebe619dea131d4]", "[436dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("3", "[50ebe619dea131d4]", "[436dd4b9859fba5ce7cb]", "0x20")
    self.bid64_to_binary80("4", "[50ebe619dea131d4]", "[436dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("0", "[5204a2f4e35d6ccf]", "[438a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("1", "[5204a2f4e35d6ccf]", "[438a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("2", "[5204a2f4e35d6ccf]", "[438a9a659b03150c0ee1]", "0x20")
    self.bid64_to_binary80("3", "[5204a2f4e35d6ccf]", "[438a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("4", "[5204a2f4e35d6ccf]", "[438a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("0", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("1", "[5404a46ec58033d7]", "[43bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("2", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("3", "[5404a46ec58033d7]", "[43bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("4", "[5404a46ec58033d7]", "[43bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("0", "[55048b70072872e3]", "[43d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("1", "[55048b70072872e3]", "[43d9fa5df6e9ad0f05db]", "0x20")
    self.bid64_to_binary80("2", "[55048b70072872e3]", "[43d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("3", "[55048b70072872e3]", "[43d9fa5df6e9ad0f05db]", "0x20")
    self.bid64_to_binary80("4", "[55048b70072872e3]", "[43d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("0", "[55ea57ec51cf7f0c]", "[43f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("1", "[55ea57ec51cf7f0c]", "[43f2a9d1fddb420e53ff]", "0x20")
    self.bid64_to_binary80("2", "[55ea57ec51cf7f0c]", "[43f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("3", "[55ea57ec51cf7f0c]", "[43f2a9d1fddb420e53ff]", "0x20")
    self.bid64_to_binary80("4", "[55ea57ec51cf7f0c]", "[43f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("0", "[56eeefbc2ef65193]", "[440db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("1", "[56eeefbc2ef65193]", "[440db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("2", "[56eeefbc2ef65193]", "[440db6b5bc630b8b5c05]", "0x20")
    self.bid64_to_binary80("3", "[56eeefbc2ef65193]", "[440db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("4", "[56eeefbc2ef65193]", "[440db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("0", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("1", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("2", "[57fca12a33a33b13]", "[44298276a5a2da731bca]", "0x20")
    self.bid64_to_binary80("3", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("4", "[57fca12a33a33b13]", "[44298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("0", "[58cd5b5dc7c3ec12]", "[443f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("1", "[58cd5b5dc7c3ec12]", "[443f911e1c4a535a9cd3]", "0x20")
    self.bid64_to_binary80("2", "[58cd5b5dc7c3ec12]", "[443f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("3", "[58cd5b5dc7c3ec12]", "[443f911e1c4a535a9cd3]", "0x20")
    self.bid64_to_binary80("4", "[58cd5b5dc7c3ec12]", "[443f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("0", "[59e5488d49ebd9bf]", "[445bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("1", "[59e5488d49ebd9bf]", "[445bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("2", "[59e5488d49ebd9bf]", "[445bd5d6fe56fa9bba96]", "0x20")
    self.bid64_to_binary80("3", "[59e5488d49ebd9bf]", "[445bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("4", "[59e5488d49ebd9bf]", "[445bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("0", "[5ad5321af6dfecb2]", "[4474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("1", "[5ad5321af6dfecb2]", "[4474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("2", "[5ad5321af6dfecb2]", "[4474ffaa7e7671435927]", "0x20")
    self.bid64_to_binary80("3", "[5ad5321af6dfecb2]", "[4474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("4", "[5ad5321af6dfecb2]", "[4474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("0", "[5dc5ab163f1854ce]", "[44c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("1", "[5dc5ab163f1854ce]", "[44c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("2", "[5dc5ab163f1854ce]", "[44c2e2395221721adf2f]", "0x20")
    self.bid64_to_binary80("3", "[5dc5ab163f1854ce]", "[44c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("4", "[5dc5ab163f1854ce]", "[44c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("0", "[5ec55e9fba7a5f03]", "[44dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("1", "[5ec55e9fba7a5f03]", "[44dd9fab1f5b75a5634a]", "0x20")
    self.bid64_to_binary80("2", "[5ec55e9fba7a5f03]", "[44dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("3", "[5ec55e9fba7a5f03]", "[44dd9fab1f5b75a5634a]", "0x20")
    self.bid64_to_binary80("4", "[5ec55e9fba7a5f03]", "[44dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("0", "[61394fb19831a49b]", "[3b8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("1", "[61394fb19831a49b]", "[3b8bb33d998ac2157406]", "0x20")
    self.bid64_to_binary80("2", "[61394fb19831a49b]", "[3b8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("3", "[61394fb19831a49b]", "[3b8bb33d998ac2157406]", "0x20")
    self.bid64_to_binary80("4", "[61394fb19831a49b]", "[3b8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("0", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("1", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("2", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7423]", "0x20")
    self.bid64_to_binary80("3", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("4", "[63691b9818a0a8c3]", "[3c74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("0", "[6521b6eb980020e3]", "[3d2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("1", "[6521b6eb980020e3]", "[3d2ad66501c7a0b2be01]", "0x20")
    self.bid64_to_binary80("2", "[6521b6eb980020e3]", "[3d2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("3", "[6521b6eb980020e3]", "[3d2ad66501c7a0b2be01]", "0x20")
    self.bid64_to_binary80("4", "[6521b6eb980020e3]", "[3d2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("0", "[68ca6c944c4c40e3]", "[3eafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("1", "[68ca6c944c4c40e3]", "[3eafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("2", "[68ca6c944c4c40e3]", "[3eafad9ddce5c92a2c59]", "0x20")
    self.bid64_to_binary80("3", "[68ca6c944c4c40e3]", "[3eafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("4", "[68ca6c944c4c40e3]", "[3eafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("0", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("1", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("2", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c6]", "0x20")
    self.bid64_to_binary80("3", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("4", "[6a437445d0d032f1]", "[3f4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("0", "[6cb386f26fc0ffdf]", "[404ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("1", "[6cb386f26fc0ffdf]", "[404ed3c21bceccecdc4d]", "0x20")
    self.bid64_to_binary80("2", "[6cb386f26fc0ffdf]", "[404ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("3", "[6cb386f26fc0ffdf]", "[404ed3c21bceccecdc4d]", "0x20")
    self.bid64_to_binary80("4", "[6cb386f26fc0ffdf]", "[404ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("0", "[6cf386f26f265fbf]", "[40699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("1", "[6cf386f26f265fbf]", "[40699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("2", "[6cf386f26f265fbf]", "[40699dc5ada57cc34f1e]", "0x20")
    self.bid64_to_binary80("3", "[6cf386f26f265fbf]", "[40699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("4", "[6cf386f26f265fbf]", "[40699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("0", "[6f628329b38d7ebf]", "[416ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("1", "[6f628329b38d7ebf]", "[416ca574181c021ccdad]", "0x20")
    self.bid64_to_binary80("2", "[6f628329b38d7ebf]", "[416ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("3", "[6f628329b38d7ebf]", "[416ca574181c021ccdad]", "0x20")
    self.bid64_to_binary80("4", "[6f628329b38d7ebf]", "[416ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("0", "[709924e5b7734c16]", "[41ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("1", "[709924e5b7734c16]", "[41ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("2", "[709924e5b7734c16]", "[41ede9795845525e80eb]", "0x20")
    self.bid64_to_binary80("3", "[709924e5b7734c16]", "[41ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("4", "[709924e5b7734c16]", "[41ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("0", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("1", "[7212e93d1248086f]", "[428a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("2", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("3", "[7212e93d1248086f]", "[428a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("4", "[7212e93d1248086f]", "[428a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("0", "[74c02bb8ac307968]", "[43a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("1", "[74c02bb8ac307968]", "[43a7c78ae40727b9257f]", "0x20")
    self.bid64_to_binary80("2", "[74c02bb8ac307968]", "[43a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("3", "[74c02bb8ac307968]", "[43a7c78ae40727b9257f]", "0x20")
    self.bid64_to_binary80("4", "[74c02bb8ac307968]", "[43a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("0", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("1", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("2", "[76f10688c9f158bb]", "[449094667517a8a1048b]", "0x20")
    self.bid64_to_binary80("3", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("4", "[76f10688c9f158bb]", "[449094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("0", "[77324dfa209ff4e5]", "[44aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("1", "[77324dfa209ff4e5]", "[44aae5b2b249b1954bea]", "0x20")
    self.bid64_to_binary80("2", "[77324dfa209ff4e5]", "[44aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("3", "[77324dfa209ff4e5]", "[44aae5b2b249b1954bea]", "0x20")
    self.bid64_to_binary80("4", "[77324dfa209ff4e5]", "[44aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("0", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("1", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("2", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb1]", "0x20")
    self.bid64_to_binary80("3", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("4", "[77fb86f26fc0ffff]", "[44fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("0", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[7800000000000000]", "[7fff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[7c03080000000000]", "[7ffff080000000000000]", "0x00")
    self.bid64_to_binary80("0", "[7e03080000000000]", "[7ffff080000000000000]", "0x01")
    self.bid64_to_binary80("0", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("1", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("2", "[8000000000000001]", "[bad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("3", "[8000000000000001]", "[bad4ea5da4ec2a406826]", "0x20")
    self.bid64_to_binary80("4", "[8000000000000001]", "[bad4ea5da4ec2a406827]", "0x20")
    self.bid64_to_binary80("0", "[800000000481e5b5]", "[baef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("1", "[800000000481e5b5]", "[baef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("2", "[800000000481e5b5]", "[baef840c41e88ce51b52]", "0x20")
    self.bid64_to_binary80("3", "[800000000481e5b5]", "[baef840c41e88ce51b52]", "0x20")
    self.bid64_to_binary80("4", "[800000000481e5b5]", "[baef840c41e88ce51b53]", "0x20")
    self.bid64_to_binary80("0", "[80038d7ea4c67fff]", "[bb06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("1", "[80038d7ea4c67fff]", "[bb06d0289ce2dd618fd7]", "0x20")
    self.bid64_to_binary80("2", "[80038d7ea4c67fff]", "[bb06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("3", "[80038d7ea4c67fff]", "[bb06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("4", "[80038d7ea4c67fff]", "[bb06d0289ce2dd618fd6]", "0x20")
    self.bid64_to_binary80("0", "[80180d0cf395d960]", "[bb09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("1", "[80180d0cf395d960]", "[bb09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("2", "[80180d0cf395d960]", "[bb09b025d0973e127b8b]", "0x20")
    self.bid64_to_binary80("3", "[80180d0cf395d960]", "[bb09b025d0973e127b8b]", "0x20")
    self.bid64_to_binary80("4", "[80180d0cf395d960]", "[bb09b025d0973e127b8c]", "0x20")
    self.bid64_to_binary80("0", "[81065f280e451fc9]", "[bb228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("1", "[81065f280e451fc9]", "[bb228b13472c8260fa85]", "0x20")
    self.bid64_to_binary80("2", "[81065f280e451fc9]", "[bb228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("3", "[81065f280e451fc9]", "[bb228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("4", "[81065f280e451fc9]", "[bb228b13472c8260fa84]", "0x20")
    self.bid64_to_binary80("0", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("1", "[81e0000000000001]", "[bb06d0289ce2dd61ca6e]", "0x20")
    self.bid64_to_binary80("2", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("3", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("4", "[81e0000000000001]", "[bb06d0289ce2dd61ca6d]", "0x20")
    self.bid64_to_binary80("0", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("1", "[8200000000000001]", "[bb0a8219620dca5d1e85]", "0x20")
    self.bid64_to_binary80("2", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("3", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("4", "[8200000000000001]", "[bb0a8219620dca5d1e84]", "0x20")
    self.bid64_to_binary80("0", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("1", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b4]", "0x20")
    self.bid64_to_binary80("2", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("3", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("4", "[82017304a7852948]", "[bb3abc8d26a1bf9db4b3]", "0x20")
    self.bid64_to_binary80("0", "[830122c1071ca197]", "[bb54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("1", "[830122c1071ca197]", "[bb54dc2e667705af5f64]", "0x20")
    self.bid64_to_binary80("2", "[830122c1071ca197]", "[bb54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("3", "[830122c1071ca197]", "[bb54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("4", "[830122c1071ca197]", "[bb54dc2e667705af5f63]", "0x20")
    self.bid64_to_binary80("0", "[83fa5bc2d0c842dd]", "[bb70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("1", "[83fa5bc2d0c842dd]", "[bb70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("2", "[83fa5bc2d0c842dd]", "[bb70be5c0486d0a8f67f]", "0x20")
    self.bid64_to_binary80("3", "[83fa5bc2d0c842dd]", "[bb70be5c0486d0a8f67f]", "0x20")
    self.bid64_to_binary80("4", "[83fa5bc2d0c842dd]", "[bb70be5c0486d0a8f680]", "0x20")
    self.bid64_to_binary80("0", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("1", "[85e989eed46f5407]", "[bba498f6bc430c01f8eb]", "0x20")
    self.bid64_to_binary80("2", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("3", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("4", "[85e989eed46f5407]", "[bba498f6bc430c01f8ea]", "0x20")
    self.bid64_to_binary80("0", "[86e24fee82ff5d07]", "[bbbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("1", "[86e24fee82ff5d07]", "[bbbcdd01df96b18b24a6]", "0x20")
    self.bid64_to_binary80("2", "[86e24fee82ff5d07]", "[bbbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("3", "[86e24fee82ff5d07]", "[bbbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("4", "[86e24fee82ff5d07]", "[bbbcdd01df96b18b24a5]", "0x20")
    self.bid64_to_binary80("0", "[87e11aa2b5755dbb]", "[bbd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("1", "[87e11aa2b5755dbb]", "[bbd69d3f32f52266da36]", "0x20")
    self.bid64_to_binary80("2", "[87e11aa2b5755dbb]", "[bbd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("3", "[87e11aa2b5755dbb]", "[bbd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("4", "[87e11aa2b5755dbb]", "[bbd69d3f32f52266da35]", "0x20")
    self.bid64_to_binary80("0", "[88c6269b6f5e080d]", "[bbf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("1", "[88c6269b6f5e080d]", "[bbf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("2", "[88c6269b6f5e080d]", "[bbf0828a8a66a3c3addf]", "0x20")
    self.bid64_to_binary80("3", "[88c6269b6f5e080d]", "[bbf0828a8a66a3c3addf]", "0x20")
    self.bid64_to_binary80("4", "[88c6269b6f5e080d]", "[bbf0828a8a66a3c3ade0]", "0x20")
    self.bid64_to_binary80("0", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("1", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89d]", "0x20")
    self.bid64_to_binary80("2", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("3", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("4", "[89ca6ac1bb258907]", "[bc0ba4b88f8d7381c89c]", "0x20")
    self.bid64_to_binary80("0", "[8ad039b35ba81aa1]", "[bc26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("1", "[8ad039b35ba81aa1]", "[bc26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("2", "[8ad039b35ba81aa1]", "[bc26bf283fde4142c8c9]", "0x20")
    self.bid64_to_binary80("3", "[8ad039b35ba81aa1]", "[bc26bf283fde4142c8c9]", "0x20")
    self.bid64_to_binary80("4", "[8ad039b35ba81aa1]", "[bc26bf283fde4142c8ca]", "0x20")
    self.bid64_to_binary80("0", "[8bc195f940bef1ed]", "[bc3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("1", "[8bc195f940bef1ed]", "[bc3ddeb8e0a97b8b5e21]", "0x20")
    self.bid64_to_binary80("2", "[8bc195f940bef1ed]", "[bc3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("3", "[8bc195f940bef1ed]", "[bc3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("4", "[8bc195f940bef1ed]", "[bc3ddeb8e0a97b8b5e20]", "0x20")
    self.bid64_to_binary80("0", "[8cc08717332a5319]", "[bc56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("1", "[8cc08717332a5319]", "[bc56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("2", "[8cc08717332a5319]", "[bc56dcdf44afe4a8d1b9]", "0x20")
    self.bid64_to_binary80("3", "[8cc08717332a5319]", "[bc56dcdf44afe4a8d1b9]", "0x20")
    self.bid64_to_binary80("4", "[8cc08717332a5319]", "[bc56dcdf44afe4a8d1ba]", "0x20")
    self.bid64_to_binary80("0", "[8eb1dd4cb546b4dd]", "[bc8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("1", "[8eb1dd4cb546b4dd]", "[bc8dcf897bc99e20a06d]", "0x20")
    self.bid64_to_binary80("2", "[8eb1dd4cb546b4dd]", "[bc8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("3", "[8eb1dd4cb546b4dd]", "[bc8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("4", "[8eb1dd4cb546b4dd]", "[bc8dcf897bc99e20a06c]", "0x20")
    self.bid64_to_binary80("0", "[8fbb79d1a45c195d]", "[bca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("1", "[8fbb79d1a45c195d]", "[bca8edd1c3f2c0bb6acd]", "0x20")
    self.bid64_to_binary80("2", "[8fbb79d1a45c195d]", "[bca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("3", "[8fbb79d1a45c195d]", "[bca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("4", "[8fbb79d1a45c195d]", "[bca8edd1c3f2c0bb6acc]", "0x20")
    self.bid64_to_binary80("0", "[90c015f60a747594]", "[bcbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("1", "[90c015f60a747594]", "[bcbeb1080775580797ad]", "0x20")
    self.bid64_to_binary80("2", "[90c015f60a747594]", "[bcbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("3", "[90c015f60a747594]", "[bcbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("4", "[90c015f60a747594]", "[bcbeb1080775580797ac]", "0x20")
    self.bid64_to_binary80("0", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("1", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd0a]", "0x20")
    self.bid64_to_binary80("2", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("3", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("4", "[91a16a7d8e584721]", "[bcd9d9b6564b6799fd09]", "0x20")
    self.bid64_to_binary80("0", "[92a03a03b9294519]", "[bcf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("1", "[92a03a03b9294519]", "[bcf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("2", "[92a03a03b9294519]", "[bcf1cfaf227051e5be53]", "0x20")
    self.bid64_to_binary80("3", "[92a03a03b9294519]", "[bcf1cfaf227051e5be53]", "0x20")
    self.bid64_to_binary80("4", "[92a03a03b9294519]", "[bcf1cfaf227051e5be54]", "0x20")
    self.bid64_to_binary80("0", "[9380f23a585e19f3]", "[bd0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("1", "[9380f23a585e19f3]", "[bd0b8136dec12a865961]", "0x20")
    self.bid64_to_binary80("2", "[9380f23a585e19f3]", "[bd0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("3", "[9380f23a585e19f3]", "[bd0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("4", "[9380f23a585e19f3]", "[bd0b8136dec12a865960]", "0x20")
    self.bid64_to_binary80("0", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("1", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("2", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("3", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671150]", "0x20")
    self.bid64_to_binary80("4", "[9584a79bc956ff3c]", "[bd42b06ddd5e07671151]", "0x20")
    self.bid64_to_binary80("0", "[9683eac93730957f]", "[bd5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("1", "[9683eac93730957f]", "[bd5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("2", "[9683eac93730957f]", "[bd5cdd3da2157d482b28]", "0x20")
    self.bid64_to_binary80("3", "[9683eac93730957f]", "[bd5cdd3da2157d482b28]", "0x20")
    self.bid64_to_binary80("4", "[9683eac93730957f]", "[bd5cdd3da2157d482b29]", "0x20")
    self.bid64_to_binary80("0", "[97809126ad6a3191]", "[bd74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("1", "[97809126ad6a3191]", "[bd74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("2", "[97809126ad6a3191]", "[bd74bee0ec5b00d77c25]", "0x20")
    self.bid64_to_binary80("3", "[97809126ad6a3191]", "[bd74bee0ec5b00d77c25]", "0x20")
    self.bid64_to_binary80("4", "[97809126ad6a3191]", "[bd74bee0ec5b00d77c26]", "0x20")
    self.bid64_to_binary80("0", "[986c7e8297928a1f]", "[bd909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("1", "[986c7e8297928a1f]", "[bd909cb0f7a460b2c379]", "0x20")
    self.bid64_to_binary80("2", "[986c7e8297928a1f]", "[bd909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("3", "[986c7e8297928a1f]", "[bd909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("4", "[986c7e8297928a1f]", "[bd909cb0f7a460b2c378]", "0x20")
    self.bid64_to_binary80("0", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("1", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("2", "[99837fa0bfc30bed]", "[bdaca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("3", "[99837fa0bfc30bed]", "[bdaca373312d310ae54a]", "0x20")
    self.bid64_to_binary80("4", "[99837fa0bfc30bed]", "[bdaca373312d310ae54b]", "0x20")
    self.bid64_to_binary80("0", "[9a674d06ae6f67f1]", "[bdc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("1", "[9a674d06ae6f67f1]", "[bdc4cb4ea26c1955c3c8]", "0x20")
    self.bid64_to_binary80("2", "[9a674d06ae6f67f1]", "[bdc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("3", "[9a674d06ae6f67f1]", "[bdc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("4", "[9a674d06ae6f67f1]", "[bdc4cb4ea26c1955c3c7]", "0x20")
    self.bid64_to_binary80("0", "[9b660d25f569a6e3]", "[bddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("1", "[9b660d25f569a6e3]", "[bddefb1a261e060ce7f8]", "0x20")
    self.bid64_to_binary80("2", "[9b660d25f569a6e3]", "[bddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("3", "[9b660d25f569a6e3]", "[bddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("4", "[9b660d25f569a6e3]", "[bddefb1a261e060ce7f7]", "0x20")
    self.bid64_to_binary80("0", "[9c60e4e58893346a]", "[bdf6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("1", "[9c60e4e58893346a]", "[bdf6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("2", "[9c60e4e58893346a]", "[bdf6dd25177c250ec592]", "0x20")
    self.bid64_to_binary80("3", "[9c60e4e58893346a]", "[bdf6dd25177c250ec592]", "0x20")
    self.bid64_to_binary80("4", "[9c60e4e58893346a]", "[bdf6dd25177c250ec593]", "0x20")
    self.bid64_to_binary80("0", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("1", "[9d4d4cceef639565]", "[be11f516476cc975b501]", "0x20")
    self.bid64_to_binary80("2", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("3", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("4", "[9d4d4cceef639565]", "[be11f516476cc975b500]", "0x20")
    self.bid64_to_binary80("0", "[9e51007c76e030d5]", "[be2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("1", "[9e51007c76e030d5]", "[be2ce96ddfbf28fd8461]", "0x20")
    self.bid64_to_binary80("2", "[9e51007c76e030d5]", "[be2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("3", "[9e51007c76e030d5]", "[be2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("4", "[9e51007c76e030d5]", "[be2ce96ddfbf28fd8460]", "0x20")
    self.bid64_to_binary80("0", "[9f4913f0deea2bdb]", "[be46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("1", "[9f4913f0deea2bdb]", "[be46b9b8ca1ca9abe1f6]", "0x20")
    self.bid64_to_binary80("2", "[9f4913f0deea2bdb]", "[be46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("3", "[9f4913f0deea2bdb]", "[be46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("4", "[9f4913f0deea2bdb]", "[be46b9b8ca1ca9abe1f5]", "0x20")
    self.bid64_to_binary80("0", "[a042923b55a17450]", "[be5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("1", "[a042923b55a17450]", "[be5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("2", "[a042923b55a17450]", "[be5f9cc57a73e26f9da0]", "0x20")
    self.bid64_to_binary80("3", "[a042923b55a17450]", "[be5f9cc57a73e26f9da0]", "0x20")
    self.bid64_to_binary80("4", "[a042923b55a17450]", "[be5f9cc57a73e26f9da1]", "0x20")
    self.bid64_to_binary80("0", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("1", "[a1603e0f9904bfbf]", "[be79dc415b94e220b278]", "0x20")
    self.bid64_to_binary80("2", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("3", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("4", "[a1603e0f9904bfbf]", "[be79dc415b94e220b277]", "0x20")
    self.bid64_to_binary80("0", "[a240759990fa9957]", "[be91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("1", "[a240759990fa9957]", "[be91f8c4af9085b92793]", "0x20")
    self.bid64_to_binary80("2", "[a240759990fa9957]", "[be91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("3", "[a240759990fa9957]", "[be91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("4", "[a240759990fa9957]", "[be91f8c4af9085b92792]", "0x20")
    self.bid64_to_binary80("0", "[a42743748f4e7c51]", "[bec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("1", "[a42743748f4e7c51]", "[bec7da59ba4da57cebb3]", "0x20")
    self.bid64_to_binary80("2", "[a42743748f4e7c51]", "[bec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("3", "[a42743748f4e7c51]", "[bec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("4", "[a42743748f4e7c51]", "[bec7da59ba4da57cebb2]", "0x20")
    self.bid64_to_binary80("0", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("1", "[a5410fc0828b9660]", "[bee2edc1826fbc946764]", "0x20")
    self.bid64_to_binary80("2", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("3", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("4", "[a5410fc0828b9660]", "[bee2edc1826fbc946763]", "0x20")
    self.bid64_to_binary80("0", "[a623cbeb33ad5d6e]", "[befbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("1", "[a623cbeb33ad5d6e]", "[befbfd6b2eec96b9337b]", "0x20")
    self.bid64_to_binary80("2", "[a623cbeb33ad5d6e]", "[befbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("3", "[a623cbeb33ad5d6e]", "[befbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("4", "[a623cbeb33ad5d6e]", "[befbfd6b2eec96b9337a]", "0x20")
    self.bid64_to_binary80("0", "[a72124d65a445d2a]", "[bf14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("1", "[a72124d65a445d2a]", "[bf14e38deba3cea2f10d]", "0x20")
    self.bid64_to_binary80("2", "[a72124d65a445d2a]", "[bf14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("3", "[a72124d65a445d2a]", "[bf14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("4", "[a72124d65a445d2a]", "[bf14e38deba3cea2f10c]", "0x20")
    self.bid64_to_binary80("0", "[a80bdff99b6c7f83]", "[bf2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("1", "[a80bdff99b6c7f83]", "[bf2fb000a5cbda7f82f1]", "0x20")
    self.bid64_to_binary80("2", "[a80bdff99b6c7f83]", "[bf2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("3", "[a80bdff99b6c7f83]", "[bf2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("4", "[a80bdff99b6c7f83]", "[bf2fb000a5cbda7f82f0]", "0x20")
    self.bid64_to_binary80("0", "[aa0bc9f26111b76d]", "[bf64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("1", "[aa0bc9f26111b76d]", "[bf64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("2", "[aa0bc9f26111b76d]", "[bf64c1fc73b80da40f5d]", "0x20")
    self.bid64_to_binary80("3", "[aa0bc9f26111b76d]", "[bf64c1fc73b80da40f5d]", "0x20")
    self.bid64_to_binary80("4", "[aa0bc9f26111b76d]", "[bf64c1fc73b80da40f5e]", "0x20")
    self.bid64_to_binary80("0", "[ab03fe4ab6bf0f6c]", "[bf7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("1", "[ab03fe4ab6bf0f6c]", "[bf7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("2", "[ab03fe4ab6bf0f6c]", "[bf7dc3d50be7604908b2]", "0x20")
    self.bid64_to_binary80("3", "[ab03fe4ab6bf0f6c]", "[bf7dc3d50be7604908b2]", "0x20")
    self.bid64_to_binary80("4", "[ab03fe4ab6bf0f6c]", "[bf7dc3d50be7604908b3]", "0x20")
    self.bid64_to_binary80("0", "[ac0135f19da7d301]", "[bf96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("1", "[ac0135f19da7d301]", "[bf96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("2", "[ac0135f19da7d301]", "[bf96b0f256bf2f71da34]", "0x20")
    self.bid64_to_binary80("3", "[ac0135f19da7d301]", "[bf96b0f256bf2f71da34]", "0x20")
    self.bid64_to_binary80("4", "[ac0135f19da7d301]", "[bf96b0f256bf2f71da35]", "0x20")
    self.bid64_to_binary80("0", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("1", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("2", "[acea34f9eb3fbe09]", "[bfb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("3", "[acea34f9eb3fbe09]", "[bfb0de49955e01875987]", "0x20")
    self.bid64_to_binary80("4", "[acea34f9eb3fbe09]", "[bfb0de49955e01875988]", "0x20")
    self.bid64_to_binary80("0", "[adff71ffb1056361]", "[bfccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("1", "[adff71ffb1056361]", "[bfccff1d5961ac8e2db9]", "0x20")
    self.bid64_to_binary80("2", "[adff71ffb1056361]", "[bfccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("3", "[adff71ffb1056361]", "[bfccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("4", "[adff71ffb1056361]", "[bfccff1d5961ac8e2db8]", "0x20")
    self.bid64_to_binary80("0", "[aef3b8b367cbe982]", "[bfe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("1", "[aef3b8b367cbe982]", "[bfe6ee6b0c2cb5f187f3]", "0x20")
    self.bid64_to_binary80("2", "[aef3b8b367cbe982]", "[bfe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("3", "[aef3b8b367cbe982]", "[bfe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("4", "[aef3b8b367cbe982]", "[bfe6ee6b0c2cb5f187f2]", "0x20")
    self.bid64_to_binary80("0", "[afee35f4166a149b]", "[c000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("1", "[afee35f4166a149b]", "[c000ffff8b23b82010a3]", "0x20")
    self.bid64_to_binary80("2", "[afee35f4166a149b]", "[c000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("3", "[afee35f4166a149b]", "[c000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("4", "[afee35f4166a149b]", "[c000ffff8b23b82010a2]", "0x20")
    self.bid64_to_binary80("0", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b0c00000004d7c6d]", "[bffad000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("1", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a353]", "0x20")
    self.bid64_to_binary80("2", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("3", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("4", "[b0e4c4b3ffff3dd0]", "[c019ffffffffd746a352]", "0x20")
    self.bid64_to_binary80("0", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1a000000000000f]", "[bfffc000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c0000000000001]", "[bfff8000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c0000000000040]", "[c0058000000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c00000000003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("1", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("2", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("3", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("4", "[b1c00000000003e8]", "[c008fa00000000000000]", "0x00")
    self.bid64_to_binary80("0", "[b1cffffffffffffa]", "[c032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("1", "[b1cffffffffffffa]", "[c032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("2", "[b1cffffffffffffa]", "[c032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("3", "[b1cffffffffffffa]", "[c032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("4", "[b1cffffffffffffa]", "[c032ffffffffffffa000]", "0x00")
    self.bid64_to_binary80("0", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("1", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f3]", "0x20")
    self.bid64_to_binary80("2", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("3", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("4", "[b4d356548405c99f]", "[c082ffed12e96ae3e1f2]", "0x20")
    self.bid64_to_binary80("0", "[b5bdaaab8fd29f30]", "[c09aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("1", "[b5bdaaab8fd29f30]", "[c09aea076240a41c5c00]", "0x20")
    self.bid64_to_binary80("2", "[b5bdaaab8fd29f30]", "[c09aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("3", "[b5bdaaab8fd29f30]", "[c09aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("4", "[b5bdaaab8fd29f30]", "[c09aea076240a41c5bff]", "0x20")
    self.bid64_to_binary80("0", "[b6af4ccdd8311634]", "[c0b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("1", "[b6af4ccdd8311634]", "[c0b4b3d9cf89a52da47a]", "0x20")
    self.bid64_to_binary80("2", "[b6af4ccdd8311634]", "[c0b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("3", "[b6af4ccdd8311634]", "[c0b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("4", "[b6af4ccdd8311634]", "[c0b4b3d9cf89a52da479]", "0x20")
    self.bid64_to_binary80("0", "[b7be6309ea8f3c66]", "[c0d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("1", "[b7be6309ea8f3c66]", "[c0d08510dc06ea0d20c7]", "0x20")
    self.bid64_to_binary80("2", "[b7be6309ea8f3c66]", "[c0d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("3", "[b7be6309ea8f3c66]", "[c0d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("4", "[b7be6309ea8f3c66]", "[c0d08510dc06ea0d20c6]", "0x20")
    self.bid64_to_binary80("0", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("1", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("2", "[b8b6d99681faa149]", "[c0ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("3", "[b8b6d99681faa149]", "[c0ea951a579a230f71c4]", "0x20")
    self.bid64_to_binary80("4", "[b8b6d99681faa149]", "[c0ea951a579a230f71c5]", "0x20")
    self.bid64_to_binary80("0", "[b984c0a08a8d6f72]", "[c0ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("1", "[b984c0a08a8d6f72]", "[c0ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("2", "[b984c0a08a8d6f72]", "[c0ff93df7212707c7c4f]", "0x20")
    self.bid64_to_binary80("3", "[b984c0a08a8d6f72]", "[c0ff93df7212707c7c4f]", "0x20")
    self.bid64_to_binary80("4", "[b984c0a08a8d6f72]", "[c0ff93df7212707c7c50]", "0x20")
    self.bid64_to_binary80("0", "[baa65c0d9b8829c5]", "[c11db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("1", "[baa65c0d9b8829c5]", "[c11db84a018c68c4f2ae]", "0x20")
    self.bid64_to_binary80("2", "[baa65c0d9b8829c5]", "[c11db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("3", "[baa65c0d9b8829c5]", "[c11db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("4", "[baa65c0d9b8829c5]", "[c11db84a018c68c4f2ad]", "0x20")
    self.bid64_to_binary80("0", "[bb95ecf21370e88a]", "[c136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("1", "[bb95ecf21370e88a]", "[c136bd5a5828b57eaec3]", "0x20")
    self.bid64_to_binary80("2", "[bb95ecf21370e88a]", "[c136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("3", "[bb95ecf21370e88a]", "[c136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("4", "[bb95ecf21370e88a]", "[c136bd5a5828b57eaec2]", "0x20")
    self.bid64_to_binary80("0", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("1", "[bc89533dd7d11516]", "[c14ff00251426b9d3861]", "0x20")
    self.bid64_to_binary80("2", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("3", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("4", "[bc89533dd7d11516]", "[c14ff00251426b9d3860]", "0x20")
    self.bid64_to_binary80("0", "[be85df3d86ed8b27]", "[c184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("1", "[be85df3d86ed8b27]", "[c184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("2", "[be85df3d86ed8b27]", "[c184a7ca9e6e3da82541]", "0x20")
    self.bid64_to_binary80("3", "[be85df3d86ed8b27]", "[c184a7ca9e6e3da82541]", "0x20")
    self.bid64_to_binary80("4", "[be85df3d86ed8b27]", "[c184a7ca9e6e3da82542]", "0x20")
    self.bid64_to_binary80("0", "[bf8aa4ce7b1a9b39]", "[c19fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("1", "[bf8aa4ce7b1a9b39]", "[c19fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("2", "[bf8aa4ce7b1a9b39]", "[c19fe29a95ab726f358f]", "0x20")
    self.bid64_to_binary80("3", "[bf8aa4ce7b1a9b39]", "[c19fe29a95ab726f358f]", "0x20")
    self.bid64_to_binary80("4", "[bf8aa4ce7b1a9b39]", "[c19fe29a95ab726f3590]", "0x20")
    self.bid64_to_binary80("0", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("1", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("2", "[c078dbd18832f14c]", "[c1b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("3", "[c078dbd18832f14c]", "[c1b89db980c0d09e3935]", "0x20")
    self.bid64_to_binary80("4", "[c078dbd18832f14c]", "[c1b89db980c0d09e3936]", "0x20")
    self.bid64_to_binary80("0", "[c16cd531e693deac]", "[c1d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("1", "[c16cd531e693deac]", "[c1d1f2a836212b3ad5ef]", "0x20")
    self.bid64_to_binary80("2", "[c16cd531e693deac]", "[c1d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("3", "[c16cd531e693deac]", "[c1d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("4", "[c16cd531e693deac]", "[c1d1f2a836212b3ad5ee]", "0x20")
    self.bid64_to_binary80("0", "[c377f25698022b2f]", "[c207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("1", "[c377f25698022b2f]", "[c207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("2", "[c377f25698022b2f]", "[c207fb5c3529c178d7c0]", "0x20")
    self.bid64_to_binary80("3", "[c377f25698022b2f]", "[c207fb5c3529c178d7c0]", "0x20")
    self.bid64_to_binary80("4", "[c377f25698022b2f]", "[c207fb5c3529c178d7c1]", "0x20")
    self.bid64_to_binary80("0", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("1", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb45]", "0x20")
    self.bid64_to_binary80("2", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("3", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("4", "[c451c3505acd6bf6]", "[c21ede44a069f8e2bb44]", "0x20")
    self.bid64_to_binary80("0", "[c54b41253f1f7042]", "[c238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("1", "[c54b41253f1f7042]", "[c238d1d96977c8b18f89]", "0x20")
    self.bid64_to_binary80("2", "[c54b41253f1f7042]", "[c238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("3", "[c54b41253f1f7042]", "[c238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("4", "[c54b41253f1f7042]", "[c238d1d96977c8b18f88]", "0x20")
    self.bid64_to_binary80("0", "[c64d879135d87d4e]", "[c253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("1", "[c64d879135d87d4e]", "[c253bbf4b6f9edb01b35]", "0x20")
    self.bid64_to_binary80("2", "[c64d879135d87d4e]", "[c253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("3", "[c64d879135d87d4e]", "[c253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("4", "[c64d879135d87d4e]", "[c253bbf4b6f9edb01b34]", "0x20")
    self.bid64_to_binary80("0", "[c754ec0b28e85fcf]", "[c26ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("1", "[c754ec0b28e85fcf]", "[c26ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("2", "[c754ec0b28e85fcf]", "[c26ed88ddfb51dc5863b]", "0x20")
    self.bid64_to_binary80("3", "[c754ec0b28e85fcf]", "[c26ed88ddfb51dc5863b]", "0x20")
    self.bid64_to_binary80("4", "[c754ec0b28e85fcf]", "[c26ed88ddfb51dc5863c]", "0x20")
    self.bid64_to_binary80("0", "[c947c5d69c4d35ec]", "[c2a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("1", "[c947c5d69c4d35ec]", "[c2a2b2a407a98b63733a]", "0x20")
    self.bid64_to_binary80("2", "[c947c5d69c4d35ec]", "[c2a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("3", "[c947c5d69c4d35ec]", "[c2a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("4", "[c947c5d69c4d35ec]", "[c2a2b2a407a98b637339]", "0x20")
    self.bid64_to_binary80("0", "[ca46bd6b3bd66460]", "[c2bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("1", "[ca46bd6b3bd66460]", "[c2bce6d274f1beb0bcba]", "0x20")
    self.bid64_to_binary80("2", "[ca46bd6b3bd66460]", "[c2bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("3", "[ca46bd6b3bd66460]", "[c2bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("4", "[ca46bd6b3bd66460]", "[c2bce6d274f1beb0bcb9]", "0x20")
    self.bid64_to_binary80("0", "[cb2e4f5b8693901a]", "[c2d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("1", "[cb2e4f5b8693901a]", "[c2d5920db85ccbd3fb98]", "0x20")
    self.bid64_to_binary80("2", "[cb2e4f5b8693901a]", "[c2d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("3", "[cb2e4f5b8693901a]", "[c2d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("4", "[cb2e4f5b8693901a]", "[c2d5920db85ccbd3fb97]", "0x20")
    self.bid64_to_binary80("0", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("1", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("2", "[cc2c78c3a2c70833]", "[c2efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("3", "[cc2c78c3a2c70833]", "[c2efbdade593f50e030f]", "0x20")
    self.bid64_to_binary80("4", "[cc2c78c3a2c70833]", "[c2efbdade593f50e0310]", "0x20")
    self.bid64_to_binary80("0", "[cd3ff33e8dcd1212]", "[c30bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("1", "[cd3ff33e8dcd1212]", "[c30bb505194511dcd5d0]", "0x20")
    self.bid64_to_binary80("2", "[cd3ff33e8dcd1212]", "[c30bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("3", "[cd3ff33e8dcd1212]", "[c30bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("4", "[cd3ff33e8dcd1212]", "[c30bb505194511dcd5cf]", "0x20")
    self.bid64_to_binary80("0", "[ce33b37156817df1]", "[c325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("1", "[ce33b37156817df1]", "[c325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("2", "[ce33b37156817df1]", "[c325a6537ac9a87d5dfc]", "0x20")
    self.bid64_to_binary80("3", "[ce33b37156817df1]", "[c325a6537ac9a87d5dfc]", "0x20")
    self.bid64_to_binary80("4", "[ce33b37156817df1]", "[c325a6537ac9a87d5dfd]", "0x20")
    self.bid64_to_binary80("0", "[cf250db878ed7ad3]", "[c33dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("1", "[cf250db878ed7ad3]", "[c33dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("2", "[cf250db878ed7ad3]", "[c33dfe4deda3dbd9736f]", "0x20")
    self.bid64_to_binary80("3", "[cf250db878ed7ad3]", "[c33dfe4deda3dbd9736f]", "0x20")
    self.bid64_to_binary80("4", "[cf250db878ed7ad3]", "[c33dfe4deda3dbd97370]", "0x20")
    self.bid64_to_binary80("0", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("1", "[cff5cdff60c5392c]", "[c35482cd3744491323e5]", "0x20")
    self.bid64_to_binary80("2", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("3", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("4", "[cff5cdff60c5392c]", "[c35482cd3744491323e4]", "0x20")
    self.bid64_to_binary80("0", "[d0ebe619dea131d4]", "[c36dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("1", "[d0ebe619dea131d4]", "[c36dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("2", "[d0ebe619dea131d4]", "[c36dd4b9859fba5ce7cb]", "0x20")
    self.bid64_to_binary80("3", "[d0ebe619dea131d4]", "[c36dd4b9859fba5ce7cb]", "0x20")
    self.bid64_to_binary80("4", "[d0ebe619dea131d4]", "[c36dd4b9859fba5ce7cc]", "0x20")
    self.bid64_to_binary80("0", "[d204a2f4e35d6ccf]", "[c38a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("1", "[d204a2f4e35d6ccf]", "[c38a9a659b03150c0ee1]", "0x20")
    self.bid64_to_binary80("2", "[d204a2f4e35d6ccf]", "[c38a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("3", "[d204a2f4e35d6ccf]", "[c38a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("4", "[d204a2f4e35d6ccf]", "[c38a9a659b03150c0ee0]", "0x20")
    self.bid64_to_binary80("0", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("1", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("2", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("3", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace590]", "0x20")
    self.bid64_to_binary80("4", "[d404a46ec58033d7]", "[c3bfaba0cf3dccace591]", "0x20")
    self.bid64_to_binary80("0", "[d5048b70072872e3]", "[c3d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("1", "[d5048b70072872e3]", "[c3d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("2", "[d5048b70072872e3]", "[c3d9fa5df6e9ad0f05db]", "0x20")
    self.bid64_to_binary80("3", "[d5048b70072872e3]", "[c3d9fa5df6e9ad0f05db]", "0x20")
    self.bid64_to_binary80("4", "[d5048b70072872e3]", "[c3d9fa5df6e9ad0f05dc]", "0x20")
    self.bid64_to_binary80("0", "[d5ea57ec51cf7f0c]", "[c3f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("1", "[d5ea57ec51cf7f0c]", "[c3f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("2", "[d5ea57ec51cf7f0c]", "[c3f2a9d1fddb420e53ff]", "0x20")
    self.bid64_to_binary80("3", "[d5ea57ec51cf7f0c]", "[c3f2a9d1fddb420e53ff]", "0x20")
    self.bid64_to_binary80("4", "[d5ea57ec51cf7f0c]", "[c3f2a9d1fddb420e5400]", "0x20")
    self.bid64_to_binary80("0", "[d6eeefbc2ef65193]", "[c40db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("1", "[d6eeefbc2ef65193]", "[c40db6b5bc630b8b5c05]", "0x20")
    self.bid64_to_binary80("2", "[d6eeefbc2ef65193]", "[c40db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("3", "[d6eeefbc2ef65193]", "[c40db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("4", "[d6eeefbc2ef65193]", "[c40db6b5bc630b8b5c04]", "0x20")
    self.bid64_to_binary80("0", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("1", "[d7fca12a33a33b13]", "[c4298276a5a2da731bca]", "0x20")
    self.bid64_to_binary80("2", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("3", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("4", "[d7fca12a33a33b13]", "[c4298276a5a2da731bc9]", "0x20")
    self.bid64_to_binary80("0", "[d8cd5b5dc7c3ec12]", "[c43f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("1", "[d8cd5b5dc7c3ec12]", "[c43f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("2", "[d8cd5b5dc7c3ec12]", "[c43f911e1c4a535a9cd3]", "0x20")
    self.bid64_to_binary80("3", "[d8cd5b5dc7c3ec12]", "[c43f911e1c4a535a9cd3]", "0x20")
    self.bid64_to_binary80("4", "[d8cd5b5dc7c3ec12]", "[c43f911e1c4a535a9cd4]", "0x20")
    self.bid64_to_binary80("0", "[d9e5488d49ebd9bf]", "[c45bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("1", "[d9e5488d49ebd9bf]", "[c45bd5d6fe56fa9bba96]", "0x20")
    self.bid64_to_binary80("2", "[d9e5488d49ebd9bf]", "[c45bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("3", "[d9e5488d49ebd9bf]", "[c45bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("4", "[d9e5488d49ebd9bf]", "[c45bd5d6fe56fa9bba95]", "0x20")
    self.bid64_to_binary80("0", "[dad5321af6dfecb2]", "[c474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("1", "[dad5321af6dfecb2]", "[c474ffaa7e7671435927]", "0x20")
    self.bid64_to_binary80("2", "[dad5321af6dfecb2]", "[c474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("3", "[dad5321af6dfecb2]", "[c474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("4", "[dad5321af6dfecb2]", "[c474ffaa7e7671435926]", "0x20")
    self.bid64_to_binary80("0", "[ddc5ab163f1854ce]", "[c4c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("1", "[ddc5ab163f1854ce]", "[c4c2e2395221721adf2f]", "0x20")
    self.bid64_to_binary80("2", "[ddc5ab163f1854ce]", "[c4c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("3", "[ddc5ab163f1854ce]", "[c4c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("4", "[ddc5ab163f1854ce]", "[c4c2e2395221721adf2e]", "0x20")
    self.bid64_to_binary80("0", "[dec55e9fba7a5f03]", "[c4dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("1", "[dec55e9fba7a5f03]", "[c4dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("2", "[dec55e9fba7a5f03]", "[c4dd9fab1f5b75a5634a]", "0x20")
    self.bid64_to_binary80("3", "[dec55e9fba7a5f03]", "[c4dd9fab1f5b75a5634a]", "0x20")
    self.bid64_to_binary80("4", "[dec55e9fba7a5f03]", "[c4dd9fab1f5b75a5634b]", "0x20")
    self.bid64_to_binary80("0", "[e1394fb19831a49b]", "[bb8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("1", "[e1394fb19831a49b]", "[bb8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("2", "[e1394fb19831a49b]", "[bb8bb33d998ac2157406]", "0x20")
    self.bid64_to_binary80("3", "[e1394fb19831a49b]", "[bb8bb33d998ac2157406]", "0x20")
    self.bid64_to_binary80("4", "[e1394fb19831a49b]", "[bb8bb33d998ac2157407]", "0x20")
    self.bid64_to_binary80("0", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("1", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7423]", "0x20")
    self.bid64_to_binary80("2", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("3", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("4", "[e3691b9818a0a8c3]", "[bc74810eee33a5ee7422]", "0x20")
    self.bid64_to_binary80("0", "[e521b6eb980020e3]", "[bd2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("1", "[e521b6eb980020e3]", "[bd2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("2", "[e521b6eb980020e3]", "[bd2ad66501c7a0b2be01]", "0x20")
    self.bid64_to_binary80("3", "[e521b6eb980020e3]", "[bd2ad66501c7a0b2be01]", "0x20")
    self.bid64_to_binary80("4", "[e521b6eb980020e3]", "[bd2ad66501c7a0b2be02]", "0x20")
    self.bid64_to_binary80("0", "[e8ca6c944c4c40e3]", "[beafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("1", "[e8ca6c944c4c40e3]", "[beafad9ddce5c92a2c59]", "0x20")
    self.bid64_to_binary80("2", "[e8ca6c944c4c40e3]", "[beafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("3", "[e8ca6c944c4c40e3]", "[beafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("4", "[e8ca6c944c4c40e3]", "[beafad9ddce5c92a2c58]", "0x20")
    self.bid64_to_binary80("0", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("1", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c6]", "0x20")
    self.bid64_to_binary80("2", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("3", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("4", "[ea437445d0d032f1]", "[bf4bc3c1b4a5e472b6c5]", "0x20")
    self.bid64_to_binary80("0", "[ecb386f26fc0ffdf]", "[c04ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("1", "[ecb386f26fc0ffdf]", "[c04ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("2", "[ecb386f26fc0ffdf]", "[c04ed3c21bceccecdc4d]", "0x20")
    self.bid64_to_binary80("3", "[ecb386f26fc0ffdf]", "[c04ed3c21bceccecdc4d]", "0x20")
    self.bid64_to_binary80("4", "[ecb386f26fc0ffdf]", "[c04ed3c21bceccecdc4e]", "0x20")
    self.bid64_to_binary80("0", "[ecf386f26f265fbf]", "[c0699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("1", "[ecf386f26f265fbf]", "[c0699dc5ada57cc34f1e]", "0x20")
    self.bid64_to_binary80("2", "[ecf386f26f265fbf]", "[c0699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("3", "[ecf386f26f265fbf]", "[c0699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("4", "[ecf386f26f265fbf]", "[c0699dc5ada57cc34f1d]", "0x20")
    self.bid64_to_binary80("0", "[ef628329b38d7ebf]", "[c16ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("1", "[ef628329b38d7ebf]", "[c16ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("2", "[ef628329b38d7ebf]", "[c16ca574181c021ccdad]", "0x20")
    self.bid64_to_binary80("3", "[ef628329b38d7ebf]", "[c16ca574181c021ccdad]", "0x20")
    self.bid64_to_binary80("4", "[ef628329b38d7ebf]", "[c16ca574181c021ccdae]", "0x20")
    self.bid64_to_binary80("0", "[f09924e5b7734c16]", "[c1ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("1", "[f09924e5b7734c16]", "[c1ede9795845525e80eb]", "0x20")
    self.bid64_to_binary80("2", "[f09924e5b7734c16]", "[c1ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("3", "[f09924e5b7734c16]", "[c1ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("4", "[f09924e5b7734c16]", "[c1ede9795845525e80ea]", "0x20")
    self.bid64_to_binary80("0", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("1", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("2", "[f212e93d1248086f]", "[c28a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("3", "[f212e93d1248086f]", "[c28a869cd892f915530c]", "0x20")
    self.bid64_to_binary80("4", "[f212e93d1248086f]", "[c28a869cd892f915530d]", "0x20")
    self.bid64_to_binary80("0", "[f4c02bb8ac307968]", "[c3a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("1", "[f4c02bb8ac307968]", "[c3a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("2", "[f4c02bb8ac307968]", "[c3a7c78ae40727b9257f]", "0x20")
    self.bid64_to_binary80("3", "[f4c02bb8ac307968]", "[c3a7c78ae40727b9257f]", "0x20")
    self.bid64_to_binary80("4", "[f4c02bb8ac307968]", "[c3a7c78ae40727b92580]", "0x20")
    self.bid64_to_binary80("0", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("1", "[f6f10688c9f158bb]", "[c49094667517a8a1048b]", "0x20")
    self.bid64_to_binary80("2", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("3", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("4", "[f6f10688c9f158bb]", "[c49094667517a8a1048a]", "0x20")
    self.bid64_to_binary80("0", "[f7324dfa209ff4e5]", "[c4aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("1", "[f7324dfa209ff4e5]", "[c4aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("2", "[f7324dfa209ff4e5]", "[c4aae5b2b249b1954bea]", "0x20")
    self.bid64_to_binary80("3", "[f7324dfa209ff4e5]", "[c4aae5b2b249b1954bea]", "0x20")
    self.bid64_to_binary80("4", "[f7324dfa209ff4e5]", "[c4aae5b2b249b1954beb]", "0x20")
    self.bid64_to_binary80("0", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("1", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb1]", "0x20")
    self.bid64_to_binary80("2", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("3", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("4", "[f7fb86f26fc0ffff]", "[c4fdf5f75bd4dab6cdb0]", "0x20")
    self.bid64_to_binary80("0", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("1", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("2", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("3", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
    self.bid64_to_binary80("4", "[f800000000000000]", "[ffff8000000000000000]", "0x00")
  }

  private func bid64_to_binary80(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
#if (arch(i386) || arch(x86_64)) && !os(Windows) && !os(Android)

    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseFloat80(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toFloat80(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)

#endif
  }

  func test_bid64_to_int16_ceil() {
    self.bid64_to_int16_ceil("0", "-1", "-1", "00")
    self.bid64_to_int16_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int16_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int16_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int16_ceil("0", "[306BA418874DA400]", "32767", "00")
    self.bid64_to_int16_ceil("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_ceil("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int16_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int16_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int16_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int16_ceil("0", "[31A000000004FFF1]", "32767", "00")
    self.bid64_to_int16_ceil("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_ceil("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_ceil("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_ceil("0", "32769", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int16_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_ceil("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[7e00000000000000]", "-32768", "01")
    self.bid64_to_int16_ceil("0", "[9fbfff2ffbffef5e]", "0", "00")
  }

  private func bid64_to_int16_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_floor() {
    self.bid64_to_int16_floor("0", "-1", "-1", "00")
    self.bid64_to_int16_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int16_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int16_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int16_floor("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_int16_floor("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_floor("0", "[306BA42FCFC48C00]", "32767", "00")
    self.bid64_to_int16_floor("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int16_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int16_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int16_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int16_floor("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_int16_floor("0", "[31A000000004FFFB]", "32767", "00")
    self.bid64_to_int16_floor("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_floor("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_floor("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_floor("0", "32769", "-32768", "01")
    self.bid64_to_int16_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int16_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_floor("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[7e00000000000000]", "-32768", "01")
    self.bid64_to_int16_floor("0", "[b1278aa3ff3b94a0]", "-32768", "01")
  }

  private func bid64_to_int16_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_int() {
    self.bid64_to_int16_int("0", "-1", "-1", "00")
    self.bid64_to_int16_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int16_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int16_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int16_int("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_int16_int("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_int("0", "[306BA42FCFC48C00]", "32767", "00")
    self.bid64_to_int16_int("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_int("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_int("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_int("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_int("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_int("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int16_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int16_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int16_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int16_int("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_int16_int("0", "[31A000000004FFFB]", "32767", "00")
    self.bid64_to_int16_int("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_int("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_int("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_int("0", "32769", "-32768", "01")
    self.bid64_to_int16_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int16_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_int("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[7e00000000000000]", "-32768", "01")
    self.bid64_to_int16_int("0", "[fd2f513b3d127efa]", "-32768", "01")
  }

  private func bid64_to_int16_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_rnint() {
    self.bid64_to_int16_rnint("0", "-1", "-1", "00")
    self.bid64_to_int16_rnint("0", "[15528e39ca5af8d1]", "0", "00")
    self.bid64_to_int16_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int16_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int16_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int16_rnint("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_int16_rnint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_rnint("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int16_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int16_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int16_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int16_rnint("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_int16_rnint("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_rnint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_rnint("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_rnint("0", "32769", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int16_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_rnint("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_rnint("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_rninta() {
    self.bid64_to_int16_rninta("0", "[0501800040000000]", "0", "00")
    self.bid64_to_int16_rninta("0", "-1", "-1", "00")
    self.bid64_to_int16_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int16_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int16_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int16_rninta("0", "[306BA418874DA400]", "32767", "00")
    self.bid64_to_int16_rninta("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_rninta("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int16_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int16_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int16_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int16_rninta("0", "[31A000000004FFF1]", "32767", "00")
    self.bid64_to_int16_rninta("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_rninta("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_rninta("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_rninta("0", "32769", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int16_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_rninta("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_rninta("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_xceil() {
    self.bid64_to_int16_xceil("0", "-1", "-1", "00")
    self.bid64_to_int16_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int16_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int16_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int16_xceil("0", "[306BA418874DA400]", "32767", "20")
    self.bid64_to_int16_xceil("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_xceil("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int16_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int16_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int16_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int16_xceil("0", "[31A000000004FFF1]", "32767", "20")
    self.bid64_to_int16_xceil("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_xceil("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_xceil("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_xceil("0", "32769", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int16_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_xceil("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[7bfebef7dfff7bdf]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_xceil("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_xfloor() {
    self.bid64_to_int16_xfloor("0", "-1", "-1", "00")
    self.bid64_to_int16_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int16_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int16_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int16_xfloor("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_int16_xfloor("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_xfloor("0", "[306BA42FCFC48C00]", "32767", "20")
    self.bid64_to_int16_xfloor("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int16_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int16_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int16_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int16_xfloor("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_int16_xfloor("0", "[31A000000004FFFB]", "32767", "20")
    self.bid64_to_int16_xfloor("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_xfloor("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_xfloor("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_xfloor("0", "32769", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[4bfec1e3a8113da2]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int16_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_xfloor("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_xfloor("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_xint() {
    self.bid64_to_int16_xint("0", "-1", "-1", "00")
    self.bid64_to_int16_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int16_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int16_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int16_xint("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_int16_xint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_xint("0", "[306BA42FCFC48C00]", "32767", "20")
    self.bid64_to_int16_xint("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int16_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int16_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int16_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int16_xint("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_int16_xint("0", "[31A000000004FFFB]", "32767", "20")
    self.bid64_to_int16_xint("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_xint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_xint("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_xint("0", "32769", "-32768", "01")
    self.bid64_to_int16_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int16_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_xint("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[7e00000000000000]", "-32768", "01")
    self.bid64_to_int16_xint("0", "[f7fffebbfbffefef]", "0", "00")
  }

  private func bid64_to_int16_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_xrnint() {
    self.bid64_to_int16_xrnint("0", "-1", "-1", "00")
    self.bid64_to_int16_xrnint("0", "[2302c79015100297]", "0", "20")
    self.bid64_to_int16_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int16_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int16_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int16_xrnint("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_int16_xrnint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_xrnint("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int16_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int16_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int16_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int16_xrnint("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_int16_xrnint("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_xrnint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_xrnint("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_xrnint("0", "32769", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int16_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_xrnint("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_xrnint("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int16_xrninta() {
    self.bid64_to_int16_xrninta("0", "[04b043477b368bf6]", "0", "20")
    self.bid64_to_int16_xrninta("0", "-1", "-1", "00")
    self.bid64_to_int16_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int16_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int16_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int16_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int16_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int16_xrninta("0", "[306BA418874DA400]", "32767", "20")
    self.bid64_to_int16_xrninta("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_int16_xrninta("0", "[306BA42FCFC48C00]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[306BA43B74000000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[306BA447183B7400]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[306BA452BC76E800]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[3077485F9F891800]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[3077486B43C48C00]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[30774876E8000000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[307748828C3B7400]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[3077488E3076E800]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int16_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int16_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int16_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int16_xrninta("0", "[31A000000004FFF1]", "32767", "20")
    self.bid64_to_int16_xrninta("0", "[31A000000004FFFB]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31A0000000050005]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31A000000009FFFB]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31A00000000A0005]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int16_xrninta("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_int16_xrninta("0", "[31C0000000008000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31C0000000008001]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31C000000000FFFF]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31C0000000010000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[31C0000000010001]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int16_xrninta("0", "32769", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int16_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int16_xrninta("0", "[7800000000000000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[7c00000000000000]", "-32768", "01")
    self.bid64_to_int16_xrninta("0", "[7e00000000000000]", "-32768", "01")
  }

  private func bid64_to_int16_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_ceil() {
    self.bid64_to_int32_ceil("0", "-0", "0", "00")
    self.bid64_to_int32_ceil("0", "0", "0", "00")
    self.bid64_to_int32_ceil("0", "[0140413328540800]", "1", "00")
    self.bid64_to_int32_ceil("0", "[0932000000000000]", "1", "00")
    self.bid64_to_int32_ceil("0", "[0d29000000000000]", "1", "00")
    self.bid64_to_int32_ceil("0", "-11011101.00E2", "-1101110100", "00")
    self.bid64_to_int32_ceil("0", "+1111000.10E2", "111100010", "00")
    self.bid64_to_int32_ceil("0", "[130b416e77044c1e]", "1", "00")
    self.bid64_to_int32_ceil("0", "[16df2c7d036a0ab9]", "1", "00")
    self.bid64_to_int32_ceil("0", "[1a00000000000000]", "0", "00")
    self.bid64_to_int32_ceil("0", "[2f431e66cb96fe06]", "1", "00")
    self.bid64_to_int32_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int32_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int32_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int32_ceil("0", "[3090223f540f4c82]", "454126", "00")
    self.bid64_to_int32_ceil("0", "[3107A11FFFE91CA0]", "2147483647", "00")
    self.bid64_to_int32_ceil("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_ceil("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3108000843282680]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int32_ceil("0", "[3160008041000080]", "550846334", "00")
    self.bid64_to_int32_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int32_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int32_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int32_ceil("0", "[31A00004FFFFFFF1]", "2147483647", "00")
    self.bid64_to_int32_ceil("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_ceil("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_ceil("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_ceil("0", "[3200000001000000]", "1677721600", "00")
    self.bid64_to_int32_ceil("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[4ce7d81f2495efcd]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[4fc00bb9a485bb07]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[51cf874c9df794a1]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[55cdcd0a834292b6]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int32_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_ceil("0", "[71ea3cfdff7ff7f7]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "+7986.9757E0", "7987", "00")
    self.bid64_to_int32_ceil("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "-8.89888E6", "-8898880", "00")
    self.bid64_to_int32_ceil("0", "+8898.899899E6", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "-89.E8", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[a400000000000000]", "0", "00")
    self.bid64_to_int32_ceil("0", "[a6a0d055dab7388e]", "0", "00")
    self.bid64_to_int32_ceil("0", "[aa8e9ea285cb4414]", "0", "00")
    self.bid64_to_int32_ceil("0", "[afffebebff25ebef]", "-8", "00")
    self.bid64_to_int32_ceil("0", "[b11460409610c016]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "[ef7bbb9bffff7fbd]", "0", "00")
    self.bid64_to_int32_ceil("0", "[fff97fffff3ffbfd]", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_ceil("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_floor() {
    self.bid64_to_int32_floor("0", "-0", "0", "00")
    self.bid64_to_int32_floor("0", "[00b1d15f537c73eb]", "0", "00")
    self.bid64_to_int32_floor("0", "[0932000000000000]", "0", "00")
    self.bid64_to_int32_floor("0", "[0d29000000000000]", "0", "00")
    self.bid64_to_int32_floor("0", "[16df2c7d036a0ab9]", "0", "00")
    self.bid64_to_int32_floor("0", "[1a00000000000000]", "0", "00")
    self.bid64_to_int32_floor("0", "[2f431e66cb96fe06]", "0", "00")
    self.bid64_to_int32_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int32_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int32_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int32_floor("0", "[305988284508c8fe]", "7186", "00")
    self.bid64_to_int32_floor("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_int32_floor("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_floor("0", "[3107A11FFFF85EE0]", "2147483647", "00")
    self.bid64_to_int32_floor("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int32_floor("0", "[3180000006053480]", "1010044", "00")
    self.bid64_to_int32_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int32_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int32_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int32_floor("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_int32_floor("0", "[31A00004FFFFFFFB]", "2147483647", "00")
    self.bid64_to_int32_floor("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_floor("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_floor("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_floor("0", "[3200000000000008]", "800", "00")
    self.bid64_to_int32_floor("0", "[3200000004304581]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "-47884639932.93E0", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[4ce7d81f2495efcd]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[55cdcd0a834292b6]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "-5669.95866E6", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[5823f170469eb3d4]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[60222407192baaae]", "0", "00")
    self.bid64_to_int32_floor("0", "-6877.6E4", "-68776000", "00")
    self.bid64_to_int32_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int32_floor("0", "[6c42208400068420]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_floor("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[928506a8c1258496]", "-1", "00")
    self.bid64_to_int32_floor("0", "-99988.E0", "-99988", "00")
    self.bid64_to_int32_floor("0", "+9.E0", "9", "00")
    self.bid64_to_int32_floor("0", "[a400000000000000]", "0", "00")
    self.bid64_to_int32_floor("0", "[a6a0d055dab7388e]", "-1", "00")
    self.bid64_to_int32_floor("0", "[aa8e9ea285cb4414]", "-1", "00")
    self.bid64_to_int32_floor("0", "[afea2992dff5cff7]", "-3", "00")
    self.bid64_to_int32_floor("0", "[b11ff9fffdf27ffd]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "[b180001010021104]", "-689880477", "00")
    self.bid64_to_int32_floor("0", "[eb3d3d1935277ccc]", "0", "00")
    self.bid64_to_int32_floor("0", "[fffffdffffffffff]", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_floor("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_int() {
    self.bid64_to_int32_int("0", "-0", "0", "00")
    self.bid64_to_int32_int("0", "0", "0", "00")
    self.bid64_to_int32_int("0", "[07c3a0a0a4d33252]", "0", "00")
    self.bid64_to_int32_int("0", "[0cc1000000000000]", "0", "00")
    self.bid64_to_int32_int("0", "[247a05a24ee1620b]", "0", "00")
    self.bid64_to_int32_int("0", "[295e4ad3badc2965]", "0", "00")
    self.bid64_to_int32_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int32_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int32_int("0", "[3016005814103000]", "61", "00")
    self.bid64_to_int32_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int32_int("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_int32_int("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_int("0", "[3107A11FFFF85EE0]", "2147483647", "00")
    self.bid64_to_int32_int("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3110e10026000003]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int32_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int32_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int32_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int32_int("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_int32_int("0", "[31A00004FFFFFFFB]", "2147483647", "00")
    self.bid64_to_int32_int("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_int("0", "[31c0000000480000]", "4718592", "00")
    self.bid64_to_int32_int("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_int("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_int("0", "[3200000001000208]", "1677773600", "00")
    self.bid64_to_int32_int("0", "[32400000000400b0]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[480883688af126aa]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "-58289.26957E5", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[5e0b5ac238120bac]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[61c8b3e34f6b2d09]", "0", "00")
    self.bid64_to_int32_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int32_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_int("0", "[6fe1be191be1c6c4]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "-9898.E0", "-9898", "00")
    self.bid64_to_int32_int("0", "[9da27942aba57bea]", "0", "00")
    self.bid64_to_int32_int("0", "[a11842cfadac1d41]", "0", "00")
    self.bid64_to_int32_int("0", "[ace746b3181a629e]", "0", "00")
    self.bid64_to_int32_int("0", "[af5f105ea4cb4595]", "0", "00")
    self.bid64_to_int32_int("0", "[b007a8bf4c67ccdd]", "-21", "00")
    self.bid64_to_int32_int("0", "[b114c5064211a523]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "[b200000000820020]", "-851971200", "00")
    self.bid64_to_int32_int("0", "[d840000000000000]", "0", "00")
    self.bid64_to_int32_int("0", "[e7ff9ff9ff7af5fd]", "0", "00")
    self.bid64_to_int32_int("0", "[f03182a905c4d649]", "-2147483648", "01")
    self.bid64_to_int32_int("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_int("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_int("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_int("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_rnint() {
    self.bid64_to_int32_rnint("0", "-0", "0", "00")
    self.bid64_to_int32_rnint("0", "0", "0", "00")
    self.bid64_to_int32_rnint("0", "[00556b1c9ea58fd3]", "0", "00")
    self.bid64_to_int32_rnint("0", "[00713ed54250692f]", "0", "00")
    self.bid64_to_int32_rnint("0", "[0803004200088006]", "0", "00")
    self.bid64_to_int32_rnint("0", "[0965000000000000]", "0", "00")
    self.bid64_to_int32_rnint("0", "[0b874f30ad37d4cc]", "0", "00")
    self.bid64_to_int32_rnint("0", "[1867f892d8b517ac]", "0", "00")
    self.bid64_to_int32_rnint("0", "[1e536720a6414578]", "0", "00")
    self.bid64_to_int32_rnint("0", "-254.465E2", "-25446", "00")
    self.bid64_to_int32_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int32_rnint("0", "[2fd8fbcef57a5163]", "1", "00")
    self.bid64_to_int32_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int32_rnint("0", "[3020040080070010]", "0", "00")
    self.bid64_to_int32_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int32_rnint("0", "[3040a6026013d8b5]", "183", "00")
    self.bid64_to_int32_rnint("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_int32_rnint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_rnint("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3113b081e7466865]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int32_rnint("0", "[3163e9edfebd7c26]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int32_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int32_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int32_rnint("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_int32_rnint("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_rnint("0", "[31c000001a028000]", "436371456", "00")
    self.bid64_to_int32_rnint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_rnint("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_rnint("0", "[3200000000200000]", "209715200", "00")
    self.bid64_to_int32_rnint("0", "[3240000000040000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[3f60c8097eb8b2fd]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[41bbee018c62b328]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[49fc6f0c16bff143]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[51d3b921a0bbbf70]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[6808200108641900]", "0", "00")
    self.bid64_to_int32_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int32_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_rnint("0", "[7291884bfd8b041a]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[88bb1508298af8b5]", "0", "00")
    self.bid64_to_int32_rnint("0", "[9646cb89804e3749]", "0", "00")
    self.bid64_to_int32_rnint("0", "[989a2fa589e716e5]", "0", "00")
    self.bid64_to_int32_rnint("0", "-9.E0", "-9", "00")
    self.bid64_to_int32_rnint("0", "[a167db3a9c3230bd]", "0", "00")
    self.bid64_to_int32_rnint("0", "[afd94de33915a394]", "-1", "00")
    self.bid64_to_int32_rnint("0", "[b0eb8e6c9425347d]", "-325282174", "00")
    self.bid64_to_int32_rnint("0", "[b20000000105e818]", "-1716431200", "00")
    self.bid64_to_int32_rnint("0", "[b200000004140040]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[bdf82e25c6484248]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[ca95fc7e4c003eb0]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[d1517f43400a41a8]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[d76cd0d9a5257216]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[d9ae061421df6415]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[dcbfe7bd2eab8dbc]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[ec4175430ffffd75]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "[f65bcb6b8c024480]", "0", "00")
    self.bid64_to_int32_rnint("0", "[fba70cb7ffdfaffb]", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_rnint("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_rninta() {
    self.bid64_to_int32_rninta("0", "-0", "0", "00")
    self.bid64_to_int32_rninta("0", "0", "0", "00")
    self.bid64_to_int32_rninta("0", "+1.0E1", "10", "00")
    self.bid64_to_int32_rninta("0", "-2.4E2", "-240", "00")
    self.bid64_to_int32_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int32_rninta("0", "[2fd6549be3dfd74e]", "1", "00")
    self.bid64_to_int32_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int32_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int32_rninta("0", "[30c3447ef4880366]", "9197370", "00")
    self.bid64_to_int32_rninta("0", "[3107A11FFFE91CA0]", "2147483647", "00")
    self.bid64_to_int32_rninta("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_rninta("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[311022bd0855552a]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int32_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int32_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int32_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int32_rninta("0", "[31A00004FFFFFFF1]", "2147483647", "00")
    self.bid64_to_int32_rninta("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_rninta("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_rninta("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_rninta("0", "[3200000000000088]", "13600", "00")
    self.bid64_to_int32_rninta("0", "[3200000002003080]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[4723947ddf830448]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[53684529d34c4161]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int32_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_rninta("0", "[769a4b541dc616dd]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[8392ceed52887c30]", "0", "00")
    self.bid64_to_int32_rninta("0", "[8bc0000000000000]", "0", "00")
    self.bid64_to_int32_rninta("0", "[9271c07d120dc29b]", "0", "00")
    self.bid64_to_int32_rninta("0", "[98420192411ed2a2]", "0", "00")
    self.bid64_to_int32_rninta("0", "-999.899E3", "-999899", "00")
    self.bid64_to_int32_rninta("0", "[a5d54ea86dc0a820]", "0", "00")
    self.bid64_to_int32_rninta("0", "[abf0289456f7258e]", "0", "00")
    self.bid64_to_int32_rninta("0", "[afd14ff7fbb53677]", "0", "00")
    self.bid64_to_int32_rninta("0", "[afdee6e753e7f5bd]", "-1", "00")
    self.bid64_to_int32_rninta("0", "[b0096c3377841265]", "-27", "00")
    self.bid64_to_int32_rninta("0", "[b1145840a1019a6a]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[b200000004040040]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[c12a48d5433ce649]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[c52dd7210825084d]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[c6cc1cee0784e37b]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "[f7de7eff7ffffd0a]", "0", "00")
    self.bid64_to_int32_rninta("0", "[fdffd7efffd7dffe]", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_rninta("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_xceil() {
    self.bid64_to_int32_xceil("0", "-0", "0", "00")
    self.bid64_to_int32_xceil("0", "0", "0", "00")
    self.bid64_to_int32_xceil("0", "[0000000000a00000]", "1", "20")
    self.bid64_to_int32_xceil("0", "[00f32a33ff3ab667]", "1", "20")
    self.bid64_to_int32_xceil("0", "-0.10E0", "0", "20")
    self.bid64_to_int32_xceil("0", "[01677c9e745f8098]", "1", "20")
    self.bid64_to_int32_xceil("0", "[09bd28ec18d42bc1]", "1", "20")
    self.bid64_to_int32_xceil("0", "[0d69000000000000]", "1", "20")
    self.bid64_to_int32_xceil("0", "-1.001E3", "-1001", "00")
    self.bid64_to_int32_xceil("0", "-1011011.10111010E0", "-1011011", "20")
    self.bid64_to_int32_xceil("0", "[281eb39d8dd7956d]", "1", "20")
    self.bid64_to_int32_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int32_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int32_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int32_xceil("0", "[30a2080041581122]", "571748", "20")
    self.bid64_to_int32_xceil("0", "[3107A11FFFE91CA0]", "2147483647", "20")
    self.bid64_to_int32_xceil("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_xceil("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[311a8c10001e10c4]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int32_xceil("0", "[3180000080004000]", "21475001", "20")
    self.bid64_to_int32_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int32_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int32_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int32_xceil("0", "[31A00004FFFFFFF1]", "2147483647", "20")
    self.bid64_to_int32_xceil("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_xceil("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_xceil("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_xceil("0", "[3200000000001200]", "460800", "00")
    self.bid64_to_int32_xceil("0", "[3200000002008008]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[3f5fffffcfffdf77]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[450df3bc7326acdb]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[4b00e2c6efef7c96]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[506c511e05361f43]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[56bf07d4a85e4a58]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[5ac9a1d8c4a92d63]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int32_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_xceil("0", "-767623.539E4", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[771ebc1adbe8ed8d]", "0", "00")
    self.bid64_to_int32_xceil("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[8622e8f7d1eb8914]", "0", "20")
    self.bid64_to_int32_xceil("0", "[8885eb0375c2f17b]", "0", "20")
    self.bid64_to_int32_xceil("0", "+88.89E2", "8889", "00")
    self.bid64_to_int32_xceil("0", "+8.96E0", "9", "20")
    self.bid64_to_int32_xceil("0", "+98.889E0", "99", "20")
    self.bid64_to_int32_xceil("0", "[a340000000000000]", "0", "00")
    self.bid64_to_int32_xceil("0", "[a6970a84cf9f9da7]", "0", "20")
    self.bid64_to_int32_xceil("0", "[ad009f3d20c4aabb]", "0", "20")
    self.bid64_to_int32_xceil("0", "[b02c1ee77a292229]", "-341", "20")
    self.bid64_to_int32_xceil("0", "[b110aa409f2b580d]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[b200000000080000]", "-52428800", "00")
    self.bid64_to_int32_xceil("0", "[b2601d3a3c8865cf]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[bcb495cdf73e32fa]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[cccdea49b1ff8840]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[d560000000000000]", "0", "00")
    self.bid64_to_int32_xceil("0", "[e7236220bf1d165b]", "0", "20")
    self.bid64_to_int32_xceil("0", "[e9d176bafbcf8c2d]", "0", "20")
    self.bid64_to_int32_xceil("0", "[f0d32e64786c841b]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "[f6c2a981c7aa7f69]", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_xceil("0", "QNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_xfloor() {
    self.bid64_to_int32_xfloor("0", "-0", "0", "00")
    self.bid64_to_int32_xfloor("0", "0", "0", "00")
    self.bid64_to_int32_xfloor("0", "-0.00010000E0", "-1", "20")
    self.bid64_to_int32_xfloor("0", "[0032123020b32729]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[0103a00008000088]", "0", "20")
    self.bid64_to_int32_xfloor("0", "-0.11111E8", "-11111000", "00")
    self.bid64_to_int32_xfloor("0", "[06c4ba07feef6cb7]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[0aa8573529917dd7]", "0", "20")
    self.bid64_to_int32_xfloor("0", "-10000.10E0", "-10001", "20")
    self.bid64_to_int32_xfloor("0", "-11.10E2", "-1110", "00")
    self.bid64_to_int32_xfloor("0", "[1e550b235691a6e6]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[1f00000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[2040000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[2520744bd0a11150]", "0", "20")
    self.bid64_to_int32_xfloor("0", "+294865.3552249E0", "294865", "20")
    self.bid64_to_int32_xfloor("0", "[2fa0000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int32_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int32_xfloor("0", "[309f33fc03c037f4]", "878288", "20")
    self.bid64_to_int32_xfloor("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_int32_xfloor("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_xfloor("0", "[3107A11FFFF85EE0]", "2147483647", "20")
    self.bid64_to_int32_xfloor("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[3180000010000580]", "2684368", "20")
    self.bid64_to_int32_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int32_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int32_xfloor("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_int32_xfloor("0", "[31A00004FFFFFFFB]", "2147483647", "20")
    self.bid64_to_int32_xfloor("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_xfloor("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_xfloor("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_xfloor("0", "[3240000000020002]", "1310740000", "00")
    self.bid64_to_int32_xfloor("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "+3657.4769E4", "36574769", "00")
    self.bid64_to_int32_xfloor("0", "[4cc0000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "-57.555799E8", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[5b80000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "-6.7958557E0", "-7", "20")
    self.bid64_to_int32_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int32_xfloor("0", "[6c42733758d0e80f]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[6cdafd3c69edeff9]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "+72.775E0", "72", "20")
    self.bid64_to_int32_xfloor("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[850cb429a486df29]", "-1", "20")
    self.bid64_to_int32_xfloor("0", "+8.89E9", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "+8.9898899999E0", "8", "20")
    self.bid64_to_int32_xfloor("0", "-89.99898899E0", "-90", "20")
    self.bid64_to_int32_xfloor("0", "+8.999989989E0", "8", "20")
    self.bid64_to_int32_xfloor("0", "[8d9dea53aea817a6]", "-1", "20")
    self.bid64_to_int32_xfloor("0", "-96.55768E0", "-97", "20")
    self.bid64_to_int32_xfloor("0", "[970c0b1b56280b01]", "-1", "20")
    self.bid64_to_int32_xfloor("0", "[971c82e8340b9360]", "-1", "20")
    self.bid64_to_int32_xfloor("0", "[a773550e0d4cd6db]", "-1", "20")
    self.bid64_to_int32_xfloor("0", "[b080000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[b0f71bee5c0d9949]", "-650463503", "20")
    self.bid64_to_int32_xfloor("0", "[b11e9f4e42fd7075]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[b18000114100a802]", "-741050061", "20")
    self.bid64_to_int32_xfloor("0", "[b3c0000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[c3e0000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[c7c0000000000000]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[d691ac16f30f8b57]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[effffffbfcf97fbf]", "0", "00")
    self.bid64_to_int32_xfloor("0", "[f3423bf2e6d0b72c]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[f4c916d5df2d9f63]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "[ffffffffffffffff]", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_xfloor("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_xint() {
    self.bid64_to_int32_xint("0", "-0", "0", "00")
    self.bid64_to_int32_xint("0", "0", "0", "00")
    self.bid64_to_int32_xint("0", "[0180000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[0b53000000000000]", "0", "20")
    self.bid64_to_int32_xint("0", "[0f85000000000000]", "0", "20")
    self.bid64_to_int32_xint("0", "+1.000010E6", "1000010", "00")
    self.bid64_to_int32_xint("0", "+11000.1111101101E0", "11000", "20")
    self.bid64_to_int32_xint("0", "-1101101.1100E3", "-1101101110", "00")
    self.bid64_to_int32_xint("0", "[1260000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[1a2a613eeb91e5de]", "0", "20")
    self.bid64_to_int32_xint("0", "[2340000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[270aa85876086cdf]", "0", "20")
    self.bid64_to_int32_xint("0", "[2742c0399d6c5ff4]", "0", "20")
    self.bid64_to_int32_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int32_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int32_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int32_xint("0", "[30dad60851522f80]", "75536806", "20")
    self.bid64_to_int32_xint("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_int32_xint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_xint("0", "[3107A11FFFF85EE0]", "2147483647", "20")
    self.bid64_to_int32_xint("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31102200c4a20229]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int32_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int32_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int32_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int32_xint("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_int32_xint("0", "[31A00004FFFFFFFB]", "2147483647", "20")
    self.bid64_to_int32_xint("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_xint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_xint("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_xint("0", "[3200000005000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[33206241d41c09c1]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3a60000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[3b0c71795748d4c7]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[3be0000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[3e080dcc8e4a24f4]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[40c0000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[42077b395e5bcb93]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[4480000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "[4740000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "-4.7E1", "-47", "00")
    self.bid64_to_int32_xint("0", "[5328406f8f1aedec]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "-577985.767896998966E0", "-577985", "20")
    self.bid64_to_int32_xint("0", "[57b6594b4f706b50]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "-58.58896E0", "-58", "20")
    self.bid64_to_int32_xint("0", "+59.755757898986988569E0", "59", "20")
    self.bid64_to_int32_xint("0", "[5b6235d696f090d7]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int32_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_xint("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "-7.87787577677967E0", "-7", "20")
    self.bid64_to_int32_xint("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[813d5d5837e2a629]", "0", "20")
    self.bid64_to_int32_xint("0", "[87018ca12dbe40d0]", "0", "20")
    self.bid64_to_int32_xint("0", "[8760000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "-8.94855589E9", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "+8.99998888989E0", "8", "20")
    self.bid64_to_int32_xint("0", "-8.E1", "-80", "00")
    self.bid64_to_int32_xint("0", "[8fc0000000000000]", "0", "00")
    self.bid64_to_int32_xint("0", "+9758.66E5", "975866000", "00")
    self.bid64_to_int32_xint("0", "+98898.8E0", "98898", "20")
    self.bid64_to_int32_xint("0", "+988989.89999898999988E0", "988989", "20")
    self.bid64_to_int32_xint("0", "[9cc263d7526ceb46]", "0", "20")
    self.bid64_to_int32_xint("0", "[a22f35a4c7ea013d]", "0", "20")
    self.bid64_to_int32_xint("0", "[a5586f98e0b3d819]", "0", "20")
    self.bid64_to_int32_xint("0", "[b087b7b148339b99]", "-217229", "20")
    self.bid64_to_int32_xint("0", "[b11e9df4dbc7fa5d]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[b1800012108a4d30]", "-775869105", "20")
    self.bid64_to_int32_xint("0", "[b9ac144a416c0ba0]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[c937285b69b3e887]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[dc4a8539e6abf3fc]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[ddffeafffeffbaff]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[deff513caa22e5e1]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "[e80a9c9c01d51e22]", "0", "20")
    self.bid64_to_int32_xint("0", "[ea58901582f4316d]", "0", "20")
    self.bid64_to_int32_xint("0", "[fde79787ce969b86]", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "QNaN", "-2147483648", "01")
    self.bid64_to_int32_xint("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_xrnint() {
    self.bid64_to_int32_xrnint("0", "-0", "0", "00")
    self.bid64_to_int32_xrnint("0", "0", "0", "00")
    self.bid64_to_int32_xrnint("0", "[0000000000000000]", "0", "00")
    self.bid64_to_int32_xrnint("0", "[1fb65987093bab4f]", "0", "20")
    self.bid64_to_int32_xrnint("0", "-2.77858893E9", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int32_xrnint("0", "[2fdfe7ffff7b6fff]", "1", "20")
    self.bid64_to_int32_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int32_xrnint("0", "[3010108100010040]", "45", "20")
    self.bid64_to_int32_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int32_xrnint("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_int32_xrnint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_xrnint("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310d915e4b127656]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int32_xrnint("0", "[3180000000802a09]", "83994", "20")
    self.bid64_to_int32_xrnint("0", "[3180002081010042]", "1396032799", "20")
    self.bid64_to_int32_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int32_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int32_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int32_xrnint("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_int32_xrnint("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_xrnint("0", "[31c0000000021560]", "136544", "00")
    self.bid64_to_int32_xrnint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_xrnint("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_xrnint("0", "[3200000000010000]", "6553600", "00")
    self.bid64_to_int32_xrnint("0", "[3200000005400020]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3c0de4a11022ddc7]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[3c6b99802239a525]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[54d96b87683b5da1]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[621080c444000464]", "0", "20")
    self.bid64_to_int32_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int32_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_xrnint("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "-832695.65E1", "-8326956", "20")
    self.bid64_to_int32_xrnint("0", "-8.8666E4", "-88666", "00")
    self.bid64_to_int32_xrnint("0", "+8898988.9888988E0", "8898989", "20")
    self.bid64_to_int32_xrnint("0", "+8899.88988998999E0", "8900", "20")
    self.bid64_to_int32_xrnint("0", "[8ec0000000000000]", "0", "00")
    self.bid64_to_int32_xrnint("0", "+95.8699579598E0", "96", "20")
    self.bid64_to_int32_xrnint("0", "-9.899998998998E0", "-10", "20")
    self.bid64_to_int32_xrnint("0", "-9978865.5E0", "-9978866", "20")
    self.bid64_to_int32_xrnint("0", "[9e33d1eaddbb3ace]", "0", "20")
    self.bid64_to_int32_xrnint("0", "[afc92392d140c574]", "0", "20")
    self.bid64_to_int32_xrnint("0", "[afd8cbf7cf67c7fd]", "-1", "20")
    self.bid64_to_int32_xrnint("0", "[b0e9911c9514434a]", "-269282674", "20")
    self.bid64_to_int32_xrnint("0", "[b11a09637c85151a]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[b200000000126200]", "-120473600", "00")
    self.bid64_to_int32_xrnint("0", "[c5d62c2d0ada1855]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[c724fe18f91633ca]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[d737dbc90f9b7705]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[dcd9f0d5720258ae]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[de43f32896196321]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[e47c2b25da5d60c2]", "0", "00")
    self.bid64_to_int32_xrnint("0", "[ec02955bf13511cf]", "-97", "20")
    self.bid64_to_int32_xrnint("0", "[ef82b296e57c6867]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "[ffd7dbd6fdf797ef]", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_xrnint("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int32_xrninta() {
    self.bid64_to_int32_xrninta("0", "-0", "0", "00")
    self.bid64_to_int32_xrninta("0", "0", "0", "00")
    self.bid64_to_int32_xrninta("0", "[08b6000000000000]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[0914000000000000]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[09dd000000000000]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[0f60000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "-10.100E8", "-1010000000", "00")
    self.bid64_to_int32_xrninta("0", "-110.1E0", "-110", "20")
    self.bid64_to_int32_xrninta("0", "[1ce0000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[1fff26382d896c76]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[2222a21c9b4b2735]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[2c40000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[2fc97d43c8c56bf2]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int32_xrninta("0", "[2fdf7fa8afdbf9ff]", "1", "20")
    self.bid64_to_int32_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int32_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int32_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int32_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int32_xrninta("0", "[3098380258273448]", "681698", "20")
    self.bid64_to_int32_xrninta("0", "[3107A11FFFE91CA0]", "2147483647", "20")
    self.bid64_to_int32_xrninta("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_int32_xrninta("0", "[3107A11FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3107A12000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3107A1200007A120]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3107A120000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310E35FA931A0000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310F423FFFF0BDC0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310F423FFFF85EE0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310F424000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310F42400007A120]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[310F4240000F4240]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3111C37937E08000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498AB610]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498B7960]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498C3CB0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498D0000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498DC350]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498E86A0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31271AFD498F49F0]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int32_xrninta("0", "[3180000122800ed8]", "48737850", "20")
    self.bid64_to_int32_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int32_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int32_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int32_xrninta("0", "[31a000020600128c]", "869060264", "20")
    self.bid64_to_int32_xrninta("0", "[31A00004FFFFFFF1]", "2147483647", "20")
    self.bid64_to_int32_xrninta("0", "[31A00004FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0000500000005]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A00009FFFFFFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0000A00000005]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0002E90EDCFF1]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0002E90EDCFFB]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0002E90EDD005]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31A0002E90EDD00F]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int32_xrninta("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_int32_xrninta("0", "[31C0000080000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C0000080000001]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C00000FFFFFFFF]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C0000100000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C0000100000001]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C00004A817C7FF]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[31C00004A817C801]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int32_xrninta("0", "[3200000000401000]", "419840000", "00")
    self.bid64_to_int32_xrninta("0", "[3200000004003050]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[32E0000000000004]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[32E0000000000005]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3300000000000002]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[3c60000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[4da0000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[4e60000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "+55.556E0", "56", "20")
    self.bid64_to_int32_xrninta("0", "-555.77548944E7", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "+5.69388896543929283E0", "6", "20")
    self.bid64_to_int32_xrninta("0", "[5880000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[60aa30bb7e65fb6a]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int32_xrninta("0", "[6c40608080180449]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[738a0527cee05e4f]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "+7.65556958E0", "8", "20")
    self.bid64_to_int32_xrninta("0", "[7800000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "+78898.6655E4", "788986655", "00")
    self.bid64_to_int32_xrninta("0", "-7.9E0", "-8", "20")
    self.bid64_to_int32_xrninta("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[85355d97af7271f2]", "0", "20")
    self.bid64_to_int32_xrninta("0", "+89.98989988898989989E0", "90", "20")
    self.bid64_to_int32_xrninta("0", "[8f00000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[901d148c00947254]", "0", "20")
    self.bid64_to_int32_xrninta("0", "-9.3E0", "-9", "20")
    self.bid64_to_int32_xrninta("0", "-9888.E0", "-9888", "00")
    self.bid64_to_int32_xrninta("0", "+989.88777576677855E0", "990", "20")
    self.bid64_to_int32_xrninta("0", "-9989.88889999E0", "-9990", "20")
    self.bid64_to_int32_xrninta("0", "-999889899.988999989E0", "-999889900", "20")
    self.bid64_to_int32_xrninta("0", "[a479f6c6470cdf97]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[a603b7e08904c5a8]", "0", "20")
    self.bid64_to_int32_xrninta("0", "[b060918040e0002e]", "-1600", "20")
    self.bid64_to_int32_xrninta("0", "[b11a20ce1170dcfd]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[b200000000000020]", "-3200", "00")
    self.bid64_to_int32_xrninta("0", "[b940000000000000]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[cbbbaa1e93960e6f]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[cf5477611016e115]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[ebf347c3ef69facc]", "-1", "20")
    self.bid64_to_int32_xrninta("0", "[eefff6fb7d7ef5ff]", "0", "00")
    self.bid64_to_int32_xrninta("0", "[f5584a5d6ae4fa24]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "[fafdfdfff777fefd]", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "-Infinity", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "Infinity", "-2147483648", "01")
    self.bid64_to_int32_xrninta("0", "SNaN", "-2147483648", "01")
  }

  private func bid64_to_int32_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_ceil() {
    self.bid64_to_int64_ceil("0", "-0", "0", "00")
    self.bid64_to_int64_ceil("0", "0", "0", "00")
    self.bid64_to_int64_ceil("0", "[0000403108001024]", "1", "00")
    self.bid64_to_int64_ceil("0", "[0a132c5e124ac21e]", "1", "00")
    self.bid64_to_int64_ceil("0", "[0ed0000000000000]", "1", "00")
    self.bid64_to_int64_ceil("0", "[0fa7000000000000]", "1", "00")
    self.bid64_to_int64_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int64_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int64_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int64_ceil("0", "[3042c0a800641002]", "775", "00")
    self.bid64_to_int64_ceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_ceil("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498AB610]", "19999999999", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498DC350]", "20000000001", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_ceil("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_int64_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int64_ceil("0", "[3174bf0a82c39319]", "5839551398647", "00")
    self.bid64_to_int64_ceil("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_ceil("0", "[318C800000000032]", "35184372088833", "00")
    self.bid64_to_int64_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int64_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int64_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int64_ceil("0", "[31A0002E90EDCFF1]", "19999999999", "00")
    self.bid64_to_int64_ceil("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_int64_ceil("0", "[31A0002E90EDD005]", "20000000001", "00")
    self.bid64_to_int64_ceil("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_int64_ceil("0", "[31A1400000000005]", "35184372088833", "00")
    self.bid64_to_int64_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_ceil("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_ceil("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_ceil("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_ceil("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_ceil("0", "[31d00e2c78900060]", "4519183791423584", "00")
    self.bid64_to_int64_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_ceil("0", "[3220122a19ac2ac0]", "19972028639936000", "00")
    self.bid64_to_int64_ceil("0", "[324184c460014225]", "4274539358623090000", "00")
    self.bid64_to_int64_ceil("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_ceil("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_ceil("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_ceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_ceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_ceil("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[3644ae07b5b3709a]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[4870c9e767d019fb]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[4e15fad7ee48a8c6]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[5b467c86c0140452]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int64_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[6c88ff3db50d3c89]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[70979cde23f232a5]", "0", "00")
    self.bid64_to_int64_ceil("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[907bbc151b32a014]", "0", "00")
    self.bid64_to_int64_ceil("0", "[9c03d6b911b998d1]", "0", "00")
    self.bid64_to_int64_ceil("0", "[9d40000000000000]", "0", "00")
    self.bid64_to_int64_ceil("0", "[b03693316b964e09]", "-635", "00")
    self.bid64_to_int64_ceil("0", "[b1cb8573cb05801e]", "-3242957117685790", "00")
    self.bid64_to_int64_ceil("0", "[b213ba688be658c8]", "-555298274399661600", "00")
    self.bid64_to_int64_ceil("0", "[b2268a5998647a58]", "-1840967273708120000", "00")
    self.bid64_to_int64_ceil("0", "[b2800912c0061021]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[b521fa3607bca729]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[bd6ffbfdfffffe3f]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[cecf698b54e70d0f]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[de7ac47df985cca3]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[eff968327b3e59e4]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "[fb8c09a571ed2a7d]", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_ceil("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_floor() {
    self.bid64_to_int64_floor("0", "-0", "0", "00")
    self.bid64_to_int64_floor("0", "0", "0", "00")
    self.bid64_to_int64_floor("0", "[0003bdb8199ae657]", "0", "00")
    self.bid64_to_int64_floor("0", "[01908654ff7c193a]", "0", "00")
    self.bid64_to_int64_floor("0", "[12544c67e7ef5e3b]", "0", "00")
    self.bid64_to_int64_floor("0", "[1f0ce9181563a975]", "0", "00")
    self.bid64_to_int64_floor("0", "[202115c020008000]", "0", "00")
    self.bid64_to_int64_floor("0", "[2e64610626ca4a7e]", "0", "00")
    self.bid64_to_int64_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int64_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int64_floor("0", "[301aa8e6045a4814]", "75", "00")
    self.bid64_to_int64_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int64_floor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_floor("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498C3CB0]", "19999999999", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_floor("0", "[31271AFD498F49F0]", "20000000001", "00")
    self.bid64_to_int64_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int64_floor("0", "[318500c00a40000c]", "14081996892405", "00")
    self.bid64_to_int64_floor("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_floor("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_int64_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int64_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int64_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int64_floor("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_int64_floor("0", "[31A0002E90EDCFFB]", "19999999999", "00")
    self.bid64_to_int64_floor("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_int64_floor("0", "[31A0002E90EDD00F]", "20000000001", "00")
    self.bid64_to_int64_floor("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_int64_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_floor("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_floor("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_floor("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_floor("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_floor("0", "[321f2be89b6893de]", "877400231775945400", "00")
    self.bid64_to_int64_floor("0", "[32406b9a1c548075]", "1183096444355730000", "00")
    self.bid64_to_int64_floor("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_floor("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_floor("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_floor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_floor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_floor("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[45c3cae0151c1e85]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[5d338f7a289e22bd]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int64_floor("0", "[6c729f684cbef571]", "9745419521160561", "00")
    self.bid64_to_int64_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[6c8b54f931548c74]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[81dd09312878d47a]", "-1", "00")
    self.bid64_to_int64_floor("0", "[8c4c1c5a999132e8]", "-1", "00")
    self.bid64_to_int64_floor("0", "[a1848439dcb9ecf7]", "-1", "00")
    self.bid64_to_int64_floor("0", "[b00094180d253ec0]", "-2", "00")
    self.bid64_to_int64_floor("0", "[b1cec1b20428cf19]", "-4153619992071961", "00")
    self.bid64_to_int64_floor("0", "[b2090be9447802ff]", "-254637129439718300", "00")
    self.bid64_to_int64_floor("0", "[b232e6addcd4fbb4]", "-5320183989468084000", "00")
    self.bid64_to_int64_floor("0", "[b50491200631004a]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[c463067bfd2e802b]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[d3b74073ef769566]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[dfe0000000000000]", "0", "00")
    self.bid64_to_int64_floor("0", "[e7448feeb8fb476c]", "0", "00")
    self.bid64_to_int64_floor("0", "[ec6070c817caf2a3]", "-91312039496875", "00")
    self.bid64_to_int64_floor("0", "[ec8b17a66e153d37]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[f2e8810500c0aec0]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "[fdffffffff7fbbff]", "-9223372036854775808", "01")
    self.bid64_to_int64_floor("0", "-Infinity", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_int() {
    self.bid64_to_int64_int("0", "-0", "0", "00")
    self.bid64_to_int64_int("0", "0", "0", "00")
    self.bid64_to_int64_int("0", "[0536ffee8552ad2c]", "0", "00")
    self.bid64_to_int64_int("0", "[09a9000000000000]", "0", "00")
    self.bid64_to_int64_int("0", "[09b4000000000000]", "0", "00")
    self.bid64_to_int64_int("0", "[0a7b000000000000]", "0", "00")
    self.bid64_to_int64_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int64_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int64_int("0", "[301cc7d64bac9de5]", "81", "00")
    self.bid64_to_int64_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int64_int("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_int("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_int("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_int64_int("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_int("0", "[31271AFD498C3CB0]", "19999999999", "00")
    self.bid64_to_int64_int("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_int("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_int64_int("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_int("0", "[31271AFD498F49F0]", "20000000001", "00")
    self.bid64_to_int64_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int64_int("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_int("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_int64_int("0", "[319fb7ced6905c83]", "89278232689614", "00")
    self.bid64_to_int64_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int64_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int64_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int64_int("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_int64_int("0", "[31A0002E90EDCFFB]", "19999999999", "00")
    self.bid64_to_int64_int("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_int64_int("0", "[31A0002E90EDD00F]", "20000000001", "00")
    self.bid64_to_int64_int("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_int64_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_int("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_int("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_int("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_int("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_int("0", "[31dd1a8512fb917a]", "8191933176058234", "00")
    self.bid64_to_int64_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_int("0", "[322001c010420000]", "1924418109440000", "00")
    self.bid64_to_int64_int("0", "[32428c0a9df98813]", "7169271813591230000", "00")
    self.bid64_to_int64_int("0", "[324378d3842b10c1]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_int("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_int("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_int("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_int("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_int("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[389a6ba763552363]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[4503e14c0a420c20]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[588fa6ecd5ab94b9]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int64_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[6dc04e2ddc722b0e]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[831f9496c803ddd7]", "0", "00")
    self.bid64_to_int64_int("0", "[9aaa2e66acede71b]", "0", "00")
    self.bid64_to_int64_int("0", "[b0886298e1a00055]", "-236020", "00")
    self.bid64_to_int64_int("0", "[b1dd51408c290120]", "-8252111995863328", "00")
    self.bid64_to_int64_int("0", "[b1ff91df9bd95bb0]", "-88861138564781280", "00")
    self.bid64_to_int64_int("0", "[b240c80887e4f049]", "-2199389652214490000", "00")
    self.bid64_to_int64_int("0", "[c74f4cc92ee5b7c2]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[cb40000000000000]", "0", "00")
    self.bid64_to_int64_int("0", "[dd41df934541edaf]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[e9fdc0f81946d09e]", "0", "00")
    self.bid64_to_int64_int("0", "[ec89b045e45499dd]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "[ffffbfbffffffffe]", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_int("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_rnint() {
    self.bid64_to_int64_rnint("0", "-0", "0", "00")
    self.bid64_to_int64_rnint("0", "0", "0", "00")
    self.bid64_to_int64_rnint("0", "[0a02814041332854]", "0", "00")
    self.bid64_to_int64_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int64_rnint("0", "[2fdd67fdf7fbbfff]", "1", "00")
    self.bid64_to_int64_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int64_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_int64_rnint("0", "[3086682404d48224]", "180335", "00")
    self.bid64_to_int64_rnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_rnint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_rnint("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_int64_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int64_rnint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_rnint("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_int64_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int64_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int64_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_int64_rnint("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_int64_rnint("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_int64_rnint("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_int64_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_rnint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_rnint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_rnint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_rnint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_rnint("0", "[31deea8114c42ada]", "8702089421400794", "00")
    self.bid64_to_int64_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_rnint("0", "[323fbcab7f9edfbc]", "8933169044578236000", "00")
    self.bid64_to_int64_rnint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_rnint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_rnint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_rnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_rnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_rnint("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[3d532f2eeb016013]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[4ddf58d923f991d9]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[58ccb0f16d60f13e]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[5a80e9386fa718c9]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6a5aa8a57eb2604e]", "0", "00")
    self.bid64_to_int64_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int64_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[6c8a495f3e1057b0]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[7798d83fe714e749]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[8903c3572788cf3a]", "0", "00")
    self.bid64_to_int64_rnint("0", "[8eb2c1c3e07a6690]", "0", "00")
    self.bid64_to_int64_rnint("0", "-9988.8E0", "-9989", "00")
    self.bid64_to_int64_rnint("0", "[afdfe1baf83fffbd]", "-1", "00")
    self.bid64_to_int64_rnint("0", "[b000110400050440]", "0", "00")
    self.bid64_to_int64_rnint("0", "[b0ac092c7e2554bd]", "-3387786", "00")
    self.bid64_to_int64_rnint("0", "[b1b27b96a305f94d]", "-520243649118036", "00")
    self.bid64_to_int64_rnint("0", "[b1c910d0a10b6d8c]", "-2551763031518604", "00")
    self.bid64_to_int64_rnint("0", "[b1eb9d385dd7d711]", "-32690901619730090", "00")
    self.bid64_to_int64_rnint("0", "[b240d2fff64ec8d2]", "-2319967908517940000", "00")
    self.bid64_to_int64_rnint("0", "[b704eec3e4252c1a]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[bf2fbec85607b7d5]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[d510f03151a1b84a]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[def7f7a7c9f7d3a5]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[ea255a8f1b72541f]", "0", "00")
    self.bid64_to_int64_rnint("0", "[ec88f9c1cf092c18]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[f3eb4405195da811]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "[fdf7d7efffd7dffe]", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_rnint("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_rninta() {
    self.bid64_to_int64_rninta("0", "-0", "0", "00")
    self.bid64_to_int64_rninta("0", "0", "0", "00")
    self.bid64_to_int64_rninta("0", "[0b79489bb5e8d0f2]", "0", "00")
    self.bid64_to_int64_rninta("0", "[0e000c2142586c21]", "0", "00")
    self.bid64_to_int64_rninta("0", "[16a392861f30fb2d]", "0", "00")
    self.bid64_to_int64_rninta("0", "[1d318add0436c356]", "0", "00")
    self.bid64_to_int64_rninta("0", "[2fce10279743dd56]", "0", "00")
    self.bid64_to_int64_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int64_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int64_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_int64_rninta("0", "[310a01102418880c]", "2815918604", "00")
    self.bid64_to_int64_rninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_rninta("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498AB610]", "19999999999", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498DC350]", "20000000001", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_rninta("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_int64_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int64_rninta("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_rninta("0", "[318C800000000032]", "35184372088833", "00")
    self.bid64_to_int64_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int64_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int64_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_int64_rninta("0", "[31A0002E90EDCFF1]", "19999999999", "00")
    self.bid64_to_int64_rninta("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_int64_rninta("0", "[31A0002E90EDD005]", "20000000001", "00")
    self.bid64_to_int64_rninta("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_int64_rninta("0", "[31A1400000000005]", "35184372088833", "00")
    self.bid64_to_int64_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_rninta("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_rninta("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_rninta("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_rninta("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_rninta("0", "[31d20449b0a6e377]", "5071264123642743", "00")
    self.bid64_to_int64_rninta("0", "[31ffaf716bf21821]", "89186259552235850", "00")
    self.bid64_to_int64_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_rninta("0", "[3241796ff6fb5c55]", "4149967687097170000", "00")
    self.bid64_to_int64_rninta("0", "[32438afaed8bffbc]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32937527cbc50a4c]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_rninta("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_rninta("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_rninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_rninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_rninta("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[480daff37bf9b464]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[5180000000000000]", "0", "00")
    self.bid64_to_int64_rninta("0", "[6bf0061650e70773]", "1", "00")
    self.bid64_to_int64_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int64_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[740b1285d276e0dc]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[7531f0493c160cda]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[7e22f6ced7872b8d]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[800048040000a080]", "0", "00")
    self.bid64_to_int64_rninta("0", "-8899989888999988889.E0", "-8899989888999989000", "00")
    self.bid64_to_int64_rninta("0", "[9b80000000000000]", "0", "00")
    self.bid64_to_int64_rninta("0", "[afd910dfb8abe5ed]", "-1", "00")
    self.bid64_to_int64_rninta("0", "[b14e3164364e8dec]", "-399495615156", "00")
    self.bid64_to_int64_rninta("0", "[b1d95c86339f21de]", "-7138605879206366", "00")
    self.bid64_to_int64_rninta("0", "[b20b5d799afe8b17]", "-319900161661621500", "00")
    self.bid64_to_int64_rninta("0", "[b420000000000000]", "0", "00")
    self.bid64_to_int64_rninta("0", "[bc3887ec0d2ec451]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "[d700000000000000]", "0", "00")
    self.bid64_to_int64_rninta("0", "[e886c527f7e02053]", "0", "00")
    self.bid64_to_int64_rninta("0", "[ec898948a6a38665]", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_rninta("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_xceil() {
    self.bid64_to_int64_xceil("0", "-0", "0", "00")
    self.bid64_to_int64_xceil("0", "0", "0", "00")
    self.bid64_to_int64_xceil("0", "-0.1E0", "0", "20")
    self.bid64_to_int64_xceil("0", "[0800014404001010]", "1", "20")
    self.bid64_to_int64_xceil("0", "[0d00000000000000]", "0", "00")
    self.bid64_to_int64_xceil("0", "+11011.01E0", "11012", "20")
    self.bid64_to_int64_xceil("0", "[2087cd4caba67499]", "1", "20")
    self.bid64_to_int64_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int64_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int64_xceil("0", "[3020482002041000]", "8", "20")
    self.bid64_to_int64_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int64_xceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_xceil("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_xceil("0", "[31271AFD498AB610]", "19999999999", "20")
    self.bid64_to_int64_xceil("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_xceil("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_int64_xceil("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_xceil("0", "[31271AFD498DC350]", "20000000001", "20")
    self.bid64_to_int64_xceil("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_xceil("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_int64_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int64_xceil("0", "[31706b29ca9a4400]", "4621426864310", "20")
    self.bid64_to_int64_xceil("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_xceil("0", "[318C800000000032]", "35184372088833", "20")
    self.bid64_to_int64_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int64_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int64_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int64_xceil("0", "[31A0002E90EDCFF1]", "19999999999", "20")
    self.bid64_to_int64_xceil("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_int64_xceil("0", "[31A0002E90EDD005]", "20000000001", "20")
    self.bid64_to_int64_xceil("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_int64_xceil("0", "[31A1400000000005]", "35184372088833", "20")
    self.bid64_to_int64_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_xceil("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_xceil("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_xceil("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xceil("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_xceil("0", "[31c8d4825b43208b]", "2485456155648139", "00")
    self.bid64_to_int64_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_xceil("0", "[323014468e002081]", "4525892890009729000", "00")
    self.bid64_to_int64_xceil("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_xceil("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_xceil("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_xceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xceil("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[3500000000000000]", "0", "00")
    self.bid64_to_int64_xceil("0", "[444477422e92930c]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "+479373987.954E0", "479373988", "20")
    self.bid64_to_int64_xceil("0", "[4be0000000000000]", "0", "00")
    self.bid64_to_int64_xceil("0", "[4be020c652f100cd]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "+556586.86E0", "556587", "20")
    self.bid64_to_int64_xceil("0", "+5.758E0", "6", "20")
    self.bid64_to_int64_xceil("0", "[63f813722bfd6c59]", "1", "20")
    self.bid64_to_int64_xceil("0", "-653297.5E0", "-653297", "20")
    self.bid64_to_int64_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int64_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[6c89104a71924123]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "-7578789765.6E0", "-7578789765", "20")
    self.bid64_to_int64_xceil("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "-9756579.78E0", "-9756579", "20")
    self.bid64_to_int64_xceil("0", "+99.8998888E0", "100", "20")
    self.bid64_to_int64_xceil("0", "[b19eaf727e9669e8]", "-86371555862389", "20")
    self.bid64_to_int64_xceil("0", "[b1d51574ee10c061]", "-5934566465388641", "00")
    self.bid64_to_int64_xceil("0", "[b1e6ffe5ebf648cb]", "-19702128316438510", "00")
    self.bid64_to_int64_xceil("0", "[b224bf39f5e2828d]", "-1336155566146189000", "00")
    self.bid64_to_int64_xceil("0", "[b343e2f7a9eac71b]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[d080000000000000]", "0", "00")
    self.bid64_to_int64_xceil("0", "[de960d7afe0443fa]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[e080442033000043]", "0", "20")
    self.bid64_to_int64_xceil("0", "[ec8a17ca3db7f965]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[f451a225ec6c7300]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "[f7ae557d63bf7abd]", "0", "00")
    self.bid64_to_int64_xceil("0", "[fffffffffffafffd]", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xceil("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_xfloor() {
    self.bid64_to_int64_xfloor("0", "-0", "0", "00")
    self.bid64_to_int64_xfloor("0", "0", "0", "00")
    self.bid64_to_int64_xfloor("0", "[00800a4001800002]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[0b9a8d7d3e333781]", "0", "20")
    self.bid64_to_int64_xfloor("0", "-0.E0", "0", "00")
    self.bid64_to_int64_xfloor("0", "+111100.01101100E0", "111100", "20")
    self.bid64_to_int64_xfloor("0", "[2564f58d62cfcf44]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int64_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int64_xfloor("0", "[30488801e0404208]", "2401", "20")
    self.bid64_to_int64_xfloor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_xfloor("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_xfloor("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_int64_xfloor("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_xfloor("0", "[31271AFD498C3CB0]", "19999999999", "20")
    self.bid64_to_int64_xfloor("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_xfloor("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_int64_xfloor("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_xfloor("0", "[31271AFD498F49F0]", "20000000001", "20")
    self.bid64_to_int64_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_xfloor("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_int64_xfloor("0", "[31941d03d8a73597]", "56614018911573", "20")
    self.bid64_to_int64_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int64_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int64_xfloor("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_int64_xfloor("0", "[31A0002E90EDCFFB]", "19999999999", "20")
    self.bid64_to_int64_xfloor("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_int64_xfloor("0", "[31A0002E90EDD00F]", "20000000001", "20")
    self.bid64_to_int64_xfloor("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_int64_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_xfloor("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_xfloor("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_xfloor("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xfloor("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_xfloor("0", "[31d9a1ec68ea054e]", "7214911162287438", "00")
    self.bid64_to_int64_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_xfloor("0", "[320f6ca0ba6e4983]", "434156222901696300", "00")
    self.bid64_to_int64_xfloor("0", "[323819d71eceafc4]", "6783811166580676000", "00")
    self.bid64_to_int64_xfloor("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_xfloor("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_xfloor("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_xfloor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xfloor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xfloor("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "+368973358.9359883394E0", "368973358", "20")
    self.bid64_to_int64_xfloor("0", "[45652521ceaff8f4]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[47ab89eb19bce2b0]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[53e97a9e140be785]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[590afa4ce8711964]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "+65.7E0", "65", "20")
    self.bid64_to_int64_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int64_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6c89c1a9236302c7]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[6d0682c1dbe24356]", "0", "00")
    self.bid64_to_int64_xfloor("0", "[74e2f6b14a408e3e]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[79ebedcdfdedbfe9]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[8020408008401501]", "-1", "20")
    self.bid64_to_int64_xfloor("0", "+85758886.896E0", "85758886", "20")
    self.bid64_to_int64_xfloor("0", "+89.857687586E0", "89", "20")
    self.bid64_to_int64_xfloor("0", "+898.9898E0", "898", "20")
    self.bid64_to_int64_xfloor("0", "[94e0000000000000]", "0", "00")
    self.bid64_to_int64_xfloor("0", "-96757695858.779E0", "-96757695859", "20")
    self.bid64_to_int64_xfloor("0", "-96997.E0", "-96997", "00")
    self.bid64_to_int64_xfloor("0", "-9769679.9699766558556E0", "-9769680", "20")
    self.bid64_to_int64_xfloor("0", "-99989.9888899998888E0", "-99990", "20")
    self.bid64_to_int64_xfloor("0", "[9af7691d83fe0bd9]", "-1", "20")
    self.bid64_to_int64_xfloor("0", "[a6a973a915be9d72]", "-1", "20")
    self.bid64_to_int64_xfloor("0", "[b0c8c50af4c9ed63]", "-24684507", "20")
    self.bid64_to_int64_xfloor("0", "[b1be8f0adea8b48a]", "-860152614936283", "20")
    self.bid64_to_int64_xfloor("0", "[b23ff35ebb27f5f9]", "-8993312470463993000", "00")
    self.bid64_to_int64_xfloor("0", "[c54bfd3e5b7de082]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[d5c0000000000000]", "0", "00")
    self.bid64_to_int64_xfloor("0", "[ec7364e8127e86d0]", "-9962572090345168", "00")
    self.bid64_to_int64_xfloor("0", "[ec899f6a73710b2b]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "[f77261e824bd9f78]", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_xfloor("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_xint() {
    self.bid64_to_int64_xint("0", "-0", "0", "00")
    self.bid64_to_int64_xint("0", "0", "0", "00")
    self.bid64_to_int64_xint("0", "+0.10000000E0", "0", "20")
    self.bid64_to_int64_xint("0", "[0420000000000000]", "0", "00")
    self.bid64_to_int64_xint("0", "[0d40000000000000]", "0", "00")
    self.bid64_to_int64_xint("0", "[0d68460f186f575a]", "0", "20")
    self.bid64_to_int64_xint("0", "[1543a705bc9fbed4]", "0", "20")
    self.bid64_to_int64_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int64_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int64_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int64_xint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_xint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_xint("0", "[3116f39e37ad77d7]", "6460310352", "20")
    self.bid64_to_int64_xint("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_int64_xint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_xint("0", "[31271AFD498C3CB0]", "19999999999", "20")
    self.bid64_to_int64_xint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_xint("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_int64_xint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_xint("0", "[31271AFD498F49F0]", "20000000001", "20")
    self.bid64_to_int64_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int64_xint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_xint("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_int64_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int64_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int64_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int64_xint("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_int64_xint("0", "[31A0002E90EDCFFB]", "19999999999", "20")
    self.bid64_to_int64_xint("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_int64_xint("0", "[31A0002E90EDD00F]", "20000000001", "20")
    self.bid64_to_int64_xint("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_int64_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_xint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_xint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_xint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_xint("0", "[31cd5eecedf3a06e]", "3763546394697838", "00")
    self.bid64_to_int64_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_xint("0", "[3233018102040bbe]", "5349678153731006000", "00")
    self.bid64_to_int64_xint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_xint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_xint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_xint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xint("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "+37365888393366.447672E0", "37365888393366", "20")
    self.bid64_to_int64_xint("0", "[3b80d4073b952c83]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[5b0bad940b309741]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "+65.877856788E0", "65", "20")
    self.bid64_to_int64_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int64_xint("0", "[6c59e2bbd7b1e4a0]", "9537970636973", "20")
    self.bid64_to_int64_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[6c893dd88dcba4d9]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "-7675.8987986E0", "-7675", "20")
    self.bid64_to_int64_xint("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[83d9ce9c16120142]", "0", "20")
    self.bid64_to_int64_xint("0", "+8665888598798.555967E0", "8665888598798", "20")
    self.bid64_to_int64_xint("0", "[905cacb0af2bac10]", "0", "20")
    self.bid64_to_int64_xint("0", "-9325278.3E0", "-9325278", "20")
    self.bid64_to_int64_xint("0", "[b197fd82bf4ca439]", "-67526624613919", "20")
    self.bid64_to_int64_xint("0", "[b1c4d9bc60976b81]", "-1365303004457857", "00")
    self.bid64_to_int64_xint("0", "[b1fc99927045463a]", "-80501535757614660", "00")
    self.bid64_to_int64_xint("0", "[b242bcd407307125]", "-7705687931251570000", "00")
    self.bid64_to_int64_xint("0", "[b243608db1766425]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[b9ee6e904e018340]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[c060000000000000]", "0", "00")
    self.bid64_to_int64_xint("0", "[d702d9cb97ee9375]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[d800000000000000]", "0", "00")
    self.bid64_to_int64_xint("0", "[e6fdd7f7fffff79b]", "0", "00")
    self.bid64_to_int64_xint("0", "[ebc26e398f2877f5]", "0", "20")
    self.bid64_to_int64_xint("0", "[f7d9fbf5ffb3effd]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "[ffffffeedef5dff7]", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_xint("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_xrnint() {
    self.bid64_to_int64_xrnint("0", "-0", "0", "00")
    self.bid64_to_int64_xrnint("0", "0", "0", "00")
    self.bid64_to_int64_xrnint("0", "[0000000000000022]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[0d32000000000000]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[106060a238289500]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[1b02c0684f1f0ebf]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[21490ea72d522b84]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[223860673f8c3958]", "0", "20")
    self.bid64_to_int64_xrnint("0", "+2293.78858528E0", "2294", "20")
    self.bid64_to_int64_xrnint("0", "-229.644593E0", "-230", "20")
    self.bid64_to_int64_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[2fd27f6109a6f835]", "1", "20")
    self.bid64_to_int64_xrnint("0", "[2fe0fe36448e0f3e]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int64_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_int64_xrnint("0", "[310723e0dc9ebd78]", "2009773518", "20")
    self.bid64_to_int64_xrnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_xrnint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_xrnint("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_int64_xrnint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_xrnint("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_int64_xrnint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_xrnint("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_int64_xrnint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_xrnint("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_int64_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int64_xrnint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_xrnint("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_int64_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int64_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_int64_xrnint("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_int64_xrnint("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_int64_xrnint("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_int64_xrnint("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_int64_xrnint("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_int64_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_xrnint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_xrnint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_xrnint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xrnint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_xrnint("0", "[32420838e1000c5a]", "5719903394888580000", "00")
    self.bid64_to_int64_xrnint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_xrnint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_xrnint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_xrnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xrnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xrnint("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[38f24f6b28f4a5ea]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "+586.9769668E0", "587", "20")
    self.bid64_to_int64_xrnint("0", "[5960000000000000]", "0", "00")
    self.bid64_to_int64_xrnint("0", "[610ce053f330f7be]", "0", "00")
    self.bid64_to_int64_xrnint("0", "[6a2ada12ab26dbf7]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int64_xrnint("0", "[6c72831f70c88c94]", "9714320267578516", "00")
    self.bid64_to_int64_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[6c8906e8c2f14b25]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[7462e9ffb2bd925f]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "-79857.5875775E0", "-79858", "20")
    self.bid64_to_int64_xrnint("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[81c13c2e1d7f03ea]", "0", "20")
    self.bid64_to_int64_xrnint("0", "+837364244.77E0", "837364245", "20")
    self.bid64_to_int64_xrnint("0", "-8888989988.88888888E0", "-8888989989", "20")
    self.bid64_to_int64_xrnint("0", "-89889888899.88889E0", "-89889888900", "20")
    self.bid64_to_int64_xrnint("0", "[8c854922ae4d3e23]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[961d7b8496bed7eb]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[973621bc738b8434]", "0", "20")
    self.bid64_to_int64_xrnint("0", "-99888999.9E0", "-99889000", "20")
    self.bid64_to_int64_xrnint("0", "[a520000000000000]", "0", "00")
    self.bid64_to_int64_xrnint("0", "[afc327518fbd2f9f]", "0", "20")
    self.bid64_to_int64_xrnint("0", "[afddfddff7de576f]", "-1", "20")
    self.bid64_to_int64_xrnint("0", "[afe5a701183a2606]", "-2", "20")
    self.bid64_to_int64_xrnint("0", "[b00129d090c25209]", "-3", "20")
    self.bid64_to_int64_xrnint("0", "[b1be0c994f4019bb]", "-845810190045024", "20")
    self.bid64_to_int64_xrnint("0", "[b1c03b0025924aa0]", "-64871816383136", "00")
    self.bid64_to_int64_xrnint("0", "[b226c8aef1dcb60d]", "-1909503567902221000", "00")
    self.bid64_to_int64_xrnint("0", "[ba2a4f6c18fe76eb]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[baf41d3e641a88c8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[bf925b390fe6cb2e]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[bfdffebffffffefb]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[c6f4a24618c58558]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[ccf87a4215ab0a81]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[d26e381ca9752936]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[d63c3aa1aee660f5]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[ec6260a15612ae17]", "-96763952582282", "20")
    self.bid64_to_int64_xrnint("0", "[ec6af280f6ed58f5]", "-983678492064792", "20")
    self.bid64_to_int64_xrnint("0", "[ec898da97ec2beb8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "[fcf605fe661cf30a]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "QNaN", "-9223372036854775808", "01")
    self.bid64_to_int64_xrnint("0", "SNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int64_xrninta() {
    self.bid64_to_int64_xrninta("0", "-0", "0", "00")
    self.bid64_to_int64_xrninta("0", "0", "0", "00")
    self.bid64_to_int64_xrninta("0", "-0.0000010000E0", "0", "20")
    self.bid64_to_int64_xrninta("0", "[0002950491200210]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[0d2f000000000000]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[0d88000000000000]", "0", "20")
    self.bid64_to_int64_xrninta("0", "+1011.01E0", "1011", "20")
    self.bid64_to_int64_xrninta("0", "[28639b4defe21177]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[2dc4969e8ebb0db5]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int64_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int64_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int64_xrninta("0", "[3000409101210088]", "1", "20")
    self.bid64_to_int64_xrninta("0", "[302021b4aea4dc82]", "4", "20")
    self.bid64_to_int64_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_int64_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_int64_xrninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_int64_xrninta("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_int64_xrninta("0", "[31271AFD498AB610]", "19999999999", "20")
    self.bid64_to_int64_xrninta("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_int64_xrninta("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_int64_xrninta("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_int64_xrninta("0", "[31271AFD498DC350]", "20000000001", "20")
    self.bid64_to_int64_xrninta("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_int64_xrninta("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_int64_xrninta("0", "[315ee27db5ea0d04]", "869327885212", "20")
    self.bid64_to_int64_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int64_xrninta("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_int64_xrninta("0", "[318C800000000032]", "35184372088833", "20")
    self.bid64_to_int64_xrninta("0", "[319ab6a3d41f125a]", "75191641492076", "20")
    self.bid64_to_int64_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int64_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int64_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_int64_xrninta("0", "[31A0002E90EDCFF1]", "19999999999", "20")
    self.bid64_to_int64_xrninta("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_int64_xrninta("0", "[31A0002E90EDD005]", "20000000001", "20")
    self.bid64_to_int64_xrninta("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_int64_xrninta("0", "[31A1400000000005]", "35184372088833", "20")
    self.bid64_to_int64_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int64_xrninta("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_int64_xrninta("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_int64_xrninta("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_int64_xrninta("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_int64_xrninta("0", "[31dc2bf0ca08c4e2]", "7929612529616098", "00")
    self.bid64_to_int64_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_int64_xrninta("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32438D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3245543DF729C000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32468DB8BAC710CB]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32471AFD498D0000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3248E1BC9BF04000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32638D7EA4C68000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_int64_xrninta("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_int64_xrninta("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_int64_xrninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xrninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_int64_xrninta("0", "[340000000000000F]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3400000000000019]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3420000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3420000000000002]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[3440000000000001]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "+3542569327.38626882E0", "3542569327", "20")
    self.bid64_to_int64_xrninta("0", "[576d6c2d099ef6bc]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[5771d12067dde966]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "-5999699.657E0", "-5999700", "20")
    self.bid64_to_int64_xrninta("0", "[6030924bc6d8512b]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[698a49e8845e2104]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int64_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int64_xrninta("0", "[6c88044e3a7ca610]", "9011933289948688000", "00")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6C88C49BA5E353F8]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[6c89f8ce1dfaffd6]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "-7.7E0", "-8", "20")
    self.bid64_to_int64_xrninta("0", "[7800000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[7c00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[7e00000000000000]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "-857598.76755587E0", "-857599", "20")
    self.bid64_to_int64_xrninta("0", "[890b7a79d40da8d8]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[9160000000000000]", "0", "00")
    self.bid64_to_int64_xrninta("0", "[9230607ccffec4b1]", "0", "20")
    self.bid64_to_int64_xrninta("0", "-9999.89989E0", "-10000", "20")
    self.bid64_to_int64_xrninta("0", "[afc81a477c94e104]", "0", "20")
    self.bid64_to_int64_xrninta("0", "[afdef7fff7ffbdff]", "-1", "20")
    self.bid64_to_int64_xrninta("0", "[b04486a524082083]", "-1274", "20")
    self.bid64_to_int64_xrninta("0", "[b16ddb7e4effbc57]", "-3900510234984", "20")
    self.bid64_to_int64_xrninta("0", "[b1d3399600c08ec6]", "-5411340977999558", "00")
    self.bid64_to_int64_xrninta("0", "[b208f6b461404c5a]", "-252305439983522600", "00")
    self.bid64_to_int64_xrninta("0", "[b23a47a1bc18fa1a]", "-7397109365537306000", "00")
    self.bid64_to_int64_xrninta("0", "[c9eec2d758189029]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[dfff7fffb7fbffff]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[e983c0a51dd65b61]", "0", "00")
    self.bid64_to_int64_xrninta("0", "[ec8b7636361f1932]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "[fad992c0e9957657]", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "-Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "Infinity", "-9223372036854775808", "01")
    self.bid64_to_int64_xrninta("0", "QNaN", "-9223372036854775808", "01")
  }

  private func bid64_to_int64_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_ceil() {
    self.bid64_to_int8_ceil("0", "-1", "-1", "00")
    self.bid64_to_int8_ceil("0", "129", "-128", "01")
    self.bid64_to_int8_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int8_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int8_ceil("0", "[30247E82C3A41000]", "127", "00")
    self.bid64_to_int8_ceil("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_ceil("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int8_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int8_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int8_ceil("0", "[31A00000000004F1]", "127", "00")
    self.bid64_to_int8_ceil("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_ceil("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_ceil("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int8_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_ceil("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_ceil("0", "[9de20851ba87be40]", "0", "00")
  }

  private func bid64_to_int8_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_floor() {
    self.bid64_to_int8_floor("0", "-1", "-1", "00")
    self.bid64_to_int8_floor("0", "129", "-128", "01")
    self.bid64_to_int8_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int8_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int8_floor("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_int8_floor("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_floor("0", "[3024879B1216B000]", "127", "00")
    self.bid64_to_int8_floor("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int8_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int8_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int8_floor("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_int8_floor("0", "[31A00000000004FB]", "127", "00")
    self.bid64_to_int8_floor("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_floor("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_floor("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_floor("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_floor("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int8_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_floor("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_floor("0", "[ffeffffffbffffe7]", "-128", "01")
  }

  private func bid64_to_int8_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_int() {
    self.bid64_to_int8_int("0", "-1", "-1", "00")
    self.bid64_to_int8_int("0", "129", "-128", "01")
    self.bid64_to_int8_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int8_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_int8_int("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_int8_int("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_int("0", "[3024879B1216B000]", "127", "00")
    self.bid64_to_int8_int("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_int("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_int("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_int("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_int("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_int("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_int("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_int("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_int("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_int("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_int8_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int8_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_int8_int("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_int8_int("0", "[31A00000000004FB]", "127", "00")
    self.bid64_to_int8_int("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_int("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_int("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_int("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_int("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_int("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_int("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_int("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_int("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_int("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_int("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_int("0", "[5f1e5fda223b9fff]", "-128", "01")
    self.bid64_to_int8_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_int8_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_int("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_int("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_int("0", "[7e00000000000000]", "-128", "01")
  }

  private func bid64_to_int8_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_rnint() {
    self.bid64_to_int8_rnint("0", "-1", "-1", "00")
    self.bid64_to_int8_rnint("0", "129", "-128", "01")
    self.bid64_to_int8_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_int8_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int8_rnint("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_int8_rnint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_rnint("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int8_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_int8_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int8_rnint("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_int8_rnint("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_rnint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_rnint("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[4f779f671e5fffaa]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int8_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_rnint("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_rnint("0", "[7e00000000000000]", "-128", "01")
  }

  private func bid64_to_int8_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_rninta() {
    self.bid64_to_int8_rninta("0", "-1", "-1", "00")
    self.bid64_to_int8_rninta("0", "129", "-128", "01")
    self.bid64_to_int8_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_int8_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_int8_rninta("0", "[30247E82C3A41000]", "127", "00")
    self.bid64_to_int8_rninta("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_rninta("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_int8_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_int8_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_int8_rninta("0", "[31A00000000004F1]", "127", "00")
    self.bid64_to_int8_rninta("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_rninta("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_rninta("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_int8_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_rninta("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_rninta("0", "[ff7ef7f661ea3cbd]", "-128", "01")
  }

  private func bid64_to_int8_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_xceil() {
    self.bid64_to_int8_xceil("0", "-1", "-1", "00")
    self.bid64_to_int8_xceil("0", "129", "-128", "01")
    self.bid64_to_int8_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int8_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int8_xceil("0", "[30247E82C3A41000]", "127", "20")
    self.bid64_to_int8_xceil("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_xceil("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int8_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int8_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int8_xceil("0", "[31A00000000004F1]", "127", "20")
    self.bid64_to_int8_xceil("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_xceil("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_xceil("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int8_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_xceil("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_xceil("0", "[f08f708604fdc8aa]", "0", "00")
  }

  private func bid64_to_int8_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_xfloor() {
    self.bid64_to_int8_xfloor("0", "-1", "-1", "00")
    self.bid64_to_int8_xfloor("0", "129", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int8_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int8_xfloor("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_int8_xfloor("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_xfloor("0", "[3024879B1216B000]", "127", "20")
    self.bid64_to_int8_xfloor("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int8_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int8_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int8_xfloor("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_int8_xfloor("0", "[31A00000000004FB]", "127", "20")
    self.bid64_to_int8_xfloor("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_xfloor("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_xfloor("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int8_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_xfloor("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_xfloor("0", "[8b3b56689b019f0e]", "-1", "20")
  }

  private func bid64_to_int8_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_xint() {
    self.bid64_to_int8_xint("0", "-1", "-1", "00")
    self.bid64_to_int8_xint("0", "129", "-128", "01")
    self.bid64_to_int8_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int8_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_int8_xint("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_int8_xint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_xint("0", "[3024879B1216B000]", "127", "20")
    self.bid64_to_int8_xint("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_int8_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int8_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_int8_xint("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_int8_xint("0", "[31A00000000004FB]", "127", "20")
    self.bid64_to_int8_xint("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_xint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_xint("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_xint("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_xint("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_int8_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_xint("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_xint("0", "[ffff7fdffffdefff]", "-128", "01")
  }

  private func bid64_to_int8_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_xrnint() {
    self.bid64_to_int8_xrnint("0", "-1", "-1", "00")
    self.bid64_to_int8_xrnint("0", "129", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_int8_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int8_xrnint("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_int8_xrnint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_xrnint("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int8_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_int8_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int8_xrnint("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_int8_xrnint("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_xrnint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_xrnint("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int8_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_xrnint("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[7e00000000000000]", "-128", "01")
    self.bid64_to_int8_xrnint("0", "[e64bf972bed7357b]", "0", "00")
  }

  private func bid64_to_int8_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_int8_xrninta() {
    self.bid64_to_int8_xrninta("0", "-1", "-1", "00")
    self.bid64_to_int8_xrninta("0", "129", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[26bcf5e801c36421]", "0", "20")
    self.bid64_to_int8_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_int8_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_int8_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_int8_xrninta("0", "[30247E82C3A41000]", "127", "20")
    self.bid64_to_int8_xrninta("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_int8_xrninta("0", "[3024879B1216B000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[30248C2739500000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[302490B360895000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[3024953F87C2A000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[30290F36242D6000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[302913C24B66B000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[3029184E72A00000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[30291CDA99D95000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[30292166C112A000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[302AA87BEE538000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[302AAD08158CD000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_int8_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_int8_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_int8_xrninta("0", "[31A00000000004F1]", "127", "20")
    self.bid64_to_int8_xrninta("0", "[31A00000000004FB]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31A0000000000505]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31A00000000009FB]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31A0000000000A05]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31A0000000000BBD]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_int8_xrninta("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_int8_xrninta("0", "[31C0000000000080]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31C0000000000081]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31C00000000000FF]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31C0000000000100]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[31C0000000000101]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[3200000000000003]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_int8_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_int8_xrninta("0", "[7800000000000000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[7c00000000000000]", "-128", "01")
    self.bid64_to_int8_xrninta("0", "[7e00000000000000]", "-128", "01")
  }

  private func bid64_to_int8_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_string() {
    self.bid64_to_string("0", "[31c0000000000037]", "+55E+0", "00")
    self.bid64_to_string("0", "[64ff55cb7bb8be2b]", "+0E-239", "00")
    self.bid64_to_string("0", "[69dbb75d7734cd9e]", "+0E-83", "00")
    self.bid64_to_string("0", "[6ddd5f2bc961d9c6]", "+0E+45", "00")
    self.bid64_to_string("0", "[7933324ba39af65d]", "+Inf", "00")
    self.bid64_to_string("0", "[7c03ffffffffffff]", "+NaN", "00")
    self.bid64_to_string("0", "[7e00000000000000]", "+SNaN", "00")
    self.bid64_to_string("0", "[be20000000000014]", "-20E+99", "00")
    self.bid64_to_string("0", "[ff9ef506fff9e3bf]", "-SNaN", "00")
    self.bid64_to_string("0", "[ffdbb3ffaefefdff]", "-SNaN", "00")
    self.bid64_to_string("3", "[f8f0000000000001]", "-Inf", "00")
    self.bid64_to_string("3", "[fcf0000000000000]", "-NaN", "00")
  }

  private func bid64_to_string(
    _ _rounding: String,
    _ _arg0: String,
    _ expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toString(status: &status)
    self.assertToString(Decimal64.self, result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_totalOrder() {
    self.bid64_totalOrder("0", "0", "-0", "0", "00")
    self.bid64_totalOrder("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_totalOrder("0", "[0000000000000000]", "[6aeb34ffd6033a6b]", "1", "00")
    self.bid64_totalOrder("0", "[0006082180080050]", "[6dce1c55d77c6627]", "0", "00")
    self.bid64_totalOrder("0", "[0010230100040000]", "[0000000000000000]", "0", "00")
    self.bid64_totalOrder("0", "[0c3b000000000000]", "[be33a88e4eb91a55]", "0", "00")
    self.bid64_totalOrder("0", "-0", "QNaN", "1", "00")
    self.bid64_totalOrder("0", "0", "QNaN", "1", "00")
    self.bid64_totalOrder("0", "0", "SNaN", "1", "00")
    self.bid64_totalOrder("0", "1.0", "1", "1", "00")
    self.bid64_totalOrder("0", "1", "1.0", "0", "00")
    self.bid64_totalOrder("0", "[3c7e3b50324cdad4]", "[1f8869a841318bd3]", "0", "00")
    self.bid64_totalOrder("0", "[3f60e6ce2fb54e99]", "[8560efb99fe1a25a]", "0", "00")
    self.bid64_totalOrder("0", "[4151292dc7ddfb1f]", "[7bfffe6ecafbffff]", "1", "00")
    self.bid64_totalOrder("0", "[41849debe6a63955]", "[dbffacb4c26fd3d7]", "0", "00")
    self.bid64_totalOrder("0", "[44b806eafb78769d]", "[0640000000000000]", "0", "00")
    self.bid64_totalOrder("0", "[4b6d62a46e996446]", "[e3c8c6341743c275]", "0", "00")
    self.bid64_totalOrder("0", "[66e2cfdfe3bfbfdf]", "[e76a78fade4d5645]", "0", "00")
    self.bid64_totalOrder("0", "[751e6e94d0717b7e]", "[2a1f1efd5d0ad7da]", "1", "00")
    self.bid64_totalOrder("0", "[7bfb891c1f1ffc2f]", "[1af564ed868185c2]", "0", "00")
    self.bid64_totalOrder("0", "[7dab90d3d035a79a]", "[7dfb854bdd6bbd27]", "1", "00")
    self.bid64_totalOrder("0", "[7eff8406185cfc33]", "[7ff3dfdbb7dbccdf]", "0", "00")
    self.bid64_totalOrder("0", "[7f6cb6613f7fcf9f]", "[7d4bbd7355a38753]", "1", "00")
    self.bid64_totalOrder("0", "[7ffdfdfffbeb6fff]", "[7edb7be3d55e3ff6]", "1", "00")
    self.bid64_totalOrder("0", "[7ffffffedff99ffb]", "[fddadb79ef5f5fff]", "0", "00")
    self.bid64_totalOrder("0", "[8532eede32e2a8cf]", "[47080932e15557fb]", "1", "00")
    self.bid64_totalOrder("0", "[9be87b086d79f76a]", "[fcf3f1f5adbde7ef]", "0", "00")
    self.bid64_totalOrder("0", "[a2eb6743df3efd23]", "[49dce550ac84506e]", "1", "00")
    self.bid64_totalOrder("0", "[a3267a003b7ab3de]", "[ba58fbd307145e22]", "0", "00")
    self.bid64_totalOrder("0", "[afa2e30e0bbf5cbc]", "[a26ddb6b5f642f7e]", "1", "00")
    self.bid64_totalOrder("0", "[c301c82408095502]", "[c1db421e000440e8]", "1", "00")
    self.bid64_totalOrder("0", "[cc2ae74b8f509bd5]", "[cc84166baa1cff47]", "0", "00")
    self.bid64_totalOrder("0", "[d10505fc78a67979]", "[9cc0000000000000]", "1", "00")
    self.bid64_totalOrder("0", "[d9b8810fefc917b0]", "[44cd418c6d196c9f]", "1", "00")
    self.bid64_totalOrder("0", "[e0c377cb6a1bfd75]", "[ec0b6505adc3dd15]", "0", "00")
    self.bid64_totalOrder("0", "[e7f2d9d4efddf9ed]", "[9ecca8e8e2e6225b]", "1", "00")
    self.bid64_totalOrder("0", "[f4dd3a17d84856c2]", "[efbed79af883dff7]", "1", "00")
    self.bid64_totalOrder("0", "[f7ffdfffefbf7fff]", "[f7fffffffffaff7f]", "1", "00")
    self.bid64_totalOrder("0", "[f8f48edf7b7eed66]", "[9828040808fe386d]", "1", "00")
    self.bid64_totalOrder("0", "[fdedcae7dddedc7b]", "[fcf697bfb2f5be8d]", "0", "00")
    self.bid64_totalOrder("0", "[ffbffd77ffdbbf6e]", "[fffeafdbfffef7ff]", "0", "00")
    self.bid64_totalOrder("0", "[ffbffffffeffdfff]", "[ffffffffffffffff]", "1", "00")
    self.bid64_totalOrder("0", "[ffffeffbffefbfff]", "[f4fe78fdf4e4e9d7]", "1", "00")
    self.bid64_totalOrder("0", "[ffffffffffffffff]", "[fd9c97fbff77fff7]", "0", "00")
    self.bid64_totalOrder("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_totalOrder("0", "Infinity", "SNaN", "1", "00")
    self.bid64_totalOrder("0", "QNaN", "0", "0", "00")
    self.bid64_totalOrder("0", "QNaN", "Infinity", "0", "00")
    self.bid64_totalOrder("0", "[7c00000000000000]", "[7e00000000000000]", "0", "00")
    self.bid64_totalOrder("0", "[7e00000000000000]", "[7c00000000000000]", "1", "00")
    self.bid64_totalOrder("0", "[fc00000000000000]", "[fe00000000000000]", "1", "00")
    self.bid64_totalOrder("0", "[fe00000000000000]", "[fc00000000000000]", "0", "00")
    self.bid64_totalOrder("0", "[fc03000000000002]", "[fc03000000000001]", "1", "00")
    self.bid64_totalOrder("0", "[7e03000000000001]", "[7e03000000000002]", "1", "00")
    self.bid64_totalOrder("0", "+Inf", "[7800000000000001]", "1", "00")
    self.bid64_totalOrder("0", "-2", "-Inf", "0", "00")
    self.bid64_totalOrder("0", "+0E+2", "+0", "0", "00")
    self.bid64_totalOrder("0", "-0", "-1.0", "0", "00")
    self.bid64_totalOrder("0", "123", "124E+1", "1", "00")
    self.bid64_totalOrder("0", "123E+20", "124E+1", "0", "00")
    self.bid64_totalOrder("0", "124", "1E+20", "1", "00")
    self.bid64_totalOrder("0", "-1E+14", "-10000E+10", "1", "00")
    self.bid64_totalOrder("0", "-1E+14", "-10001E+10", "0", "00")
    self.bid64_totalOrder("0", "1E+14", "10000E+10", "0", "00")
    self.bid64_totalOrder("0", "1E+14", "10001E+10", "1", "00")
    self.bid64_totalOrder("0", "-10000E+10", "-1E+14", "0", "00")
    self.bid64_totalOrder("0", "-10001E+10", "-1E+14", "1", "00")
    self.bid64_totalOrder("0", "10000E+10", "1E+14", "1", "00")
    self.bid64_totalOrder("0", "10001E+10", "1E+14", "0", "00")
  }

  private func bid64_totalOrder(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isTotallyOrdered(belowOrEqualTo: arg1)
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_totalOrderMag() {
    self.bid64_totalOrderMag("0", "[0000000000000000]", "[0000000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[0000000000000000]", "[d20670083d534a46]", "1", "00")
    self.bid64_totalOrderMag("0", "0", "-0", "1", "00")
    self.bid64_totalOrderMag("0", "[00483400205a0108]", "[add057004d852602]", "1", "00")
    self.bid64_totalOrderMag("0", "[00b38b8003045514]", "[0200000200000010]", "1", "00")
    self.bid64_totalOrderMag("0", "[0805627795f7eba4]", "[fff6fffffff7fffd]", "1", "00")
    self.bid64_totalOrderMag("0", "[0b00940c0b1b4608]", "[fa41ef73c1309469]", "1", "00")
    self.bid64_totalOrderMag("0", "[0e805bff31e759b3]", "[1ca72375d331f47e]", "1", "00")
    self.bid64_totalOrderMag("0", "-0", "QNaN", "1", "00")
    self.bid64_totalOrderMag("0", "0", "QNaN", "1", "00")
    self.bid64_totalOrderMag("0", "0", "SNaN", "1", "00")
    self.bid64_totalOrderMag("0", "1.0", "1", "1", "00")
    self.bid64_totalOrderMag("0", "[1042838468a08140]", "[0000000000000000]", "0", "00")
    self.bid64_totalOrderMag("0", "1", "1.0", "0", "00")
    self.bid64_totalOrderMag("0", "[114c9d58a9875a64]", "[b7ee522b503e48ec]", "1", "00")
    self.bid64_totalOrderMag("0", "[1ac0000000000000]", "[0ae3000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[41ea521fb46122c8]", "[c680b612e2260824]", "1", "00")
    self.bid64_totalOrderMag("0", "[562c25bc1f510abe]", "[f0db2d59a451555a]", "0", "00")
    self.bid64_totalOrderMag("0", "[6485f1b24ce8f132]", "[46a4d9ff4d79acc6]", "1", "00")
    self.bid64_totalOrderMag("0", "[7de33f7afafffbe7]", "[ff3e7ecffaee79bb]", "0", "00")
    self.bid64_totalOrderMag("0", "[7ebfbeccd7abf5fd]", "[f3a8462662a1b521]", "0", "00")
    self.bid64_totalOrderMag("0", "[7ff7f7d77ff3955d]", "[ffffcfbfffffffff]", "1", "00")
    self.bid64_totalOrderMag("0", "[7fff7fb3fff7fbff]", "[ffffbfdffffffffe]", "0", "00")
    self.bid64_totalOrderMag("0", "[8019705df2d97759]", "[39f7cd4942b7e9bd]", "1", "00")
    self.bid64_totalOrderMag("0", "[861f7326409d7e2f]", "[98b2ffef06945516]", "1", "00")
    self.bid64_totalOrderMag("0", "[9760a805c4aca603]", "[690eb432257773e3]", "0", "00")
    self.bid64_totalOrderMag("0", "[9cff4f9fbb20d24c]", "[c3904953ae1cae58]", "1", "00")
    self.bid64_totalOrderMag("0", "[ae94a16fa3e37d1e]", "[c7474bda93dac462]", "1", "00")
    self.bid64_totalOrderMag("0", "[b1c17d35c37c6403]", "[b0de5d7824d03b0b]", "0", "00")
    self.bid64_totalOrderMag("0", "[d200000000000000]", "[eec1895edf539d95]", "1", "00")
    self.bid64_totalOrderMag("0", "[df8dafd6481a0b9b]", "[f41933285dc060a0]", "0", "00")
    self.bid64_totalOrderMag("0", "[ebb10b24d1cc0719]", "[c22aa1ef3bb5db78]", "1", "00")
    self.bid64_totalOrderMag("0", "[ebfffbffffffffff]", "[6e97e7f87bc60295]", "1", "00")
    self.bid64_totalOrderMag("0", "[eff968927d3c49e4]", "[923a2ad67a9ea634]", "0", "00")
    self.bid64_totalOrderMag("0", "[f81696b10870a09a]", "[4de22fca6a2c3fa4]", "0", "00")
    self.bid64_totalOrderMag("0", "[ff7b3ebefedc78fc]", "[ffb6ffff7f7ffff3]", "0", "00")
    self.bid64_totalOrderMag("0", "-Infinity", "Infinity", "1", "00")
    self.bid64_totalOrderMag("0", "Infinity", "SNaN", "1", "00")
    self.bid64_totalOrderMag("0", "QNaN", "0", "0", "00")
    self.bid64_totalOrderMag("0", "QNaN", "Infinity", "0", "00")
    self.bid64_totalOrderMag("0", "[7c00000000000000]", "[7e00000000000000]", "0", "00")
    self.bid64_totalOrderMag("0", "[7e00000000000000]", "[7c00000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[fc00000000000000]", "[fe00000000000000]", "0", "00")
    self.bid64_totalOrderMag("0", "[fe00000000000000]", "[fc00000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[7800000000000000]", "[7800000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[f800000000000000]", "[f800000000000000]", "1", "00")
    self.bid64_totalOrderMag("0", "[31C0000000000001]", "[2FE38D7EA4C68000]", "0", "00")
    self.bid64_totalOrderMag("0", "[B1C0000000000001]", "[AFE38D7EA4C68000]", "0", "00")
    self.bid64_totalOrderMag("0", "[7c03000000000001]", "[7c03000000000002]", "1", "00")
    self.bid64_totalOrderMag("0", "Inf", "[7800000000000001]", "1", "00")
    self.bid64_totalOrderMag("0", "0E+2", "0", "0", "00")
    self.bid64_totalOrderMag("0", "1E+14", "10001E+10", "1", "00")
    self.bid64_totalOrderMag("0", "10001E+10", "1E+14", "0", "00")
    self.bid64_totalOrderMag("0", "1E+14", "10000E+10", "0", "00")
  }

  private func bid64_totalOrderMag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal64(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let arg0Mag = arg0.magnitude
    let arg1Mag = arg1.magnitude
    let result = arg0Mag.isTotallyOrdered(belowOrEqualTo: arg1Mag)
    self.assertBool(result, expected, file, line)
  }

  func test_bid64_to_uint16_ceil() {
    self.bid64_to_uint16_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint16_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint16_ceil("0", "[306BA418874DA400]", "32767", "00")
    self.bid64_to_uint16_ceil("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_ceil("0", "[306BA42FCFC48C00]", "32768", "00")
    self.bid64_to_uint16_ceil("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_ceil("0", "[306BA447183B7400]", "32769", "00")
    self.bid64_to_uint16_ceil("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_ceil("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_ceil("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint16_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint16_ceil("0", "[31A000000004FFF1]", "32767", "00")
    self.bid64_to_uint16_ceil("0", "[31A000000004FFFB]", "32768", "00")
    self.bid64_to_uint16_ceil("0", "[31A0000000050005]", "32769", "00")
    self.bid64_to_uint16_ceil("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_ceil("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_ceil("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_ceil("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_ceil("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_ceil("0", "65536", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint16_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_ceil("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[7a758e58adf1cd48]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_ceil("0", "[7e00000000000000]", "32768", "01")
  }

  private func bid64_to_uint16_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_floor() {
    self.bid64_to_uint16_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint16_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint16_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint16_floor("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_uint16_floor("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_floor("0", "[306BA42FCFC48C00]", "32767", "00")
    self.bid64_to_uint16_floor("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_floor("0", "[306BA447183B7400]", "32768", "00")
    self.bid64_to_uint16_floor("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_floor("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_floor("0", "[3077486B43C48C00]", "65535", "00")
    self.bid64_to_uint16_floor("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint16_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint16_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint16_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint16_floor("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_uint16_floor("0", "[31A000000004FFFB]", "32767", "00")
    self.bid64_to_uint16_floor("0", "[31A0000000050005]", "32768", "00")
    self.bid64_to_uint16_floor("0", "[31A000000009FFFB]", "65535", "00")
    self.bid64_to_uint16_floor("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_floor("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_floor("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_floor("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_floor("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_floor("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_floor("0", "65536", "32768", "01")
    self.bid64_to_uint16_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint16_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_floor("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_floor("0", "[f13ff2fe3e39ede8]", "0", "00")
  }

  private func bid64_to_uint16_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_int() {
    self.bid64_to_uint16_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint16_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint16_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint16_int("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_uint16_int("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_int("0", "[306BA42FCFC48C00]", "32767", "00")
    self.bid64_to_uint16_int("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_int("0", "[306BA447183B7400]", "32768", "00")
    self.bid64_to_uint16_int("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_int("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_int("0", "[3077486B43C48C00]", "65535", "00")
    self.bid64_to_uint16_int("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_int("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_int("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint16_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint16_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint16_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint16_int("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_uint16_int("0", "[31A000000004FFFB]", "32767", "00")
    self.bid64_to_uint16_int("0", "[31A0000000050005]", "32768", "00")
    self.bid64_to_uint16_int("0", "[31A000000009FFFB]", "65535", "00")
    self.bid64_to_uint16_int("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_int("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_int("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_int("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_int("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_int("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_int("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_int("0", "65536", "32768", "01")
    self.bid64_to_uint16_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint16_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_int("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_int("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_int("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_int("0", "[feefdfe7bb9fff62]", "32768", "01")
  }

  private func bid64_to_uint16_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_rnint() {
    self.bid64_to_uint16_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint16_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint16_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint16_rnint("0", "[306BA418874DA400]", "32766", "00")
    self.bid64_to_uint16_rnint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_rnint("0", "[306BA42FCFC48C00]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[306BA447183B7400]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_rnint("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_rnint("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint16_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint16_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint16_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint16_rnint("0", "[31A000000004FFF1]", "32766", "00")
    self.bid64_to_uint16_rnint("0", "[31A000000004FFFB]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[31A0000000050005]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_rnint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_rnint("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_rnint("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_rnint("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_rnint("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_rnint("0", "65536", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint16_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_rnint("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_rnint("0", "[99ffe80ea695f57b]", "0", "00")
  }

  private func bid64_to_uint16_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_rninta() {
    self.bid64_to_uint16_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint16_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint16_rninta("0", "[306BA418874DA400]", "32767", "00")
    self.bid64_to_uint16_rninta("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_rninta("0", "[306BA42FCFC48C00]", "32768", "00")
    self.bid64_to_uint16_rninta("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_rninta("0", "[306BA447183B7400]", "32769", "00")
    self.bid64_to_uint16_rninta("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_rninta("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_rninta("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint16_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint16_rninta("0", "[31A000000004FFF1]", "32767", "00")
    self.bid64_to_uint16_rninta("0", "[31A000000004FFFB]", "32768", "00")
    self.bid64_to_uint16_rninta("0", "[31A0000000050005]", "32769", "00")
    self.bid64_to_uint16_rninta("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_rninta("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_rninta("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_rninta("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_rninta("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_rninta("0", "65536", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint16_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_rninta("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_rninta("0", "[f900279fddf742b9]", "32768", "01")
  }

  private func bid64_to_uint16_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_xceil() {
    self.bid64_to_uint16_xceil("0", "[0001000000000020]", "1", "20")
    self.bid64_to_uint16_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint16_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint16_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint16_xceil("0", "[306BA418874DA400]", "32767", "20")
    self.bid64_to_uint16_xceil("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_xceil("0", "[306BA42FCFC48C00]", "32768", "20")
    self.bid64_to_uint16_xceil("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_xceil("0", "[306BA447183B7400]", "32769", "20")
    self.bid64_to_uint16_xceil("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_xceil("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_xceil("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint16_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint16_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint16_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint16_xceil("0", "[31A000000004FFF1]", "32767", "20")
    self.bid64_to_uint16_xceil("0", "[31A000000004FFFB]", "32768", "20")
    self.bid64_to_uint16_xceil("0", "[31A0000000050005]", "32769", "20")
    self.bid64_to_uint16_xceil("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_xceil("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_xceil("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_xceil("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_xceil("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_xceil("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_xceil("0", "65536", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint16_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_xceil("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_xceil("0", "[7e00000000000000]", "32768", "01")
  }

  private func bid64_to_uint16_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_xfloor() {
    self.bid64_to_uint16_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint16_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint16_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint16_xfloor("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_uint16_xfloor("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_xfloor("0", "[306BA42FCFC48C00]", "32767", "20")
    self.bid64_to_uint16_xfloor("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_xfloor("0", "[306BA447183B7400]", "32768", "20")
    self.bid64_to_uint16_xfloor("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_xfloor("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_xfloor("0", "[3077486B43C48C00]", "65535", "20")
    self.bid64_to_uint16_xfloor("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint16_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint16_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint16_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint16_xfloor("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_uint16_xfloor("0", "[31A000000004FFFB]", "32767", "20")
    self.bid64_to_uint16_xfloor("0", "[31A0000000050005]", "32768", "20")
    self.bid64_to_uint16_xfloor("0", "[31A000000009FFFB]", "65535", "20")
    self.bid64_to_uint16_xfloor("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_xfloor("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_xfloor("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_xfloor("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_xfloor("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_xfloor("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_xfloor("0", "65536", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[69ea3cbdfffefff7]", "0", "20")
    self.bid64_to_uint16_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint16_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_xfloor("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_xfloor("0", "[7e00000000000000]", "32768", "01")
  }

  private func bid64_to_uint16_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_xint() {
    self.bid64_to_uint16_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint16_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint16_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint16_xint("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_uint16_xint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_xint("0", "[306BA42FCFC48C00]", "32767", "20")
    self.bid64_to_uint16_xint("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_xint("0", "[306BA447183B7400]", "32768", "20")
    self.bid64_to_uint16_xint("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_xint("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_xint("0", "[3077486B43C48C00]", "65535", "20")
    self.bid64_to_uint16_xint("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint16_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint16_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint16_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint16_xint("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_uint16_xint("0", "[31A000000004FFFB]", "32767", "20")
    self.bid64_to_uint16_xint("0", "[31A0000000050005]", "32768", "20")
    self.bid64_to_uint16_xint("0", "[31A000000009FFFB]", "65535", "20")
    self.bid64_to_uint16_xint("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_xint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_xint("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_xint("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_xint("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_xint("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_xint("0", "65536", "32768", "01")
    self.bid64_to_uint16_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint16_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_xint("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_xint("0", "[d7abf7fffeffbecc]", "32768", "01")
  }

  private func bid64_to_uint16_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_xrnint() {
    self.bid64_to_uint16_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint16_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint16_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint16_xrnint("0", "[306BA418874DA400]", "32766", "20")
    self.bid64_to_uint16_xrnint("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_xrnint("0", "[306BA42FCFC48C00]", "32768", "20")
    self.bid64_to_uint16_xrnint("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_xrnint("0", "[306BA447183B7400]", "32768", "20")
    self.bid64_to_uint16_xrnint("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_xrnint("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_xrnint("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint16_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint16_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint16_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint16_xrnint("0", "[31A000000004FFF1]", "32766", "20")
    self.bid64_to_uint16_xrnint("0", "[31A000000004FFFB]", "32768", "20")
    self.bid64_to_uint16_xrnint("0", "[31A0000000050005]", "32768", "20")
    self.bid64_to_uint16_xrnint("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_xrnint("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_xrnint("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_xrnint("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_xrnint("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_xrnint("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_xrnint("0", "65536", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint16_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_xrnint("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_xrnint("0", "[fffd7fdefd3de9fd]", "32768", "01")
  }

  private func bid64_to_uint16_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint16_xrninta() {
    self.bid64_to_uint16_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint16_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint16_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint16_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint16_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint16_xrninta("0", "[306BA418874DA400]", "32767", "20")
    self.bid64_to_uint16_xrninta("0", "[306BA4242B891800]", "32767", "00")
    self.bid64_to_uint16_xrninta("0", "[306BA42FCFC48C00]", "32768", "20")
    self.bid64_to_uint16_xrninta("0", "[306BA43B74000000]", "32768", "00")
    self.bid64_to_uint16_xrninta("0", "[306BA447183B7400]", "32769", "20")
    self.bid64_to_uint16_xrninta("0", "[306BA452BC76E800]", "32769", "00")
    self.bid64_to_uint16_xrninta("0", "[3077485F9F891800]", "65535", "00")
    self.bid64_to_uint16_xrninta("0", "[3077486B43C48C00]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[30774876E8000000]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[307748828C3B7400]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[3077488E3076E800]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint16_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint16_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint16_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint16_xrninta("0", "[31A000000004FFF1]", "32767", "20")
    self.bid64_to_uint16_xrninta("0", "[31A000000004FFFB]", "32768", "20")
    self.bid64_to_uint16_xrninta("0", "[31A0000000050005]", "32769", "20")
    self.bid64_to_uint16_xrninta("0", "[31A000000009FFFB]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[31A00000000A0005]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint16_xrninta("0", "[31C0000000007FFF]", "32767", "00")
    self.bid64_to_uint16_xrninta("0", "[31C0000000008000]", "32768", "00")
    self.bid64_to_uint16_xrninta("0", "[31C0000000008001]", "32769", "00")
    self.bid64_to_uint16_xrninta("0", "[31C000000000FFFF]", "65535", "00")
    self.bid64_to_uint16_xrninta("0", "[31C0000000010000]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[31C0000000010001]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint16_xrninta("0", "65536", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint16_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint16_xrninta("0", "[7800000000000000]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[7c00000000000000]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[7e00000000000000]", "32768", "01")
    self.bid64_to_uint16_xrninta("0", "[f937520dc082ee39]", "32768", "01")
  }

  private func bid64_to_uint16_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_ceil() {
    self.bid64_to_uint32_ceil("0", "-0", "0", "00")
    self.bid64_to_uint32_ceil("0", "0", "0", "00")
    self.bid64_to_uint32_ceil("0", "[0040608004203200]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[0cd74d2b4da823b5]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[1870ed62907dff52]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint32_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint32_ceil("0", "[30d4552ed1f373af]", "57231592", "00")
    self.bid64_to_uint32_ceil("0", "[3107A11FFFE91CA0]", "2147483647", "00")
    self.bid64_to_uint32_ceil("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_ceil("0", "[3107A11FFFF85EE0]", "2147483648", "00")
    self.bid64_to_uint32_ceil("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_ceil("0", "[3107A1200007A120]", "2147483649", "00")
    self.bid64_to_uint32_ceil("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_ceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_ceil("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_ceil("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3111463c03c9bda5]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3120843080810090]", "1453438493", "00")
    self.bid64_to_uint32_ceil("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[3160004110000280]", "279441311", "00")
    self.bid64_to_uint32_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint32_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint32_ceil("0", "[31A00004FFFFFFF1]", "2147483647", "00")
    self.bid64_to_uint32_ceil("0", "[31A00004FFFFFFFB]", "2147483648", "00")
    self.bid64_to_uint32_ceil("0", "[31A0000500000005]", "2147483649", "00")
    self.bid64_to_uint32_ceil("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[31c0000018028000]", "402817024", "00")
    self.bid64_to_uint32_ceil("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_ceil("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_ceil("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_ceil("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_ceil("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31c0000180410065]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_ceil("0", "[3200000000080602]", "52582600", "00")
    self.bid64_to_uint32_ceil("0", "[3200000002219404]", "3575501200", "00")
    self.bid64_to_uint32_ceil("0", "[3230858555534678]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_ceil("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[3d5e6fd8129ef3e3]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[4d9de60827c2283b]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[4fe5858d11e51985]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[54540aaa2a5fa888]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint32_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_ceil("0", "[6d93752822d94af2]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[b05d32dd64a32c6b]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[b10b708e86602a58]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[b51f164d75483625]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[bb03191453d143ea]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[cc5bad6f533aa2e4]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[d0e7656462c2126e]", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "[e0a24502dd0784c2]", "0", "00")
    self.bid64_to_uint32_ceil("0", "[e6cecf55c6bcf28c]", "0", "00")
    self.bid64_to_uint32_ceil("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_ceil("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_floor() {
    self.bid64_to_uint32_floor("0", "-0", "0", "00")
    self.bid64_to_uint32_floor("0", "0", "0", "00")
    self.bid64_to_uint32_floor("0", "[0a1347edb45953a5]", "0", "00")
    self.bid64_to_uint32_floor("0", "[0a1c000000000000]", "0", "00")
    self.bid64_to_uint32_floor("0", "[0a4395f2cea00b3b]", "0", "00")
    self.bid64_to_uint32_floor("0", "[165010030ee0bdcb]", "0", "00")
    self.bid64_to_uint32_floor("0", "[17e75b3a3feea522]", "0", "00")
    self.bid64_to_uint32_floor("0", "[22162c2462fb48bf]", "0", "00")
    self.bid64_to_uint32_floor("0", "[24a90b98b5deb73e]", "0", "00")
    self.bid64_to_uint32_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint32_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint32_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint32_floor("0", "[30af7c3a1f4d0f32]", "4358713", "00")
    self.bid64_to_uint32_floor("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_uint32_floor("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_floor("0", "[3107A11FFFF85EE0]", "2147483647", "00")
    self.bid64_to_uint32_floor("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_floor("0", "[3107A1200007A120]", "2147483648", "00")
    self.bid64_to_uint32_floor("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_floor("0", "[310982a00b111c00]", "2676898682", "00")
    self.bid64_to_uint32_floor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_floor("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_floor("0", "[310F423FFFF85EE0]", "4294967295", "00")
    self.bid64_to_uint32_floor("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[310f64eb00b282a1]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint32_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint32_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint32_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint32_floor("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_uint32_floor("0", "[31A00004FFFFFFFB]", "2147483647", "00")
    self.bid64_to_uint32_floor("0", "[31A0000500000005]", "2147483648", "00")
    self.bid64_to_uint32_floor("0", "[31A00009FFFFFFFB]", "4294967295", "00")
    self.bid64_to_uint32_floor("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_floor("0", "[31c0000000002821]", "10273", "00")
    self.bid64_to_uint32_floor("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_floor("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_floor("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_floor("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_floor("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_floor("0", "[3200000000a100c4]", "1055149200", "00")
    self.bid64_to_uint32_floor("0", "[3200000004080240]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_floor("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[4374d7ba142dc4c5]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[45a7141d27257073]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[460a0a8000100900]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint32_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_floor("0", "[771926b0a40c1218]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[7b600d8770a2c6c1]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[9d60000000000000]", "0", "00")
    self.bid64_to_uint32_floor("0", "[b0bde95b0b7c86d2]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[cbffffaffeffffbf]", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "[df20000000000000]", "0", "00")
    self.bid64_to_uint32_floor("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_floor("0", "QNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_int() {
    self.bid64_to_uint32_int("0", "0", "0", "00")
    self.bid64_to_uint32_int("0", "-0.000E0", "0", "00")
    self.bid64_to_uint32_int("0", "[0100004030000050]", "0", "00")
    self.bid64_to_uint32_int("0", "[065d5f850dbf0596]", "0", "00")
    self.bid64_to_uint32_int("0", "[0be1015389fd700f]", "0", "00")
    self.bid64_to_uint32_int("0", "[0ef8000000000000]", "0", "00")
    self.bid64_to_uint32_int("0", "[0f83000000000000]", "0", "00")
    self.bid64_to_uint32_int("0", "[2912e034166b2a53]", "0", "00")
    self.bid64_to_uint32_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint32_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint32_int("0", "[300202403045a510]", "5", "00")
    self.bid64_to_uint32_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint32_int("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_uint32_int("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_int("0", "[3107A11FFFF85EE0]", "2147483647", "00")
    self.bid64_to_uint32_int("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_int("0", "[3107A1200007A120]", "2147483648", "00")
    self.bid64_to_uint32_int("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_int("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_int("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_int("0", "[310F423FFFF85EE0]", "4294967295", "00")
    self.bid64_to_uint32_int("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[311cf32120d60503]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint32_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint32_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint32_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint32_int("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_uint32_int("0", "[31A00004FFFFFFFB]", "2147483647", "00")
    self.bid64_to_uint32_int("0", "[31A0000500000005]", "2147483648", "00")
    self.bid64_to_uint32_int("0", "[31A00009FFFFFFFB]", "4294967295", "00")
    self.bid64_to_uint32_int("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_int("0", "[31c000001e028000]", "503480320", "00")
    self.bid64_to_uint32_int("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_int("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_int("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_int("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_int("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_int("0", "[32000000000000a0]", "16000", "00")
    self.bid64_to_uint32_int("0", "[3200000004010084]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_int("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[3c0bc042e540295f]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[3f00000000000000]", "0", "00")
    self.bid64_to_uint32_int("0", "[43c075645356b2e2]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[556703de2b973296]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[68b77d4bed1ad8ea]", "0", "00")
    self.bid64_to_uint32_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint32_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_int("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[94e150e3ea62a117]", "0", "00")
    self.bid64_to_uint32_int("0", "[b121c11a7dcedba4]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[b26a545ba441bc82]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[b4921dff9a0cb0c4]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[ec29a14e9fab44aa]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "[f5226d1a9ccc49d0]", "2147483648", "01")
    self.bid64_to_uint32_int("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_int("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_int("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_int("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_rnint() {
    self.bid64_to_uint32_rnint("0", "-0", "0", "00")
    self.bid64_to_uint32_rnint("0", "0", "0", "00")
    self.bid64_to_uint32_rnint("0", "[0bdc000000000000]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint32_rnint("0", "[3002a22046201210]", "7", "00")
    self.bid64_to_uint32_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint32_rnint("0", "[3107A11FFFE91CA0]", "2147483646", "00")
    self.bid64_to_uint32_rnint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_rnint("0", "[3107A11FFFF85EE0]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[3107A1200007A120]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_rnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_rnint("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_rnint("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[311838c94bd40627]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint32_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint32_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint32_rnint("0", "[31A00004FFFFFFF1]", "2147483646", "00")
    self.bid64_to_uint32_rnint("0", "[31A00004FFFFFFFB]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[31A0000500000005]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31a0001200110842]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_rnint("0", "[31c0000020208800]", "539002880", "00")
    self.bid64_to_uint32_rnint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_rnint("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_rnint("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_rnint("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_rnint("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_rnint("0", "[3200000000800080]", "838873600", "00")
    self.bid64_to_uint32_rnint("0", "[3240000000020000]", "1310720000", "00")
    self.bid64_to_uint32_rnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_rnint("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[3918b3d746755017]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[3c58eb0ec1edf206]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[4576e95ce725795f]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[58a98d8aaee9fa38]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[6bf1ee38bc668ba4]", "1", "00")
    self.bid64_to_uint32_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint32_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[71c9ed9627408ad3]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[8043a21ae51c030d]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[889c4e09b23d45df]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[aa4651643ea95611]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[afc9f37a7f55335f]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[afdb7c8477efcf9f]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[afffdfffb7fff4ea]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[b1048d7b664c5e37]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[b64648d22dd86e85]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[c3fbcab9f88bc074]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[e06559b99f20269b]", "0", "00")
    self.bid64_to_uint32_rnint("0", "[f592fa8e00efb451]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "[fbfffeef77fd7eda]", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_rnint("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_rninta() {
    self.bid64_to_uint32_rninta("0", "-0", "0", "00")
    self.bid64_to_uint32_rninta("0", "0", "0", "00")
    self.bid64_to_uint32_rninta("0", "[0100401100540000]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[2df05962e0a1cb2a]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[2fdfabfce77ff9bf]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint32_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint32_rninta("0", "[3107A11FFFE91CA0]", "2147483647", "00")
    self.bid64_to_uint32_rninta("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_rninta("0", "[3107A11FFFF85EE0]", "2147483648", "00")
    self.bid64_to_uint32_rninta("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_rninta("0", "[3107A1200007A120]", "2147483649", "00")
    self.bid64_to_uint32_rninta("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_rninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_rninta("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_rninta("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31114892294336c5]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint32_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint32_rninta("0", "[31A00004FFFFFFF1]", "2147483647", "00")
    self.bid64_to_uint32_rninta("0", "[31A00004FFFFFFFB]", "2147483648", "00")
    self.bid64_to_uint32_rninta("0", "[31A0000500000005]", "2147483649", "00")
    self.bid64_to_uint32_rninta("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31a00010a0058402]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[31c0000000080011]", "524305", "00")
    self.bid64_to_uint32_rninta("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_rninta("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_rninta("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_rninta("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_rninta("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_rninta("0", "[3200000000c31000]", "1278361600", "00")
    self.bid64_to_uint32_rninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_rninta("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[4200000305000c14]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[492f7a1b696b464f]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[56d363463d258966]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[57a789f79320d8f5]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[5d8b2b86278cf638]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[5feda7983778e70e]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[616dbb0df1fc7de0]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint32_rninta("0", "[6c39202e623d9f3f]", "932405782", "00")
    self.bid64_to_uint32_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[6df1acdf48b617f2]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[840476e3e0e003d0]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[ae60000000000000]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[afcfde6e7fbdb6ed]", "0", "00")
    self.bid64_to_uint32_rninta("0", "[afd5eb6a73cf8a02]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[b0ee93d94e65ab58]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[b116637842ca2485]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[ba87dda67586c42c]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[c1279fe7c8c7fd19]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[d940e55bbc281ba8]", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "[e7ead64fe78f34da]", "0", "00")
    self.bid64_to_uint32_rninta("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_rninta("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_xceil() {
    self.bid64_to_uint32_xceil("0", "-0", "0", "00")
    self.bid64_to_uint32_xceil("0", "0", "0", "00")
    self.bid64_to_uint32_xceil("0", "-0.00001100000E0", "0", "20")
    self.bid64_to_uint32_xceil("0", "[0bd8000000000000]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[0dbd000000000000]", "1", "20")
    self.bid64_to_uint32_xceil("0", "+1001010.11000001110E0", "1001011", "20")
    self.bid64_to_uint32_xceil("0", "+1001100.01E0", "1001101", "20")
    self.bid64_to_uint32_xceil("0", "+1.110010111110E0", "2", "20")
    self.bid64_to_uint32_xceil("0", "[158490f5efd0427f]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[24b59741963b26bb]", "1", "20")
    self.bid64_to_uint32_xceil("0", "+2654674.764665E0", "2654675", "20")
    self.bid64_to_uint32_xceil("0", "[2fbbb3ac898ca96a]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint32_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint32_xceil("0", "[3031521002800c10]", "488", "20")
    self.bid64_to_uint32_xceil("0", "[3107A11FFFE91CA0]", "2147483647", "20")
    self.bid64_to_uint32_xceil("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_xceil("0", "[3107A11FFFF85EE0]", "2147483648", "20")
    self.bid64_to_uint32_xceil("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_xceil("0", "[3107A1200007A120]", "2147483649", "20")
    self.bid64_to_uint32_xceil("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_xceil("0", "[310b010c4f03fa83]", "3097377121", "20")
    self.bid64_to_uint32_xceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_xceil("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_xceil("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[3118809074406804]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[316000bc79270184]", "809486452", "20")
    self.bid64_to_uint32_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint32_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint32_xceil("0", "[31A00004FFFFFFF1]", "2147483647", "20")
    self.bid64_to_uint32_xceil("0", "[31A00004FFFFFFFB]", "2147483648", "20")
    self.bid64_to_uint32_xceil("0", "[31A0000500000005]", "2147483649", "20")
    self.bid64_to_uint32_xceil("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_xceil("0", "[31c0000000021560]", "136544", "00")
    self.bid64_to_uint32_xceil("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_xceil("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_xceil("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_xceil("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_xceil("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_xceil("0", "[3200000000048f90]", "29889600", "00")
    self.bid64_to_uint32_xceil("0", "[3200000004012020]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_xceil("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[3b80000000000000]", "0", "00")
    self.bid64_to_uint32_xceil("0", "[3be6fb7e1da2d7aa]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[4c0066cf3f84ed72]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[52ef28dbfd349db0]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "+55769896.9896E0", "55769897", "20")
    self.bid64_to_uint32_xceil("0", "[642024bcc5e001c1]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[69ce6fc2e77f766a]", "0", "00")
    self.bid64_to_uint32_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint32_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_xceil("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "+988889.898E0", "988890", "20")
    self.bid64_to_uint32_xceil("0", "+98898.9E0", "98899", "20")
    self.bid64_to_uint32_xceil("0", "[9ab03461b68f494d]", "0", "20")
    self.bid64_to_uint32_xceil("0", "[a2d045c0c7a59ba7]", "0", "20")
    self.bid64_to_uint32_xceil("0", "[b0d46815aca61ccd]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[b11b101651c42010]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[bfdfe6facfdfe3bf]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "[e5e1b239317952ba]", "0", "20")
    self.bid64_to_uint32_xceil("0", "[ffeffffba7f7effd]", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_xceil("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_xfloor() {
    self.bid64_to_uint32_xfloor("0", "-0", "0", "00")
    self.bid64_to_uint32_xfloor("0", "0", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[000000000000000a]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[0680000000000000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[0698f60807896a80]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[0a45000000000000]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[0bc4000000000000]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[1ea0000000000000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[2b20000000000000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint32_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint32_xfloor("0", "[302b0f322bb03f7d]", "311", "20")
    self.bid64_to_uint32_xfloor("0", "[3048350441260471]", "2310", "20")
    self.bid64_to_uint32_xfloor("0", "[30ba3a2d89e7c7a2]", "7382316", "20")
    self.bid64_to_uint32_xfloor("0", "[31040b426d847b6f]", "1138279839", "20")
    self.bid64_to_uint32_xfloor("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_uint32_xfloor("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_xfloor("0", "[3107A11FFFF85EE0]", "2147483647", "20")
    self.bid64_to_uint32_xfloor("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_xfloor("0", "[3107A1200007A120]", "2147483648", "20")
    self.bid64_to_uint32_xfloor("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_xfloor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_xfloor("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_xfloor("0", "[310F423FFFF85EE0]", "4294967295", "20")
    self.bid64_to_uint32_xfloor("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[3140400900410804]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[3180000108000104]", "44291852", "20")
    self.bid64_to_uint32_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint32_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint32_xfloor("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_uint32_xfloor("0", "[31A00004FFFFFFFB]", "2147483647", "20")
    self.bid64_to_uint32_xfloor("0", "[31A0000500000005]", "2147483648", "20")
    self.bid64_to_uint32_xfloor("0", "[31A00009FFFFFFFB]", "4294967295", "20")
    self.bid64_to_uint32_xfloor("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_xfloor("0", "[31c0000000208000]", "2129920", "00")
    self.bid64_to_uint32_xfloor("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_xfloor("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_xfloor("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_xfloor("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_xfloor("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_xfloor("0", "[3200000000002088]", "832800", "00")
    self.bid64_to_uint32_xfloor("0", "[3220000000800040]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_xfloor("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[3cf926b40efa2c5c]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[54e0000000000000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[56b75c2b65effef4]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[57a9094f01c6e1db]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[5a00000000000000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[5f0df2fed859aea7]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "+696.998568667789E0", "696", "20")
    self.bid64_to_uint32_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint32_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "+8867697.7779E0", "8867697", "20")
    self.bid64_to_uint32_xfloor("0", "+8.98999E0", "8", "20")
    self.bid64_to_uint32_xfloor("0", "[89f79741994055f7]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[8ffa0fa58757b391]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "+9.998E0", "9", "20")
    self.bid64_to_uint32_xfloor("0", "[9a724f13fd417cd4]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[9e225f4774d35269]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[a316316825ba0224]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[b9cb43de8d9c8a30]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[ca3113fe94c9c84b]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[d6848824d7e607aa]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[edeff7f5f63bfbf5]", "0", "00")
    self.bid64_to_uint32_xfloor("0", "[f642d713e72bd43e]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "[fffeffff6bfa3dbd]", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_xfloor("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_xint() {
    self.bid64_to_uint32_xint("0", "-0", "0", "00")
    self.bid64_to_uint32_xint("0", "[0160000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[0200000200080080]", "0", "20")
    self.bid64_to_uint32_xint("0", "+10.10E0", "10", "20")
    self.bid64_to_uint32_xint("0", "[13b313d04939c429]", "0", "20")
    self.bid64_to_uint32_xint("0", "[17a0000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[1e40000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "+224322.22297684E0", "224322", "20")
    self.bid64_to_uint32_xint("0", "[2b40000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[2cd536da0765bba9]", "0", "20")
    self.bid64_to_uint32_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint32_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint32_xint("0", "[30281cc040a0d91d]", "228", "20")
    self.bid64_to_uint32_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint32_xint("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_uint32_xint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_xint("0", "[3107A11FFFF85EE0]", "2147483647", "20")
    self.bid64_to_uint32_xint("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_xint("0", "[3107A1200007A120]", "2147483648", "20")
    self.bid64_to_uint32_xint("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_xint("0", "[310a2fcfdd4ee07a]", "2867319584", "20")
    self.bid64_to_uint32_xint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_xint("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_xint("0", "[310F423FFFF85EE0]", "4294967295", "20")
    self.bid64_to_uint32_xint("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[311ca08bac8bbe99]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint32_xint("0", "[3180000841960712]", "354600896", "20")
    self.bid64_to_uint32_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint32_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint32_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint32_xint("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_uint32_xint("0", "[31A00004FFFFFFFB]", "2147483647", "20")
    self.bid64_to_uint32_xint("0", "[31A0000500000005]", "2147483648", "20")
    self.bid64_to_uint32_xint("0", "[31A00009FFFFFFFB]", "4294967295", "20")
    self.bid64_to_uint32_xint("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_xint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_xint("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_xint("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_xint("0", "[31c00000908030c4]", "2424320196", "00")
    self.bid64_to_uint32_xint("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_xint("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_xint("0", "[3200000000000084]", "13200", "00")
    self.bid64_to_uint32_xint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_xint("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[394b47e276286055]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[4060000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[415184d3b004bff6]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[48b687c664d1c1fc]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[4960000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[4ea1f2932e5f8f68]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "+5773.42538679375337E0", "5773", "20")
    self.bid64_to_uint32_xint("0", "+5.78248974697E0", "5", "20")
    self.bid64_to_uint32_xint("0", "+57879896.7786686879E0", "57879896", "20")
    self.bid64_to_uint32_xint("0", "[5a71ed2310ee21d6]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[61f257f032f7a34f]", "0", "20")
    self.bid64_to_uint32_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint32_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "+7958.6E0", "7958", "20")
    self.bid64_to_uint32_xint("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[7fdefd3de9fdfff9]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[80e0000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[84a0000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[956f4be38b523b51]", "0", "20")
    self.bid64_to_uint32_xint("0", "+987876.57687899E0", "987876", "20")
    self.bid64_to_uint32_xint("0", "+9898.9E0", "9898", "20")
    self.bid64_to_uint32_xint("0", "+99898.8E0", "99898", "20")
    self.bid64_to_uint32_xint("0", "+99.89E0", "99", "20")
    self.bid64_to_uint32_xint("0", "[af00000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[affaa7ffdf63b4ff]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[b106030042008251]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[b7b9c10ff5b86555]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[bbe0000000000000]", "0", "00")
    self.bid64_to_uint32_xint("0", "[c8ad82655d9a64b8]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[d2f4c7f25ccde843]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[dbe3ed7dfa69fbc5]", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "[f4c6c18af56c00fd]", "0", "00")
    self.bid64_to_uint32_xint("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_xint("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_xrnint() {
    self.bid64_to_uint32_xrnint("0", "-0", "0", "00")
    self.bid64_to_uint32_xrnint("0", "0", "0", "00")
    self.bid64_to_uint32_xrnint("0", "[0000000000000000]", "0", "00")
    self.bid64_to_uint32_xrnint("0", "[0060602b261c0e10]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "+100.10000E0", "100", "20")
    self.bid64_to_uint32_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint32_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint32_xrnint("0", "[30beb9176f7f5028]", "8647760", "20")
    self.bid64_to_uint32_xrnint("0", "[3100000981101402]", "40820", "20")
    self.bid64_to_uint32_xrnint("0", "[310711689229aca1]", "1989465663", "20")
    self.bid64_to_uint32_xrnint("0", "[3107A11FFFE91CA0]", "2147483646", "20")
    self.bid64_to_uint32_xrnint("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_xrnint("0", "[3107A11FFFF85EE0]", "2147483648", "20")
    self.bid64_to_uint32_xrnint("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_xrnint("0", "[3107A1200007A120]", "2147483648", "20")
    self.bid64_to_uint32_xrnint("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_xrnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_xrnint("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_xrnint("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint32_xrnint("0", "[3160020991811314]", "2240119117", "20")
    self.bid64_to_uint32_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint32_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint32_xrnint("0", "[31a0000084406050]", "221881147", "20")
    self.bid64_to_uint32_xrnint("0", "[31a0000203480215]", "864498536", "20")
    self.bid64_to_uint32_xrnint("0", "[31A00004FFFFFFF1]", "2147483646", "20")
    self.bid64_to_uint32_xrnint("0", "[31A00004FFFFFFFB]", "2147483648", "20")
    self.bid64_to_uint32_xrnint("0", "[31A0000500000005]", "2147483648", "20")
    self.bid64_to_uint32_xrnint("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_xrnint("0", "[31c0000000208800]", "2131968", "00")
    self.bid64_to_uint32_xrnint("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_xrnint("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_xrnint("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_xrnint("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_xrnint("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_xrnint("0", "[3200000000084001]", "54067300", "00")
    self.bid64_to_uint32_xrnint("0", "[3200000004203058]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_xrnint("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[41330590e91d1731]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[532463e3715b6aba]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[59cebdde0d4f696a]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "+624833426.39852995252439363864754E0", "624833426", "20")
    self.bid64_to_uint32_xrnint("0", "[6bf26008ead2dde1]", "1", "20")
    self.bid64_to_uint32_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint32_xrnint("0", "[6c409ab98b80b44c]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_xrnint("0", "[74c1267c7987e9b8]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[76e8e6c924c80b08]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "+78859579.579798967669E0", "78859580", "20")
    self.bid64_to_uint32_xrnint("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[9563d826744229d3]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "+969759.9E0", "969760", "20")
    self.bid64_to_uint32_xrnint("0", "[a19c9debc582736e]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "[afd9a1a2b0061eb6]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[b0001b0ca85f8026]", "0", "20")
    self.bid64_to_uint32_xrnint("0", "[b0abedc30e0546df]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[b11613e7b5d43c2f]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[b6044d3965b4319a]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[b7c11619c660799c]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[cc00000000000000]", "0", "00")
    self.bid64_to_uint32_xrnint("0", "[d72c5897aa71d926]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[dcd98a735a30b11f]", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "[e4c5b75f5e09e3b7]", "0", "00")
    self.bid64_to_uint32_xrnint("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "Infinity", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_xrnint("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint32_xrninta() {
    self.bid64_to_uint32_xrninta("0", "-0", "0", "00")
    self.bid64_to_uint32_xrninta("0", "0", "0", "00")
    self.bid64_to_uint32_xrninta("0", "[0000000000010001]", "0", "20")
    self.bid64_to_uint32_xrninta("0", "[0011e08444205160]", "0", "20")
    self.bid64_to_uint32_xrninta("0", "[0400680c86040020]", "0", "20")
    self.bid64_to_uint32_xrninta("0", "-1100011.01011101E0", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint32_xrninta("0", "[2fd62a2d03c1587e]", "1", "20")
    self.bid64_to_uint32_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint32_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint32_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint32_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint32_xrninta("0", "[302dff83ac9337cc]", "394", "20")
    self.bid64_to_uint32_xrninta("0", "[30da6cd60010b67c]", "74380158", "20")
    self.bid64_to_uint32_xrninta("0", "[3107A11FFFE91CA0]", "2147483647", "20")
    self.bid64_to_uint32_xrninta("0", "[3107A11FFFF0BDC0]", "2147483647", "00")
    self.bid64_to_uint32_xrninta("0", "[3107A11FFFF85EE0]", "2147483648", "20")
    self.bid64_to_uint32_xrninta("0", "[3107A12000000000]", "2147483648", "00")
    self.bid64_to_uint32_xrninta("0", "[3107A1200007A120]", "2147483649", "20")
    self.bid64_to_uint32_xrninta("0", "[3107A120000F4240]", "2147483649", "00")
    self.bid64_to_uint32_xrninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint32_xrninta("0", "[310F423FFFF0BDC0]", "4294967295", "00")
    self.bid64_to_uint32_xrninta("0", "[310F423FFFF85EE0]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[310F424000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[310F42400007A120]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[310F4240000F4240]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[3111C37937E08000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[311b345402888323]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498AB610]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498B7960]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498C3CB0]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498D0000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498DC350]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498E86A0]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31271AFD498F49F0]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint32_xrninta("0", "[3180000800910842]", "343692432", "20")
    self.bid64_to_uint32_xrninta("0", "[3180004400822a09]", "2920663066", "20")
    self.bid64_to_uint32_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint32_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint32_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint32_xrninta("0", "[31A00004FFFFFFF1]", "2147483647", "20")
    self.bid64_to_uint32_xrninta("0", "[31A00004FFFFFFFB]", "2147483648", "20")
    self.bid64_to_uint32_xrninta("0", "[31A0000500000005]", "2147483649", "20")
    self.bid64_to_uint32_xrninta("0", "[31a00009328e1052]", "3950287675", "20")
    self.bid64_to_uint32_xrninta("0", "[31A00009FFFFFFFB]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31A0000A00000005]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31A0002E90EDCFF1]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31A0002E90EDCFFB]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31A0002E90EDD005]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31A0002E90EDD00F]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint32_xrninta("0", "[31C000007FFFFFFF]", "2147483647", "00")
    self.bid64_to_uint32_xrninta("0", "[31C0000080000000]", "2147483648", "00")
    self.bid64_to_uint32_xrninta("0", "[31C0000080000001]", "2147483649", "00")
    self.bid64_to_uint32_xrninta("0", "[31C00000FFFFFFFF]", "4294967295", "00")
    self.bid64_to_uint32_xrninta("0", "[31C0000100000000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31C0000100000001]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31c000021a000100]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31C00004A817C7FF]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[31C00004A817C801]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint32_xrninta("0", "[3200000000901000]", "944128000", "00")
    self.bid64_to_uint32_xrninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint32_xrninta("0", "[32E0000000000005]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[3300000000000002]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[3f6ffefffd79ddfd]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[41330590e91d1731]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[59cebdde0d4f696a]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint32_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint32_xrninta("0", "[74c1267c7987e9b8]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[76e8e6c924c80b08]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[7800000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[7c00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[7e00000000000000]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[9563d826744229d3]", "0", "20")
    self.bid64_to_uint32_xrninta("0", "+95664773.9E0", "95664774", "20")
    self.bid64_to_uint32_xrninta("0", "[afc4688f430b55b8]", "0", "20")
    self.bid64_to_uint32_xrninta("0", "[afd7ffe169523b77]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[b09f4b9771484a50]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[b11cacea85cd8c8a]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[b6044d3965b4319a]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[b7c11619c660799c]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[cc00000000000000]", "0", "00")
    self.bid64_to_uint32_xrninta("0", "[d72c5897aa71d926]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[dcd98a735a30b11f]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "[ec6cd564e62893f4]", "0", "00")
    self.bid64_to_uint32_xrninta("0", "[f5d9fbf6b7ebcff9]", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "-Infinity", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "QNaN", "2147483648", "01")
    self.bid64_to_uint32_xrninta("0", "SNaN", "2147483648", "01")
  }

  private func bid64_to_uint32_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_ceil() {
    self.bid64_to_uint64_ceil("0", "-0", "0", "00")
    self.bid64_to_uint64_ceil("0", "0", "0", "00")
    self.bid64_to_uint64_ceil("0", "+1100001.0000000011E0", "1100002", "00")
    self.bid64_to_uint64_ceil("0", "[182e2213a080c004]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[2dacac9c59858fa2]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint64_ceil("0", "[2febc5fbff7ffea7]", "4", "00")
    self.bid64_to_uint64_ceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_ceil("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint64_ceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498AB610]", "19999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498DC350]", "20000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_uint64_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_ceil("0", "[318C800000000032]", "35184372088833", "00")
    self.bid64_to_uint64_ceil("0", "[319445f031b02d2a]", "57063974623102", "00")
    self.bid64_to_uint64_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint64_ceil("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint64_ceil("0", "[31A0002E90EDCFF1]", "19999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31A0002E90EDD005]", "20000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_uint64_ceil("0", "[31A1400000000005]", "35184372088833", "00")
    self.bid64_to_uint64_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_ceil("0", "[31c09467eb34a2a9]", "163174048637609", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_ceil("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_ceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_ceil("0", "[3241842148a399c8]", "4267534641791440000", "00")
    self.bid64_to_uint64_ceil("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_ceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_ceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_ceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_ceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_ceil("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[3259dd8fe11a2e42]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[32c0000000000000]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_ceil("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_ceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_ceil("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[5abfaeccd5ab94f9]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[69ea3cbdfffefff7]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint64_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_ceil("0", "[779b6cfa543452b9]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[8286c4490b5ccf50]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[8484197d2b7e59e7]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[8b03fa15e8d50069]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[8f8a2b2cc7e5ba26]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[93cf77dab3d8c1db]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[a4337fe341efeafe]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[b1eefd7ff3a6ea5d]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[b24748f0c04f5099]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[c02f47a0f3bbb567]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[ebc5238a182e686d]", "0", "00")
    self.bid64_to_uint64_ceil("0", "[ec4236933efa7953]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "[fffffffffeffffba]", "9223372036854775808", "01")
    self.bid64_to_uint64_ceil("0", "QNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_floor() {
    self.bid64_to_uint64_floor("0", "-0", "0", "00")
    self.bid64_to_uint64_floor("0", "0", "0", "00")
    self.bid64_to_uint64_floor("0", "[04ff5afd3a618ab8]", "0", "00")
    self.bid64_to_uint64_floor("0", "-101101.01010010E0", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[2083ec51a119740a]", "0", "00")
    self.bid64_to_uint64_floor("0", "[2ca0000000000000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint64_floor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_floor("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint64_floor("0", "[30e4dacf7a515f0d]", "136648455", "00")
    self.bid64_to_uint64_floor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_floor("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498C3CB0]", "19999999999", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_floor("0", "[31271AFD498F49F0]", "20000000001", "00")
    self.bid64_to_uint64_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint64_floor("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_floor("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_uint64_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint64_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint64_floor("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint64_floor("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_uint64_floor("0", "[31A0002E90EDCFFB]", "19999999999", "00")
    self.bid64_to_uint64_floor("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_uint64_floor("0", "[31A0002E90EDD00F]", "20000000001", "00")
    self.bid64_to_uint64_floor("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_uint64_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_floor("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_floor("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_floor("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_floor("0", "[31c5f23836279c04]", "1673698124209156", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_floor("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_floor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_floor("0", "[32419e50b2f2dedb]", "4555444135441550000", "00")
    self.bid64_to_uint64_floor("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_floor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_floor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_floor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_floor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_floor("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[324759735305e4ec]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_floor("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_floor("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_floor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_floor("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[34a0000000000000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[4740fd8a26fe2cf2]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[4d778c661a5fdfa2]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[50e0000000000000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[61bb575d330cd43c]", "0", "00")
    self.bid64_to_uint64_floor("0", "[6888b95594874c2f]", "0", "00")
    self.bid64_to_uint64_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_floor("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[97efffd7dbfefdf7]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[a953afbd88d77883]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[b3e9236afb738c72]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[d3701428cf0a29c7]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[e8c02df11eb3ed5c]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "[f6ffff7fffffefff]", "0", "00")
    self.bid64_to_uint64_floor("0", "[fefffb8effb7cafb]", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_floor("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_int() {
    self.bid64_to_uint64_int("0", "-0", "0", "00")
    self.bid64_to_uint64_int("0", "0", "0", "00")
    self.bid64_to_uint64_int("0", "[0000080046080880]", "0", "00")
    self.bid64_to_uint64_int("0", "[0916000000000000]", "0", "00")
    self.bid64_to_uint64_int("0", "[0fa1000000000000]", "0", "00")
    self.bid64_to_uint64_int("0", "[1c63d34722593e99]", "0", "00")
    self.bid64_to_uint64_int("0", "[2c7d3bb600f33f88]", "0", "00")
    self.bid64_to_uint64_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint64_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint64_int("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_int("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint64_int("0", "[302b15f3d7109b6c]", "312", "00")
    self.bid64_to_uint64_int("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_int("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498C3CB0]", "19999999999", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_int("0", "[31271AFD498F49F0]", "20000000001", "00")
    self.bid64_to_uint64_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint64_int("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_int("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_uint64_int("0", "[31958f56369092bf]", "60685749563276", "00")
    self.bid64_to_uint64_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint64_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint64_int("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint64_int("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_uint64_int("0", "[31A0002E90EDCFFB]", "19999999999", "00")
    self.bid64_to_uint64_int("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_uint64_int("0", "[31A0002E90EDD00F]", "20000000001", "00")
    self.bid64_to_uint64_int("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_uint64_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_int("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_int("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_int("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_int("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_int("0", "[31dd7639c7a2a40a]", "8292764859147274", "00")
    self.bid64_to_uint64_int("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_int("0", "[32247e9110000156]", "1265061410636118000", "00")
    self.bid64_to_uint64_int("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_int("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_int("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_int("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_int("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_int("0", "[3246f47a24b53e1f]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_int("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_int("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_int("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_int("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_int("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_int("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[3855e543ae4d7e45]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[3895eccd7604654d]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[40faa0009216954c]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[42d709eca5e3d3f5]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[488a31b55025daaf]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[4dce523cf657c3e3]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[50d5b3dcb7a604d3]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[6b06a54051332a54]", "0", "00")
    self.bid64_to_uint64_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint64_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_int("0", "[763225e31038dd48]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[8ae09f138f22c63c]", "0", "00")
    self.bid64_to_uint64_int("0", "[9466aa565fa670b1]", "0", "00")
    self.bid64_to_uint64_int("0", "[980b441276e7a329]", "0", "00")
    self.bid64_to_uint64_int("0", "[9900000000000000]", "0", "00")
    self.bid64_to_uint64_int("0", "[9f8b26e44bca24dc]", "0", "00")
    self.bid64_to_uint64_int("0", "[b11e9ff4fbc7fa7d]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[b25930b6f3c528b5]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[b480000000000000]", "0", "00")
    self.bid64_to_uint64_int("0", "[bb985bbaf356a180]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[c89ebd47d3004072]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[db1c3c4336744fa0]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[dffffffffb9efff7]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "[ff6f9f87ce96bb86]", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_int("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_rnint() {
    self.bid64_to_uint64_rnint("0", "0", "0", "00")
    self.bid64_to_uint64_rnint("0", "[0003a500e0024002]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[0b6a000000000000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[11c0000000000000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint64_rnint("0", "[3000440831001020]", "1", "00")
    self.bid64_to_uint64_rnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_rnint("0", "[302AAD08158CD000]", "300", "00")
    self.bid64_to_uint64_rnint("0", "[30594c90812219d2]", "7121", "00")
    self.bid64_to_uint64_rnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498AB610]", "19999999998", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498DC350]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_rnint("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_uint64_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint64_rnint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_rnint("0", "[318C800000000032]", "35184372088832", "00")
    self.bid64_to_uint64_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint64_rnint("0", "[31A0000000000BBD]", "300", "00")
    self.bid64_to_uint64_rnint("0", "[31A0002E90EDCFF1]", "19999999998", "00")
    self.bid64_to_uint64_rnint("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31A0002E90EDD005]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_uint64_rnint("0", "[31A1400000000005]", "35184372088832", "00")
    self.bid64_to_uint64_rnint("0", "[31abcb66674751d1]", "331986542364718", "00")
    self.bid64_to_uint64_rnint("0", "[31b17777f7cfae7f]", "491643174647770", "00")
    self.bid64_to_uint64_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_rnint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_rnint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_rnint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_rnint("0", "[31c518e88a625d9c]", "1434761916734876", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_rnint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_rnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_rnint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rnint("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[32523816aadcf401]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_rnint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_rnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_rnint("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[4805c2832bb34b61]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[5bf8efa387de2ec7]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint64_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[6c810037c0cfc9d9]", "928891368949602500", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rnint("0", "[6e7f8bf76c7c00bc]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[943a90eadb43eabb]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[9d5afe2ef1e98b4f]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[a647403ebce8beda]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[a700000000000000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[afd157b6fbf53737]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[afd2e7a8a21b3fab]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[b15b0b664c4b18f0]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[b25cf37a7dbedfb0]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[bfe34f15a773dc6a]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[cd57ca09b5155a3f]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[d340000000000000]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[d38c7e9eee0eea48]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "[e23ac74d7be2b446]", "0", "00")
    self.bid64_to_uint64_rnint("0", "[fffffabbfffffdfd]", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_rnint("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_rninta() {
    self.bid64_to_uint64_rninta("0", "-0", "0", "00")
    self.bid64_to_uint64_rninta("0", "0", "0", "00")
    self.bid64_to_uint64_rninta("0", "[0f1c792c8550125b]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[177d0a807a950b1e]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[2adc5d1a81c7bf02]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[2fcb7cd7f5af0eef]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[2fdc20f914f33d4b]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint64_rninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_rninta("0", "[302AAD08158CD000]", "301", "00")
    self.bid64_to_uint64_rninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498AB610]", "19999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498C3CB0]", "20000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498DC350]", "20000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31271AFD498F49F0]", "20000000002", "00")
    self.bid64_to_uint64_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[3160fd2376348070]", "278328748835", "00")
    self.bid64_to_uint64_rninta("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_rninta("0", "[318C800000000032]", "35184372088833", "00")
    self.bid64_to_uint64_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint64_rninta("0", "[31A0000000000BBD]", "301", "00")
    self.bid64_to_uint64_rninta("0", "[31A0002E90EDCFF1]", "19999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31A0002E90EDCFFB]", "20000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31A0002E90EDD005]", "20000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31A0002E90EDD00F]", "20000000002", "00")
    self.bid64_to_uint64_rninta("0", "[31A1400000000005]", "35184372088833", "00")
    self.bid64_to_uint64_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_rninta("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_rninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_rninta("0", "[3204008140102120]", "112645503242268800", "00")
    self.bid64_to_uint64_rninta("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_rninta("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_rninta("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_rninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_rninta("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[3ae3d621ba5e4712]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[3feddb7740f54c81]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[4077eda80baefc3b]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[484593acef232cde]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[4abbb32ae6fe2a38]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[4b2287e22b686fcc]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[50ea3f8ca7168d0c]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[5200000000000000]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[5300053230488bd9]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[5c17757e001e346d]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint64_rninta("0", "[6c71abae17876945]", "9477438438861125", "00")
    self.bid64_to_uint64_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_rninta("0", "[6c9178bc905ce337]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[81cdee8f7402f84b]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[835437df7df86249]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[94c40563509870ec]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[9dac50e65fbb8d03]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[9f63b3fbde794b5f]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[a0255dc42000a080]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[afc7e76738ab4517]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[afdf47834ab2b3f9]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[affdf7fcb37ff7ff]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[b248135b183407d2]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[c2ce38b23a053b82]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[d5b6bb48b6239080]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[ecaff09c3cc742fe]", "0", "00")
    self.bid64_to_uint64_rninta("0", "[f2614b0716c24516]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[f5d87d4e00602de9]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "[fffffffffbffffff]", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_rninta("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_xceil() {
    self.bid64_to_uint64_xceil("0", "-0", "0", "00")
    self.bid64_to_uint64_xceil("0", "0", "0", "00")
    self.bid64_to_uint64_xceil("0", "-0.1E0", "0", "20")
    self.bid64_to_uint64_xceil("0", "[070c898734bb7b58]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[0df2000000000000]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[0f60000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "+100011.11E0", "100012", "20")
    self.bid64_to_uint64_xceil("0", "+110.1100011001E0", "111", "20")
    self.bid64_to_uint64_xceil("0", "[151002b72b82c794]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[15821ce06a75d529]", "1", "20")
    self.bid64_to_uint64_xceil("0", "+2888.25866964922939E0", "2889", "20")
    self.bid64_to_uint64_xceil("0", "[2c40000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[2e5f2d98c89e1062]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[2f718130e73d639b]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint64_xceil("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_xceil("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint64_xceil("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_xceil("0", "[31271AFD498AB610]", "19999999999", "20")
    self.bid64_to_uint64_xceil("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_xceil("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_uint64_xceil("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_xceil("0", "[31271AFD498DC350]", "20000000001", "20")
    self.bid64_to_uint64_xceil("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_xceil("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_uint64_xceil("0", "[31401109a138546a]", "1873305721", "20")
    self.bid64_to_uint64_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xceil("0", "[318C800000000032]", "35184372088833", "20")
    self.bid64_to_uint64_xceil("0", "[3191d593d36c41a4]", "50199054880773", "20")
    self.bid64_to_uint64_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint64_xceil("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint64_xceil("0", "[31A0002E90EDCFF1]", "19999999999", "20")
    self.bid64_to_uint64_xceil("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_uint64_xceil("0", "[31A0002E90EDD005]", "20000000001", "20")
    self.bid64_to_uint64_xceil("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_uint64_xceil("0", "[31A1400000000005]", "35184372088833", "20")
    self.bid64_to_uint64_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_xceil("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_xceil("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_xceil("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xceil("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_xceil("0", "[31cfdc1b6ff989b8]", "4464135051512248", "00")
    self.bid64_to_uint64_xceil("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_xceil("0", "[3224410a20400020]", "1197411653386272000", "00")
    self.bid64_to_uint64_xceil("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xceil("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xceil("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_xceil("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_xceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xceil("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[46e0000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "+544762265872293.663E0", "544762265872294", "20")
    self.bid64_to_uint64_xceil("0", "[59d50606cc4c30b3]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[5d4d408f5835ae34]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[6148dc54f20ed9d9]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint64_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xceil("0", "[6c92c7b25cb8e3ad]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[7118a864e7180325]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[73582a6c25b49fdd]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[85a0000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[85a95e72cda97d5f]", "0", "20")
    self.bid64_to_uint64_xceil("0", "+88898989999998.88E0", "88898989999999", "20")
    self.bid64_to_uint64_xceil("0", "[9380000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[93e0000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[b1ce3b2297350024]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[b25e477d2f6ae3be]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[b4a0000000000000]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[ca9b1ee4bdc56092]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[d0639f6b0a31ac56]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[d6f980d5c5255030]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[d8c1e635b6408402]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[eab0b7a3cdf9f5d1]", "0", "20")
    self.bid64_to_uint64_xceil("0", "[ec59f8a58d0e15bd]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "[ee34ac1fa561c8db]", "0", "00")
    self.bid64_to_uint64_xceil("0", "[f9d99f96ca54aba4]", "9223372036854775808", "01")
    self.bid64_to_uint64_xceil("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_xfloor() {
    self.bid64_to_uint64_xfloor("0", "-0", "0", "00")
    self.bid64_to_uint64_xfloor("0", "0", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[0042950491200210]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[019d28e410d40a40]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[02054b6a6819eda4]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[0900600290004440]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[0af7000000000000]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[0c410b6a5aab17b1]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[0d5a000000000000]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "+10100.11111111E0", "10100", "20")
    self.bid64_to_uint64_xfloor("0", "[1eb0baa5f96a9409]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[2008aa522c640cf5]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[245b56d98d24ab5c]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "+2579933.96285E0", "2579933", "20")
    self.bid64_to_uint64_xfloor("0", "[2660000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[2a80000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint64_xfloor("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_xfloor("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint64_xfloor("0", "[3092c7e2d5ff7c8e]", "528632", "20")
    self.bid64_to_uint64_xfloor("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498C3CB0]", "19999999999", "20")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_xfloor("0", "[31271AFD498F49F0]", "20000000001", "20")
    self.bid64_to_uint64_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xfloor("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0002E90EDCFFB]", "19999999999", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_uint64_xfloor("0", "[31A0002E90EDD00F]", "20000000001", "20")
    self.bid64_to_uint64_xfloor("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_uint64_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_xfloor("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_xfloor("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_xfloor("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xfloor("0", "[31c5b787bd88e913]", "1609168511887635", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xfloor("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_xfloor("0", "[31d2226558c0a106]", "5104368256852230", "00")
    self.bid64_to_uint64_xfloor("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_xfloor("0", "[3235241108658112]", "5950630084837650000", "00")
    self.bid64_to_uint64_xfloor("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xfloor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xfloor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xfloor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xfloor("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xfloor("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[325dd624c0c19831]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xfloor("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3ad39313cd3315fa]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3dca2e1446595437]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[3e23059bbe4427ae]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[4aa0000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[67926c0af1b8ea74]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint64_xfloor("0", "[6c621c463d72b313]", "96012372123778", "20")
    self.bid64_to_uint64_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xfloor("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[8460000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[87e0000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "+9.8999E0", "9", "20")
    self.bid64_to_uint64_xfloor("0", "[98e0000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[9960000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "+9962.46E0", "9962", "20")
    self.bid64_to_uint64_xfloor("0", "[ac00000000000000]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[dbfffff797efffff]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[ee41744db38dcdd4]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[efffffffedfbefbf]", "0", "00")
    self.bid64_to_uint64_xfloor("0", "[f3f8fc42c3347b5e]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "[ffdfff5ff7dfaf7f]", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_xfloor("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_xint() {
    self.bid64_to_uint64_xint("0", "-0", "0", "00")
    self.bid64_to_uint64_xint("0", "0", "0", "00")
    self.bid64_to_uint64_xint("0", "-0.1101001110E0", "0", "20")
    self.bid64_to_uint64_xint("0", "+0.11100E0", "0", "20")
    self.bid64_to_uint64_xint("0", "[090a847091ce1fdf]", "0", "20")
    self.bid64_to_uint64_xint("0", "[0e96000000000000]", "0", "20")
    self.bid64_to_uint64_xint("0", "+10100000.01E0", "10100000", "20")
    self.bid64_to_uint64_xint("0", "+11000111.01111000111E0", "11000111", "20")
    self.bid64_to_uint64_xint("0", "[196afd96bd974412]", "0", "20")
    self.bid64_to_uint64_xint("0", "[206ac19b7fe7a3f1]", "0", "20")
    self.bid64_to_uint64_xint("0", "[2bc509bd29ec18d4]", "0", "20")
    self.bid64_to_uint64_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint64_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint64_xint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_xint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint64_xint("0", "[3034595e60ce1f0c]", "572", "20")
    self.bid64_to_uint64_xint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_xint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_xint("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_uint64_xint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_xint("0", "[31271AFD498C3CB0]", "19999999999", "20")
    self.bid64_to_uint64_xint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_xint("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_uint64_xint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_xint("0", "[31271AFD498F49F0]", "20000000001", "20")
    self.bid64_to_uint64_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint64_xint("0", "[3188c2727b5ff612]", "24655967656320", "20")
    self.bid64_to_uint64_xint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xint("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_uint64_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint64_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint64_xint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint64_xint("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_uint64_xint("0", "[31A0002E90EDCFFB]", "19999999999", "20")
    self.bid64_to_uint64_xint("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_uint64_xint("0", "[31A0002E90EDD00F]", "20000000001", "20")
    self.bid64_to_uint64_xint("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_uint64_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_xint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_xint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_xint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_xint("0", "[31d39fe5d761f5cf]", "5523834067350991", "00")
    self.bid64_to_uint64_xint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_xint("0", "[320e2e0b93415180]", "399127692399859200", "00")
    self.bid64_to_uint64_xint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xint("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[325dd18a6796a87e]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_xint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_xint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_xint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xint("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[3b00568d8546cc0c]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "+575.5966587955E0", "575", "20")
    self.bid64_to_uint64_xint("0", "+647528935975.59E0", "647528935975", "20")
    self.bid64_to_uint64_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint64_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xint("0", "[6cf2f7faebc3dc65]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "+7577555996.77556E0", "7577555996", "20")
    self.bid64_to_uint64_xint("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[8560ecb183d76ade]", "0", "20")
    self.bid64_to_uint64_xint("0", "+8889.8E0", "8889", "20")
    self.bid64_to_uint64_xint("0", "+89988.888888988E0", "89988", "20")
    self.bid64_to_uint64_xint("0", "+9.2559E0", "9", "20")
    self.bid64_to_uint64_xint("0", "[99800ea7d0ec6b97]", "0", "20")
    self.bid64_to_uint64_xint("0", "[9b00621748880c09]", "0", "20")
    self.bid64_to_uint64_xint("0", "[ab01740a95f188eb]", "0", "20")
    self.bid64_to_uint64_xint("0", "[b1762ca0c1cbf793]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[cc80000000000000]", "0", "00")
    self.bid64_to_uint64_xint("0", "[e6f7bf3ffffb7eff]", "0", "00")
    self.bid64_to_uint64_xint("0", "[ec928ad0cd979a77]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[f0e1e96a1eb37707]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "[fff3ffefffffffff]", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_xint("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_xrnint() {
    self.bid64_to_uint64_xrnint("0", "-0", "0", "00")
    self.bid64_to_uint64_xrnint("0", "0", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[010800583408205a]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[0c40000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "+100100111.100E0", "100100111", "20")
    self.bid64_to_uint64_xrnint("0", "+1110010.01011000E0", "1110010", "20")
    self.bid64_to_uint64_xrnint("0", "+2.256473E0", "2", "20")
    self.bid64_to_uint64_xrnint("0", "[2c7d3bb600f33f88]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[2fd70b0be91aad9b]", "1", "20")
    self.bid64_to_uint64_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint64_xrnint("0", "[2ff57dff534efeef]", "6", "20")
    self.bid64_to_uint64_xrnint("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_xrnint("0", "[302AAD08158CD000]", "300", "20")
    self.bid64_to_uint64_xrnint("0", "[3040c81145902134]", "220", "20")
    self.bid64_to_uint64_xrnint("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498AB610]", "19999999998", "20")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498DC350]", "20000000000", "20")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_xrnint("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_uint64_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint64_xrnint("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xrnint("0", "[318C800000000032]", "35184372088832", "20")
    self.bid64_to_uint64_xrnint("0", "[31958f56369092bf]", "60685749563276", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0000000000BBD]", "300", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0002E90EDCFF1]", "19999999998", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0002E90EDD005]", "20000000000", "20")
    self.bid64_to_uint64_xrnint("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_uint64_xrnint("0", "[31A1400000000005]", "35184372088832", "20")
    self.bid64_to_uint64_xrnint("0", "[31b1ada128861ac7]", "497598228529838", "20")
    self.bid64_to_uint64_xrnint("0", "[31b8587179b652c0]", "685264383759635", "20")
    self.bid64_to_uint64_xrnint("0", "[31baa0d48f2ef751]", "749518419020782", "20")
    self.bid64_to_uint64_xrnint("0", "[31bd2c9a38d8288e]", "821181521488501", "20")
    self.bid64_to_uint64_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_xrnint("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_xrnint("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_xrnint("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xrnint("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_xrnint("0", "[31cec8c8d7043cda]", "4161414600342746", "00")
    self.bid64_to_uint64_xrnint("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_xrnint("0", "[3211485a9a187c4a]", "486462857363361000", "00")
    self.bid64_to_uint64_xrnint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrnint("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrnint("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[325299269918b393]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrnint("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3420000000000008]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[38120bbe5e4bdac2]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3895eccd7604654d]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[3da0000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[4100000200804082]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "+65967.5E0", "65968", "20")
    self.bid64_to_uint64_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint64_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrnint("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "+8889.89E0", "8890", "20")
    self.bid64_to_uint64_xrnint("0", "[8ee0000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[98e0000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[9900000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "+9.9999E0", "10", "20")
    self.bid64_to_uint64_xrnint("0", "[9f8b26e44bca24dc]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[afda66fbaf8fb77f]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[afe06299a8bc6002]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[affd37f8b94fe7f3]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[b24fe795a5702a36]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[b480000000000000]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[c9e3ec31a0aa9951]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "[e080442033000043]", "0", "20")
    self.bid64_to_uint64_xrnint("0", "[f25ec74ea5fe000f]", "0", "00")
    self.bid64_to_uint64_xrnint("0", "[fffffffffbffffff]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xrnint("0", "QNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint64_xrninta() {
    self.bid64_to_uint64_xrninta("0", "-0", "0", "00")
    self.bid64_to_uint64_xrninta("0", "0", "0", "00")
    self.bid64_to_uint64_xrninta("0", "[0810000000000000]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[09fd000000000000]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "+1001101110.1100E0", "1001101110", "20")
    self.bid64_to_uint64_xrninta("0", "+110.11E0", "110", "20")
    self.bid64_to_uint64_xrninta("0", "[14b0365fded566b0]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[21a39e6eaa098340]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[2ca572b5745025ab]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[2fb82450436c8cc4]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[2fcfff7ffffa6ff9]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint64_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint64_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint64_xrninta("0", "[3000406508514056]", "1", "20")
    self.bid64_to_uint64_xrninta("0", "[3026faa6adffddb2]", "196", "20")
    self.bid64_to_uint64_xrninta("0", "[302a8283c9137123]", "296", "20")
    self.bid64_to_uint64_xrninta("0", "[302AA87BEE538000]", "300", "00")
    self.bid64_to_uint64_xrninta("0", "[302AAD08158CD000]", "301", "20")
    self.bid64_to_uint64_xrninta("0", "[310E35FA931A0000]", "4000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3111C37937E08000]", "5000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498AB610]", "19999999999", "20")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498B7960]", "19999999999", "00")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498C3CB0]", "20000000000", "20")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498D0000]", "20000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498DC350]", "20000000001", "20")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498E86A0]", "20000000001", "00")
    self.bid64_to_uint64_xrninta("0", "[31271AFD498F49F0]", "20000000002", "20")
    self.bid64_to_uint64_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint64_xrninta("0", "[318C800000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xrninta("0", "[318C800000000032]", "35184372088833", "20")
    self.bid64_to_uint64_xrninta("0", "[319e7ed3bdb800e9]", "85836971874716", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint64_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0000000000BBD]", "301", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0002E90EDCFF1]", "19999999999", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0002E90EDCFFB]", "20000000000", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0002E90EDD005]", "20000000001", "20")
    self.bid64_to_uint64_xrninta("0", "[31A0002E90EDD00F]", "20000000002", "20")
    self.bid64_to_uint64_xrninta("0", "[31A1400000000005]", "35184372088833", "20")
    self.bid64_to_uint64_xrninta("0", "[31a1d11bb87623b3]", "51139196578296", "20")
    self.bid64_to_uint64_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint64_xrninta("0", "[31C00004A817C7FF]", "19999999999", "00")
    self.bid64_to_uint64_xrninta("0", "[31C00004A817C801]", "20000000001", "00")
    self.bid64_to_uint64_xrninta("0", "[31C0200000000000]", "35184372088832", "00")
    self.bid64_to_uint64_xrninta("0", "[31c136de6c152fe4]", "341803900678116", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498CFFFF]", "1999999999999999", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498D0000]", "2000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498D0001]", "2000000000000001", "00")
    self.bid64_to_uint64_xrninta("0", "[31C71AFD498D0002]", "2000000000000002", "00")
    self.bid64_to_uint64_xrninta("0", "[3200000000000003]", "300", "00")
    self.bid64_to_uint64_xrninta("0", "[32011000500c0002]", "29906850571878600", "00")
    self.bid64_to_uint64_xrninta("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[32438D7EA4C68000]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3245543DF729C000]", "15000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrninta("0", "[32468DB8BAC710CB]", "18446744073709550000", "00")
    self.bid64_to_uint64_xrninta("0", "[32471AFD498D0000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[32473af96c6dc1c0]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[3248E1BC9BF04000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[32638D7EA4C68000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[32E0000000000004]", "4000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[32E0000000000005]", "5000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3300000000000002]", "20000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[33A0000000000002]", "2000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[340000000000000F]", "15000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3400000000000019]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3420000000000001]", "10000000000000000000", "00")
    self.bid64_to_uint64_xrninta("0", "[3420000000000002]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[3440000000000001]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[3640000000000000]", "0", "00")
    self.bid64_to_uint64_xrninta("0", "[43202f4854591f6f]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[46aae259bde25032]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[4944a42762a583dd]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[5acfeb973624ed0b]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[64b779d3ef60bc83]", "0", "00")
    self.bid64_to_uint64_xrninta("0", "+658675889.768689865E0", "658675890", "20")
    self.bid64_to_uint64_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint64_xrninta("0", "[6c3ad5779fcba13e]", "980485897", "20")
    self.bid64_to_uint64_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6C88C49BA5E353F8]", "9223372036854776000", "00")
    self.bid64_to_uint64_xrninta("0", "[6e2b2d31a903adf1]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[7800000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[7c00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[7e00000000000000]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[8224b26ac7a84859]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[823421d0ecd6ae1e]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "+88999998.88889E0", "88999999", "20")
    self.bid64_to_uint64_xrninta("0", "+8998.889988889888988E0", "8999", "20")
    self.bid64_to_uint64_xrninta("0", "+99.99888899998E0", "100", "20")
    self.bid64_to_uint64_xrninta("0", "[9c6458434d340008]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[a36c00ee8ab70d63]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[afda469acf7335ae]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[b1d6102484824c01]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[b2612b7bc2977f2c]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[b4e0000000000000]", "0", "00")
    self.bid64_to_uint64_xrninta("0", "[c26aaf34426a2a05]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[c99f23665f35385d]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[d2d40e58f8c99abc]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[d497acc6fa05f435]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "[e792e91f0a1b4d24]", "0", "20")
    self.bid64_to_uint64_xrninta("0", "[fd274071324b8300]", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "-Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "Infinity", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "QNaN", "9223372036854775808", "01")
    self.bid64_to_uint64_xrninta("0", "SNaN", "9223372036854775808", "01")
  }

  private func bid64_to_uint64_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_ceil() {
    self.bid64_to_uint8_ceil("0", "[0000004000000000]", "1", "00")
    self.bid64_to_uint8_ceil("0", "257", "128", "01")
    self.bid64_to_uint8_ceil("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint8_ceil("0", "[30247E82C3A41000]", "127", "00")
    self.bid64_to_uint8_ceil("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_ceil("0", "[3024879B1216B000]", "128", "00")
    self.bid64_to_uint8_ceil("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_ceil("0", "[302490B360895000]", "129", "00")
    self.bid64_to_uint8_ceil("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_ceil("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_ceil("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint8_ceil("0", "[31A00000000004F1]", "127", "00")
    self.bid64_to_uint8_ceil("0", "[31A00000000004FB]", "128", "00")
    self.bid64_to_uint8_ceil("0", "[31A0000000000505]", "129", "00")
    self.bid64_to_uint8_ceil("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_ceil("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_ceil("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_ceil("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_ceil("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint8_ceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_ceil("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_ceil("0", "[7e00000000000000]", "128", "01")
  }

  private func bid64_to_uint8_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_floor() {
    self.bid64_to_uint8_floor("0", "257", "128", "01")
    self.bid64_to_uint8_floor("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint8_floor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_floor("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint8_floor("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_uint8_floor("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_floor("0", "[3024879B1216B000]", "127", "00")
    self.bid64_to_uint8_floor("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_floor("0", "[302490B360895000]", "128", "00")
    self.bid64_to_uint8_floor("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_floor("0", "[3028695479e3af15]", "236", "00")
    self.bid64_to_uint8_floor("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_floor("0", "[302913C24B66B000]", "255", "00")
    self.bid64_to_uint8_floor("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint8_floor("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint8_floor("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint8_floor("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_uint8_floor("0", "[31A00000000004FB]", "127", "00")
    self.bid64_to_uint8_floor("0", "[31A0000000000505]", "128", "00")
    self.bid64_to_uint8_floor("0", "[31A00000000009FB]", "255", "00")
    self.bid64_to_uint8_floor("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_floor("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_floor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_floor("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_floor("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_floor("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_floor("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_floor("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_floor("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_floor("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_floor("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint8_floor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_floor("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_floor("0", "[7e00000000000000]", "128", "01")
  }

  private func bid64_to_uint8_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_int() {
    self.bid64_to_uint8_int("0", "257", "128", "01")
    self.bid64_to_uint8_int("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint8_int("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_int("0", "[2FE5543DF729C000]", "1", "00")
    self.bid64_to_uint8_int("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_uint8_int("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_int("0", "[3024879B1216B000]", "127", "00")
    self.bid64_to_uint8_int("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_int("0", "[302490B360895000]", "128", "00")
    self.bid64_to_uint8_int("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_int("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_int("0", "[302913C24B66B000]", "255", "00")
    self.bid64_to_uint8_int("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_int("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_int("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_int("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_int("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_int("0", "[31600000000003E7]", "0", "00")
    self.bid64_to_uint8_int("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint8_int("0", "[31A000000000000F]", "1", "00")
    self.bid64_to_uint8_int("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_uint8_int("0", "[31A00000000004FB]", "127", "00")
    self.bid64_to_uint8_int("0", "[31A0000000000505]", "128", "00")
    self.bid64_to_uint8_int("0", "[31A00000000009FB]", "255", "00")
    self.bid64_to_uint8_int("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_int("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_int("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_int("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_int("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_int("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_int("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_int("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_int("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_int("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_int("0", "[6BF37DDA214E6000]", "0", "00")
    self.bid64_to_uint8_int("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_int("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_int("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_int("0", "[7e00000000000000]", "128", "01")
    self.bid64_to_uint8_int("0", "[7fdefd3de9fdfff9]", "128", "01")
  }

  private func bid64_to_uint8_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_rnint() {
    self.bid64_to_uint8_rnint("0", "257", "128", "01")
    self.bid64_to_uint8_rnint("0", "[2FD1C37937E08000]", "0", "00")
    self.bid64_to_uint8_rnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_rnint("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint8_rnint("0", "[30247E82C3A41000]", "126", "00")
    self.bid64_to_uint8_rnint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_rnint("0", "[3024879B1216B000]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[302490B360895000]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_rnint("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_rnint("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint8_rnint("0", "[31A0000000000005]", "0", "00")
    self.bid64_to_uint8_rnint("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint8_rnint("0", "[31A00000000004F1]", "126", "00")
    self.bid64_to_uint8_rnint("0", "[31A00000000004FB]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[31A0000000000505]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_rnint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_rnint("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_rnint("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_rnint("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_rnint("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_rnint("0", "5.5", "6", "00")
    self.bid64_to_uint8_rnint("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint8_rnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_rnint("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[7e00000000000000]", "128", "01")
    self.bid64_to_uint8_rnint("0", "[c75c6f712eb42b46]", "128", "01")
  }

  private func bid64_to_uint8_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_rninta() {
    self.bid64_to_uint8_rninta("0", "[0040150180004000]", "0", "00")
    self.bid64_to_uint8_rninta("0", "257", "128", "01")
    self.bid64_to_uint8_rninta("0", "[2FD1C37937E08000]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[2FE5543DF729C000]", "2", "00")
    self.bid64_to_uint8_rninta("0", "[30247E82C3A41000]", "127", "00")
    self.bid64_to_uint8_rninta("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_rninta("0", "[3024879B1216B000]", "128", "00")
    self.bid64_to_uint8_rninta("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_rninta("0", "[302490B360895000]", "129", "00")
    self.bid64_to_uint8_rninta("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_rninta("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_rninta("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[31600000000003E7]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[31A0000000000005]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[31A000000000000F]", "2", "00")
    self.bid64_to_uint8_rninta("0", "[31A00000000004F1]", "127", "00")
    self.bid64_to_uint8_rninta("0", "[31A00000000004FB]", "128", "00")
    self.bid64_to_uint8_rninta("0", "[31A0000000000505]", "129", "00")
    self.bid64_to_uint8_rninta("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_rninta("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_rninta("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_rninta("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_rninta("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[6BF37DDA214E6000]", "1", "00")
    self.bid64_to_uint8_rninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_rninta("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_rninta("0", "[7e00000000000000]", "128", "01")
  }

  private func bid64_to_uint8_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_xceil() {
    self.bid64_to_uint8_xceil("0", "257", "128", "01")
    self.bid64_to_uint8_xceil("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint8_xceil("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_xceil("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint8_xceil("0", "[30247E82C3A41000]", "127", "20")
    self.bid64_to_uint8_xceil("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_xceil("0", "[3024879B1216B000]", "128", "20")
    self.bid64_to_uint8_xceil("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_xceil("0", "[302490B360895000]", "129", "20")
    self.bid64_to_uint8_xceil("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_xceil("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_xceil("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint8_xceil("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint8_xceil("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint8_xceil("0", "[31A00000000004F1]", "127", "20")
    self.bid64_to_uint8_xceil("0", "[31A00000000004FB]", "128", "20")
    self.bid64_to_uint8_xceil("0", "[31A0000000000505]", "129", "20")
    self.bid64_to_uint8_xceil("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_xceil("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_xceil("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_xceil("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_xceil("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_xceil("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[593b15e7811c00fa]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint8_xceil("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_xceil("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_xceil("0", "[7e00000000000000]", "128", "01")
  }

  private func bid64_to_uint8_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_xfloor() {
    self.bid64_to_uint8_xfloor("0", "257", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint8_xfloor("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_xfloor("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint8_xfloor("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_uint8_xfloor("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_xfloor("0", "[3024879B1216B000]", "127", "20")
    self.bid64_to_uint8_xfloor("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_xfloor("0", "[302490B360895000]", "128", "20")
    self.bid64_to_uint8_xfloor("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_xfloor("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_xfloor("0", "[302913C24B66B000]", "255", "20")
    self.bid64_to_uint8_xfloor("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint8_xfloor("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint8_xfloor("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint8_xfloor("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_uint8_xfloor("0", "[31A00000000004FB]", "127", "20")
    self.bid64_to_uint8_xfloor("0", "[31A0000000000505]", "128", "20")
    self.bid64_to_uint8_xfloor("0", "[31A00000000009FB]", "255", "20")
    self.bid64_to_uint8_xfloor("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_xfloor("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_xfloor("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_xfloor("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_xfloor("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_xfloor("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint8_xfloor("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_xfloor("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[7e00000000000000]", "128", "01")
    self.bid64_to_uint8_xfloor("0", "[ba88f77325d9f597]", "128", "01")
  }

  private func bid64_to_uint8_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_xint() {
    self.bid64_to_uint8_xint("0", "257", "128", "01")
    self.bid64_to_uint8_xint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint8_xint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_xint("0", "[2FE5543DF729C000]", "1", "20")
    self.bid64_to_uint8_xint("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_uint8_xint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_xint("0", "[3024879B1216B000]", "127", "20")
    self.bid64_to_uint8_xint("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_xint("0", "[302490B360895000]", "128", "20")
    self.bid64_to_uint8_xint("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_xint("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_xint("0", "[302913C24B66B000]", "255", "20")
    self.bid64_to_uint8_xint("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[31600000000003E7]", "0", "20")
    self.bid64_to_uint8_xint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint8_xint("0", "[31A000000000000F]", "1", "20")
    self.bid64_to_uint8_xint("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_uint8_xint("0", "[31A00000000004FB]", "127", "20")
    self.bid64_to_uint8_xint("0", "[31A0000000000505]", "128", "20")
    self.bid64_to_uint8_xint("0", "[31A00000000009FB]", "255", "20")
    self.bid64_to_uint8_xint("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_xint("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_xint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_xint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_xint("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_xint("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_xint("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_xint("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_xint("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_xint("0", "[31c0000200066846]", "128", "01")
    self.bid64_to_uint8_xint("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_xint("0", "[6BF37DDA214E6000]", "0", "20")
    self.bid64_to_uint8_xint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_xint("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[7e00000000000000]", "128", "01")
    self.bid64_to_uint8_xint("0", "[dfac1f7b3bd90c1f]", "128", "01")
  }

  private func bid64_to_uint8_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_xrnint() {
    self.bid64_to_uint8_xrnint("0", "257", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[2FD1C37937E08000]", "0", "20")
    self.bid64_to_uint8_xrnint("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_xrnint("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint8_xrnint("0", "[30247E82C3A41000]", "126", "20")
    self.bid64_to_uint8_xrnint("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_xrnint("0", "[3024879B1216B000]", "128", "20")
    self.bid64_to_uint8_xrnint("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_xrnint("0", "[302490B360895000]", "128", "20")
    self.bid64_to_uint8_xrnint("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_xrnint("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_xrnint("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint8_xrnint("0", "[31A0000000000005]", "0", "20")
    self.bid64_to_uint8_xrnint("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint8_xrnint("0", "[31A00000000004F1]", "126", "20")
    self.bid64_to_uint8_xrnint("0", "[31A00000000004FB]", "128", "20")
    self.bid64_to_uint8_xrnint("0", "[31A0000000000505]", "128", "20")
    self.bid64_to_uint8_xrnint("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_xrnint("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_xrnint("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_xrnint("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_xrnint("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_xrnint("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint8_xrnint("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_xrnint("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[7e00000000000000]", "128", "01")
    self.bid64_to_uint8_xrnint("0", "[9ca58190ace2edcb]", "0", "20")
  }

  private func bid64_to_uint8_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_to_uint8_xrninta() {
    self.bid64_to_uint8_xrninta("0", "[0440001900100010]", "0", "20")
    self.bid64_to_uint8_xrninta("0", "257", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[2FD1C37937E08000]", "1", "20")
    self.bid64_to_uint8_xrninta("0", "[2FE38D7EA4C68000]", "1", "00")
    self.bid64_to_uint8_xrninta("0", "[2FE5543DF729C000]", "2", "20")
    self.bid64_to_uint8_xrninta("0", "[30247E82C3A41000]", "127", "20")
    self.bid64_to_uint8_xrninta("0", "[3024830EEADD6000]", "127", "00")
    self.bid64_to_uint8_xrninta("0", "[3024879B1216B000]", "128", "20")
    self.bid64_to_uint8_xrninta("0", "[30248C2739500000]", "128", "00")
    self.bid64_to_uint8_xrninta("0", "[302490B360895000]", "129", "20")
    self.bid64_to_uint8_xrninta("0", "[3024953F87C2A000]", "129", "00")
    self.bid64_to_uint8_xrninta("0", "[30290F36242D6000]", "255", "00")
    self.bid64_to_uint8_xrninta("0", "[302913C24B66B000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[3029184E72A00000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[30291CDA99D95000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[30292166C112A000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[302AA87BEE538000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[302AAD08158CD000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31600000000003E7]", "1", "20")
    self.bid64_to_uint8_xrninta("0", "[31A0000000000005]", "1", "20")
    self.bid64_to_uint8_xrninta("0", "[31A000000000000F]", "2", "20")
    self.bid64_to_uint8_xrninta("0", "[31A00000000004F1]", "127", "20")
    self.bid64_to_uint8_xrninta("0", "[31A00000000004FB]", "128", "20")
    self.bid64_to_uint8_xrninta("0", "[31A0000000000505]", "129", "20")
    self.bid64_to_uint8_xrninta("0", "[31A00000000009FB]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31A0000000000A05]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31A0000000000BBD]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31C0000000000001]", "1", "00")
    self.bid64_to_uint8_xrninta("0", "[31C000000000007F]", "127", "00")
    self.bid64_to_uint8_xrninta("0", "[31C0000000000080]", "128", "00")
    self.bid64_to_uint8_xrninta("0", "[31C0000000000081]", "129", "00")
    self.bid64_to_uint8_xrninta("0", "[31C00000000000FF]", "255", "00")
    self.bid64_to_uint8_xrninta("0", "[31C0000000000100]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31C0000000000101]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[31c0000014480202]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[3200000000000003]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[6BF37DDA214E6000]", "1", "20")
    self.bid64_to_uint8_xrninta("0", "[6C7386F26FC10000]", "0", "00")
    self.bid64_to_uint8_xrninta("0", "[7800000000000000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[7c00000000000000]", "128", "01")
    self.bid64_to_uint8_xrninta("0", "[7e00000000000000]", "128", "01")
  }

  private func bid64_to_uint8_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid_to_dpd64() {
    self.bid_to_dpd64("0", "[0020002800000000]", "[0004003c7dec6c4c]", "00")
    self.bid_to_dpd64("0", "[002000a000000000]", "[000400dacdaf9de0]", "00")
    self.bid_to_dpd64("0", "[0060002800000000]", "[000c003c7dec6c4c]", "00")
    self.bid_to_dpd64("0", "[7c00000000000001]", "[7c00000000000001]", "00")
    self.bid_to_dpd64("0", "[8c0b7fb109411dd3]", "[8d8136c8c4b062f9]", "00")
    self.bid_to_dpd64("0", "[cfcd6c91c703bfcc]", "[cdfbf8b206241eae]", "00")
    self.bid_to_dpd64("0", "[dfff5f7f5fdfa6fb]", "[f3fc3ce91dc02243]", "00")
    self.bid_to_dpd64("0", "[e943604fa1585191]", "[eca3dda65909d765]", "00")
    self.bid_to_dpd64("0", "[e9adeffdfbbfc9f9]", "[a0d4000000000000]", "00")
    self.bid_to_dpd64("0", "[f8779eb18c7a5a7f]", "[f800000000000000]", "00")
    self.bid_to_dpd64("0", "[ff32ffdbfd0b7aa8]", "[fe024c5c161ea4ec]", "00")
    self.bid_to_dpd64("0", "[ffffffffffdf3fff]", "[fe00000000000000]", "00")
    self.bid_to_dpd64("0", "[7c00000000000001]", "[7c00000000000001]", "00")
  }

  private func bid_to_dpd64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDenselyPackedDecimal64(_expected, file, line) else { return }

    let result = arg0.decimalEncoding
    self.assertInt(result, expected, file, line)
  }

  func test_bid_dpd_to_bid64() {
    self.bid_dpd_to_bid64("0", "[0000000000000000]", "[0000000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[0000000000000001]", "[0000000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[0000000000000080]", "[0000000000000064]", "00")
    self.bid_dpd_to_bid64("0", "[0000000001000800]", "[0000000000989e50]", "00")
    self.bid_dpd_to_bid64("0", "[000020009a4509d4]", "[00001231276e5fb2]", "00")
    self.bid_dpd_to_bid64("0", "[0004000000000000]", "[0020000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[0008000008008003]", "[0040000005f62f23]", "00")
    self.bid_dpd_to_bid64("0", "[0014000008008003]", "[00a0000005f62f23]", "00")
    self.bid_dpd_to_bid64("0", "[0034000000000000]", "[01a0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[0034000000000001]", "[01a0000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[040134b9c1e28e56]", "[000462d53c8abac0]", "00")
    self.bid_dpd_to_bid64("0", "[040534b9c1e28e56]", "[002462d53c8abac0]", "00")
    self.bid_dpd_to_bid64("0", "[0800004ca244d5e0]", "[00071b33671d6160]", "00")
    self.bid_dpd_to_bid64("0", "[20ec000000000000]", "[2760000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2201000000000000]", "[3000b5e620f48000]", "00")
    self.bid_dpd_to_bid64("0", "[2204200000000000]", "[302012309ce54000]", "00")
    self.bid_dpd_to_bid64("0", "[2208020000000000]", "[304001d1a94a2000]", "00")
    self.bid_dpd_to_bid64("0", "[220c004000000000]", "[3060002e90edd000]", "00")
    self.bid_dpd_to_bid64("0", "[2210000800000000]", "[30800004a817c800]", "00")
    self.bid_dpd_to_bid64("0", "[2214000080000000]", "[30a0000077359400]", "00")
    self.bid_dpd_to_bid64("0", "[2218000010000000]", "[30c000000bebc200]", "00")
    self.bid_dpd_to_bid64("0", "[221c000002000000]", "[30e0000001312d00]", "00")
    self.bid_dpd_to_bid64("0", "[2220000000200000]", "[31000000001e8480]", "00")
    self.bid_dpd_to_bid64("0", "[2224000000040000]", "[3120000000030d40]", "00")
    self.bid_dpd_to_bid64("0", "[2228000000008000]", "[3140000000004e20]", "00")
    self.bid_dpd_to_bid64("0", "[222c000000000800]", "[31600000000007d0]", "00")
    self.bid_dpd_to_bid64("0", "[2230000000000100]", "[31800000000000c8]", "00")
    self.bid_dpd_to_bid64("0", "[2234000000000020]", "[31a0000000000014]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000001]", "[31c0000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000002]", "[31c0000000000002]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000003]", "[31c0000000000003]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000004]", "[31c0000000000004]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000008]", "[31c0000000000008]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000016]", "[31c0000000000010]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000032]", "[31c0000000000020]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000064]", "[31c0000000000040]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000000a8]", "[31c0000000000080]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000156]", "[31c0000000000100]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000292]", "[31c0000000000200]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000424]", "[31c0000000000400]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000000848]", "[31c0000000000800]", "00")
    self.bid_dpd_to_bid64("0", "[223800000000107a]", "[31c0000000001000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000020ba]", "[31c0000000002000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000059ca]", "[31c0000000004000]", "00")
    self.bid_dpd_to_bid64("0", "[223800000000cbe8]", "[31c0000000008000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000196b6]", "[31c0000000010000]", "00")
    self.bid_dpd_to_bid64("0", "[223800000002c472]", "[31c0000000020000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000588c4]", "[31c0000000040000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000000a914e]", "[31c0000000080000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000001122f6]", "[31c0000000100000]", "00")
    self.bid_dpd_to_bid64("0", "[223800000021ecd2]", "[31c0000000200000]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000436984]", "[31c0000000400000]", "00")
    self.bid_dpd_to_bid64("0", "[2238000000873b08]", "[31c0000000800000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000016fdd16]", "[31c0000001000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000033b5232]", "[31c0000002000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800000672226c]", "[31c0000004000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800000b445fa8]", "[31c0000008000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800001688d656]", "[31c0000010000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800002b61f19c]", "[31c0000020000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380000473f062c]", "[31c0000040000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800008c78af48]", "[31c0000080000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238000115afb57a]", "[31c0000100000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800022cfaf2ba]", "[31c0000200000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380005cf9cbcca]", "[31c0000400000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238000d1d9ee1e8]", "[31c0000800000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238001a3999dbb6]", "[31c0001000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238002de3877672]", "[31c0002000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238005d37de32cc]", "[31c0004000000000]", "00")
    self.bid_dpd_to_bid64("0", "[223800b27d54746e]", "[31c0008000000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380117e91c9ff6]", "[31c0010000000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380237c23556d2]", "[31c0020000000000]", "00")
    self.bid_dpd_to_bid64("0", "[22380477846a4484]", "[31c0040000000000]", "00")
    self.bid_dpd_to_bid64("0", "[223808fe83b08908]", "[31c0080000000000]", "00")
    self.bid_dpd_to_bid64("0", "[223817ae8ea11216]", "[31c0100000000000]", "00")
    self.bid_dpd_to_bid64("0", "[223835329f21393c]", "[31c0200000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238707a3c43df64]", "[31c0400000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2238c0ede4e755a8]", "[31c0800000000000]", "00")
    self.bid_dpd_to_bid64("0", "[22390b9d3fce4356]", "[31c1000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[223ae2abddd88592]", "[31c2000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2391000000000000]", "[3c80b5e620f48000]", "00")
    self.bid_dpd_to_bid64("0", "[2394200000000000]", "[3ca012309ce54000]", "00")
    self.bid_dpd_to_bid64("0", "[2398020000000000]", "[3cc001d1a94a2000]", "00")
    self.bid_dpd_to_bid64("0", "[239c004000000000]", "[3ce0002e90edd000]", "00")
    self.bid_dpd_to_bid64("0", "[23a0000800000000]", "[3d000004a817c800]", "00")
    self.bid_dpd_to_bid64("0", "[23a4000080000000]", "[3d20000077359400]", "00")
    self.bid_dpd_to_bid64("0", "[23a8000010000000]", "[3d4000000bebc200]", "00")
    self.bid_dpd_to_bid64("0", "[23ac000002000000]", "[3d60000001312d00]", "00")
    self.bid_dpd_to_bid64("0", "[23b0000000200000]", "[3d800000001e8480]", "00")
    self.bid_dpd_to_bid64("0", "[23b4000000040000]", "[3da0000000030d40]", "00")
    self.bid_dpd_to_bid64("0", "[23b8000000008000]", "[3dc0000000004e20]", "00")
    self.bid_dpd_to_bid64("0", "[23bc000000000800]", "[3de00000000007d0]", "00")
    self.bid_dpd_to_bid64("0", "[23c0000000000100]", "[3e000000000000c8]", "00")
    self.bid_dpd_to_bid64("0", "[23c4000000000020]", "[3e20000000000014]", "00")
    self.bid_dpd_to_bid64("0", "[23c8000000000002]", "[3e40000000000002]", "00")
    self.bid_dpd_to_bid64("0", "[2638a51ff8c53324]", "[31c4000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[29fc000000000000]", "[2fe71afd498d0000]", "00")
    self.bid_dpd_to_bid64("0", "[2a3951f7d1dd2d48]", "[31c8000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[2b8c000000000000]", "[3c671afd498d0000]", "00")
    self.bid_dpd_to_bid64("0", "[323a83b7f277c27a]", "[31d0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[43f4000000000000]", "[5fa0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[43f4000000000001]", "[5fa0000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[43f8000000000000]", "[5fc0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[43fc000000000000]", "[5fe0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[47f934b9c1e28e56]", "[5fc462d53c8abac0]", "00")
    self.bid_dpd_to_bid64("0", "[4bfc004ca244d5e0]", "[5fe71b33671d6160]", "00")
    self.bid_dpd_to_bid64("0", "[4bfda46914274f00]", "[5fe841f5e8ceedc0]", "00")
    self.bid_dpd_to_bid64("0", "[6403f1f856777454]", "[6002b75d7734cd9e]", "00")
    self.bid_dpd_to_bid64("0", "[6e380737d54f019e]", "[6c70000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[77fcff3fcff3fcfe]", "[77fb86f26fc0fffe]", "00")
    self.bid_dpd_to_bid64("0", "[77fcff3fcff3fcff]", "[77fb86f26fc0ffff]", "00")
    self.bid_dpd_to_bid64("0", "[77fe9e6914274f00]", "[77fb81c8f23c4dc0]", "00")
    self.bid_dpd_to_bid64("0", "[7800000000000000]", "[7800000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[78ad564b7cd4bc25]", "[7800000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[7c00000000000000]", "[7c00000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[7c00000000000001]", "[7c00000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[7c00000115afb57a]", "[7c00000100000000]", "00")
    self.bid_dpd_to_bid64("0", "[7e00000000000000]", "[7e00000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[7e00000000000001]", "[7e00000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[7e00000115afb57a]", "[7e00000100000000]", "00")
    self.bid_dpd_to_bid64("0", "[8000000000000000]", "[8000000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[8000000000000001]", "[8000000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[8000000000000012]", "[800000000000000c]", "00")
    self.bid_dpd_to_bid64("0", "[8000000010000000]", "[800000000bebc200]", "00")
    self.bid_dpd_to_bid64("0", "[8004000002000000]", "[8020000001312d00]", "00")
    self.bid_dpd_to_bid64("0", "[8008000000200000]", "[80400000001e8480]", "00")
    self.bid_dpd_to_bid64("0", "[800c000000040000]", "[8060000000030d40]", "00")
    self.bid_dpd_to_bid64("0", "[8010000000008000]", "[8080000000004e20]", "00")
    self.bid_dpd_to_bid64("0", "[8014000000000800]", "[80a00000000007d0]", "00")
    self.bid_dpd_to_bid64("0", "[8018000000000100]", "[80c00000000000c8]", "00")
    self.bid_dpd_to_bid64("0", "[801c000000000020]", "[80e0000000000014]", "00")
    self.bid_dpd_to_bid64("0", "[8020000000000002]", "[8100000000000002]", "00")
    self.bid_dpd_to_bid64("0", "[9fc456c0d4b14cec]", "[9e3911f17c206208]", "00")
    self.bid_dpd_to_bid64("0", "[a0ec000000000000]", "[a760000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[c3f8000000000000]", "[dfc0000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[c3f8000000000001]", "[dfc0000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[c7fd34b9c1e28e56]", "[dfe462d53c8abac0]", "00")
    self.bid_dpd_to_bid64("0", "[e23fbf5f02e2ccd7]", "[91ffe72590db6225]", "00")
    self.bid_dpd_to_bid64("0", "[e403f1f856777454]", "[e002b75d7734cd9e]", "00")
    self.bid_dpd_to_bid64("0", "[f7fcff3fcff3fcff]", "[f7fb86f26fc0ffff]", "00")
    self.bid_dpd_to_bid64("0", "[f800000000000000]", "[f800000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[fc00000000000000]", "[fc00000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[fc00000000000001]", "[fc00000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[fc00000115afb57a]", "[fc00000100000000]", "00")
    self.bid_dpd_to_bid64("0", "[fe00000000000000]", "[fe00000000000000]", "00")
    self.bid_dpd_to_bid64("0", "[fe00000000000001]", "[fe00000000000001]", "00")
    self.bid_dpd_to_bid64("0", "[fe00000115afb57a]", "[fe00000100000000]", "00")
    self.bid_dpd_to_bid64("0", "[fffffffff7ffbdff]", "[ffe38d7e9ed077ef]", "00")
  }

  private func bid_dpd_to_bid64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDenselyPackedDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(decimalEncoding: arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_quantum() {
    self.bid64_quantum("0", "[3280000000003039]", "[3280000000000001]", "00")
    self.bid64_quantum("0", "[B280000000003039]", "[3280000000000001]", "00")
    self.bid64_quantum("0", "[3080000000003039]", "[3080000000000001]", "00")
    self.bid64_quantum("0", "[B080000000003039]", "[3080000000000001]", "00")
    self.bid64_quantum("0", "[3120000000003039]", "[3120000000000001]", "00")
    self.bid64_quantum("0", "[B120000000003039]", "[3120000000000001]", "00")
    self.bid64_quantum("0", "[31A000000001E23A]", "[31A0000000000001]", "00")
    self.bid64_quantum("0", "[5FE38D7EA4C68000]", "[5FE0000000000001]", "00")
    self.bid64_quantum("0", "[DFE38D7EA4C68000]", "[5FE0000000000001]", "00")
    self.bid64_quantum("0", "[31C0000000000000]", "[31C0000000000001]", "00")
    self.bid64_quantum("0", "[B1C0000000000000]", "[31C0000000000001]", "00")
    self.bid64_quantum("0", "[0000000000000001]", "[0000000000000001]", "00")
    self.bid64_quantum("0", "[8000000000000001]", "[0000000000000001]", "00")
    self.bid64_quantum("0", "[0000000000000000]", "[0000000000000001]", "00")
    self.bid64_quantum("0", "[7800000000000000]", "[7800000000000000]", "00")
  }

  private func bid64_quantum(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._quantum(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }
}
