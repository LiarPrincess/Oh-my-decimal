// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class IntelDecimal32Tests: XCTestCase, IntelMixin {

  func test_bid32_abs() {
    self.bid32_abs("0", "[00000001]", "[00000001]", "00")
    self.bid32_abs("0", "[00080001]", "[00080001]", "00")
    self.bid32_abs("0", "-1.0", "[3200000a]", "00")
    self.bid32_abs("0", "1.0", "[3200000a]", "00")
    self.bid32_abs("0", "-1.0e-96", "[0200000a]", "00")
    self.bid32_abs("0", "1.0e-96", "[0200000a]", "00")
    self.bid32_abs("0", "[6098967f]", "[6098967f]", "00")
    self.bid32_abs("0", "[60989680]", "[60989680]", "00")
    self.bid32_abs("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_abs("0", "[7c8f423f]", "[7c8f423f]", "00")
    self.bid32_abs("0", "[7c8f4240]", "[7c8f4240]", "00")
    self.bid32_abs("0", "[7e100000]", "[7e100000]", "00")
    self.bid32_abs("0", "[7e100100]", "[7e100100]", "00")
    self.bid32_abs("0", "[7e8f423f]", "[7e8f423f]", "00")
    self.bid32_abs("0", "[7e8f4240]", "[7e8f4240]", "00")
    self.bid32_abs("0", "[80000001]", "[00000001]", "00")
    self.bid32_abs("0", "-9.999999e-95", "[6018967f]", "00")
    self.bid32_abs("0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_abs("0", "-9.999999e96", "[77f8967f]", "00")
    self.bid32_abs("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_abs("0", "[fc100000]", "[7c100000]", "00")
    self.bid32_abs("0", "[fc100100]", "[7c100100]", "00")
    self.bid32_abs("0", "[fe000000]", "[7e000000]", "00")
  }

  private func bid32_abs(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let result = arg0.magnitude
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_add() {
    self.bid32_add("0", "[00000001]", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "[00080001]", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "[00000001]", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "[00080001]", "[2f8f4240]", "20")
    self.bid32_add("0", "-1.0", "1.0", "[32000000]", "00")
    self.bid32_add("0", "1.0", "-1.0", "[32000000]", "00")
    self.bid32_add("0", "1.0", "1.0", "[32000014]", "00")
    self.bid32_add("0", "1.0", "-1.0e-96", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "1.0e-96", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "[6098967f]", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "[60989680]", "[2f8f4240]", "00")
    self.bid32_add("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_add("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_add("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_add("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_add("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_add("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_add("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_add("0", "1.0", "[80000001]", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "-9.999999e-95", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "9.999999e-95", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "9.999999e96", "[77f8967f]", "20")
    self.bid32_add("0", "1.0", "-9.999999e96", "[f7f8967f]", "20")
    self.bid32_add("0", "-1.0e-96", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0e-96", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_add("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_add("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_add("0", "[6098967f]", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "[60989680]", "1.0", "[2f8f4240]", "00")
    self.bid32_add("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_add("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_add("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_add("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_add("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_add("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_add("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_add("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_add("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_add("0", "[80000001]", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "-9.999999e-95", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "9.999999e-95", "1.0", "[2f8f4240]", "20")
    self.bid32_add("0", "9.999999e96", "1.0", "[77f8967f]", "20")
    self.bid32_add("0", "-9.999999e96", "1.0", "[f7f8967f]", "20")
    self.bid32_add("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_add("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_add("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_add("0", "Infinity", "NaN", "[7c000000]", "00")
    self.bid32_add("2", "[37079155]", "[f3844421]", "[f3844420]", "20")
    self.bid32_add("0", "[c7800000]", "[00000054]", "[00000054]", "00")
    self.bid32_add("0", "[1f800000]", "[9b800000]", "[1b800000]", "00")
    self.bid32_add("1", "[1f800000]", "[9b800000]", "[9b800000]", "00")
    self.bid32_add("0", "[9b800000]", "[d6000000]", "[9b800000]", "00")
    self.bid32_add("0", "[48fa4473]", "[4982f3c3]", "[4929bfaa]", "20")
    self.bid32_add("2", "[37079155]", "[f3844421]", "[f3844420]", "20")
    self.bid32_add("0", "[c7800000]", "[00000054]", "[00000054]", "00")
    self.bid32_add("0", "[1f800000]", "[9b800000]", "[1b800000]", "00")
    self.bid32_add("1", "[1f800000]", "[9b800000]", "[9b800000]", "00")
    self.bid32_add("0", "[9b800000]", "[d6000000]", "[9b800000]", "00")
    self.bid32_add("0", "[48fa4473]", "[4982f3c3]", "[4929bfaa]", "20")
  }

  private func bid32_add(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._adding(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_class() {
    self.bid32_class("0", "[00082041]", "7", "00")
    self.bid32_class("0", "[27000000]", "6", "00")
    self.bid32_class("0", "[328f423f]", "8", "00")
    self.bid32_class("0", "[607fffff]", "6", "00")
    self.bid32_class("0", "[658c3437]", "8", "00")
    self.bid32_class("0", "[78000000]", "9", "00")
    self.bid32_class("0", "[78000001]", "9", "00")
    self.bid32_class("0", "[78001000]", "9", "00")
    self.bid32_class("0", "[780fffff]", "9", "00")
    self.bid32_class("0", "[78f00000]", "9", "00")
    self.bid32_class("0", "[78f00001]", "9", "00")
    self.bid32_class("0", "[78ffffff]", "9", "00")
    self.bid32_class("0", "[7c000000]", "1", "00")
    self.bid32_class("0", "[7c000001]", "1", "00")
    self.bid32_class("0", "[7c001000]", "1", "00")
    self.bid32_class("0", "[7c0f4240]", "1", "00")
    self.bid32_class("0", "[7c0fffff]", "1", "00")
    self.bid32_class("0", "[7c8f423f]", "1", "00")
    self.bid32_class("0", "[7c8f4240]", "1", "00")
    self.bid32_class("0", "[7c8f4241]", "1", "00")
    self.bid32_class("0", "[7cf00000]", "1", "00")
    self.bid32_class("0", "[7cf00001]", "1", "00")
    self.bid32_class("0", "[7cffffff]", "1", "00")
    self.bid32_class("0", "[7e000000]", "0", "00")
    self.bid32_class("0", "[7e000001]", "0", "00")
    self.bid32_class("0", "[7e000100]", "0", "00")
    self.bid32_class("0", "[7e0f4240]", "0", "00")
    self.bid32_class("0", "[7e0fffff]", "0", "00")
    self.bid32_class("0", "[7e8f423f]", "0", "00")
    self.bid32_class("0", "[7e8f4240]", "0", "00")
    self.bid32_class("0", "[7e8f4241]", "0", "00")
    self.bid32_class("0", "[7ef00000]", "0", "00")
    self.bid32_class("0", "[7ef00001]", "0", "00")
    self.bid32_class("0", "[7effffff]", "0", "00")
    self.bid32_class("0", "[8298e75f]", "3", "00")
    self.bid32_class("0", "[f420b31f]", "3", "00")
    self.bid32_class("0", "[f71fffff]", "5", "00")
    self.bid32_class("0", "[f8000000]", "2", "00")
    self.bid32_class("0", "[f8000001]", "2", "00")
    self.bid32_class("0", "[f8001000]", "2", "00")
    self.bid32_class("0", "[f80fffff]", "2", "00")
    self.bid32_class("0", "[f8f00000]", "2", "00")
    self.bid32_class("0", "[f8f00001]", "2", "00")
    self.bid32_class("0", "[f8ffffff]", "2", "00")
    self.bid32_class("0", "[fc000000]", "1", "00")
    self.bid32_class("0", "[fc000001]", "1", "00")
    self.bid32_class("0", "[fc001000]", "1", "00")
    self.bid32_class("0", "[fc0f4240]", "1", "00")
    self.bid32_class("0", "[fc0fffff]", "1", "00")
    self.bid32_class("0", "[fc8f423f]", "1", "00")
    self.bid32_class("0", "[fc8f4240]", "1", "00")
    self.bid32_class("0", "[fc8f4241]", "1", "00")
    self.bid32_class("0", "[fcf00000]", "1", "00")
    self.bid32_class("0", "[fcf00001]", "1", "00")
    self.bid32_class("0", "[fcffffff]", "1", "00")
    self.bid32_class("0", "[fe000000]", "0", "00")
    self.bid32_class("0", "[fe000001]", "0", "00")
    self.bid32_class("0", "[fe000100]", "0", "00")
    self.bid32_class("0", "[fe0fffff]", "0", "00")
    self.bid32_class("0", "[fe8f423f]", "0", "00")
    self.bid32_class("0", "[fe8f4240]", "0", "00")
    self.bid32_class("0", "[fe8f4241]", "0", "00")
    self.bid32_class("0", "[fef00000]", "0", "00")
    self.bid32_class("0", "[fef00001]", "0", "00")
    self.bid32_class("0", "[feffffff]", "0", "00")
    self.bid32_class("0", "[00000000]", "6", "00")
    self.bid32_class("0", "[80000000]", "5", "00")
    self.bid32_class("0", "[00000001]", "7", "00")
    self.bid32_class("0", "[80000001]", "4", "00")
  }

  private func bid32_class(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.floatingPointClass
    self.assertFloatingPointClass(result, expected, file, line)
  }

  func test_bid32_copy() {
    self.bid32_copy("0", "[00000001]", "[00000001]", "00")
    self.bid32_copy("0", "[00080001]", "[00080001]", "00")
    self.bid32_copy("0", "1.0", "[3200000a]", "00")
    self.bid32_copy("0", "-1.0", "[b200000a]", "00")
    self.bid32_copy("0", "1.0e-96", "[0200000a]", "00")
    self.bid32_copy("0", "-1.0e-96", "[8200000a]", "00")
    self.bid32_copy("0", "[6098967f]", "[6098967f]", "00")
    self.bid32_copy("0", "[60989680]", "[60989680]", "00")
    self.bid32_copy("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_copy("0", "[7c8f423f]", "[7c8f423f]", "00")
    self.bid32_copy("0", "[7c8f4240]", "[7c8f4240]", "00")
    self.bid32_copy("0", "[7e100000]", "[7e100000]", "00")
    self.bid32_copy("0", "[7e100100]", "[7e100100]", "00")
    self.bid32_copy("0", "[7e8f423f]", "[7e8f423f]", "00")
    self.bid32_copy("0", "[7e8f4240]", "[7e8f4240]", "00")
    self.bid32_copy("0", "[80000001]", "[80000001]", "00")
    self.bid32_copy("0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_copy("0", "-9.999999e-95", "[e018967f]", "00")
    self.bid32_copy("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_copy("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_copy("0", "[fc100000]", "[fc100000]", "00")
    self.bid32_copy("0", "[fc100100]", "[fc100100]", "00")
    self.bid32_copy("0", "[fe000000]", "[fe000000]", "00")
  }

  private func bid32_copy(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let result = arg0
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_copySign() {
    self.bid32_copySign("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_copySign("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_copySign("0", "1.0", "[00000001]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[00080001]", "[3200000a]", "00")
    self.bid32_copySign("0", "-1.0", "1.0", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "-1.0", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "1.0e-96", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "-1.0e-96", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "[6098967f]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[60989680]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7c000000]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7c8f423f]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7c8f4240]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7e100000]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7e100100]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7e8f423f]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[7e8f4240]", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "[80000001]", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "9.999999e-95", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "-9.999999e-95", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "9.999999e96", "[3200000a]", "00")
    self.bid32_copySign("0", "1.0", "-9.999999e96", "[b200000a]", "00")
    self.bid32_copySign("0", "-1.0e-96", "1.0", "[0200000a]", "00")
    self.bid32_copySign("0", "1.0e-96", "1.0", "[0200000a]", "00")
    self.bid32_copySign("0", "1.0", "[fc100000]", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "[fc100100]", "[b200000a]", "00")
    self.bid32_copySign("0", "1.0", "[fe000000]", "[b200000a]", "00")
    self.bid32_copySign("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_copySign("0", "[60989680]", "1.0", "[60989680]", "00")
    self.bid32_copySign("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_copySign("0", "[7c8f423f]", "1.0", "[7c8f423f]", "00")
    self.bid32_copySign("0", "[7c8f423f]", "[7e100000]", "[7c8f423f]", "00")
    self.bid32_copySign("0", "[7c8f423f]", "Infinity", "[7c8f423f]", "00")
    self.bid32_copySign("0", "[7c8f4240]", "1.0", "[7c8f4240]", "00")
    self.bid32_copySign("0", "[7e100000]", "1.0", "[7e100000]", "00")
    self.bid32_copySign("0", "[7e100100]", "1.0", "[7e100100]", "00")
    self.bid32_copySign("0", "[7e8f423f]", "1.0", "[7e8f423f]", "00")
    self.bid32_copySign("0", "[7e8f4240]", "1.0", "[7e8f4240]", "00")
    self.bid32_copySign("0", "[80000001]", "1.0", "[00000001]", "00")
    self.bid32_copySign("0", "-9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_copySign("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_copySign("0", "-9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_copySign("0", "9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_copySign("0", "[fc100000]", "1.0", "[7c100000]", "00")
    self.bid32_copySign("0", "[fc100100]", "1.0", "[7c100100]", "00")
    self.bid32_copySign("0", "[fe000000]", "1.0", "[7e000000]", "00")
    self.bid32_copySign("0", "Infinity", "NaN", "[78000000]", "00")
  }

  private func bid32_copySign(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let result = Decimal32(signOf: arg1, magnitudeOf: arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_div() {
    self.bid32_div("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_div("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_div("0", "[04240011]", "[f8000000]", "[80000000]", "00")
    self.bid32_div("0", "0E-101", "1E+89", "[00000000]", "00")
    self.bid32_div("0", "0E+89", "0E+89", "[7c000000]", "01")
    self.bid32_div("0", "0E+89", "1E-96", "[5f800000]", "00")
    self.bid32_div("0", "0E+89", "9.999999E+96", "[32000000]", "00")
    self.bid32_div("0", "[0f4a7e34]", "[df2fffff]", "[80000000]", "30")
    self.bid32_div("0", "1.0", "[00000001]", "[78000000]", "28")
    self.bid32_div("0", "1.0", "[00080001]", "[5f1d1a91]", "20")
    self.bid32_div("0", "1.0", "1.0", "[32800001]", "00")
    self.bid32_div("0", "-1.0", "1.0", "[b2800001]", "00")
    self.bid32_div("0", "1.0", "-1.0", "[b2800001]", "00")
    self.bid32_div("0", "1.0", "1.0e-96", "[5f8f4240]", "00")
    self.bid32_div("0", "1.0", "-1.0e-96", "[df8f4240]", "00")
    self.bid32_div("0", "1.0", "[6098967f]", "[5c8f4240]", "20")
    self.bid32_div("0", "1.0", "[60989680]", "[78000000]", "04")
    self.bid32_div("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_div("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_div("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_div("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_div("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_div("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_div("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_div("0", "1.0", "[80000001]", "[f8000000]", "28")
    self.bid32_div("0", "1.0", "9.999999e-95", "[5e8f4240]", "20")
    self.bid32_div("0", "1.0", "-9.999999e-95", "[de8f4240]", "20")
    self.bid32_div("0", "1.0", "9.999999e96", "[00002710]", "30")
    self.bid32_div("0", "1.0", "-9.999999e96", "[80002710]", "30")
    self.bid32_div("0", "1.0e-96", "1.0", "[02800001]", "00")
    self.bid32_div("0", "-1.0e-96", "1.0", "[82800001]", "00")
    self.bid32_div("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_div("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_div("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_div("0", "[15000000]", "[4d8583fd]", "[00000000]", "00")
    self.bid32_div("0", "1E+89", "0.5", "[5f000002]", "00")
    self.bid32_div("0", "1E+89", "1.000000E+96", "[2f000001]", "00")
    self.bid32_div("0", "[23000000]", "[6896ff7f]", "[33800000]", "00")
    self.bid32_div("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_div("0", "[60989680]", "1.0", "[02800000]", "00")
    self.bid32_div("0", "[78000000]", "[f3d4b76a]", "[f8000000]", "00")
    self.bid32_div("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_div("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_div("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_div("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_div("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_div("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_div("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_div("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_div("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_div("0", "[80000001]", "1.0", "[80000001]", "00")
    self.bid32_div("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_div("0", "-9.999999e-95", "1.0", "[e018967f]", "00")
    self.bid32_div("0", "9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_div("0", "-9.999999e96", "1.0", "[f7f8967f]", "00")
    self.bid32_div("0", "[c3088000]", "[00020000]", "[f8000000]", "28")
    self.bid32_div("0", "[ce000000]", "[049e2480]", "[df800000]", "00")
    self.bid32_div("0", "[d5800000]", "[c2000000]", "[7c000000]", "01")
    self.bid32_div("0", "[f8000000]", "[78000000]", "[7c000000]", "01")
    self.bid32_div("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_div("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_div("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_div("0", "Infinity", "Infinity", "[7c000000]", "01")
    self.bid32_div("0", "Infinity", "NaN", "[7c000000]", "00")
    self.bid32_div("1", "[803c6719]", "[a77f173f]", "[08488551]", "20")
    self.bid32_div("2", "[803c6719]", "[a77f173f]", "[08488552]", "20")
    self.bid32_div("2", "[c27912d4]", "[6c2e0ad6]", "[f0220ff5]", "20")
  }

  private func bid32_div(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._divided(by: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_fma() {
    self.bid32_fma("0", "[00444088]", "[ba3ca7db]", "[04620600]", "[8b1b218f]", "20")
    self.bid32_fma("0", "[01408466]", "[a6838f31]", "[08100064]", "[08100064]", "20")
    self.bid32_fma("0", "[014930e4]", "[3c3a1855]", "[a0803b0c]", "[9f9710b0]", "20")
    self.bid32_fma("0", "[030ab023]", "[2b260b0c]", "[10090200]", "[0fda1400]", "20")
    self.bid32_fma("0", "[04436437]", "[971895d0]", "[00000001]", "[00000001]", "30")
    self.bid32_fma("0", "[05cc9cb1]", "[800420a2]", "[00001000]", "[00001000]", "30")
    self.bid32_fma("0", "[08000005]", "[de5fffbb]", "[80104000]", "[b42fffde]", "20")
    self.bid32_fma("0", "[0821c0aa]", "[a4428cc5]", "[bf800000]", "[80000001]", "30")
    self.bid32_fma("0", "[0a322811]", "[818440c9]", "[93688ed3]", "[93688ed3]", "20")
    self.bid32_fma("0", "[0c21add3]", "[24da1505]", "[04004120]", "[03197597]", "20")
    self.bid32_fma("0", "-0", "-Infinity", "-Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "-0", "-Infinity", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "0", "-Infinity", "QNaN", "[7c000000]", "00")
    self.bid32_fma("0", "0", "Infinity", "QNaN", "[7c000000]", "00")
    self.bid32_fma("0", "0", "QNaN", "-0", "[7c000000]", "00")
    self.bid32_fma("0", "-0", "SNaN", "SNaN", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "1.00001", "1.00001", "[2f9e849e]", "20")
    self.bid32_fma("0", "1.00001", "1.00001", "1.0e-96", "[2f8f4254]", "20")
    self.bid32_fma("0", "1.00001", "1.00001", "[6098967e]", "[2f8f4254]", "20")
    self.bid32_fma("0", "1.00001", "1.00001", "[60989680]", "[2f8f4254]", "20")
    self.bid32_fma("0", "1.00001", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "1.00001", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "1.0e-96", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "1.00001", "1.0e-96", "1.0e-96", "[00030d41]", "00")
    self.bid32_fma("0", "1.00001", "1.0e-96", "[6098967e]", "[028f4241]", "20")
    self.bid32_fma("0", "1.00001", "1.0e-96", "[60989680]", "[000186a1]", "00")
    self.bid32_fma("0", "1.00001", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "1.0e-96", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "[6098967e]", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "1.00001", "[6098967e]", "1.0e-96", "[028f424b]", "20")
    self.bid32_fma("0", "1.00001", "[6098967e]", "[6098967e]", "[029e848a]", "20")
    self.bid32_fma("0", "1.00001", "[6098967e]", "[60989680]", "[028f424a]", "20")
    self.bid32_fma("0", "1.00001", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[6098967e]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[60989680]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "1.00001", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "Infinity", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.00001", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.00001", "Infinity", "Inf", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "1.00001", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "1.0e-96", "1.00001", "1.0e-96", "[00030d41]", "00")
    self.bid32_fma("0", "1.0e-96", "1.00001", "[6098967e]", "[028f4241]", "20")
    self.bid32_fma("0", "1.0e-96", "1.00001", "[60989680]", "[000186a1]", "00")
    self.bid32_fma("0", "1.0e-96", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "1.00001", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "1.0e-96", "[000186a0]", "30")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "[6098967e]", "[6098967e]", "20")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "[60989680]", "[00000000]", "30")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "1.0e-96", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "1.0e-96", "[000186a0]", "30")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "[6098967e]", "[6098967e]", "20")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "[60989680]", "[00000000]", "30")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[6098967e]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[60989680]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "1.0e-96", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "Infinity", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "1.0e-96", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "1.0e-96", "Infinity", "Inf", "[78000000]", "00")
    self.bid32_fma("0", "[18e18d3c]", "[1667d383]", "[00020409]", "[0008a74d]", "30")
    self.bid32_fma("0", "[1a322130]", "[d8f3fdf3]", "[3f000000]", "[c3a61b57]", "20")
    self.bid32_fma("0", "[1eab1805]", "[104007a0]", "[00000000]", "[0001ceef]", "30")
    self.bid32_fma("0", "[29314e22]", "[00000462]", "[89102128]", "[89102128]", "20")
    self.bid32_fma("0", "[37fdefff]", "[2627ca65]", "[2cd194d7]", "[2ea0d95e]", "20")
    self.bid32_fma("0", "[3de1a7d1]", "[20010465]", "[9fe7fd9f]", "[2dc11921]", "20")
    self.bid32_fma("0", "[451460c6]", "[a571fa44]", "[cbff6dcf]", "[cbff6dcf]", "20")
    self.bid32_fma("0", "[4cc0e205]", "[40000082]", "[b251a991]", "[5b545906]", "20")
    self.bid32_fma("0", "[6098967e]", "1.00001", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "[6098967e]", "1.00001", "1.0e-96", "[028f424b]", "20")
    self.bid32_fma("0", "[6098967e]", "1.00001", "[6098967e]", "[029e848a]", "20")
    self.bid32_fma("0", "[6098967e]", "1.00001", "[60989680]", "[028f424a]", "20")
    self.bid32_fma("0", "[6098967e]", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "1.00001", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "1.0e-96", "[000186a0]", "30")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "[6098967e]", "[6098967e]", "20")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "[60989680]", "[00000000]", "30")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "1.0e-96", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "1.00001", "[2f8f424a]", "20")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "1.0e-96", "[000186a0]", "30")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "[6098967e]", "[6098967e]", "20")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "[60989680]", "[00000000]", "30")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[6098967e]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[60989680]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[6098967e]", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "Infinity", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[6098967e]", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[6098967e]", "Infinity", "Inf", "[78000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "1.00001", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "1.0e-96", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[6098967e]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "1.00001", "[2f8f424a]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "1.0e-96", "[000186a0]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "[6098967e]", "[6098967e]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "[60989680]", "[00000000]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[60989680]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[60989680]", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[60989680]", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[60989680]", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[60989680]", "Infinity", "Inf", "[7c000000]", "01")
    self.bid32_fma("0", "[6fe1778a]", "[01000800]", "[9cf533af]", "[9cf533af]", "20")
    self.bid32_fma("0", "[7093c63d]", "[37edb46c]", "[dbfb7fff]", "[dbfb7fff]", "20")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "1.00001", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "1.0e-96", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[6098967e]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[60989680]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f423f]", "Infinity", "Inf", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "1.00001", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "1.0e-96", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[6098967e]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[60989680]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7c8f4240]", "Infinity", "Inf", "[7c000000]", "00")
    self.bid32_fma("0", "[7e100000]", "1.00001", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.00001", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "1.0e-96", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[6098967e]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[60989680]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "1.00001", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "[60989680]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f423f]", "Infinity", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7c8f4240]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "[7c8f423f]", "[7c0f423f]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "[7e100000]", "Infinity", "Inf", "[7c000000]", "01")
    self.bid32_fma("0", "[8346a4e1]", "[3bbfbefa]", "[68080128]", "[68080128]", "20")
    self.bid32_fma("0", "[8a0a12a8]", "[2556e6bf]", "[00800000]", "[8005bc96]", "30")
    self.bid32_fma("0", "[8b72fbee]", "[60e92948]", "[03000001]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid32_fma("0", "[9e951bd8]", "[9108e931]", "[00010020]", "[000d53e4]", "30")
    self.bid32_fma("0", "[9fca5489]", "[00001010]", "[0000000a]", "[0000000a]", "30")
    self.bid32_fma("0", "[a0f048c1]", "[82021240]", "[84000000]", "[00000000]", "30")
    self.bid32_fma("0", "[a2bc202e]", "[d7ff3fcd]", "[3c41374e]", "[4b322429]", "20")
    self.bid32_fma("0", "[a45bef89]", "[8824bae8]", "[00000000]", "[00000001]", "30")
    self.bid32_fma("0", "[bab75018]", "[6f6e1473]", "[72458bf5]", "[49520b01]", "20")
    self.bid32_fma("0", "[caeaaf9f]", "[51604098]", "[36521fa9]", "[f8000000]", "28")
    self.bid32_fma("0", "[d0800007]", "[bffdeffb]", "[10a8288a]", "[5e5827fd]", "20")
    self.bid32_fma("0", "[d7f90d31]", "[0884444a]", "[68a37ca5]", "[b0a1d962]", "20")
    self.bid32_fma("0", "[d8c6127d]", "[31000000]", "[4a2001ca]", "[4a2001ca]", "00")
    self.bid32_fma("0", "[df800000]", "[55966da3]", "[20000000]", "[20000000]", "00")
    self.bid32_fma("0", "[dfdf7fff]", "[00000004]", "[2d3f7445]", "[ad9fdac6]", "20")
    self.bid32_fma("0", "[ea0e4040]", "[83ac1a7e]", "[3f800000]", "[00000000]", "30")
    self.bid32_fma("0", "[ec37be9b]", "[20800005]", "[0a684d6d]", "[9f4bdf4d]", "20")
    self.bid32_fma("0", "[f27649b3]", "[1d49b92b]", "[35412c03]", "[b7c89c85]", "20")
    self.bid32_fma("0", "[f5ed2297]", "[91526503]", "[ee4389c2]", "[39bf0e76]", "20")
    self.bid32_fma("0", "[f8000000]", "[d298d6bd]", "[f8000000]", "[7c000000]", "01")
    self.bid32_fma("0", "[f8000000]", "[f8000000]", "[f8000000]", "[7c000000]", "01")
    self.bid32_fma("0", "-Infinity", "0", "-0", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "1.00001", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "1.00001", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "1.00001", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "1.0e-96", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "1.0e-96", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[6098967e]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[6098967e]", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "[60989680]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[60989680]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[60989680]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[60989680]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[60989680]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[60989680]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[60989680]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[60989680]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "1.00001", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "1.0e-96", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "[6098967e]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "[60989680]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "[7c8f4240]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_fma("0", "Infinity", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "1.00001", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "1.0e-96", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "[6098967e]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "[60989680]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "[7c8f423f]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7c8f4240]", "Infinity", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "[7e100000]", "1.00001", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "1.0e-96", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "[6098967e]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "[60989680]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "[7c8f423f]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "[7c8f4240]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "[7e100000]", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "Inf", "1.00001", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "1.0e-96", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "[6098967e]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "[60989680]", "[78000000]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_fma("0", "Infinity", "Inf", "[7e100000]", "[7c000000]", "01")
    self.bid32_fma("0", "Infinity", "Inf", "Infinity", "[78000000]", "00")
    self.bid32_fma("0", "QNaN", "-Infinity", "SNaN", "[7c000000]", "01")
    self.bid32_fma("0", "SNaN", "0", "0", "[7c000000]", "01")
    self.bid32_fma("0", "SNaN", "0", "Infinity", "[7c000000]", "01")
    self.bid32_fma("0", "SNaN", "+56858.E0", "SNaN", "[7c000000]", "01")
    self.bid32_fma("0", "SNaN", "-Infinity", "QNaN", "[7c000000]", "01")
    self.bid32_fma("1", "[00000010]", "[8f464f29]", "[40000001]", "[6f38967f]", "20")
    self.bid32_fma("1", "-0", "0", "SNaN", "[7c000000]", "01")
    self.bid32_fma("1", "[812f6fda]", "[175cbe7d]", "[3ffaffff]", "[3ffafffe]", "20")
    self.bid32_fma("1", "[df800000]", "[55966da3]", "[20000000]", "[a0000000]", "00")
    self.bid32_fma("2", "[04436437]", "[971895d0]", "[00000001]", "[00000001]", "30")
    self.bid32_fma("2", "[05cc9cb1]", "[800420a2]", "[00001000]", "[00001000]", "30")
    self.bid32_fma("2", "[80104200]", "[a1480040]", "[264b785d]", "[264b785e]", "20")
    self.bid32_fma("4", "[030ab023]", "[2b260b0c]", "[10090200]", "[0fda1400]", "20")
    self.bid32_fma("4", "[29314e22]", "[00000462]", "[89102128]", "[89102128]", "20")
    self.bid32_fma("4", "[3de1a7d1]", "[20010465]", "[9fe7fd9f]", "[2dc11921]", "20")
    self.bid32_fma("4", "[40890002]", "[02800028]", "[90db8353]", "[111ad94d]", "20")
    self.bid32_fma("4", "[8000000b]", "[07e8eaec]", "[0280000a]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid32_fma("4", "[80000a0a]", "[86080300]", "[a3800000]", "[00000000]", "30")
    self.bid32_fma("4", "[a2bc202e]", "[d7ff3fcd]", "[3c41374e]", "[4b322429]", "20")
    self.bid32_fma("4", "[bab75018]", "[6f6e1473]", "[72458bf5]", "[49520b01]", "20")
    self.bid32_fma("2", "[494dc31e]", "[008c4d08]", "[beff957e]", "[beff957d]", "20")
    self.bid32_fma("1", "[1a77cfa1]", "[ca8de047]", "[af800000]", "[b56cf443]", "20")
    self.bid32_fma("0", "[bd800000]", "[3930f198]", "[bf51c5b5]", "[bf51c5b5]", "00")
    self.bid32_fma("0", "[d3f3c27f]", "[f8000000]", "[f8000000]", "[7c000000]", "01")
    self.bid32_fma("0", "[00000000]", "[dffff9fc]", "[2e002240]", "[2d0d6100]", "00")
    self.bid32_fma("0", "[f7cfb7fa]", "[08000001]", "[83800000]", "[ed2fb7fa]", "00")
    self.bid32_fma("1", "[f7cfb7fa]", "[08000001]", "[83800000]", "[ed2fb7fa]", "00")
    self.bid32_fma("1", "[c2abe93b]", "[00000100]", "[1091390e]", "[916eb0a5]", "00")
    self.bid32_fma("0", "[40000302]", "[c90b2a4d]", "[9a000000]", "[d7d5f8ea]", "20")
    self.bid32_fma("2", "[8d7f75e7]", "[100000c0]", "[03000001]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid32_fma("2", "[494dc31e]", "[008c4d08]", "[beff957e]", "[beff957d]", "20")
    self.bid32_fma("1", "[1a77cfa1]", "[ca8de047]", "[af800000]", "[b56cf443]", "20")
    self.bid32_fma("0", "[bd800000]", "[3930f198]", "[bf51c5b5]", "[bf51c5b5]", "00")
    self.bid32_fma("0", "[d3f3c27f]", "[f8000000]", "[f8000000]", "[7c000000]", "01")
    self.bid32_fma("0", "[00000000]", "[dffff9fc]", "[2e002240]", "[2d0d6100]", "00")
    self.bid32_fma("0", "[f7cfb7fa]", "[08000001]", "[83800000]", "[ed2fb7fa]", "00")
    self.bid32_fma("1", "[f7cfb7fa]", "[08000001]", "[83800000]", "[ed2fb7fa]", "00")
    self.bid32_fma("1", "[c2abe93b]", "[00000100]", "[1091390e]", "[916eb0a5]", "00")
    self.bid32_fma("0", "[40000302]", "[c90b2a4d]", "[9a000000]", "[d7d5f8ea]", "20")
    self.bid32_fma("0", "[aae192ae]", "[00000104]", "[03000001]", "[000f4240]", "30", underflowBeforeOnly: true)
    self.bid32_fma("0", "1010101E-95", "99E-8", "-0", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("1", "1010101E-95", "99E-8", "0", "999999E-101", "0x30")
    self.bid32_fma("2", "1010101E-95", "99E-8", "0", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("3", "1010101E-95", "99E-8", "-0", "999999E-101", "0x30")
    self.bid32_fma("4", "1010101E-95", "99E-8", "-0", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("0", "-5e-10", "1e-93", "1e-95", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("1", "-5e-10", "1e-93", "1e-95", "999999E-101", "0x30")
    self.bid32_fma("2", "-5e-10", "1e-93", "1e-95", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("3", "-5e-10", "1e-93", "1e-95", "999999E-101", "0x30")
    self.bid32_fma("4", "-5e-10", "1e-93", "1e-95", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("0", "5e-10", "1e-93", "-1e-95", "-1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("1", "5e-10", "1e-93", "-1e-95", "-1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_fma("2", "5e-10", "1e-93", "-1e-95", "-999999E-101", "0x30")
    self.bid32_fma("3", "5e-10", "1e-93", "-1e-95", "-999999E-101", "0x30")
    self.bid32_fma("4", "5e-10", "1e-93", "-1e-95", "-1000000E-101", "0x30", underflowBeforeOnly: true)
  }

  private func bid32_fma(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _arg2: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let arg2 = self.parseDecimal32(_arg2, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._addingProduct(arg1, arg2, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_frexp() {
    self.bid32_frexp("0", "[78000000]", "0", "[78000000]", "00")
    self.bid32_frexp("0", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_frexp("0", "[f8000000]", "0", "[f8000000]", "00")
    self.bid32_frexp("0", "[fc000000]", "0", "[fc000000]", "00")
    self.bid32_frexp("0", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[00000000]", "0", "[00000000]", "00")
    self.bid32_frexp("0", "[7e000000]", "0", "[7c000000]", "00")
    self.bid32_frexp("0", "[80000000]", "0", "[80000000]", "00")
    self.bid32_frexp("0", "[fe000000]", "0", "[fc000000]", "00")
    self.bid32_frexp("0", "[0401c880]", "-87", "[2f81c880]", "00")
    self.bid32_frexp("0", "[0401c880]", "-87", "[2f81c880]", "00")
    self.bid32_frexp("0", "[7c8f423f]", "0", "[7c8f423f]", "00")
    self.bid32_frexp("0", "[7c8f4240]", "0", "[7c8f4240]", "00")
    self.bid32_frexp("0", "[7c8f4241]", "0", "[7c8f4241]", "00")
    self.bid32_frexp("0", "[607fffff]", "0", "[01800000]", "00")
    self.bid32_frexp("0", "[f71fffff]", "0", "[dc000000]", "00")
    self.bid32_frexp("0", "[f420b31f]", "67", "[ebc0b31f]", "00")
    self.bid32_frexp("0", "[658c3437]", "-50", "[6bcc3437]", "00")
  }

  private func bid32_frexp(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let exponent = arg0._getExponent(status: &status)
    let significand = arg0._getSignificand()
    let intel = self.convertToIntelFrexp(arg0, exponent: exponent, significand: significand)

    // 'arg1' is the expected exponent
    self.assertInt(intel.exponent, arg1, file, line, "Exponent")
    self.assertEqual(intel.significand, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Significand")

    if !arg0.isInfinite && !arg0.isNaN {
      // Rounding should not matter
      let restored = Decimal32(sign: arg0.sign, exponent: exponent, significand: significand, rounding: .towardZero)
      self.assertEqual(restored, arg0, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Decimal32(sign:exponent:significand:)")
    }

    // 'frexp' does not signal any exceptions
    status = ExceptionStatus()
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_int32() {
    self.bid32_from_int32("0", "0", "[32800000]", "00")
    self.bid32_from_int32("0", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("0", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("0", "1", "[32800001]", "00")
    self.bid32_from_int32("0", "-1", "[b2800001]", "00")
    self.bid32_from_int32("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("0", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("0", "32767", "[32807fff]", "00")
    self.bid32_from_int32("0", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("0", "32768", "[32808000]", "00")
    self.bid32_from_int32("0", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("0", "32769", "[32808001]", "00")
    self.bid32_from_int32("0", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("0", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("0", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("0", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("0", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("0", "65536", "[32810000]", "00")
    self.bid32_from_int32("0", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("0", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("0", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("0", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("1", "0", "[32800000]", "00")
    self.bid32_from_int32("1", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("1", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("1", "1", "[32800001]", "00")
    self.bid32_from_int32("1", "-1", "[b2800001]", "00")
    self.bid32_from_int32("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int32("1", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("1", "32767", "[32807fff]", "00")
    self.bid32_from_int32("1", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("1", "32768", "[32808000]", "00")
    self.bid32_from_int32("1", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("1", "32769", "[32808001]", "00")
    self.bid32_from_int32("1", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("1", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("1", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("1", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("1", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("1", "65536", "[32810000]", "00")
    self.bid32_from_int32("1", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("1", "693127475", "[33e9c34a]", "20")
    self.bid32_from_int32("1", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("1", "999999980", "[6cf8967f]", "20")
    self.bid32_from_int32("2", "0", "[32800000]", "00")
    self.bid32_from_int32("2", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("2", "11111111", "[3310f448]", "20")
    self.bid32_from_int32("2", "1", "[32800001]", "00")
    self.bid32_from_int32("2", "-1", "[b2800001]", "00")
    self.bid32_from_int32("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("2", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int32("2", "32767", "[32807fff]", "00")
    self.bid32_from_int32("2", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("2", "32768", "[32808000]", "00")
    self.bid32_from_int32("2", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("2", "32769", "[32808001]", "00")
    self.bid32_from_int32("2", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("2", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("2", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("2", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("2", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("2", "65536", "[32810000]", "00")
    self.bid32_from_int32("2", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("2", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("2", "-937230081", "[ecef028c]", "20")
    self.bid32_from_int32("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("2", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("3", "0", "[32800000]", "00")
    self.bid32_from_int32("3", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("3", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("3", "1", "[32800001]", "00")
    self.bid32_from_int32("3", "-1", "[b2800001]", "00")
    self.bid32_from_int32("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int32("3", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int32("3", "32767", "[32807fff]", "00")
    self.bid32_from_int32("3", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("3", "32768", "[32808000]", "00")
    self.bid32_from_int32("3", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("3", "32769", "[32808001]", "00")
    self.bid32_from_int32("3", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("3", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("3", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("3", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("3", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("3", "65536", "[32810000]", "00")
    self.bid32_from_int32("3", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("3", "693127475", "[33e9c34a]", "20")
    self.bid32_from_int32("3", "-937230081", "[ecef028c]", "20")
    self.bid32_from_int32("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("3", "999999980", "[6cf8967f]", "20")
    self.bid32_from_int32("4", "0", "[32800000]", "00")
    self.bid32_from_int32("4", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("4", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("4", "1", "[32800001]", "00")
    self.bid32_from_int32("4", "-1", "[b2800001]", "00")
    self.bid32_from_int32("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("4", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("4", "32767", "[32807fff]", "00")
    self.bid32_from_int32("4", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("4", "32768", "[32808000]", "00")
    self.bid32_from_int32("4", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("4", "32769", "[32808001]", "00")
    self.bid32_from_int32("4", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("4", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("4", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("4", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("4", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("4", "65536", "[32810000]", "00")
    self.bid32_from_int32("4", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("4", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("4", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("4", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("0", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("1", "999999950", "[6cf8967f]", "20")
    self.bid32_from_int32("2", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("3", "999999950", "[6cf8967f]", "20")
    self.bid32_from_int32("4", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("0", "-999999950", "[b40f4240]", "20")
    self.bid32_from_int32("1", "-999999950", "[b40f4240]", "20")
    self.bid32_from_int32("2", "-999999950", "[ecf8967f]", "20")
    self.bid32_from_int32("3", "-999999950", "[ecf8967f]", "20")
    self.bid32_from_int32("4", "-999999950", "[b40f4240]", "20")
  }

  private func bid32_from_int32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_int64() {
    self.bid32_from_int64("0", "0", "[32800000]", "00")
    self.bid32_from_int64("0", "10000000000000000", "[378f4240]", "00")
    self.bid32_from_int64("0", "1000000000000000", "[370f4240]", "00")
    self.bid32_from_int64("0", "100000000000000", "[368f4240]", "00")
    self.bid32_from_int64("0", "10000000000000", "[360f4240]", "00")
    self.bid32_from_int64("0", "1000000000000", "[358f4240]", "00")
    self.bid32_from_int64("0", "100000000000", "[350f4240]", "00")
    self.bid32_from_int64("0", "10000000000", "[348f4240]", "00")
    self.bid32_from_int64("0", "100000000", "[338f4240]", "00")
    self.bid32_from_int64("0", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("0", "1", "[32800001]", "00")
    self.bid32_from_int64("0", "-134217729", "[b3947ae1]", "20")
    self.bid32_from_int64("0", "-17592722915393", "[b61ad828]", "20")
    self.bid32_from_int64("0", "-1", "[b2800001]", "00")
    self.bid32_from_int64("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("0", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("0", "-22523495699198977", "[b7a25e3e]", "20")
    self.bid32_from_int64("0", "32767", "[32807fff]", "00")
    self.bid32_from_int64("0", "-32767", "[b2807fff]", "00")
    self.bid32_from_int64("0", "32768", "[32808000]", "00")
    self.bid32_from_int64("0", "-32768", "[b2808000]", "00")
    self.bid32_from_int64("0", "32769", "[32808001]", "00")
    self.bid32_from_int64("0", "-32769", "[b2808001]", "00")
    self.bid32_from_int64("0", "34368127232", "[34b4710d]", "20")
    self.bid32_from_int64("0", "362540080113918042", "[383751b9]", "20")
    self.bid32_from_int64("0", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("0", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("0", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("0", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("0", "-4398205899137", "[b5c31c7e]", "20")
    self.bid32_from_int64("0", "-4503599628435553", "[b744b830]", "20")
    self.bid32_from_int64("0", "-493149287878913", "[b6cb3fa5]", "20")
    self.bid32_from_int64("0", "-549755814017", "[b553e2d6]", "20")
    self.bid32_from_int64("0", "65534", "[3280fffe]", "00")
    self.bid32_from_int64("0", "-65534", "[b280fffe]", "00")
    self.bid32_from_int64("0", "65535", "[3280ffff]", "00")
    self.bid32_from_int64("0", "-65535", "[b280ffff]", "00")
    self.bid32_from_int64("0", "65536", "[32810000]", "00")
    self.bid32_from_int64("0", "-65536", "[b2810000]", "00")
    self.bid32_from_int64("0", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("0", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("0", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("0", "-9223372036854775807", "[ee2cbccc]", "20")
    self.bid32_from_int64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("1", "0", "[32800000]", "00")
    self.bid32_from_int64("1", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("1", "1", "[32800001]", "00")
    self.bid32_from_int64("1", "-1", "[b2800001]", "00")
    self.bid32_from_int64("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int64("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_int64("1", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("1", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("1", "-4294967295", "[b4418938]", "20")
    self.bid32_from_int64("1", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("1", "-4294967297", "[b4418938]", "20")
    self.bid32_from_int64("1", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("1", "-9223372036854775806", "[ee2cbccd]", "20")
    self.bid32_from_int64("1", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("2", "0", "[32800000]", "00")
    self.bid32_from_int64("2", "11111111", "[3310f448]", "20")
    self.bid32_from_int64("2", "1", "[32800001]", "00")
    self.bid32_from_int64("2", "-1", "[b2800001]", "00")
    self.bid32_from_int64("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("2", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int64("2", "4294967295", "[34418938]", "20")
    self.bid32_from_int64("2", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("2", "4294967297", "[34418938]", "20")
    self.bid32_from_int64("2", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("2", "9223372036854775806", "[6e2cbccd]", "20")
    self.bid32_from_int64("2", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("2", "9223372036854775807", "[6e2cbccd]", "20")
    self.bid32_from_int64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("3", "0", "[32800000]", "00")
    self.bid32_from_int64("3", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("3", "1", "[32800001]", "00")
    self.bid32_from_int64("3", "-1", "[b2800001]", "00")
    self.bid32_from_int64("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int64("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_int64("3", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int64("3", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("3", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("3", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("3", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("3", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("3", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("3", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("4", "0", "[32800000]", "00")
    self.bid32_from_int64("4", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("4", "1", "[32800001]", "00")
    self.bid32_from_int64("4", "-1", "[b2800001]", "00")
    self.bid32_from_int64("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("4", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("4", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("4", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("4", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("4", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("4", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("4", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("4", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("0", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("0", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("2", "10000001", "[330f4241]", "20")
    self.bid32_from_int64("2", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("4", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("4", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("3", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("3", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("1", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("1", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("1", "9999999", "[6cb8967f]", "00")
  }

  private func bid32_from_int64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_string() {
    self.bid32_from_string("0", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("0", "1.0", "[3200000a]", "00")
    self.bid32_from_string("0", "-1.0", "[b200000a]", "00")
    self.bid32_from_string("0", "1.0e-96", "[0200000a]", "00")
    self.bid32_from_string("0", "-1.0e-96", "[8200000a]", "00")
    self.bid32_from_string("0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_from_string("0", "-9.999999e-95", "[e018967f]", "00")
    self.bid32_from_string("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_from_string("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_from_string("0", "+inf", "[78000000]", "00")
    self.bid32_from_string("0", "+Inf", "[78000000]", "00")
    self.bid32_from_string("0", "+INF", "[78000000]", "00")
    self.bid32_from_string("0", "+NaN", "[7c000000]", "00")
    self.bid32_from_string("0", "+NAN", "[7c000000]", "00")
    self.bid32_from_string("0", "-nan", "[fc000000]", "00")
    self.bid32_from_string("0", "+SNaN", "[7e000000]", "00")
    self.bid32_from_string("0", "+SNAN", "[7e000000]", "00")
    self.bid32_from_string("0", "-snan", "[fe000000]", "00")
    self.bid32_from_string("1", "1.0000015", "[2f8f4241]", "20")
    self.bid32_from_string("2", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("3", "1.0000015", "[2f8f4241]", "20")
    self.bid32_from_string("4", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("2", "-9.9999995", "[ebf8967f]", "20")
    self.bid32_from_string("1", "-9.9999995", "[b00f4240]", "20")
    self.bid32_from_string("0", "9.9999995", "[300f4240]", "20")
    self.bid32_from_string("2", "9.9999995", "[300f4240]", "20")
    self.bid32_from_string("4", "9.9999995", "[300f4240]", "20")
    self.bid32_from_string("3", "9.9999995", "[6bf8967f]", "20")
    self.bid32_from_string("1", "9.9999995", "[6bf8967f]", "20")
    self.bid32_from_string("0", ".0", "[32000000]", "00")
    self.bid32_from_string("0", "000.0", "[32000000]", "00")
    self.bid32_from_string("0", "0.0000000000000000000000000000000000001001", "[1e8003e9]", "00")
    self.bid32_from_string("1", "0.0000000000000000000000000000000000001001", "[1e8003e9]", "00")
    self.bid32_from_string("0", "0.", "[32800000]", "00")
    self.bid32_from_string("0", "1.", "[32800001]", "00")
    self.bid32_from_string("0", "a", "[7c000000]", "00")
    self.bid32_from_string("0", "..", "[7c000000]", "00")
    self.bid32_from_string("0", "1..", "[7c000000]", "00")
    self.bid32_from_string("0", "0.0.", "[7c000000]", "00")
    self.bid32_from_string("0", "1.0000005", "[2f8f4240]", "20")
    self.bid32_from_string("2", "1.0000005", "[2f8f4241]", "20")
    self.bid32_from_string("4", "1.0000005", "[2f8f4241]", "20")
    self.bid32_from_string("3", "1.0000005", "[2f8f4240]", "20")
    self.bid32_from_string("1", "1.0000005", "[2f8f4240]", "20")
    self.bid32_from_string("0", "1.00000051", "[2f8f4241]", "20")
    self.bid32_from_string("2", "1.00000051", "[2f8f4241]", "20")
    self.bid32_from_string("4", "1.00000051", "[2f8f4241]", "20")
    self.bid32_from_string("3", "1.00000051", "[2f8f4240]", "20")
    self.bid32_from_string("1", "1.00000051", "[2f8f4240]", "20")
    self.bid32_from_string("0", "1.0000004999999999999999", "[2f8f4240]", "20")
    self.bid32_from_string("2", "1.0000004999999999999999", "[2f8f4241]", "20")
    self.bid32_from_string("1", "1.0000004999999999999999", "[2f8f4240]", "20")
    self.bid32_from_string("4", "1.0000004999999999999999", "[2f8f4240]", "20")
    self.bid32_from_string("3", "1.0000004999999999999999", "[2f8f4240]", "20")
    self.bid32_from_string("0", "1.1E2", "[3300000b]", "00")
    self.bid32_from_string("0", "1.1P2", "[7c000000]", "00")
    self.bid32_from_string("0", "1.1EE", "[7c000000]", "00")
    self.bid32_from_string("0", "1.1P-2", "[7c000000]", "00")
    self.bid32_from_string("0", "1.1E-2E", "[7c000000]", "00")
    self.bid32_from_string("0", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("2", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("4", "1.0000015", "[2f8f4242]", "20")
    self.bid32_from_string("3", "1.0000015", "[2f8f4241]", "20")
    self.bid32_from_string("1", "1.0000015", "[2f8f4241]", "20")
    self.bid32_from_string("0", "+INF", "[78000000]", "00")
    self.bid32_from_string("0", "+INFi", "[7c000000]", "00")
    self.bid32_from_string("0", "+NAN", "[7c000000]", "00")
    self.bid32_from_string("0", "+SNAN", "[7e000000]", "00")
    self.bid32_from_string("0", "+SNANi", "[7e000000]", "00")
    self.bid32_from_string("0", "+inf", "[78000000]", "00")
    self.bid32_from_string("0", "+nan", "[7c000000]", "00")
    self.bid32_from_string("0", "+snan", "[7e000000]", "00")
    self.bid32_from_string("0", "+INFINITY", "[78000000]", "00")
    self.bid32_from_string("0", "+infinity", "[78000000]", "00")
    self.bid32_from_string("0", "+INFiNITY", "[78000000]", "00")
    self.bid32_from_string("0", "+INFINITYi", "[7c000000]", "00")
    self.bid32_from_string("0", "INF", "[78000000]", "00")
    self.bid32_from_string("0", "INFi", "[7c000000]", "00")
    self.bid32_from_string("0", "NAN", "[7c000000]", "00")
    self.bid32_from_string("0", "SNAN", "[7e000000]", "00")
    self.bid32_from_string("0", "SNANi", "[7e000000]", "00")
    self.bid32_from_string("0", "inf", "[78000000]", "00")
    self.bid32_from_string("0", "nan", "[7c000000]", "00")
    self.bid32_from_string("0", "snan", "[7e000000]", "00")
    self.bid32_from_string("0", "INFINITY", "[78000000]", "00")
    self.bid32_from_string("0", "infinity", "[78000000]", "00")
    self.bid32_from_string("0", "INFiNITY", "[78000000]", "00")
    self.bid32_from_string("0", "INFINITYi", "[7c000000]", "00")
    self.bid32_from_string("0", "1E-102", "[00000000]", "30")
  }

  private func bid32_from_string(
    _ _rounding: String,
    _ arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._parse(arg0, rounding: rounding, status: &status)
    // In swift parsing failure is 'nil', in Cbid 'NaN'.
    self.assertEqual(result ?? .nan, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_uint32() {
    self.bid32_from_uint32("0", "0", "[32800000]", "00")
    self.bid32_from_uint32("0", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("0", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("0", "1", "[32800001]", "00")
    self.bid32_from_uint32("0", "-1", "[34418937]", "20")
    self.bid32_from_uint32("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("0", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("0", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("0", "32768", "[32808000]", "00")
    self.bid32_from_uint32("0", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("0", "32769", "[32808001]", "00")
    self.bid32_from_uint32("0", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("0", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("0", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("0", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("0", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("0", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("0", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("0", "65536", "[32810000]", "00")
    self.bid32_from_uint32("0", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("0", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("0", "999999980", "[340f4240]", "20")
    self.bid32_from_uint32("1", "0", "[32800000]", "00")
    self.bid32_from_uint32("1", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("1", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("1", "1", "[32800001]", "00")
    self.bid32_from_uint32("1", "-1", "[34418937]", "20")
    self.bid32_from_uint32("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint32("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint32("1", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("1", "-32767", "[34418916]", "20")
    self.bid32_from_uint32("1", "32768", "[32808000]", "00")
    self.bid32_from_uint32("1", "-32768", "[34418916]", "20")
    self.bid32_from_uint32("1", "32769", "[32808001]", "00")
    self.bid32_from_uint32("1", "-32769", "[34418916]", "20")
    self.bid32_from_uint32("1", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("1", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("1", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("1", "-65534", "[344188f5]", "20")
    self.bid32_from_uint32("1", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("1", "-65535", "[344188f5]", "20")
    self.bid32_from_uint32("1", "65536", "[32810000]", "00")
    self.bid32_from_uint32("1", "-65536", "[344188f5]", "20")
    self.bid32_from_uint32("1", "986328055", "[6cf68070]", "20")
    self.bid32_from_uint32("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("1", "999999980", "[6cf8967f]", "20")
    self.bid32_from_uint32("2", "0", "[32800000]", "00")
    self.bid32_from_uint32("2", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("2", "11111111", "[3310f448]", "20")
    self.bid32_from_uint32("2", "1", "[32800001]", "00")
    self.bid32_from_uint32("2", "-1", "[34418938]", "20")
    self.bid32_from_uint32("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("2", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("2", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("2", "32768", "[32808000]", "00")
    self.bid32_from_uint32("2", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("2", "32769", "[32808001]", "00")
    self.bid32_from_uint32("2", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("2", "4294967295", "[34418938]", "20")
    self.bid32_from_uint32("2", "467012619", "[33c742af]", "20")
    self.bid32_from_uint32("2", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("2", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("2", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("2", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("2", "65536", "[32810000]", "00")
    self.bid32_from_uint32("2", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("2", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("2", "999999980", "[340f4240]", "20")
    self.bid32_from_uint32("3", "0", "[32800000]", "00")
    self.bid32_from_uint32("3", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("3", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("3", "1", "[32800001]", "00")
    self.bid32_from_uint32("3", "-1", "[34418937]", "20")
    self.bid32_from_uint32("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint32("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint32("3", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("3", "-32767", "[34418916]", "20")
    self.bid32_from_uint32("3", "32768", "[32808000]", "00")
    self.bid32_from_uint32("3", "-32768", "[34418916]", "20")
    self.bid32_from_uint32("3", "32769", "[32808001]", "00")
    self.bid32_from_uint32("3", "-32769", "[34418916]", "20")
    self.bid32_from_uint32("3", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("3", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("3", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("3", "-65534", "[344188f5]", "20")
    self.bid32_from_uint32("3", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("3", "-65535", "[344188f5]", "20")
    self.bid32_from_uint32("3", "65536", "[32810000]", "00")
    self.bid32_from_uint32("3", "-65536", "[344188f5]", "20")
    self.bid32_from_uint32("3", "986328055", "[6cf68070]", "20")
    self.bid32_from_uint32("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("3", "999999980", "[6cf8967f]", "20")
    self.bid32_from_uint32("4", "0", "[32800000]", "00")
    self.bid32_from_uint32("4", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("4", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("4", "1", "[32800001]", "00")
    self.bid32_from_uint32("4", "-1", "[34418937]", "20")
    self.bid32_from_uint32("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("4", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("4", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("4", "32768", "[32808000]", "00")
    self.bid32_from_uint32("4", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("4", "32769", "[32808001]", "00")
    self.bid32_from_uint32("4", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("4", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("4", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("4", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("4", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("4", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("4", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("4", "65536", "[32810000]", "00")
    self.bid32_from_uint32("4", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("4", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("4", "999999980", "[340f4240]", "20")
  }

  private func bid32_from_uint32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_uint64() {
    self.bid32_from_uint64("0", "0", "[32800000]", "00")
    self.bid32_from_uint64("0", "10000000000000000", "[378f4240]", "00")
    self.bid32_from_uint64("0", "1000000000000000", "[370f4240]", "00")
    self.bid32_from_uint64("0", "100000000000000", "[368f4240]", "00")
    self.bid32_from_uint64("0", "10000000000000", "[360f4240]", "00")
    self.bid32_from_uint64("0", "1000000000000", "[358f4240]", "00")
    self.bid32_from_uint64("0", "100000000000", "[350f4240]", "00")
    self.bid32_from_uint64("0", "10000000000", "[348f4240]", "00")
    self.bid32_from_uint64("0", "100000000", "[338f4240]", "00")
    self.bid32_from_uint64("0", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("0", "1125917090906112", "[37112e1d]", "20")
    self.bid32_from_uint64("0", "1", "[32800001]", "00")
    self.bid32_from_uint64("0", "-1", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "14285512277852680", "[3795cc47]", "20")
    self.bid32_from_uint64("0", "167505177871812998", "[38198f2c]", "20")
    self.bid32_from_uint64("0", "17179869184", "[349a36e3]", "20")
    self.bid32_from_uint64("0", "17592186044416", "[361ad7f3]", "20")
    self.bid32_from_uint64("0", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744073709551614", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("0", "2203855273985", "[35a1a0cf]", "20")
    self.bid32_from_uint64("0", "32767", "[32807fff]", "00")
    self.bid32_from_uint64("0", "-32767", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "32768", "[32808000]", "00")
    self.bid32_from_uint64("0", "-32768", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "32769", "[32808001]", "00")
    self.bid32_from_uint64("0", "-32769", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("0", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("0", "566935687204", "[355681ed]", "20")
    self.bid32_from_uint64("0", "586045133422592", "[36d96c63]", "20")
    self.bid32_from_uint64("0", "65534", "[3280fffe]", "00")
    self.bid32_from_uint64("0", "-65534", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "65535", "[3280ffff]", "00")
    self.bid32_from_uint64("0", "-65535", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "65536", "[32810000]", "00")
    self.bid32_from_uint64("0", "-65536", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "805308424", "[33fae15c]", "20")
    self.bid32_from_uint64("0", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775808", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775808", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775809", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775809", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("1", "0", "[32800000]", "00")
    self.bid32_from_uint64("1", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("1", "1", "[32800001]", "00")
    self.bid32_from_uint64("1", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint64("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint64("1", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("1", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("1", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("2", "0", "[32800000]", "00")
    self.bid32_from_uint64("2", "11111111", "[3310f448]", "20")
    self.bid32_from_uint64("2", "1", "[32800001]", "00")
    self.bid32_from_uint64("2", "18446744069414584319", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744069414584321", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744071562067968", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744073709551615", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("2", "4294967295", "[34418938]", "20")
    self.bid32_from_uint64("2", "4294967297", "[34418938]", "20")
    self.bid32_from_uint64("2", "9223372036854775806", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9223372036854775807", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9223372036854775810", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("3", "0", "[32800000]", "00")
    self.bid32_from_uint64("3", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("3", "1", "[32800001]", "00")
    self.bid32_from_uint64("3", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint64("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint64("3", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("3", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("3", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("4", "0", "[32800000]", "00")
    self.bid32_from_uint64("4", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("4", "1", "[32800001]", "00")
    self.bid32_from_uint64("4", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("4", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("4", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("4", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("2", "9999999325122695203", "[390f4240]", "20")
    self.bid32_from_uint64("0", "9999999999978258726", "[390f4240]", "20")
    self.bid32_from_uint64("1", "9999999999978258726", "[6e38967f]", "20")
  }

  private func bid32_from_uint64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._fromInt(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_ilogb() {
    self.bid32_ilogb("0", "[00000001]", "-101", "00")
    self.bid32_ilogb("0", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[00080001]", "-96", "00")
    self.bid32_ilogb("0", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "-1.0", "0", "00")
    self.bid32_ilogb("0", "1.0", "0", "00")
    self.bid32_ilogb("0", "-1.0e-96", "-96", "00")
    self.bid32_ilogb("0", "1.0e-96", "-96", "00")
    self.bid32_ilogb("0", "[6098967f]", "-91", "00")
    self.bid32_ilogb("0", "[60989680]", "-2147483648", "01")
    self.bid32_ilogb("0", "[609896ff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[78000000]", "2147483647", "01")
    self.bid32_ilogb("0", "[78801000]", "2147483647", "01")
    self.bid32_ilogb("0", "[7c000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c000001]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f423f]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f4240]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f4241]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8ffeff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e000100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e100000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e100100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8f423f]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8f4240]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8ffeff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[80000001]", "-101", "00")
    self.bid32_ilogb("0", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "-9.999999e-95", "-95", "00")
    self.bid32_ilogb("0", "9.999999e-95", "-95", "00")
    self.bid32_ilogb("0", "-9.999999e96", "96", "00")
    self.bid32_ilogb("0", "9.999999e96", "96", "00")
    self.bid32_ilogb("0", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[f8000000]", "2147483647", "01")
    self.bid32_ilogb("0", "[f8801000]", "2147483647", "01")
    self.bid32_ilogb("0", "[fc000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc000001]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc100000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc100100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fe000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fe000100]", "-2147483648", "01")
    self.bid32_ilogb("1", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
  }

  private func bid32_ilogb(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    assert(ulp?.isZero ?? true) // 'ulp' does not make sense in this test
    let result = arg0._getExponent(status: &status)
    let resultIntel = self.convertToIntelLogB(arg0, exponent: result)
    self.assertInt(resultIntel, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_inf() {
    self.bid32_inf("0", "0", "[78000000]", "00")
  }

  private func bid32_inf(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Dummy use for 'arg0, rounding, status', so that the compiler does not complain.
    _ = (arg0, rounding)
    // Dummy assign 'status', so that the compiler does not complain.
    status = ExceptionStatus()

    let result = Decimal32.infinity
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_isCanonical() {
    self.bid32_isCanonical("0", "[00000001]", "1", "00")
    self.bid32_isCanonical("0", "[00080001]", "1", "00")
    self.bid32_isCanonical("0", "-1.0", "1", "00")
    self.bid32_isCanonical("0", "1.0", "1", "00")
    self.bid32_isCanonical("0", "-1.0e-96", "1", "00")
    self.bid32_isCanonical("0", "1.0e-96", "1", "00")
    self.bid32_isCanonical("0", "[6098967f]", "1", "00")
    self.bid32_isCanonical("0", "[60989680]", "0", "00")
    self.bid32_isCanonical("0", "[7c000000]", "1", "00")
    self.bid32_isCanonical("0", "[7c8f423f]", "0", "00")
    self.bid32_isCanonical("0", "[7c8f4240]", "0", "00")
    self.bid32_isCanonical("0", "[7e100000]", "0", "00")
    self.bid32_isCanonical("0", "[7e100100]", "0", "00")
    self.bid32_isCanonical("0", "[7e8f423f]", "0", "00")
    self.bid32_isCanonical("0", "[7e8f4240]", "0", "00")
    self.bid32_isCanonical("0", "[80000001]", "1", "00")
    self.bid32_isCanonical("0", "-9.999999e-95", "1", "00")
    self.bid32_isCanonical("0", "9.999999e-95", "1", "00")
    self.bid32_isCanonical("0", "-9.999999e96", "1", "00")
    self.bid32_isCanonical("0", "9.999999e96", "1", "00")
    self.bid32_isCanonical("0", "[f8000000]", "1", "00")
    self.bid32_isCanonical("0", "[f8001000]", "0", "00")
    self.bid32_isCanonical("0", "[f8400000]", "0", "00")
    self.bid32_isCanonical("0", "[fc100000]", "0", "00")
    self.bid32_isCanonical("0", "[fc100100]", "0", "00")
    self.bid32_isCanonical("0", "[fe000000]", "1", "00")
    self.bid32_isCanonical("0", "[7c0F4240]", "0", "00")
  }

  private func bid32_isCanonical(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isCanonical
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isFinite() {
    self.bid32_isFinite("0", "[00000001]", "1", "00")
    self.bid32_isFinite("0", "[00080001]", "1", "00")
    self.bid32_isFinite("0", "-1.0", "1", "00")
    self.bid32_isFinite("0", "1.0", "1", "00")
    self.bid32_isFinite("0", "-1.0e-96", "1", "00")
    self.bid32_isFinite("0", "1.0e-96", "1", "00")
    self.bid32_isFinite("0", "[6098967f]", "1", "00")
    self.bid32_isFinite("0", "[60989680]", "1", "00")
    self.bid32_isFinite("0", "[7c000000]", "0", "00")
    self.bid32_isFinite("0", "[7c8f423f]", "0", "00")
    self.bid32_isFinite("0", "[7c8f4240]", "0", "00")
    self.bid32_isFinite("0", "[7e100000]", "0", "00")
    self.bid32_isFinite("0", "[7e100100]", "0", "00")
    self.bid32_isFinite("0", "[7e8f423f]", "0", "00")
    self.bid32_isFinite("0", "[7e8f4240]", "0", "00")
    self.bid32_isFinite("0", "[80000001]", "1", "00")
    self.bid32_isFinite("0", "-9.999999e-95", "1", "00")
    self.bid32_isFinite("0", "9.999999e-95", "1", "00")
    self.bid32_isFinite("0", "-9.999999e96", "1", "00")
    self.bid32_isFinite("0", "9.999999e96", "1", "00")
    self.bid32_isFinite("0", "[fc100000]", "0", "00")
    self.bid32_isFinite("0", "[fc100100]", "0", "00")
    self.bid32_isFinite("0", "[fe000000]", "0", "00")
  }

  private func bid32_isFinite(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isFinite
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isInf() {
    self.bid32_isInf("0", "[00000001]", "0", "00")
    self.bid32_isInf("0", "[00080001]", "0", "00")
    self.bid32_isInf("0", "-1.0", "0", "00")
    self.bid32_isInf("0", "1.0", "0", "00")
    self.bid32_isInf("0", "-1.0e-96", "0", "00")
    self.bid32_isInf("0", "1.0e-96", "0", "00")
    self.bid32_isInf("0", "[6098967f]", "0", "00")
    self.bid32_isInf("0", "[60989680]", "0", "00")
    self.bid32_isInf("0", "[7c000000]", "0", "00")
    self.bid32_isInf("0", "[7c8f423f]", "0", "00")
    self.bid32_isInf("0", "[7c8f4240]", "0", "00")
    self.bid32_isInf("0", "[7e100000]", "0", "00")
    self.bid32_isInf("0", "[7e100100]", "0", "00")
    self.bid32_isInf("0", "[7e8f423f]", "0", "00")
    self.bid32_isInf("0", "[7e8f4240]", "0", "00")
    self.bid32_isInf("0", "[80000001]", "0", "00")
    self.bid32_isInf("0", "-9.999999e-95", "0", "00")
    self.bid32_isInf("0", "9.999999e-95", "0", "00")
    self.bid32_isInf("0", "-9.999999e96", "0", "00")
    self.bid32_isInf("0", "9.999999e96", "0", "00")
    self.bid32_isInf("0", "[fc100000]", "0", "00")
    self.bid32_isInf("0", "[fc100100]", "0", "00")
    self.bid32_isInf("0", "[fe000000]", "0", "00")
  }

  private func bid32_isInf(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isInfinite
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isNaN() {
    self.bid32_isNaN("0", "[00000001]", "0", "00")
    self.bid32_isNaN("0", "[00080001]", "0", "00")
    self.bid32_isNaN("0", "-1.0", "0", "00")
    self.bid32_isNaN("0", "1.0", "0", "00")
    self.bid32_isNaN("0", "-1.0e-96", "0", "00")
    self.bid32_isNaN("0", "1.0e-96", "0", "00")
    self.bid32_isNaN("0", "[6098967f]", "0", "00")
    self.bid32_isNaN("0", "[60989680]", "0", "00")
    self.bid32_isNaN("0", "[7c000000]", "1", "00")
    self.bid32_isNaN("0", "[7c8f423f]", "1", "00")
    self.bid32_isNaN("0", "[7c8f4240]", "1", "00")
    self.bid32_isNaN("0", "[7e100000]", "1", "00")
    self.bid32_isNaN("0", "[7e100100]", "1", "00")
    self.bid32_isNaN("0", "[7e8f423f]", "1", "00")
    self.bid32_isNaN("0", "[7e8f4240]", "1", "00")
    self.bid32_isNaN("0", "[80000001]", "0", "00")
    self.bid32_isNaN("0", "-9.999999e-95", "0", "00")
    self.bid32_isNaN("0", "9.999999e-95", "0", "00")
    self.bid32_isNaN("0", "-9.999999e96", "0", "00")
    self.bid32_isNaN("0", "9.999999e96", "0", "00")
    self.bid32_isNaN("0", "[fc100000]", "1", "00")
    self.bid32_isNaN("0", "[fc100100]", "1", "00")
    self.bid32_isNaN("0", "[fe000000]", "1", "00")
  }

  private func bid32_isNaN(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isNaN
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isNormal() {
    self.bid32_isNormal("0", "[00000001]", "0", "00")
    self.bid32_isNormal("0", "[00080001]", "0", "00")
    self.bid32_isNormal("0", "[029259a6]", "1", "00")
    self.bid32_isNormal("0", "[02f69ec8]", "1", "00")
    self.bid32_isNormal("0", "[0a800000]", "0", "00")
    self.bid32_isNormal("0", "-1.0", "1", "00")
    self.bid32_isNormal("0", "1.0", "1", "00")
    self.bid32_isNormal("0", "-1.0e-96", "0", "00")
    self.bid32_isNormal("0", "1.0e-96", "0", "00")
    self.bid32_isNormal("0", "[6098967f]", "1", "00")
    self.bid32_isNormal("0", "[60989680]", "0", "00")
    self.bid32_isNormal("0", "[7c000000]", "0", "00")
    self.bid32_isNormal("0", "[7c8f423f]", "0", "00")
    self.bid32_isNormal("0", "[7c8f4240]", "0", "00")
    self.bid32_isNormal("0", "[7e100000]", "0", "00")
    self.bid32_isNormal("0", "[7e100100]", "0", "00")
    self.bid32_isNormal("0", "[7e8f423f]", "0", "00")
    self.bid32_isNormal("0", "[7e8f4240]", "0", "00")
    self.bid32_isNormal("0", "[80000001]", "0", "00")
    self.bid32_isNormal("0", "[82f69ec3]", "1", "00")
    self.bid32_isNormal("0", "[82f69ec8]", "1", "00")
    self.bid32_isNormal("0", "-9.999999e-95", "1", "00")
    self.bid32_isNormal("0", "9.999999e-95", "1", "00")
    self.bid32_isNormal("0", "-9.999999e96", "1", "00")
    self.bid32_isNormal("0", "9.999999e96", "1", "00")
    self.bid32_isNormal("0", "[fc100000]", "0", "00")
    self.bid32_isNormal("0", "[fc100100]", "0", "00")
    self.bid32_isNormal("0", "[fe000000]", "0", "00")
  }

  private func bid32_isNormal(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isNormal
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isSignaling() {
    self.bid32_isSignaling("0", "[00000001]", "0", "00")
    self.bid32_isSignaling("0", "[00080001]", "0", "00")
    self.bid32_isSignaling("0", "-1.0", "0", "00")
    self.bid32_isSignaling("0", "1.0", "0", "00")
    self.bid32_isSignaling("0", "-1.0e-96", "0", "00")
    self.bid32_isSignaling("0", "1.0e-96", "0", "00")
    self.bid32_isSignaling("0", "[6098967f]", "0", "00")
    self.bid32_isSignaling("0", "[60989680]", "0", "00")
    self.bid32_isSignaling("0", "[7c000000]", "0", "00")
    self.bid32_isSignaling("0", "[7c8f423f]", "0", "00")
    self.bid32_isSignaling("0", "[7c8f4240]", "0", "00")
    self.bid32_isSignaling("0", "[7e100000]", "1", "00")
    self.bid32_isSignaling("0", "[7e100100]", "1", "00")
    self.bid32_isSignaling("0", "[7e8f423f]", "1", "00")
    self.bid32_isSignaling("0", "[7e8f4240]", "1", "00")
    self.bid32_isSignaling("0", "[80000001]", "0", "00")
    self.bid32_isSignaling("0", "-9.999999e-95", "0", "00")
    self.bid32_isSignaling("0", "9.999999e-95", "0", "00")
    self.bid32_isSignaling("0", "-9.999999e96", "0", "00")
    self.bid32_isSignaling("0", "9.999999e96", "0", "00")
    self.bid32_isSignaling("0", "[fc100000]", "0", "00")
    self.bid32_isSignaling("0", "[fc100100]", "0", "00")
    self.bid32_isSignaling("0", "[fe000000]", "1", "00")
  }

  private func bid32_isSignaling(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isSignalingNaN
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isSigned() {
    self.bid32_isSigned("0", "[00000001]", "0", "00")
    self.bid32_isSigned("0", "[00080001]", "0", "00")
    self.bid32_isSigned("0", "1.0", "0", "00")
    self.bid32_isSigned("0", "-1.0", "1", "00")
    self.bid32_isSigned("0", "1.0e-96", "0", "00")
    self.bid32_isSigned("0", "-1.0e-96", "1", "00")
    self.bid32_isSigned("0", "[6098967f]", "0", "00")
    self.bid32_isSigned("0", "[60989680]", "0", "00")
    self.bid32_isSigned("0", "[7c000000]", "0", "00")
    self.bid32_isSigned("0", "[7c8f423f]", "0", "00")
    self.bid32_isSigned("0", "[7c8f4240]", "0", "00")
    self.bid32_isSigned("0", "[7e100000]", "0", "00")
    self.bid32_isSigned("0", "[7e100100]", "0", "00")
    self.bid32_isSigned("0", "[7e8f423f]", "0", "00")
    self.bid32_isSigned("0", "[7e8f4240]", "0", "00")
    self.bid32_isSigned("0", "[80000001]", "1", "00")
    self.bid32_isSigned("0", "9.999999e-95", "0", "00")
    self.bid32_isSigned("0", "-9.999999e-95", "1", "00")
    self.bid32_isSigned("0", "9.999999e96", "0", "00")
    self.bid32_isSigned("0", "-9.999999e96", "1", "00")
    self.bid32_isSigned("0", "[fc100000]", "1", "00")
    self.bid32_isSigned("0", "[fc100100]", "1", "00")
    self.bid32_isSigned("0", "[fe000000]", "1", "00")
  }

  private func bid32_isSigned(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.sign
    self.assertSign(result, expected, file, line)
  }

  func test_bid32_isSubnormal() {
    self.bid32_isSubnormal("0", "[00000001]", "1", "00")
    self.bid32_isSubnormal("0", "[00080001]", "1", "00")
    self.bid32_isSubnormal("0", "[0292599f]", "0", "00")
    self.bid32_isSubnormal("0", "[029259a4]", "0", "00")
    self.bid32_isSubnormal("0", "[029259a6]", "0", "00")
    self.bid32_isSubnormal("0", "[02f69ec8]", "0", "00")
    self.bid32_isSubnormal("0", "-1.0", "0", "00")
    self.bid32_isSubnormal("0", "1.0", "0", "00")
    self.bid32_isSubnormal("0", "-1.0e-96", "1", "00")
    self.bid32_isSubnormal("0", "1.0e-96", "1", "00")
    self.bid32_isSubnormal("0", "[6098967f]", "0", "00")
    self.bid32_isSubnormal("0", "[60989680]", "0", "00")
    self.bid32_isSubnormal("0", "[7c000000]", "0", "00")
    self.bid32_isSubnormal("0", "[7c8f423f]", "0", "00")
    self.bid32_isSubnormal("0", "[7c8f4240]", "0", "00")
    self.bid32_isSubnormal("0", "[7e100000]", "0", "00")
    self.bid32_isSubnormal("0", "[7e100100]", "0", "00")
    self.bid32_isSubnormal("0", "[7e8f423f]", "0", "00")
    self.bid32_isSubnormal("0", "[7e8f4240]", "0", "00")
    self.bid32_isSubnormal("0", "[80000001]", "1", "00")
    self.bid32_isSubnormal("0", "-9.999999e-95", "0", "00")
    self.bid32_isSubnormal("0", "9.999999e-95", "0", "00")
    self.bid32_isSubnormal("0", "-9.999999e96", "0", "00")
    self.bid32_isSubnormal("0", "9.999999e96", "0", "00")
    self.bid32_isSubnormal("0", "[bf800000]", "0", "00")
    self.bid32_isSubnormal("0", "[fc100000]", "0", "00")
    self.bid32_isSubnormal("0", "[fc100100]", "0", "00")
    self.bid32_isSubnormal("0", "[fe000000]", "0", "00")
  }

  private func bid32_isSubnormal(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isSubnormal
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_isZero() {
    self.bid32_isZero("0", "[00000001]", "0", "00")
    self.bid32_isZero("0", "[00080001]", "0", "00")
    self.bid32_isZero("0", "-1.0", "0", "00")
    self.bid32_isZero("0", "1.0", "0", "00")
    self.bid32_isZero("0", "-1.0e-96", "0", "00")
    self.bid32_isZero("0", "1.0e-96", "0", "00")
    self.bid32_isZero("0", "[6098967f]", "0", "00")
    self.bid32_isZero("0", "[60989680]", "1", "00")
    self.bid32_isZero("0", "[7c000000]", "0", "00")
    self.bid32_isZero("0", "[7c8f423f]", "0", "00")
    self.bid32_isZero("0", "[7c8f4240]", "0", "00")
    self.bid32_isZero("0", "[7e100000]", "0", "00")
    self.bid32_isZero("0", "[7e100100]", "0", "00")
    self.bid32_isZero("0", "[7e8f423f]", "0", "00")
    self.bid32_isZero("0", "[7e8f4240]", "0", "00")
    self.bid32_isZero("0", "[80000001]", "0", "00")
    self.bid32_isZero("0", "-9.999999e-95", "0", "00")
    self.bid32_isZero("0", "9.999999e-95", "0", "00")
    self.bid32_isZero("0", "-9.999999e96", "0", "00")
    self.bid32_isZero("0", "9.999999e96", "0", "00")
    self.bid32_isZero("0", "[fc100000]", "0", "00")
    self.bid32_isZero("0", "[fc100100]", "0", "00")
    self.bid32_isZero("0", "[fe000000]", "0", "00")
  }

  private func bid32_isZero(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isZero
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_maxnum() {
    self.bid32_maxnum("0", "[00000001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[00080001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[00000001]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[00080001]", "[3200000a]", "00")
    self.bid32_maxnum("0", "-1.0", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "-1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "-1.0e-96", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "1.0e-96", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[6098967f]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[60989680]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[7c000000]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[7c8f423f]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[7c8f4240]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_maxnum("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_maxnum("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_maxnum("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_maxnum("0", "1.0", "[80000001]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "-9.999999e-95", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "9.999999e-95", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "-9.999999e96", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_maxnum("0", "-1.0e-96", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0e-96", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[fc100000]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[fc100100]", "[3200000a]", "00")
    self.bid32_maxnum("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_maxnum("0", "[6098967f]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[60989680]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[7c000000]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[7c8f423f]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_maxnum("0", "[7c8f423f]", "Infinity", "[78000000]", "00")
    self.bid32_maxnum("0", "[7c8f4240]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_maxnum("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_maxnum("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_maxnum("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_maxnum("0", "[80000001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "-9.999999e-95", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "9.999999e-95", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "-9.999999e96", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_maxnum("0", "[fc100000]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[fc100100]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_maxnum("0", "Infinity", "NaN", "[78000000]", "00")
    self.bid32_maxnum("0", "[20918020]", "[f8000000]", "[20918020]", "00")
    self.bid32_maxnum("0", "[78000000]", "[08040000]", "[78000000]", "00")
    self.bid32_maxnum("0", "[f8000000]", "[bc9e308c]", "[bc9e308c]", "00")
    self.bid32_maxnum("0", "[1bbbce0c]", "[1a7882c9]", "[1bbbce0c]", "00")
    self.bid32_maxnum("0", "[a4a26102]", "[a680097d]", "[a4a26102]", "00")
    self.bid32_maxnum("0", "[df800000]", "[5e800000]", "[5e800000]", "00")
    self.bid32_maxnum("0", "[00005000]", "[00800800]", "[00800800]", "00")
    self.bid32_maxnum("0", "[10800001]", "[1000000a]", "[10800001]", "00")
    self.bid32_maxnum("0", "[20918020]", "[f8000000]", "[20918020]", "00")
    self.bid32_maxnum("0", "[78000000]", "[08040000]", "[78000000]", "00")
    self.bid32_maxnum("0", "[f8000000]", "[bc9e308c]", "[bc9e308c]", "00")
    self.bid32_maxnum("0", "[1bbbce0c]", "[1a7882c9]", "[1bbbce0c]", "00")
    self.bid32_maxnum("0", "[a4a26102]", "[a680097d]", "[a4a26102]", "00")
    self.bid32_maxnum("0", "[df800000]", "[5e800000]", "[5e800000]", "00")
    self.bid32_maxnum("0", "[00005000]", "[00800800]", "[00800800]", "00")
    self.bid32_maxnum("0", "[10800001]", "[1000000a]", "[10800001]", "00")
    self.bid32_maxnum("0", "+Inf", "-Inf", "+Inf", "00")
    self.bid32_maxnum("0", "1", "+Inf", "+Inf", "00")
    self.bid32_maxnum("0", "0", "-1", "0", "00")
    self.bid32_maxnum("0", "-1", "0", "0", "00")
  }

  private func bid32_maxnum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._maximum(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid32_maxnum_mag() {
    self.bid32_maxnum_mag("0", "[00000001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[00080001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[00000001]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[00080001]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "-1.0", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "-1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "-1.0e-96", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "1.0e-96", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[6098967f]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[60989680]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[7c000000]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[7c8f423f]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[7c8f4240]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_maxnum_mag("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_maxnum_mag("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_maxnum_mag("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_maxnum_mag("0", "1.0", "[80000001]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "-9.999999e-95", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "9.999999e-95", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_maxnum_mag("0", "1.0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_maxnum_mag("0", "-1.0e-96", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0e-96", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[fc100000]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[fc100100]", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_maxnum_mag("0", "[6098967f]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[60989680]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[7c000000]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[7c8f423f]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_maxnum_mag("0", "[7c8f423f]", "Infinity", "[78000000]", "00")
    self.bid32_maxnum_mag("0", "[7c8f4240]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_maxnum_mag("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_maxnum_mag("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_maxnum_mag("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_maxnum_mag("0", "[80000001]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "-9.999999e-95", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "9.999999e-95", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_maxnum_mag("0", "-9.999999e96", "1.0", "[f7f8967f]", "00")
    self.bid32_maxnum_mag("0", "[fc100000]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[fc100100]", "1.0", "[3200000a]", "00")
    self.bid32_maxnum_mag("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_maxnum_mag("0", "Infinity", "NaN", "[78000000]", "00")
    self.bid32_maxnum_mag("0", "[78000000]", "[07028184]", "[78000000]", "00")
    self.bid32_maxnum_mag("0", "[d2949d6a]", "[d0eb84e9]", "[d2949d6a]", "00")
    self.bid32_maxnum_mag("0", "[f34326b1]", "[cff08d4f]", "[cff08d4f]", "00")
    self.bid32_maxnum_mag("0", "[06f43bb3]", "[f8000000]", "[f8000000]", "00")
    self.bid32_maxnum_mag("0", "[00800080]", "[00000500]", "[00000500]", "00")
    self.bid32_maxnum_mag("0", "[78000000]", "[07028184]", "[78000000]", "00")
    self.bid32_maxnum_mag("0", "[d2949d6a]", "[d0eb84e9]", "[d2949d6a]", "00")
    self.bid32_maxnum_mag("0", "[f34326b1]", "[cff08d4f]", "[cff08d4f]", "00")
    self.bid32_maxnum_mag("0", "[06f43bb3]", "[f8000000]", "[f8000000]", "00")
    self.bid32_maxnum_mag("0", "-Inf", "+Inf", "+Inf", "00")
  }

  private func bid32_maxnum_mag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._maximumMagnitude(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid32_minnum() {
    self.bid32_minnum("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_minnum("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_minnum("0", "1.0", "[00000001]", "[00000001]", "00")
    self.bid32_minnum("0", "1.0", "[00080001]", "[00080001]", "00")
    self.bid32_minnum("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "-1.0", "1.0", "[b200000a]", "00")
    self.bid32_minnum("0", "1.0", "-1.0", "[b200000a]", "00")
    self.bid32_minnum("0", "1.0", "1.0e-96", "[0200000a]", "00")
    self.bid32_minnum("0", "1.0", "-1.0e-96", "[8200000a]", "00")
    self.bid32_minnum("0", "1.0", "[6098967f]", "[6098967f]", "00")
    self.bid32_minnum("0", "1.0", "[60989680]", "[02000000]", "00")
    self.bid32_minnum("0", "1.0", "[7c000000]", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "[7c8f423f]", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "[7c8f4240]", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_minnum("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_minnum("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_minnum("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_minnum("0", "1.0", "[80000001]", "[80000001]", "00")
    self.bid32_minnum("0", "1.0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_minnum("0", "1.0", "-9.999999e-95", "[e018967f]", "00")
    self.bid32_minnum("0", "1.0", "9.999999e96", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_minnum("0", "1.0e-96", "1.0", "[0200000a]", "00")
    self.bid32_minnum("0", "-1.0e-96", "1.0", "[8200000a]", "00")
    self.bid32_minnum("0", "1.0", "[fc100000]", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "[fc100100]", "[3200000a]", "00")
    self.bid32_minnum("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_minnum("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_minnum("0", "[60989680]", "1.0", "[02000000]", "00")
    self.bid32_minnum("0", "[7c000000]", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "[7c8f423f]", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_minnum("0", "[7c8f423f]", "Infinity", "[78000000]", "00")
    self.bid32_minnum("0", "[7c8f4240]", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_minnum("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_minnum("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_minnum("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_minnum("0", "[80000001]", "1.0", "[80000001]", "00")
    self.bid32_minnum("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_minnum("0", "-9.999999e-95", "1.0", "[e018967f]", "00")
    self.bid32_minnum("0", "9.999999e96", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "-9.999999e96", "1.0", "[f7f8967f]", "00")
    self.bid32_minnum("0", "[fc100000]", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "[fc100100]", "1.0", "[3200000a]", "00")
    self.bid32_minnum("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_minnum("0", "Infinity", "NaN", "[78000000]", "00")
    self.bid32_minnum("0", "[3f800000]", "[3f000000]", "[3f000000]", "00")
    self.bid32_minnum("0", "[bfe7ffff]", "[f8000000]", "[f8000000]", "00")
    self.bid32_minnum("0", "[027931e1]", "[04109660]", "[027931e1]", "00")
    self.bid32_minnum("0", "[78000000]", "[403bbfa6]", "[403bbfa6]", "00")
    self.bid32_minnum("0", "[f8000000]", "[ebf05dae]", "[f8000000]", "00")
    self.bid32_minnum("0", "[bbcdf375]", "[bafdf93f]", "[bbcdf375]", "00")
    self.bid32_minnum("0", "[00800002]", "[00000014]", "[00000014]", "00")
    self.bid32_minnum("0", "[00280000]", "[00840000]", "[00840000]", "00")
    self.bid32_minnum("0", "[3f800000]", "[3f000000]", "[3f000000]", "00")
    self.bid32_minnum("0", "[bfe7ffff]", "[f8000000]", "[f8000000]", "00")
    self.bid32_minnum("0", "[027931e1]", "[04109660]", "[027931e1]", "00")
    self.bid32_minnum("0", "[78000000]", "[403bbfa6]", "[403bbfa6]", "00")
    self.bid32_minnum("0", "[f8000000]", "[ebf05dae]", "[f8000000]", "00")
    self.bid32_minnum("0", "[bbcdf375]", "[bafdf93f]", "[bbcdf375]", "00")
    self.bid32_minnum("0", "0E+89", "[7e0f423f]", "[7c0f423f]", "01")
    self.bid32_minnum("0", "1", "+Inf", "1", "00")
    self.bid32_minnum("0", "0", "-1", "-1", "00")
    self.bid32_minnum("0", "-1", "0", "-1", "00")
  }

  private func bid32_minnum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._minimum(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid32_minnum_mag() {
    self.bid32_minnum_mag("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_minnum_mag("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_minnum_mag("0", "1.0", "[00000001]", "[00000001]", "00")
    self.bid32_minnum_mag("0", "1.0", "[00080001]", "[00080001]", "00")
    self.bid32_minnum_mag("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "-1.0", "1.0", "[b200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "-1.0", "[b200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "1.0e-96", "[0200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "-1.0e-96", "[8200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[6098967f]", "[6098967f]", "00")
    self.bid32_minnum_mag("0", "1.0", "[60989680]", "[02000000]", "00")
    self.bid32_minnum_mag("0", "1.0", "[7c000000]", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[7c8f423f]", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[7c8f4240]", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_minnum_mag("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_minnum_mag("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_minnum_mag("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_minnum_mag("0", "1.0", "[80000001]", "[80000001]", "00")
    self.bid32_minnum_mag("0", "1.0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_minnum_mag("0", "1.0", "-9.999999e-95", "[e018967f]", "00")
    self.bid32_minnum_mag("0", "1.0", "-9.999999e96", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "9.999999e96", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0e-96", "1.0", "[0200000a]", "00")
    self.bid32_minnum_mag("0", "-1.0e-96", "1.0", "[8200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[fc100000]", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[fc100100]", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_minnum_mag("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_minnum_mag("0", "[60989680]", "1.0", "[02000000]", "00")
    self.bid32_minnum_mag("0", "[7c000000]", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[7c8f423f]", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_minnum_mag("0", "[7c8f423f]", "Infinity", "[78000000]", "00")
    self.bid32_minnum_mag("0", "[7c8f4240]", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_minnum_mag("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_minnum_mag("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_minnum_mag("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_minnum_mag("0", "[80000001]", "1.0", "[80000001]", "00")
    self.bid32_minnum_mag("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_minnum_mag("0", "-9.999999e-95", "1.0", "[e018967f]", "00")
    self.bid32_minnum_mag("0", "-9.999999e96", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "9.999999e96", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[fc100000]", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[fc100100]", "1.0", "[3200000a]", "00")
    self.bid32_minnum_mag("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_minnum_mag("0", "Infinity", "NaN", "[78000000]", "00")
    self.bid32_minnum_mag("0", "[af966d03]", "[aecc6e7a]", "[aecc6e7a]", "00")
    self.bid32_minnum_mag("0", "[4a9615c3]", "[78000000]", "[4a9615c3]", "00")
    self.bid32_minnum_mag("0", "[f8000000]", "[00040000]", "[00040000]", "00")
    self.bid32_minnum_mag("0", "[11400600]", "[921615b0]", "[11400600]", "00")
    self.bid32_minnum_mag("0", "[80800200]", "[00001400]", "[80800200]", "00")
    self.bid32_minnum_mag("0", "[af966d03]", "[aecc6e7a]", "[aecc6e7a]", "00")
    self.bid32_minnum_mag("0", "[4a9615c3]", "[78000000]", "[4a9615c3]", "00")
    self.bid32_minnum_mag("0", "[f8000000]", "[00040000]", "[00040000]", "00")
    self.bid32_minnum_mag("0", "[11400600]", "[921615b0]", "[11400600]", "00")
    self.bid32_minnum_mag("0", "[80800200]", "[00001400]", "[80800200]", "00")
    self.bid32_minnum_mag("0", "-Inf", "+Inf", "-Inf", "00")
  }

  private func bid32_minnum_mag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._minimumMagnitude(arg0, arg1, status: &status)
    self.assertEqual(result, expected, .equalStatus, file, line)
    self.assertStatus(status, expectedStatus, .equalStatus, file, line)
  }

  func test_bid32_mul() {
    self.bid32_mul("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_mul("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_mul("0", "1.0", "[00000001]", "[00000001]", "00")
    self.bid32_mul("0", "1.0", "[00080001]", "[00080001]", "00")
    self.bid32_mul("0", "1.0", "1.0", "[31800064]", "00")
    self.bid32_mul("0", "-1.0", "1.0", "[b1800064]", "00")
    self.bid32_mul("0", "1.0", "-1.0", "[b1800064]", "00")
    self.bid32_mul("0", "1.0", "1.0e-96", "[01800064]", "00")
    self.bid32_mul("0", "1.0", "-1.0e-96", "[81800064]", "00")
    self.bid32_mul("0", "1.0", "[6098967f]", "[6098967f]", "00")
    self.bid32_mul("0", "1.0", "[60989680]", "[01800000]", "00")
    self.bid32_mul("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_mul("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_mul("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_mul("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_mul("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_mul("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_mul("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_mul("0", "1.0", "[80000001]", "[80000001]", "00")
    self.bid32_mul("0", "1.0", "9.999999e-95", "[6018967f]", "00")
    self.bid32_mul("0", "1.0", "-9.999999e-95", "[e018967f]", "00")
    self.bid32_mul("0", "1.0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_mul("0", "1.0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_mul("0", "1.0e-96", "1.0", "[01800064]", "00")
    self.bid32_mul("0", "-1.0e-96", "1.0", "[81800064]", "00")
    self.bid32_mul("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_mul("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_mul("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_mul("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_mul("0", "[60989680]", "1.0", "[01800000]", "00")
    self.bid32_mul("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_mul("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_mul("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_mul("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_mul("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_mul("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_mul("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_mul("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_mul("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_mul("0", "[80000001]", "1.0", "[80000001]", "00")
    self.bid32_mul("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_mul("0", "-9.999999e-95", "1.0", "[e018967f]", "00")
    self.bid32_mul("0", "9.999999e96", "1.0", "[77f8967f]", "00")
    self.bid32_mul("0", "-9.999999e96", "1.0", "[f7f8967f]", "00")
    self.bid32_mul("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_mul("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_mul("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_mul("0", "Infinity", "NaN", "[7c000000]", "00")
    self.bid32_mul("0", "[07040000]", "[a7cce69c]", "[8000339b]", "30")
    self.bid32_mul("2", "[07040000]", "[a7cce69c]", "[8000339b]", "30")
    self.bid32_mul("0", "[a09d5d70]", "[78000000]", "[f8000000]", "00")
    self.bid32_mul("0", "[04000000]", "[1a172eeb]", "[00000000]", "00")
    self.bid32_mul("0", "[78000000]", "[3fff3da3]", "[78000000]", "00")
    self.bid32_mul("0", "[00000902]", "[00000000]", "[00000000]", "00")
    self.bid32_mul("0", "[df800000]", "[d5c6cad1]", "[5f800000]", "00")
    self.bid32_mul("0", "[4e47fa32]", "[d7800000]", "[df800000]", "00")
    self.bid32_mul("0", "[5b800000]", "[6be1f78a]", "[58800000]", "00")
    self.bid32_mul("0", "[1f800000]", "[78000000]", "[7c000000]", "01")
    self.bid32_mul("0", "[f8000000]", "[00000000]", "[7c000000]", "01")
    self.bid32_mul("0", "[b186347f]", "[3200014a]", "[b2147a0a]", "20")
    self.bid32_mul("0", "[07040000]", "[a7cce69c]", "[8000339b]", "30")
    self.bid32_mul("2", "[07040000]", "[a7cce69c]", "[8000339b]", "30")
    self.bid32_mul("0", "[a09d5d70]", "[78000000]", "[f8000000]", "00")
    self.bid32_mul("0", "[04000000]", "[1a172eeb]", "[00000000]", "00")
    self.bid32_mul("0", "[78000000]", "[3fff3da3]", "[78000000]", "00")
    self.bid32_mul("0", "[00000902]", "[00000000]", "[00000000]", "00")
    self.bid32_mul("0", "[df800000]", "[d5c6cad1]", "[5f800000]", "00")
    self.bid32_mul("0", "[4e47fa32]", "[d7800000]", "[df800000]", "00")
    self.bid32_mul("0", "[5b800000]", "[6be1f78a]", "[58800000]", "00")
    self.bid32_mul("0", "[1f800000]", "[78000000]", "[7c000000]", "01")
    self.bid32_mul("0", "[f8000000]", "[00000000]", "[7c000000]", "01")
    self.bid32_mul("0", "[b186347f]", "[3200014a]", "[b2147a0a]", "20")
    self.bid32_mul("0", "1010101E-95", "99E-8", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_mul("1", "1010101E-95", "99E-8", "999999E-101", "0x30")
    self.bid32_mul("2", "1010101E-95", "99E-8", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_mul("3", "1010101E-95", "99E-8", "999999E-101", "0x30")
    self.bid32_mul("4", "1010101E-95", "99E-8", "1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_mul("0", "1010101E-95", "-99E-8", "-1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_mul("1", "1010101E-95", "-99E-8", "-1000000E-101", "0x30", underflowBeforeOnly: true)
    self.bid32_mul("2", "1010101E-95", "-99E-8", "-999999E-101", "0x30")
    self.bid32_mul("3", "1010101E-95", "-99E-8", "-999999E-101", "0x30")
    self.bid32_mul("4", "1010101E-95", "-99E-8", "-1000000E-101", "0x30", underflowBeforeOnly: true)
  }

  private func bid32_mul(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    underflowBeforeOnly: Bool = false,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._multiplied(by: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_nan() {
    self.bid32_nan("0", "0", "[7c000000]", "00")
    self.bid32_nan("0", "1", "[7c000001]", "00")
    self.bid32_nan("0", "NULL", "[7c000000]", "00")
  }

  private func bid32_nan(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let payload = arg0.bid & Decimal32.nanPayloadMask
    let result = Decimal32(nan: payload, signaling: false)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_negate() {
    self.bid32_negate("0", "[00000001]", "[80000001]", "00")
    self.bid32_negate("0", "[00080001]", "[80080001]", "00")
    self.bid32_negate("0", "-1.0", "[3200000a]", "00")
    self.bid32_negate("0", "1.0", "[b200000a]", "00")
    self.bid32_negate("0", "-1.0e-96", "[0200000a]", "00")
    self.bid32_negate("0", "1.0e-96", "[8200000a]", "00")
    self.bid32_negate("0", "[6098967f]", "[e098967f]", "00")
    self.bid32_negate("0", "[60989680]", "[e0989680]", "00")
    self.bid32_negate("0", "[7c000000]", "[fc000000]", "00")
    self.bid32_negate("0", "[7c8f423f]", "[fc8f423f]", "00")
    self.bid32_negate("0", "[7c8f4240]", "[fc8f4240]", "00")
    self.bid32_negate("0", "[7e100000]", "[fe100000]", "00")
    self.bid32_negate("0", "[7e100100]", "[fe100100]", "00")
    self.bid32_negate("0", "[7e8f423f]", "[fe8f423f]", "00")
    self.bid32_negate("0", "[7e8f4240]", "[fe8f4240]", "00")
    self.bid32_negate("0", "[80000001]", "[00000001]", "00")
    self.bid32_negate("0", "-9.999999e-95", "[6018967f]", "00")
    self.bid32_negate("0", "9.999999e-95", "[e018967f]", "00")
    self.bid32_negate("0", "-9.999999e96", "[77f8967f]", "00")
    self.bid32_negate("0", "9.999999e96", "[f7f8967f]", "00")
    self.bid32_negate("0", "[fc100000]", "[7c100000]", "00")
    self.bid32_negate("0", "[fc100100]", "[7c100100]", "00")
    self.bid32_negate("0", "[fe000000]", "[7e000000]", "00")
  }

  private func bid32_negate(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let result1 = -arg0
    self.assertEqual(result1, expected, .fuzzyStatus, file, line)

    var result2 = arg0
    result2.negate()
    self.assertEqual(result2, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_nextdown() {
    self.bid32_nextdown("0", "[00000001]", "[00000000]", "00")
    self.bid32_nextdown("0", "[00080001]", "[00080000]", "00")
    self.bid32_nextdown("0", "1.0", "[6bd8967f]", "00")
    self.bid32_nextdown("0", "-1.0", "[af8f4241]", "00")
    self.bid32_nextdown("0", "1.0e-96", "[0001869f]", "00")
    self.bid32_nextdown("0", "-1.0e-96", "[800186a1]", "00")
    self.bid32_nextdown("0", "[6098967f]", "[6098967e]", "00")
    self.bid32_nextdown("0", "[60989680]", "[80000001]", "00")
    self.bid32_nextdown("0", "[78000000]", "[77f8967f]", "00")
    self.bid32_nextdown("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_nextdown("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_nextdown("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_nextdown("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_nextdown("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_nextdown("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_nextdown("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_nextdown("0", "[80000001]", "[80000002]", "00")
    self.bid32_nextdown("0", "9.999999e-95", "[6018967e]", "00")
    self.bid32_nextdown("0", "-9.999999e-95", "[808f4240]", "00")
    self.bid32_nextdown("0", "9.999999e96", "[77f8967e]", "00")
    self.bid32_nextdown("0", "-9.999999e96", "[f8000000]", "00")
    self.bid32_nextdown("0", "[f8000000]", "[f8000000]", "00")
    self.bid32_nextdown("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_nextdown("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_nextdown("0", "[fe000000]", "[fc000000]", "01")
    self.bid32_nextdown("0", "-Infinity", "[f8000000]", "00")
  }

  private func bid32_nextdown(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._nextDown(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_nextup() {
    self.bid32_nextup("0", "[00000001]", "[00000002]", "00")
    self.bid32_nextup("0", "[00080001]", "[00080002]", "00")
    self.bid32_nextup("0", "1.0", "[2f8f4241]", "00")
    self.bid32_nextup("0", "1.0e-96", "[000186a1]", "00")
    self.bid32_nextup("0", "-1.0e-96", "[8001869f]", "00")
    self.bid32_nextup("0", "-1.0", "[ebd8967f]", "00")
    self.bid32_nextup("0", "[6098967f]", "[028f4240]", "00")
    self.bid32_nextup("0", "[60989680]", "[00000001]", "00")
    self.bid32_nextup("0", "[78000000]", "[78000000]", "00")
    self.bid32_nextup("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_nextup("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_nextup("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_nextup("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_nextup("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_nextup("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_nextup("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_nextup("0", "[80000001]", "[80000000]", "00")
    self.bid32_nextup("0", "9.999999e-95", "[008f4240]", "00")
    self.bid32_nextup("0", "-9.999999e-95", "[e018967e]", "00")
    self.bid32_nextup("0", "9.999999e96", "[78000000]", "00")
    self.bid32_nextup("0", "-9.999999e96", "[f7f8967e]", "00")
    self.bid32_nextup("0", "[f8000000]", "[f7f8967f]", "00")
    self.bid32_nextup("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_nextup("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_nextup("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_nextup(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._nextUp(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_pow() {
    self.bid32_pow("0", "[00000001]", "[00000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[03000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[6BD8967F]", "[00000001]", "30", ulp: "2.3256379865e-05")
    self.bid32_pow("0", "[00000001]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[80000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[83000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[EBD8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[00000001]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "0.00001", "0.00001", "[6bd89201]", "20", ulp: "-2.262753e-01")
    self.bid32_pow("0", "0.00001", "1.1", "[2cb040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("0", "0.00001", "-1.1", "[323040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("0", "[03000001]", "[00000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[03000001]", "[03000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[03000001]", "[6BD8967F]", "[000F4256]", "20", ulp: "-1.2520236666e-01")
    self.bid32_pow("0", "[03000001]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[03000001]", "[80000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[03000001]", "[83000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[03000001]", "[EBD8967F]", "[77B895A5]", "20", ulp: "2.5680862964e-01")
    self.bid32_pow("0", "[03000001]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "1.1", "0.00001", "[2f8f4241]", "20", ulp: "-4.689775e-02")
    self.bid32_pow("0", "1.1", "1.1", "[2f90f206]", "20", ulp: "2.410546e-01")
    self.bid32_pow("0", "1.1", "-1.1", "[6bc96683]", "20", ulp: "7.467747e-02")
    self.bid32_pow("0", "[6BD8967F]", "[00000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[03000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[6BD8967F]", "[6BD8967F]", "20", ulp: "9.9999995000e-08")
    self.bid32_pow("0", "[6BD8967F]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[80000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[83000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[EBD8967F]", "[2F8F4240]", "20", ulp: "1.0000000000e-01")
    self.bid32_pow("0", "[6BD8967F]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[00000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[03000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[6BD8967F]", "[77F895A0]", "20", ulp: "-3.4823732620e-01")
    self.bid32_pow("0", "[77F8967F]", "[77F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[80000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[83000001]", "[2F8F4240]", "20", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[77F8967F]", "[EBD8967F]", "[00002710]", "30", ulp: "2.2435327065e-01")
    self.bid32_pow("0", "[77F8967F]", "[F7F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[78000001]", "[609896ff]", "[32800001]", "00")
    self.bid32_pow("0", "[78000001]", "[7e001100]", "[7c001100]", "01")
    self.bid32_pow("0", "[78000001]", "[f8000011]", "[32800000]", "00")
    self.bid32_pow("0", "[78000001]", "[fc000110]", "[fc000110]", "00")
    self.bid32_pow("0", "[7c000000]", "[3200000a]", "[7c000000]", "00")
    self.bid32_pow("0", "[7c8f4241]", "[3200000a]", "[7c000000]", "00")
    self.bid32_pow("0", "[7e000000]", "[3200000a]", "[7c000000]", "01")
    self.bid32_pow("0", "[7ea00000]", "[3200000a]", "[7c000000]", "01")
    self.bid32_pow("0", "[7effffff]", "[3200000a]", "[7c000000]", "01")
    self.bid32_pow("0", "[80000001]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[77F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[F7F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[77F8967F]", "[78000000]", "28", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[F7F8967F]", "[00000000]", "30", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[fe001000]", "[7e001100]", "[fc001000]", "01")
    self.bid32_pow("0", "[fe001000]", "[f8000011]", "[fc001000]", "01")
    self.bid32_pow("0", "[fe001000]", "[fc000110]", "[fc001000]", "01")
    self.bid32_pow("1", "0.00001", "0.00001", "[6bd89200]", "20", ulp: "7.737247e-01")
    self.bid32_pow("1", "0.00001", "1.1", "[2cb040a5]", "20", ulp: "6.601684e-01")
    self.bid32_pow("1", "0.00001", "-1.1", "[323040a5]", "20", ulp: "6.601684e-01")
    self.bid32_pow("1", "1.1", "0.00001", "[2f8f4240]", "20", ulp: "9.531023e-01")
    self.bid32_pow("1", "1.1", "1.1", "[2f90f206]", "20", ulp: "2.410546e-01")
    self.bid32_pow("1", "1.1", "-1.1", "[6bc96683]", "20", ulp: "7.467747e-02")
    self.bid32_pow("2", "0.00001", "0.00001", "[6bd89201]", "20", ulp: "-2.262753e-01")
    self.bid32_pow("2", "0.00001", "1.1", "[2cb040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("2", "0.00001", "-1.1", "[323040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("2", "1.1", "0.00001", "[2f8f4241]", "20", ulp: "-4.689775e-02")
    self.bid32_pow("2", "1.1", "1.1", "[2f90f207]", "20", ulp: "-7.589454e-01")
    self.bid32_pow("2", "1.1", "-1.1", "[6bc96684]", "20", ulp: "-9.253225e-01")
    self.bid32_pow("3", "0.00001", "0.00001", "[6bd89200]", "20", ulp: "7.737247e-01")
    self.bid32_pow("3", "0.00001", "1.1", "[2cb040a5]", "20", ulp: "6.601684e-01")
    self.bid32_pow("3", "0.00001", "-1.1", "[323040a5]", "20", ulp: "6.601684e-01")
    self.bid32_pow("3", "1.1", "0.00001", "[2f8f4240]", "20", ulp: "9.531023e-01")
    self.bid32_pow("3", "1.1", "1.1", "[2f90f206]", "20", ulp: "2.410546e-01")
    self.bid32_pow("3", "1.1", "-1.1", "[6bc96683]", "20", ulp: "7.467747e-02")
    self.bid32_pow("4", "0.00001", "0.00001", "[6bd89201]", "20", ulp: "-2.262753e-01")
    self.bid32_pow("4", "0.00001", "1.1", "[2cb040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("4", "0.00001", "-1.1", "[323040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_pow("4", "1.1", "0.00001", "[2f8f4241]", "20", ulp: "-4.689775e-02")
    self.bid32_pow("4", "1.1", "1.1", "[2f90f206]", "20", ulp: "2.410546e-01")
    self.bid32_pow("4", "1.1", "-1.1", "[6bc96683]", "20", ulp: "7.467747e-02")
    self.bid32_pow("0", "10", "4", "10000", "00")
    self.bid32_pow("0", "10", "6", "1000000", "00")
    self.bid32_pow("0", "10", "7", "10000000", "00")
    self.bid32_pow("0", "2", "-3", ".125", "00")
    self.bid32_pow("0", "[78000000]", "[3200000a]", "[78000000]", "00")
    self.bid32_pow("0", "[78a00000]", "[3200000a]", "[78000000]", "00")
    self.bid32_pow("0", "[fe001000]", "[609896ff]", "[fc001000]", "01")
    self.bid32_pow("0", "[80000001]", "[00000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[03000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[6BD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[80000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[83000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[80000001]", "[EBD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[00000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[03000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[6BD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[80000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[83000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[83000001]", "[EBD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[00000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[03000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[6BD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[80000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[83000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[EBD8967F]", "[EBD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[00000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[03000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[6BD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[80000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[83000001]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "[F7F8967F]", "[EBD8967F]", "[7c000000]", "01", ulp: "0.0000000000e-01")
    self.bid32_pow("0", "1", "[78000000]", "1", "00")
    self.bid32_pow("0", "1", "2", "1", "00")
    self.bid32_pow("0", "2", "[7c0f4240]", "[7c000000]", "00")
    self.bid32_pow("0", "-1", "[78000000]", "1", "00")
    self.bid32_pow("0", "0.5", "[f8000000]", "[78000000]", "00")
    self.bid32_pow("0", "0.5", "[78000000]", "0", "00")
    self.bid32_pow("0", "2", "[78000000]", "Inf", "00")
    self.bid32_pow("0", "[78000000]", "-1", "0", "00")
    self.bid32_pow("0", "[f8000000]", "3", "[f8000000]", "00")
    self.bid32_pow("0", "[80000000]", "3", "[80000000]", "00")
    self.bid32_pow("0", "[80000000]", "-3", "[f8000000]", "04")
    self.bid32_pow("0", "[80000000]", "-2", "[78000000]", "04")
    self.bid32_pow("0", "-2", "1", "-2", "00")
    self.bid32_pow("0", "2", "[3180044c]", "2048", "00")
  }

  private func bid32_pow(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._pow(exponent: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .relativeError, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .relativeError, file, line)
  }

  func test_bid32_quantize() {
    self.bid32_quantize("0", "[00000001]", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "[00080001]", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "0.05", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "1.0", "[00000001]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[00080001]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "-1.0", "[3200000a]", "00")
    self.bid32_quantize("0", "1.0", "1.0", "[3200000a]", "00")
    self.bid32_quantize("0", "-1.0", "1.0", "[b200000a]", "00")
    self.bid32_quantize("0", "1.0", "-1.0e-96", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "1.0e-96", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[6098967f]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[60989680]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_quantize("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_quantize("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_quantize("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_quantize("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_quantize("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "[80000001]", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "-9.999999e-95", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "9.999999e-95", "[7c000000]", "01")
    self.bid32_quantize("0", "1.0", "-9.999999e96", "[5f800000]", "20")
    self.bid32_quantize("0", "1.0", "9.999999e96", "[5f800000]", "20")
    self.bid32_quantize("0", "1.0e-96", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "-1.0e-96", "1.0", "[b2000000]", "20")
    self.bid32_quantize("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_quantize("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_quantize("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_quantize("0", "[6098967f]", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "[60989680]", "1.0", "[32000000]", "00")
    self.bid32_quantize("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_quantize("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_quantize("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_quantize("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_quantize("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_quantize("0", "[7e0f423f]", "0E+89", "[7c0f423f]", "01")
    self.bid32_quantize("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_quantize("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_quantize("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_quantize("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_quantize("0", "[80000001]", "1.0", "[b2000000]", "20")
    self.bid32_quantize("0", "9.999999e-95", "1.0", "[32000000]", "20")
    self.bid32_quantize("0", "-9.999999e-95", "1.0", "[b2000000]", "20")
    self.bid32_quantize("0", "-9.999999e96", "1.0", "[7c000000]", "01")
    self.bid32_quantize("0", "9.999999e96", "1.0", "[7c000000]", "01")
    self.bid32_quantize("0", "[f8000000]", "[b5000000]", "[7c000000]", "01")
    self.bid32_quantize("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_quantize("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_quantize("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_quantize("0", "[fe0dffbf]", "[f8000000]", "[fc0dffbf]", "01")
    self.bid32_quantize("0", "Infinity", "0E+89", "[7c000000]", "01")
    self.bid32_quantize("0", "Infinity", "Infinity", "[78000000]", "00")
    self.bid32_quantize("0", "Infinity", "NaN", "[7c000000]", "00")
    self.bid32_quantize("1", "[9304bb8a]", "[25d5e160]", "[a5800001]", "20")
    self.bid32_quantize("2", "1E-100", "0E+89", "[5f000001]", "20")
    self.bid32_quantize("2", "-1E-101", "0E-100", "[80800000]", "20")
    self.bid32_quantize("2", "-1E-96", "0E+89", "[df000000]", "20")
    self.bid32_quantize("2", "[9304bb8a]", "[25d5e160]", "[a5800000]", "20")
    self.bid32_quantize("2", "[98876a97]", "[e66dfaac]", "[998012fc]", "20")
    self.bid32_quantize("0", "1", "inf", "[7c000000]", "01")
  }

  private func bid32_quantize(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._quantize(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_equal() {
    self.bid32_quiet_equal("0", "[00000000]", "[00000001]", "0", "00")
    self.bid32_quiet_equal("0", "[00000000]", "[80000001]", "0", "00")
    self.bid32_quiet_equal("0", "[00000001]", "[00000000]", "0", "00")
    self.bid32_quiet_equal("0", "[00000001]", "[78000002]", "0", "00")
    self.bid32_quiet_equal("0", "[00000001]", "[80000000]", "0", "00")
    self.bid32_quiet_equal("0", "[00000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "1.0", "1", "00")
    self.bid32_quiet_equal("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "-1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "1.0", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[1234566]", "1", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[1234566]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[1234566]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[1234567]", "1", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[1234567]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[1234567]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[2f8f423f]", "[3200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[2f8f4240]", "[3200000a]", "1", "00")
    self.bid32_quiet_equal("0", "[2f8f4241]", "[3200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[32000001]", "[7e000000]", "0", "01")
    self.bid32_quiet_equal("0", "[32000002]", "[32000001]", "0", "00")
    self.bid32_quiet_equal("0", "[32000002]", "[32000003]", "0", "00")
    self.bid32_quiet_equal("0", "[32000002]", "[35800001]", "0", "00")
    self.bid32_quiet_equal("0", "[32000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_equal("0", "[3200000a]", "[2f8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[3200000a]", "[2f8f4240]", "1", "00")
    self.bid32_quiet_equal("0", "[3200000a]", "[2f8f4241]", "0", "00")
    self.bid32_quiet_equal("0", "[3200000a]", "[36800064]", "0", "00")
    self.bid32_quiet_equal("0", "[35800001]", "[32000002]", "0", "00")
    self.bid32_quiet_equal("0", "[35800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_equal("0", "[36800064]", "[3200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[6098967e]", "1", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[6098967e]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967e]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[6098967f]", "1", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[6098967f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[6098967f]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[60989680]", "1", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[60989680]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[60989680]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[78000001]", "[00000002]", "0", "00")
    self.bid32_quiet_equal("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_quiet_equal("0", "[78000001]", "[80000002]", "0", "00")
    self.bid32_quiet_equal("0", "[78000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[7c8f423f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[7c8f4240]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "[7c8f4240]", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[7e000000]", "[32000001]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "1.0", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "-1.0e-96", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "1.0e-96", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[1234566]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[1234567]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[6098967e]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[6098967f]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[60989680]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[7c8f423f]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[7c8f4240]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "-9.999999e-95", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "9.999999e-95", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "-9.999999e96", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "9.999999e96", "0", "01")
    self.bid32_quiet_equal("0", "[7e100000]", "Infinity", "0", "01")
    self.bid32_quiet_equal("0", "[80000000]", "[00000001]", "0", "00")
    self.bid32_quiet_equal("0", "[80000000]", "[80000001]", "0", "00")
    self.bid32_quiet_equal("0", "[80000001]", "[00000000]", "0", "00")
    self.bid32_quiet_equal("0", "[80000001]", "[78000002]", "0", "00")
    self.bid32_quiet_equal("0", "[80000001]", "[80000000]", "0", "00")
    self.bid32_quiet_equal("0", "[80000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "-9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "-9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_equal("0", "-9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_equal("0", "[af8f423f]", "[b200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[af8f4240]", "[b200000a]", "1", "00")
    self.bid32_quiet_equal("0", "[af8f4241]", "[b200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[b2000002]", "[35800001]", "0", "00")
    self.bid32_quiet_equal("0", "[b2000002]", "[b2000001]", "0", "00")
    self.bid32_quiet_equal("0", "[b2000002]", "[b2000003]", "0", "00")
    self.bid32_quiet_equal("0", "[b2000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_equal("0", "[b200000a]", "[af8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "[b200000a]", "[af8f4240]", "1", "00")
    self.bid32_quiet_equal("0", "[b200000a]", "[af8f4241]", "0", "00")
    self.bid32_quiet_equal("0", "[b200000a]", "[b6800064]", "0", "00")
    self.bid32_quiet_equal("0", "[b5800001]", "[32000002]", "0", "00")
    self.bid32_quiet_equal("0", "[b5800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_equal("0", "[b6800064]", "[b200000a]", "0", "00")
    self.bid32_quiet_equal("0", "[f8000001]", "[00000002]", "0", "00")
    self.bid32_quiet_equal("0", "[f8000001]", "[78000002]", "0", "00")
    self.bid32_quiet_equal("0", "[f8000001]", "[80000002]", "0", "00")
    self.bid32_quiet_equal("0", "[f8000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_equal("0", "Infinity", "1.0", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "-1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "1.0e-96", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[1234566]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[1234567]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[6098967e]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[6098967f]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[60989680]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[7c8f423f]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[7c8f4240]", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "[7e100000]", "0", "01")
    self.bid32_quiet_equal("0", "Infinity", "-9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "9.999999e-95", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "-9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "9.999999e96", "0", "00")
    self.bid32_quiet_equal("0", "Infinity", "Inf", "1", "00")
    self.bid32_quiet_equal("0", "[9d800000]", "[de800000]", "1", "00")
    self.bid32_quiet_equal("0", "[9d800000]", "[de800000]", "1", "00")
  }

  private func bid32_quiet_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isEqual(to: arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_greater() {
    self.bid32_quiet_greater("0", "[00000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater("0", "[00000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater("0", "[00000001]", "[00000000]", "1", "00")
    self.bid32_quiet_greater("0", "[00000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater("0", "[00000001]", "[80000000]", "1", "00")
    self.bid32_quiet_greater("0", "[00000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "1.0", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[1234567]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[6098967e]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[6098967f]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "1.0", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "1.0", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "-1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "-1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "1.0", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[1234566]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[1234566]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "[1234566]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[1234567]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[1234567]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "[1234567]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[2f8f423f]", "[3200000a]", "0", "00")
    self.bid32_quiet_greater("0", "[2f8f4240]", "[3200000a]", "0", "00")
    self.bid32_quiet_greater("0", "[2f8f4241]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater("0", "[32000001]", "[7e000000]", "0", "01")
    self.bid32_quiet_greater("0", "[32000002]", "[32000001]", "1", "00")
    self.bid32_quiet_greater("0", "[32000002]", "[32000003]", "0", "00")
    self.bid32_quiet_greater("0", "[32000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater("0", "[32000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater("0", "[3200000a]", "[2f8f423f]", "1", "00")
    self.bid32_quiet_greater("0", "[3200000a]", "[2f8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[3200000a]", "[2f8f4241]", "0", "00")
    self.bid32_quiet_greater("0", "[3200000a]", "[36800064]", "0", "00")
    self.bid32_quiet_greater("0", "[35800001]", "[32000002]", "1", "00")
    self.bid32_quiet_greater("0", "[35800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_greater("0", "[36800064]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[1234567]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[6098967e]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967e]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[1234567]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[6098967f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "[6098967f]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[60989680]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "[60989680]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[60989680]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "[60989680]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[78000001]", "[00000002]", "1", "00")
    self.bid32_quiet_greater("0", "[78000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater("0", "[78000001]", "[80000002]", "1", "00")
    self.bid32_quiet_greater("0", "[78000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[7c8f423f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[7c8f4240]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "[7c8f4240]", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[7e000000]", "[32000001]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "1.0", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "-1.0e-96", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "1.0e-96", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[1234566]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[1234567]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[6098967e]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[6098967f]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[60989680]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[7c8f423f]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[7c8f4240]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "-9.999999e-95", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "9.999999e-95", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "-9.999999e96", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "9.999999e96", "0", "01")
    self.bid32_quiet_greater("0", "[7e100000]", "Infinity", "0", "01")
    self.bid32_quiet_greater("0", "[80000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater("0", "[80000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater("0", "[80000001]", "[00000000]", "0", "00")
    self.bid32_quiet_greater("0", "[80000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater("0", "[80000001]", "[80000000]", "0", "00")
    self.bid32_quiet_greater("0", "[80000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "-9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "-9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "-9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater("0", "[af8f423f]", "[b200000a]", "1", "00")
    self.bid32_quiet_greater("0", "[af8f4240]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater("0", "[af8f4241]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater("0", "[b2000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater("0", "[b2000002]", "[b2000001]", "0", "00")
    self.bid32_quiet_greater("0", "[b2000002]", "[b2000003]", "1", "00")
    self.bid32_quiet_greater("0", "[b2000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater("0", "[b200000a]", "[af8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "[b200000a]", "[af8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "[b200000a]", "[af8f4241]", "1", "00")
    self.bid32_quiet_greater("0", "[b200000a]", "[b6800064]", "1", "00")
    self.bid32_quiet_greater("0", "[b5800001]", "[32000002]", "0", "00")
    self.bid32_quiet_greater("0", "[b5800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_greater("0", "[b6800064]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater("0", "[f8000001]", "[00000002]", "0", "00")
    self.bid32_quiet_greater("0", "[f8000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater("0", "[f8000001]", "[80000002]", "0", "00")
    self.bid32_quiet_greater("0", "[f8000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_greater("0", "Infinity", "1.0", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "1.0e-96", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[1234566]", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[1234567]", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[6098967e]", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[6098967f]", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[60989680]", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater("0", "Infinity", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater("0", "Infinity", "[7e100000]", "0", "01")
    self.bid32_quiet_greater("0", "Infinity", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "9.999999e96", "1", "00")
    self.bid32_quiet_greater("0", "Infinity", "Inf", "0", "00")
    self.bid32_quiet_greater("0", "[0d000000]", "[dd000000]", "0", "00")
    self.bid32_quiet_greater("0", "[0d000000]", "[dd000000]", "0", "00")
  }

  private func bid32_quiet_greater(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLess(than: arg0, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_greater_equal() {
    self.bid32_quiet_greater_equal("0", "[00000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[00000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[00000001]", "[00000000]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[00000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[00000001]", "[80000000]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[00000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "1.0", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "1.0", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "1.0", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[1234566]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234566]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[1234567]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[1234567]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[2f8f423f]", "[3200000a]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[2f8f4240]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[2f8f4241]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[32000001]", "[7e000000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[32000002]", "[32000001]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[32000002]", "[32000003]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[32000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[32000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[3200000a]", "[2f8f423f]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[3200000a]", "[2f8f4240]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[3200000a]", "[2f8f4241]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[3200000a]", "[36800064]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[35800001]", "[32000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[35800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[36800064]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967e]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[6098967f]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[60989680]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "[60989680]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[78000001]", "[00000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[78000001]", "[80000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[78000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[60989680]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[60989680]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7c8f4240]", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[7e000000]", "[32000001]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "1.0", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "-1.0e-96", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "1.0e-96", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[1234566]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[1234567]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[6098967e]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[6098967f]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[60989680]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[7c8f423f]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[7c8f4240]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "-9.999999e-95", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "9.999999e-95", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "-9.999999e96", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "9.999999e96", "0", "01")
    self.bid32_quiet_greater_equal("0", "[7e100000]", "Infinity", "0", "01")
    self.bid32_quiet_greater_equal("0", "[80000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[80000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[80000001]", "[00000000]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[80000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[80000001]", "[80000000]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[80000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "-9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater_equal("0", "[af8f423f]", "[b200000a]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[af8f4240]", "[b200000a]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[af8f4241]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b2000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b2000002]", "[b2000001]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b2000002]", "[b2000003]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[b2000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[b200000a]", "[af8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b200000a]", "[af8f4240]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[b200000a]", "[af8f4241]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[b200000a]", "[b6800064]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[b5800001]", "[32000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b5800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[b6800064]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[f8000001]", "[00000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[f8000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[f8000001]", "[80000002]", "0", "00")
    self.bid32_quiet_greater_equal("0", "[f8000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "1.0", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[1234566]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[1234567]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[60989680]", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[7c8f423f]", "0", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[7c8f4240]", "0", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "[7e100000]", "0", "01")
    self.bid32_quiet_greater_equal("0", "Infinity", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "9.999999e96", "1", "00")
    self.bid32_quiet_greater_equal("0", "Infinity", "Inf", "1", "00")
    self.bid32_quiet_greater_equal("0", "[00000000]", "[cb000000]", "1", "00")
    self.bid32_quiet_greater_equal("0", "[00000000]", "[cb000000]", "1", "00")
  }

  private func bid32_quiet_greater_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLessThanOrEqualTo(arg0, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_greater_unordered() {
    self.bid32_quiet_greater_unordered("0", "[00000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[00000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[00000001]", "[00000000]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[00000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[00000001]", "[80000000]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[00000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "1.0", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "1.0", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234566]", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[1234567]", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[2f8f423f]", "[3200000a]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[2f8f4240]", "[3200000a]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[2f8f4241]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[32000001]", "[7e000000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[32000002]", "[32000001]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[32000002]", "[32000003]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[32000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[32000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[3200000a]", "[2f8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[3200000a]", "[2f8f4240]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[3200000a]", "[2f8f4241]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[3200000a]", "[36800064]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[35800001]", "[32000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[35800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[36800064]", "[3200000a]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967e]", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[6098967f]", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[60989680]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[60989680]", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[78000001]", "[00000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[78000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[78000001]", "[80000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[78000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "1.0", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f423f]", "Infinity", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "1.0", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7c8f4240]", "Infinity", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[7e000000]", "[32000001]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "1.0", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "-1.0e-96", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "1.0e-96", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[1234566]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[1234567]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[6098967e]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[6098967f]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[60989680]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[7c8f423f]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[7c8f4240]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "-9.999999e-95", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "9.999999e-95", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "-9.999999e96", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "9.999999e96", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[7e100000]", "Infinity", "1", "01")
    self.bid32_quiet_greater_unordered("0", "[80000000]", "[00000001]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[80000000]", "[80000001]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[80000001]", "[00000000]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[80000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[80000001]", "[80000000]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[80000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "-9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[af8f423f]", "[b200000a]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[af8f4240]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[af8f4241]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b2000002]", "[35800001]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b2000002]", "[b2000001]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b2000002]", "[b2000003]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[b2000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[b200000a]", "[af8f423f]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b200000a]", "[af8f4240]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b200000a]", "[af8f4241]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[b200000a]", "[b6800064]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "[b5800001]", "[32000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b5800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[b6800064]", "[b200000a]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[f8000001]", "[00000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[f8000001]", "[78000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[f8000001]", "[80000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[f8000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "1.0", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "-1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "1.0e-96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[1234566]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[1234567]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[6098967e]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[6098967f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[60989680]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[7c8f423f]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[7c8f4240]", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "[7e100000]", "1", "01")
    self.bid32_quiet_greater_unordered("0", "Infinity", "-9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "9.999999e-95", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "-9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "9.999999e96", "1", "00")
    self.bid32_quiet_greater_unordered("0", "Infinity", "Inf", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[00000000]", "[c9800000]", "0", "00")
    self.bid32_quiet_greater_unordered("0", "[00000000]", "[c9800000]", "0", "00")
  }

  private func bid32_quiet_greater_unordered(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLessThanOrEqualTo(arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_less() {
    self.bid32_quiet_less("0", "[00000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less("0", "[00000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less("0", "[00000001]", "[00000000]", "0", "00")
    self.bid32_quiet_less("0", "[00000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less("0", "[00000001]", "[80000000]", "0", "00")
    self.bid32_quiet_less("0", "[00000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "1.0", "0", "00")
    self.bid32_quiet_less("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "1.0", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "-1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "-1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "1.0", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "1.0", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[1234566]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[1234566]", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "[1234566]", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[1234567]", "1.0", "1", "00")
    self.bid32_quiet_less("0", "[1234567]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "[1234567]", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "[1234567]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[1234567]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[1234567]", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "[1234567]", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[2f8f423f]", "[3200000a]", "1", "00")
    self.bid32_quiet_less("0", "[2f8f4240]", "[3200000a]", "0", "00")
    self.bid32_quiet_less("0", "[2f8f4241]", "[3200000a]", "0", "00")
    self.bid32_quiet_less("0", "[32000001]", "[7e000000]", "0", "01")
    self.bid32_quiet_less("0", "[32000002]", "[32000001]", "0", "00")
    self.bid32_quiet_less("0", "[32000002]", "[32000003]", "1", "00")
    self.bid32_quiet_less("0", "[32000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less("0", "[32000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less("0", "[3200000a]", "[2f8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[3200000a]", "[2f8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[3200000a]", "[2f8f4241]", "1", "00")
    self.bid32_quiet_less("0", "[3200000a]", "[36800064]", "1", "00")
    self.bid32_quiet_less("0", "[35800001]", "[32000002]", "0", "00")
    self.bid32_quiet_less("0", "[35800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_less("0", "[36800064]", "[3200000a]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "1.0", "1", "00")
    self.bid32_quiet_less("0", "[6098967e]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[6098967e]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[6098967e]", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "[6098967e]", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_quiet_less("0", "[6098967f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[6098967f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[6098967f]", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "[6098967f]", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "1.0", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[60989680]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[60989680]", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "[60989680]", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[78000001]", "[00000002]", "0", "00")
    self.bid32_quiet_less("0", "[78000001]", "[78000002]", "0", "00")
    self.bid32_quiet_less("0", "[78000001]", "[80000002]", "0", "00")
    self.bid32_quiet_less("0", "[78000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[7c8f423f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[7c8f4240]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "[7c8f4240]", "Infinity", "0", "00")
    self.bid32_quiet_less("0", "[7e000000]", "[32000001]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "1.0", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "-1.0e-96", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "1.0e-96", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[1234566]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[1234567]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[6098967e]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[6098967f]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[60989680]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[7c8f423f]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[7c8f4240]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "-9.999999e-95", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "9.999999e-95", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "-9.999999e96", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "9.999999e96", "0", "01")
    self.bid32_quiet_less("0", "[7e100000]", "Infinity", "0", "01")
    self.bid32_quiet_less("0", "[80000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less("0", "[80000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less("0", "[80000001]", "[00000000]", "1", "00")
    self.bid32_quiet_less("0", "[80000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less("0", "[80000001]", "[80000000]", "1", "00")
    self.bid32_quiet_less("0", "[80000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "-9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_less("0", "-9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less("0", "[af8f423f]", "[b200000a]", "0", "00")
    self.bid32_quiet_less("0", "[af8f4240]", "[b200000a]", "0", "00")
    self.bid32_quiet_less("0", "[af8f4241]", "[b200000a]", "1", "00")
    self.bid32_quiet_less("0", "[b2000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less("0", "[b2000002]", "[b2000001]", "1", "00")
    self.bid32_quiet_less("0", "[b2000002]", "[b2000003]", "0", "00")
    self.bid32_quiet_less("0", "[b2000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less("0", "[b200000a]", "[af8f423f]", "1", "00")
    self.bid32_quiet_less("0", "[b200000a]", "[af8f4240]", "0", "00")
    self.bid32_quiet_less("0", "[b200000a]", "[af8f4241]", "0", "00")
    self.bid32_quiet_less("0", "[b200000a]", "[b6800064]", "0", "00")
    self.bid32_quiet_less("0", "[b5800001]", "[32000002]", "1", "00")
    self.bid32_quiet_less("0", "[b5800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_less("0", "[b6800064]", "[b200000a]", "1", "00")
    self.bid32_quiet_less("0", "[f8000001]", "[00000002]", "1", "00")
    self.bid32_quiet_less("0", "[f8000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less("0", "[f8000001]", "[80000002]", "1", "00")
    self.bid32_quiet_less("0", "[f8000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "1.0", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "-1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "1.0e-96", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[1234566]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[1234567]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[6098967e]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[6098967f]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[60989680]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "[7e100000]", "0", "01")
    self.bid32_quiet_less("0", "Infinity", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "9.999999e-95", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "-9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "9.999999e96", "0", "00")
    self.bid32_quiet_less("0", "Infinity", "Inf", "0", "00")
  }

  private func bid32_quiet_less(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLess(than: arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_less_equal() {
    self.bid32_quiet_less_equal("0", "[00000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less_equal("0", "[00000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less_equal("0", "[00000001]", "[00000000]", "0", "00")
    self.bid32_quiet_less_equal("0", "[00000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[00000001]", "[80000000]", "0", "00")
    self.bid32_quiet_less_equal("0", "[00000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "1.0e-96", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "-1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "1.0", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[1234566]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234566]", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[1234567]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "[1234567]", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[2f8f423f]", "[3200000a]", "1", "00")
    self.bid32_quiet_less_equal("0", "[2f8f4240]", "[3200000a]", "1", "00")
    self.bid32_quiet_less_equal("0", "[2f8f4241]", "[3200000a]", "0", "00")
    self.bid32_quiet_less_equal("0", "[32000001]", "[7e000000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[32000002]", "[32000001]", "0", "00")
    self.bid32_quiet_less_equal("0", "[32000002]", "[32000003]", "1", "00")
    self.bid32_quiet_less_equal("0", "[32000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less_equal("0", "[32000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less_equal("0", "[3200000a]", "[2f8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[3200000a]", "[2f8f4240]", "1", "00")
    self.bid32_quiet_less_equal("0", "[3200000a]", "[2f8f4241]", "1", "00")
    self.bid32_quiet_less_equal("0", "[3200000a]", "[36800064]", "1", "00")
    self.bid32_quiet_less_equal("0", "[35800001]", "[32000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "[35800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "[36800064]", "[3200000a]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[6098967e]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967e]", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[6098967f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "[6098967f]", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[60989680]", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[60989680]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "[60989680]", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[78000001]", "[00000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[78000001]", "[80000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "[78000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[6098967f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[6098967f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "[7c8f4240]", "Infinity", "0", "00")
    self.bid32_quiet_less_equal("0", "[7e000000]", "[32000001]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "1.0", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "-1.0e-96", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "1.0e-96", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[1234566]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[1234567]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[6098967e]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[6098967f]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[60989680]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[7c8f423f]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[7c8f4240]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "-9.999999e-95", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "9.999999e-95", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "-9.999999e96", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "9.999999e96", "0", "01")
    self.bid32_quiet_less_equal("0", "[7e100000]", "Infinity", "0", "01")
    self.bid32_quiet_less_equal("0", "[80000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less_equal("0", "[80000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less_equal("0", "[80000001]", "[00000000]", "1", "00")
    self.bid32_quiet_less_equal("0", "[80000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[80000001]", "[80000000]", "1", "00")
    self.bid32_quiet_less_equal("0", "[80000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "9.999999e96", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_equal("0", "-9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less_equal("0", "[af8f423f]", "[b200000a]", "0", "00")
    self.bid32_quiet_less_equal("0", "[af8f4240]", "[b200000a]", "1", "00")
    self.bid32_quiet_less_equal("0", "[af8f4241]", "[b200000a]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b2000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b2000002]", "[b2000001]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b2000002]", "[b2000003]", "0", "00")
    self.bid32_quiet_less_equal("0", "[b2000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less_equal("0", "[b200000a]", "[af8f423f]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b200000a]", "[af8f4240]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b200000a]", "[af8f4241]", "0", "00")
    self.bid32_quiet_less_equal("0", "[b200000a]", "[b6800064]", "0", "00")
    self.bid32_quiet_less_equal("0", "[b5800001]", "[32000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b5800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[b6800064]", "[b200000a]", "1", "00")
    self.bid32_quiet_less_equal("0", "[f8000001]", "[00000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[f8000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[f8000001]", "[80000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "[f8000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "1.0", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "1.0e-96", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[1234566]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[1234567]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[6098967e]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[6098967f]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[60989680]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[7c8f423f]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[7c8f4240]", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "[7e100000]", "0", "01")
    self.bid32_quiet_less_equal("0", "Infinity", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "9.999999e96", "0", "00")
    self.bid32_quiet_less_equal("0", "Infinity", "Inf", "1", "00")
    self.bid32_quiet_less_equal("0", "[00000000]", "[bd800000]", "1", "00")
    self.bid32_quiet_less_equal("0", "[00000000]", "[bd800000]", "1", "00")
  }

  private func bid32_quiet_less_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLessThanOrEqualTo(arg1, status: &status)
    self.assertBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_less_unordered() {
    self.bid32_quiet_less_unordered("0", "[00000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[00000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[00000001]", "[00000000]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[00000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[00000001]", "[80000000]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[00000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "1.0", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[6098967e]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "1.0", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[1234566]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234566]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[1234567]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[1234567]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[2f8f423f]", "[3200000a]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[2f8f4240]", "[3200000a]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[2f8f4241]", "[3200000a]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[32000001]", "[7e000000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[32000002]", "[32000001]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[32000002]", "[32000003]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[32000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[32000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[3200000a]", "[2f8f423f]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[3200000a]", "[2f8f4240]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[3200000a]", "[2f8f4241]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[3200000a]", "[36800064]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[35800001]", "[32000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[35800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[36800064]", "[3200000a]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[6098967e]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967e]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[6098967e]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[6098967f]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[6098967f]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[60989680]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[60989680]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[78000001]", "[00000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[78000001]", "[78000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[78000001]", "[80000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[78000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[60989680]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f423f]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[60989680]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "-9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7c8f4240]", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[7e000000]", "[32000001]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "1.0", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "-1.0e-96", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "1.0e-96", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[1234566]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[1234567]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[6098967e]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[6098967f]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[60989680]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[7c8f423f]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[7c8f4240]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "-9.999999e-95", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "9.999999e-95", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "-9.999999e96", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "9.999999e96", "1", "01")
    self.bid32_quiet_less_unordered("0", "[7e100000]", "Infinity", "1", "01")
    self.bid32_quiet_less_unordered("0", "[80000000]", "[00000001]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[80000000]", "[80000001]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[80000001]", "[00000000]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[80000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[80000001]", "[80000000]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[80000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_less_unordered("0", "-9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_less_unordered("0", "[af8f423f]", "[b200000a]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[af8f4240]", "[b200000a]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[af8f4241]", "[b200000a]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b2000002]", "[35800001]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b2000002]", "[b2000001]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b2000002]", "[b2000003]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[b2000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[b200000a]", "[af8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b200000a]", "[af8f4240]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[b200000a]", "[af8f4241]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[b200000a]", "[b6800064]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[b5800001]", "[32000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b5800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[b6800064]", "[b200000a]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[f8000001]", "[00000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[f8000001]", "[78000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[f8000001]", "[80000002]", "1", "00")
    self.bid32_quiet_less_unordered("0", "[f8000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "1.0", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "-1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "1.0e-96", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[1234566]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[1234567]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[6098967e]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[6098967f]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[60989680]", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[7c8f423f]", "1", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[7c8f4240]", "1", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "[7e100000]", "1", "01")
    self.bid32_quiet_less_unordered("0", "Infinity", "-9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "9.999999e-95", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "-9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "9.999999e96", "0", "00")
    self.bid32_quiet_less_unordered("0", "Infinity", "Inf", "0", "00")
    self.bid32_quiet_less_unordered("0", "[df800000]", "[df000000]", "0", "00")
    self.bid32_quiet_less_unordered("0", "[df800000]", "[df000000]", "0", "00")
  }

  private func bid32_quiet_less_unordered(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLessThanOrEqualTo(arg0, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_not_equal() {
    self.bid32_quiet_not_equal("0", "[00000000]", "[00000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[00000000]", "[80000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[00000001]", "[00000000]", "1", "00")
    self.bid32_quiet_not_equal("0", "[00000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[00000001]", "[80000000]", "1", "00")
    self.bid32_quiet_not_equal("0", "[00000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "1.0", "0", "00")
    self.bid32_quiet_not_equal("0", "1.0", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "1.0", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "1.0", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[1234566]", "0", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[1234566]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234566]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[1234567]", "0", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[1234567]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[1234567]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[2f8f423f]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[2f8f4240]", "[3200000a]", "0", "00")
    self.bid32_quiet_not_equal("0", "[2f8f4241]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[32000001]", "[7e000000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[32000002]", "[32000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[32000002]", "[32000003]", "1", "00")
    self.bid32_quiet_not_equal("0", "[32000002]", "[35800001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[32000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[3200000a]", "[2f8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[3200000a]", "[2f8f4240]", "0", "00")
    self.bid32_quiet_not_equal("0", "[3200000a]", "[2f8f4241]", "1", "00")
    self.bid32_quiet_not_equal("0", "[3200000a]", "[36800064]", "1", "00")
    self.bid32_quiet_not_equal("0", "[35800001]", "[32000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[35800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[36800064]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[6098967e]", "0", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[6098967e]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967e]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[6098967f]", "0", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[6098967f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[6098967f]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[60989680]", "0", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[60989680]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[60989680]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[78000001]", "[00000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[78000001]", "[78000002]", "0", "00")
    self.bid32_quiet_not_equal("0", "[78000001]", "[80000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[78000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f423f]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "[7c8f4240]", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[7e000000]", "[32000001]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "1.0", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "-1.0e-96", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "1.0e-96", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[1234566]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[1234567]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[6098967e]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[6098967f]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[60989680]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[7c8f423f]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[7c8f4240]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "-9.999999e-95", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "9.999999e-95", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "-9.999999e96", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "9.999999e96", "1", "01")
    self.bid32_quiet_not_equal("0", "[7e100000]", "Infinity", "1", "01")
    self.bid32_quiet_not_equal("0", "[80000000]", "[00000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[80000000]", "[80000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[80000001]", "[00000000]", "1", "00")
    self.bid32_quiet_not_equal("0", "[80000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[80000001]", "[80000000]", "1", "00")
    self.bid32_quiet_not_equal("0", "[80000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "-9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_not_equal("0", "[af8f423f]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[af8f4240]", "[b200000a]", "0", "00")
    self.bid32_quiet_not_equal("0", "[af8f4241]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b2000002]", "[35800001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b2000002]", "[b2000001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b2000002]", "[b2000003]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b2000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b200000a]", "[af8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b200000a]", "[af8f4240]", "0", "00")
    self.bid32_quiet_not_equal("0", "[b200000a]", "[af8f4241]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b200000a]", "[b6800064]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b5800001]", "[32000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b5800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[b6800064]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_equal("0", "[f8000001]", "[00000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[f8000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[f8000001]", "[80000002]", "1", "00")
    self.bid32_quiet_not_equal("0", "[f8000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "1.0", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "1.0e-96", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[1234566]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[1234567]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[6098967e]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[6098967f]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[60989680]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "[7e100000]", "1", "01")
    self.bid32_quiet_not_equal("0", "Infinity", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "9.999999e96", "1", "00")
    self.bid32_quiet_not_equal("0", "Infinity", "Inf", "0", "00")
    self.bid32_quiet_not_equal("0", "[00000000]", "[bf800000]", "0", "00")
    self.bid32_quiet_not_equal("0", "[00000000]", "[bf800000]", "0", "00")
  }

  private func bid32_quiet_not_equal(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isEqual(to: arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_not_greater() {
    self.bid32_quiet_not_greater("0", "[00000000]", "[00000001]", "1", "00")
    self.bid32_quiet_not_greater("0", "[00000000]", "[80000001]", "0", "00")
    self.bid32_quiet_not_greater("0", "[00000001]", "[00000000]", "0", "00")
    self.bid32_quiet_not_greater("0", "[00000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[00000001]", "[80000000]", "0", "00")
    self.bid32_quiet_not_greater("0", "[00000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[1234567]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[6098967e]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "-1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0e-96", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "1.0", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[1234566]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234566]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[1234567]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[1234567]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[2f8f423f]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_greater("0", "[2f8f4240]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_greater("0", "[2f8f4241]", "[3200000a]", "0", "00")
    self.bid32_quiet_not_greater("0", "[32000001]", "[7e000000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[32000002]", "[32000001]", "0", "00")
    self.bid32_quiet_not_greater("0", "[32000002]", "[32000003]", "1", "00")
    self.bid32_quiet_not_greater("0", "[32000002]", "[35800001]", "1", "00")
    self.bid32_quiet_not_greater("0", "[32000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_not_greater("0", "[3200000a]", "[2f8f423f]", "0", "00")
    self.bid32_quiet_not_greater("0", "[3200000a]", "[2f8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[3200000a]", "[2f8f4241]", "1", "00")
    self.bid32_quiet_not_greater("0", "[3200000a]", "[36800064]", "1", "00")
    self.bid32_quiet_not_greater("0", "[35800001]", "[32000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "[35800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "[36800064]", "[3200000a]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[1234567]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[6098967e]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967e]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[1234567]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[6098967e]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[6098967f]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[6098967f]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[60989680]", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[60989680]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[78000001]", "[00000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[78000001]", "[80000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "[78000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f423f]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "[7c8f4240]", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[7e000000]", "[32000001]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "1.0", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "-1.0e-96", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "1.0e-96", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[1234566]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[1234567]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[6098967e]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[6098967f]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[60989680]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[7c8f423f]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[7c8f4240]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "-9.999999e-95", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "9.999999e-95", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "-9.999999e96", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "9.999999e96", "1", "01")
    self.bid32_quiet_not_greater("0", "[7e100000]", "Infinity", "1", "01")
    self.bid32_quiet_not_greater("0", "[80000000]", "[00000001]", "1", "00")
    self.bid32_quiet_not_greater("0", "[80000000]", "[80000001]", "0", "00")
    self.bid32_quiet_not_greater("0", "[80000001]", "[00000000]", "1", "00")
    self.bid32_quiet_not_greater("0", "[80000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[80000001]", "[80000000]", "1", "00")
    self.bid32_quiet_not_greater("0", "[80000001]", "[f8000002]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e-95", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_greater("0", "-9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "9.999999e96", "Infinity", "1", "00")
    self.bid32_quiet_not_greater("0", "[af8f423f]", "[b200000a]", "0", "00")
    self.bid32_quiet_not_greater("0", "[af8f4240]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_greater("0", "[af8f4241]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b2000002]", "[35800001]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b2000002]", "[b2000001]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b2000002]", "[b2000003]", "0", "00")
    self.bid32_quiet_not_greater("0", "[b2000002]", "[b5800001]", "0", "00")
    self.bid32_quiet_not_greater("0", "[b200000a]", "[af8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b200000a]", "[af8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b200000a]", "[af8f4241]", "0", "00")
    self.bid32_quiet_not_greater("0", "[b200000a]", "[b6800064]", "0", "00")
    self.bid32_quiet_not_greater("0", "[b5800001]", "[32000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b5800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[b6800064]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_greater("0", "[f8000001]", "[00000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[f8000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[f8000001]", "[80000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "[f8000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "1.0", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "1.0e-96", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[1234566]", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[1234567]", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[6098967e]", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[6098967f]", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[60989680]", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "[7e100000]", "1", "01")
    self.bid32_quiet_not_greater("0", "Infinity", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "-9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "9.999999e96", "0", "00")
    self.bid32_quiet_not_greater("0", "Infinity", "Inf", "1", "00")
    self.bid32_quiet_not_greater("0", "[06800000]", "[df800000]", "1", "00")
    self.bid32_quiet_not_greater("0", "[06800000]", "[df800000]", "1", "00")
  }

  private func bid32_quiet_not_greater(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    // Notice switched order! 'arg1' is on before '.'.
    let result = arg1._isLess(than: arg0, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_quiet_not_less() {
    self.bid32_quiet_not_less("0", "[00000000]", "[00000001]", "0", "00")
    self.bid32_quiet_not_less("0", "[00000000]", "[80000001]", "1", "00")
    self.bid32_quiet_not_less("0", "[00000001]", "[00000000]", "1", "00")
    self.bid32_quiet_not_less("0", "[00000001]", "[78000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[00000001]", "[80000000]", "1", "00")
    self.bid32_quiet_not_less("0", "[00000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "1.0", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "1.0", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[60989680]", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "1.0e-96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "-1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "-1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "1.0e-96", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "1.0", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[1234566]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234566]", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[1234567]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[1234567]", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[2f8f423f]", "[3200000a]", "0", "00")
    self.bid32_quiet_not_less("0", "[2f8f4240]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_less("0", "[2f8f4241]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_less("0", "[32000001]", "[7e000000]", "1", "01")
    self.bid32_quiet_not_less("0", "[32000002]", "[32000001]", "1", "00")
    self.bid32_quiet_not_less("0", "[32000002]", "[32000003]", "0", "00")
    self.bid32_quiet_not_less("0", "[32000002]", "[35800001]", "0", "00")
    self.bid32_quiet_not_less("0", "[32000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_not_less("0", "[3200000a]", "[2f8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[3200000a]", "[2f8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[3200000a]", "[2f8f4241]", "0", "00")
    self.bid32_quiet_not_less("0", "[3200000a]", "[36800064]", "0", "00")
    self.bid32_quiet_not_less("0", "[35800001]", "[32000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[35800001]", "[b2000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[36800064]", "[3200000a]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[6098967e]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967e]", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[6098967f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[6098967f]", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[60989680]", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[60989680]", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[78000001]", "[00000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[78000001]", "[80000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[78000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "1.0", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f423f]", "Infinity", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "1.0", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "[7c8f4240]", "Infinity", "1", "00")
    self.bid32_quiet_not_less("0", "[7e000000]", "[32000001]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "1.0", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "-1.0e-96", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "1.0e-96", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[1234566]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[1234567]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[6098967e]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[6098967f]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[60989680]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[7c8f423f]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[7c8f4240]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "-9.999999e-95", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "9.999999e-95", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "-9.999999e96", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "9.999999e96", "1", "01")
    self.bid32_quiet_not_less("0", "[7e100000]", "Infinity", "1", "01")
    self.bid32_quiet_not_less("0", "[80000000]", "[00000001]", "0", "00")
    self.bid32_quiet_not_less("0", "[80000000]", "[80000001]", "1", "00")
    self.bid32_quiet_not_less("0", "[80000001]", "[00000000]", "0", "00")
    self.bid32_quiet_not_less("0", "[80000001]", "[78000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[80000001]", "[80000000]", "0", "00")
    self.bid32_quiet_not_less("0", "[80000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[60989680]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "9.999999e-95", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e-95", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "1.0", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "-1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "1.0e-96", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[1234566]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[1234567]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[6098967e]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[6098967f]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[60989680]", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "9.999999e96", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "-9.999999e96", "-9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "9.999999e-95", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "9.999999e96", "0", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "-9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "9.999999e96", "Infinity", "0", "00")
    self.bid32_quiet_not_less("0", "[af8f423f]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_less("0", "[af8f4240]", "[b200000a]", "1", "00")
    self.bid32_quiet_not_less("0", "[af8f4241]", "[b200000a]", "0", "00")
    self.bid32_quiet_not_less("0", "[b2000002]", "[35800001]", "0", "00")
    self.bid32_quiet_not_less("0", "[b2000002]", "[b2000001]", "0", "00")
    self.bid32_quiet_not_less("0", "[b2000002]", "[b2000003]", "1", "00")
    self.bid32_quiet_not_less("0", "[b2000002]", "[b5800001]", "1", "00")
    self.bid32_quiet_not_less("0", "[b200000a]", "[af8f423f]", "0", "00")
    self.bid32_quiet_not_less("0", "[b200000a]", "[af8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "[b200000a]", "[af8f4241]", "1", "00")
    self.bid32_quiet_not_less("0", "[b200000a]", "[b6800064]", "1", "00")
    self.bid32_quiet_not_less("0", "[b5800001]", "[32000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[b5800001]", "[b2000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[b6800064]", "[b200000a]", "0", "00")
    self.bid32_quiet_not_less("0", "[f8000001]", "[00000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[f8000001]", "[78000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[f8000001]", "[80000002]", "0", "00")
    self.bid32_quiet_not_less("0", "[f8000001]", "[f8000002]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "1.0", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "-1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "1.0e-96", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[1234566]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[1234567]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[6098967e]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[6098967f]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[60989680]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[7c8f423f]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[7c8f4240]", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "[7e100000]", "1", "01")
    self.bid32_quiet_not_less("0", "Infinity", "-9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "9.999999e-95", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "-9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "9.999999e96", "1", "00")
    self.bid32_quiet_not_less("0", "Infinity", "Inf", "1", "00")
    self.bid32_quiet_not_less("0", "[04800000]", "[81800000]", "1", "00")
    self.bid32_quiet_not_less("0", "[04800000]", "[81800000]", "1", "00")
  }

  private func bid32_quiet_not_less(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._isLess(than: arg1, status: &status)
    self.assertNotBool(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_rem() {
    self.bid32_rem("0", "[00000001]", "1.0", "[00000001]", "00")
    self.bid32_rem("0", "[00000800]", "[80000207]", "[8000001c]", "00")
    self.bid32_rem("0", "[00080001]", "1.0", "[00080001]", "00")
    self.bid32_rem("0", "0E+89", "1E-96", "[02800000]", "00")
    self.bid32_rem("0", "0E+89", "9.999999E+96", "[5f000000]", "00")
    self.bid32_rem("0", "0E+89", "Infinity", "[5f000000]", "00")
    self.bid32_rem("0", "1.0", "[00000001]", "[00000000]", "00")
    self.bid32_rem("0", "1.0", "[00080001]", "[80032a8c]", "00")
    self.bid32_rem("0", "1.0", "-1.0", "[32000000]", "00")
    self.bid32_rem("0", "1.0", "1.0", "[32000000]", "00")
    self.bid32_rem("0", "-1.0", "1.0", "[b2000000]", "00")
    self.bid32_rem("0", "1.0", "-1.0e-96", "[02000000]", "00")
    self.bid32_rem("0", "1.0", "1.0e-96", "[02000000]", "00")
    self.bid32_rem("0", "1.0", "[6098967f]", "[020f4240]", "00")
    self.bid32_rem("0", "1.0", "[60989680]", "[7c000000]", "01")
    self.bid32_rem("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_rem("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_rem("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_rem("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_rem("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_rem("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_rem("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_rem("0", "1.0", "[80000001]", "[00000000]", "00")
    self.bid32_rem("0", "1.0", "-9.999999e-95", "[000003e8]", "00")
    self.bid32_rem("0", "1.0", "9.999999e-95", "[000003e8]", "00")
    self.bid32_rem("0", "1.0", "-9.999999e96", "[3200000a]", "00")
    self.bid32_rem("0", "1.0", "9.999999e96", "[3200000a]", "00")
    self.bid32_rem("0", "1.0e-96", "1.0", "[0200000a]", "00")
    self.bid32_rem("0", "-1.0e-96", "1.0", "[8200000a]", "00")
    self.bid32_rem("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_rem("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_rem("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_rem("0", "1.234567E+95", "1E+90", "[df000003]", "00")
    self.bid32_rem("0", "1E+89", "1E+90", "[5f000001]", "00")
    self.bid32_rem("0", "[2f6bcdb3]", "[ebf7fe2f]", "[2f6bcdb3]", "00")
    self.bid32_rem("0", "[3c000000]", "[866d2bef]", "[06000000]", "00")
    self.bid32_rem("0", "[6098967f]", "1.0", "[6098967f]", "00")
    self.bid32_rem("0", "[60989680]", "1.0", "[02000000]", "00")
    self.bid32_rem("0", "[78000000]", "[0796bd0c]", "[7c000000]", "01")
    self.bid32_rem("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_rem("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_rem("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_rem("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_rem("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_rem("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_rem("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_rem("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_rem("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_rem("0", "[80000001]", "1.0", "[80000001]", "00")
    self.bid32_rem("0", "9.999999e-95", "1.0", "[6018967f]", "00")
    self.bid32_rem("0", "-9.999999e-95", "1.0", "[e018967f]", "00")
    self.bid32_rem("0", "9.999999e96", "1.0", "[32000000]", "00")
    self.bid32_rem("0", "-9.999999e96", "1.0", "[b2000000]", "00")
    self.bid32_rem("0", "[db800000]", "[77f06aff]", "[db800000]", "00")
    self.bid32_rem("0", "[debfe57f]", "[f8000000]", "[debfe57f]", "00")
    self.bid32_rem("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_rem("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_rem("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_rem("0", "Infinity", "0E+89", "[7c000000]", "01")
    self.bid32_rem("0", "Infinity", "NaN", "[7c000000]", "00")
  }

  private func bid32_rem(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._formRemainder(dividingBy: arg1, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_round_integral_nearest_away() {
    self.bid32_round_integral_nearest_away("0", "[00000001]", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "[00080001]", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "1.0", "[32800001]", "00")
    self.bid32_round_integral_nearest_away("0", "-1.0", "[b2800001]", "00")
    self.bid32_round_integral_nearest_away("0", "1.0e-96", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "-1.0e-96", "[b2800000]", "00")
    self.bid32_round_integral_nearest_away("0", "[6098967f]", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "[60989680]", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_round_integral_nearest_away("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_round_integral_nearest_away("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_round_integral_nearest_away("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_round_integral_nearest_away("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_round_integral_nearest_away("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_round_integral_nearest_away("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_round_integral_nearest_away("0", "[80000001]", "[b2800000]", "00")
    self.bid32_round_integral_nearest_away("0", "9.999999e-95", "[32800000]", "00")
    self.bid32_round_integral_nearest_away("0", "-9.999999e-95", "[b2800000]", "00")
    self.bid32_round_integral_nearest_away("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_round_integral_nearest_away("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_round_integral_nearest_away("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_round_integral_nearest_away("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_round_integral_nearest_away("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_round_integral_nearest_away(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.toNearestOrAwayFromZero, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_round_integral_nearest_even() {
    self.bid32_round_integral_nearest_even("0", "[00000001]", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "[00080001]", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "1.0", "[32800001]", "00")
    self.bid32_round_integral_nearest_even("0", "-1.0", "[b2800001]", "00")
    self.bid32_round_integral_nearest_even("0", "1.0e-96", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "-1.0e-96", "[b2800000]", "00")
    self.bid32_round_integral_nearest_even("0", "[6098967f]", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "[60989680]", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_round_integral_nearest_even("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_round_integral_nearest_even("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_round_integral_nearest_even("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_round_integral_nearest_even("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_round_integral_nearest_even("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_round_integral_nearest_even("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_round_integral_nearest_even("0", "[80000001]", "[b2800000]", "00")
    self.bid32_round_integral_nearest_even("0", "9.999999e-95", "[32800000]", "00")
    self.bid32_round_integral_nearest_even("0", "-9.999999e-95", "[b2800000]", "00")
    self.bid32_round_integral_nearest_even("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_round_integral_nearest_even("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_round_integral_nearest_even("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_round_integral_nearest_even("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_round_integral_nearest_even("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_round_integral_nearest_even(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.toNearestOrEven, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_round_integral_negative() {
    self.bid32_round_integral_negative("0", "[00000001]", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "[00080001]", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "1.0", "[32800001]", "00")
    self.bid32_round_integral_negative("0", "-1.0", "[b2800001]", "00")
    self.bid32_round_integral_negative("0", "1.0e-96", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "-1.0e-96", "[b2800001]", "00")
    self.bid32_round_integral_negative("0", "[6098967f]", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "[60989680]", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_round_integral_negative("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_round_integral_negative("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_round_integral_negative("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_round_integral_negative("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_round_integral_negative("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_round_integral_negative("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_round_integral_negative("0", "[80000001]", "[b2800001]", "00")
    self.bid32_round_integral_negative("0", "9.999999e-95", "[32800000]", "00")
    self.bid32_round_integral_negative("0", "-9.999999e-95", "[b2800001]", "00")
    self.bid32_round_integral_negative("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_round_integral_negative("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_round_integral_negative("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_round_integral_negative("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_round_integral_negative("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_round_integral_negative(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.down, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_round_integral_positive() {
    self.bid32_round_integral_positive("0", "[00000001]", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "[00080001]", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "1.0", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "-1.0", "[b2800001]", "00")
    self.bid32_round_integral_positive("0", "1.0e-96", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "-1.0e-96", "[b2800000]", "00")
    self.bid32_round_integral_positive("0", "[6098967f]", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "[60989680]", "[32800000]", "00")
    self.bid32_round_integral_positive("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_round_integral_positive("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_round_integral_positive("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_round_integral_positive("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_round_integral_positive("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_round_integral_positive("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_round_integral_positive("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_round_integral_positive("0", "[80000001]", "[b2800000]", "00")
    self.bid32_round_integral_positive("0", "9.999999e-95", "[32800001]", "00")
    self.bid32_round_integral_positive("0", "-9.999999e-95", "[b2800000]", "00")
    self.bid32_round_integral_positive("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_round_integral_positive("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_round_integral_positive("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_round_integral_positive("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_round_integral_positive("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_round_integral_positive(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.up, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_round_integral_zero() {
    self.bid32_round_integral_zero("0", "[00000001]", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "[00080001]", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "1.0", "[32800001]", "00")
    self.bid32_round_integral_zero("0", "-1.0", "[b2800001]", "00")
    self.bid32_round_integral_zero("0", "1.0e-96", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "-1.0e-96", "[b2800000]", "00")
    self.bid32_round_integral_zero("0", "[6098967f]", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "[60989680]", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_round_integral_zero("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_round_integral_zero("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_round_integral_zero("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_round_integral_zero("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_round_integral_zero("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_round_integral_zero("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_round_integral_zero("0", "[80000001]", "[b2800000]", "00")
    self.bid32_round_integral_zero("0", "9.999999e-95", "[32800000]", "00")
    self.bid32_round_integral_zero("0", "-9.999999e-95", "[b2800000]", "00")
    self.bid32_round_integral_zero("0", "9.999999e96", "[77f8967f]", "00")
    self.bid32_round_integral_zero("0", "-9.999999e96", "[f7f8967f]", "00")
    self.bid32_round_integral_zero("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_round_integral_zero("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_round_integral_zero("0", "[fe000000]", "[fc000000]", "01")
  }

  private func bid32_round_integral_zero(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._round(.towardZero, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_sameQuantum() {
    self.bid32_sameQuantum("0", "[00000001]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[00080001]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[08005235]", "[f8000000]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[00000001]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[00080001]", "0", "00")
    self.bid32_sameQuantum("0", "-1.0", "1.0", "1", "00")
    self.bid32_sameQuantum("0", "1.0", "-1.0", "1", "00")
    self.bid32_sameQuantum("0", "1.0", "1.0", "1", "00")
    self.bid32_sameQuantum("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[60989680]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7c000000]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7c8f423f]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7c8f4240]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7e100000]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7e100100]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7e8f423f]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[7e8f4240]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[80000001]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "9.999999e96", "0", "00")
    self.bid32_sameQuantum("0", "-1.0e-96", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "1.0e-96", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[fc100000]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[fc100100]", "0", "00")
    self.bid32_sameQuantum("0", "1.0", "[fe000000]", "0", "00")
    self.bid32_sameQuantum("0", "[6098967f]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[60989680]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7c000000]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7c8f423f]", "[7e100000]", "1", "00")
    self.bid32_sameQuantum("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_sameQuantum("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7e100000]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7e100100]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7e8f423f]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[7e8f4240]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[80000001]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "-9.999999e-95", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "9.999999e-95", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[fc100000]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[fc100100]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "[fe000000]", "1.0", "0", "00")
    self.bid32_sameQuantum("0", "Infinity", "NaN", "0", "00")
    self.bid32_sameQuantum("0", "Inf", "Inf", "1", "00")
  }

  private func bid32_sameQuantum(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0._sameQuantum(other: arg1)
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_scalbln() {
    self.bid32_scalbln("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("0", "[78000000]", "0", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "0", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "-1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "-1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7c000000]", "0", "[7c000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7c000000]", "0", "[7c000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7e000000]", "0", "[7c000000]", "01", longIntSize: "01")
    self.bid32_scalbln("0", "[7e000000]", "0", "[7c000000]", "01", longIntSize: "01")
    self.bid32_scalbln("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "9223372036854775807", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "9223372036854775807", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "9223372036854775807", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "-9223372036854775808", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "9223372036854775807", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
  }

  private func bid32_scalbln(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    longIntSize _longIntSize: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }
    guard let longIntSize = self.parseLongIntSize(_longIntSize, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._initByScaling(sign: .plus, exponent: arg1, significand: arg0, rounding: rounding, status: &status)
    _ = longIntSize // Never used; silence compiler warning
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_scalbn() {
    self.bid32_scalbn("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("0", "[00000001]", "1.0", "[00800001]", "00")
    self.bid32_scalbn("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("0", "[00080001]", "1.0", "[00880001]", "00")
    self.bid32_scalbn("0", "1.0", "[00000001]", "[3280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[00080001]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "-1.0", "[3180000a]", "00")
    self.bid32_scalbn("0", "1.0", "1.0", "[3280000a]", "00")
    self.bid32_scalbn("0", "-1.0", "1.0", "[b280000a]", "00")
    self.bid32_scalbn("0", "1.0", "-1.0e-96", "[3180000a]", "00")
    self.bid32_scalbn("0", "1.0", "1.0e-96", "[3280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[6098967f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[60989680]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c000000]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c8f423f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c8f4240]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e100000]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e100100]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e8f423f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e8f4240]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[80000001]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "-9.999999e-95", "[2d80000a]", "00")
    self.bid32_scalbn("0", "1.0", "9.999999e-95", "[3680000a]", "00")
    self.bid32_scalbn("0", "1.0", "-9.999999e96", "[2d80000a]", "00")
    self.bid32_scalbn("0", "1.0", "9.999999e96", "[3680000a]", "00")
    self.bid32_scalbn("0", "1.0e-96", "1.0", "[0280000a]", "00")
    self.bid32_scalbn("0", "-1.0e-96", "1.0", "[8280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[fc100000]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "[fc100100]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "[fe000000]", "[00000000]", "30")
    self.bid32_scalbn("0", "1E+89", "2", "[5f80000a]", "00")
    self.bid32_scalbn("0", "[6098967f]", "1.0", "[60b8967f]", "00")
    self.bid32_scalbn("0", "[60989680]", "1.0", "[02800000]", "00")
    self.bid32_scalbn("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000")
    self.bid32_scalbn("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_scalbn("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "00")
    self.bid32_scalbn("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_scalbn("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_scalbn("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[80000001]", "1.0", "[80800001]", "00")
    self.bid32_scalbn("0", "9.999999e-95", "1.0", "[6038967f]", "00")
    self.bid32_scalbn("0", "-9.999999e-95", "1.0", "[e038967f]", "00")
    self.bid32_scalbn("0", "9.999999e96", "1.0", "[78000000]", "28")
    self.bid32_scalbn("0", "-9.999999e96", "1.0", "[f8000000]", "28")
    self.bid32_scalbn("0", "[a0020002]", "128", "[df940014]", "00")
    self.bid32_scalbn("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_scalbn("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_scalbn("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_scalbn("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000")
    self.bid32_scalbn("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000")
    self.bid32_scalbn("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000")
    self.bid32_scalbn("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000")
    self.bid32_scalbn("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000")
    self.bid32_scalbn("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000")
    self.bid32_scalbn("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000")
    self.bid32_scalbn("4", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "0.0e10", "-50", "[1e000000]", "00")
  }

  private func bid32_scalbn(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal32._initByScaling(sign: .plus, exponent: Int(arg1), significand: arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_sqrt() {
    self.bid32_sqrt("0", "[00000001]", "[163040A6]", "20", ulp: "-3.3983162067e-01")
    self.bid32_sqrt("0", "[00000001]", "[163040a6]", "20", ulp: "-3.398316e-01")
    self.bid32_sqrt("0", "[00000003]", "[1653936A]", "20", ulp: "-4.2494833887e-01")
    self.bid32_sqrt("0", "[00051615]", "[179BDBCD]", "20", ulp: "-5.4520603682e-02")
    self.bid32_sqrt("0", "[00080001]", "[17a2f048]", "20", ulp: "-2.073811e-01")
    self.bid32_sqrt("0", "[03000001]", "[17B040A6]", "20", ulp: "-3.3983162067e-01")
    self.bid32_sqrt("0", "[03000003]", "[17D3936A]", "20", ulp: "-4.2494833887e-01")
    self.bid32_sqrt("0", "1.0", "[3200000a]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("0", "-1.0", "[7c000000]", "01")
    self.bid32_sqrt("0", "1.0e-96", "[1a00000a]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("0", "-1.0e-96", "[7c000000]", "01")
    self.bid32_sqrt("0", "1.1000E+94", "[471000e9]", "20", ulp: "-1.518298e-01")
    self.bid32_sqrt("0", "[3180013A]", "[2F9B09E5]", "20", ulp: "-4.8533306496e-01")
    self.bid32_sqrt("0", "[3180013B]", "[2F9B14E8]", "20", ulp: "-6.5070115187e-02")
    self.bid32_sqrt("0", "4.000001", "[2f9e8480]", "20", ulp: "2.500000e-01")
    self.bid32_sqrt("0", "4.0", "[32000014]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("0", "[5FB2DCD5]", "[479BDBCE]", "20", ulp: "-2.3293654149e-01")
    self.bid32_sqrt("0", "[6098967f]", "[6638967f]", "20", ulp: "5.000000e-01")
    self.bid32_sqrt("0", "[60989680]", "[1a000000]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("0", "[6BD8967F]", "[6BD8967F]", "20", ulp: "4.9999998750e-01")
    self.bid32_sqrt("0", "[77F8967F]", "[47B040A6]", "20", ulp: "-4.9794550763e-01")
    self.bid32_sqrt("0", "[7c000000]", "[7c000000]", "00")
    self.bid32_sqrt("0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_sqrt("0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_sqrt("0", "[7e100000]", "[7c000000]", "01")
    self.bid32_sqrt("0", "[7e100100]", "[7c000100]", "01")
    self.bid32_sqrt("0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_sqrt("0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_sqrt("0", "[80000001]", "[7c000000]", "01")
    self.bid32_sqrt("0", "9.999999e-95", "[65f8967f]", "20", ulp: "5.000000e-01")
    self.bid32_sqrt("0", "-9.999999e-95", "[7c000000]", "01")
    self.bid32_sqrt("0", "9.999999e96", "[47b040a6]", "20", ulp: "-4.979455e-01")
    self.bid32_sqrt("0", "-9.999999e96", "[7c000000]", "01")
    self.bid32_sqrt("0", "[fc100000]", "[fc000000]", "00")
    self.bid32_sqrt("0", "[fc100100]", "[fc000100]", "00")
    self.bid32_sqrt("0", "[fe000000]", "[fc000000]", "01")
    self.bid32_sqrt("1", "[00000001]", "[163040A5]", "20", ulp: "6.6016837933e-01")
    self.bid32_sqrt("1", "[00000003]", "[16539369]", "20", ulp: "5.7505166113e-01")
    self.bid32_sqrt("1", "[00051615]", "[179BDBCC]", "20", ulp: "9.4547939632e-01")
    self.bid32_sqrt("1", "[03000001]", "[17B040A5]", "20", ulp: "6.6016837933e-01")
    self.bid32_sqrt("1", "[03000003]", "[17D39369]", "20", ulp: "5.7505166113e-01")
    self.bid32_sqrt("1", "1.1000E+94", "[471000e8]", "20", ulp: "8.481702e-01")
    self.bid32_sqrt("1", "[3180013A]", "[2F9B09E4]", "20", ulp: "5.1466693504e-01")
    self.bid32_sqrt("1", "[3180013B]", "[2F9B14E7]", "20", ulp: "9.3492988481e-01")
    self.bid32_sqrt("1", "4.000001", "[2f9e8480]", "20", ulp: "2.500000e-01")
    self.bid32_sqrt("1", "4.0", "[32000014]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("1", "[5FB2DCD5]", "[479BDBCD]", "20", ulp: "7.6706345851e-01")
    self.bid32_sqrt("1", "[77F8967F]", "[47B040A5]", "20", ulp: "5.0205449237e-01")
    self.bid32_sqrt("2", "[00000001]", "[163040A6]", "20", ulp: "-3.3983162067e-01")
    self.bid32_sqrt("2", "[00000003]", "[1653936A]", "20", ulp: "-4.2494833887e-01")
    self.bid32_sqrt("2", "[00051615]", "[179BDBCD]", "20", ulp: "-5.4520603682e-02")
    self.bid32_sqrt("2", "[03000001]", "[17B040A6]", "20", ulp: "-3.3983162067e-01")
    self.bid32_sqrt("2", "[03000003]", "[17D3936A]", "20", ulp: "-4.2494833887e-01")
    self.bid32_sqrt("2", "1.1000E+94", "[471000e9]", "20", ulp: "-1.518298e-01")
    self.bid32_sqrt("2", "[3180013A]", "[2F9B09E5]", "20", ulp: "-4.8533306496e-01")
    self.bid32_sqrt("2", "[3180013B]", "[2F9B14E8]", "20", ulp: "-6.5070115187e-02")
    self.bid32_sqrt("2", "4.000001", "[2f9e8481]", "20", ulp: "-7.500000e-01")
    self.bid32_sqrt("2", "4.0", "[32000014]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("2", "[5FB2DCD5]", "[479BDBCE]", "20", ulp: "-2.3293654149e-01")
    self.bid32_sqrt("2", "[77F8967F]", "[47B040A6]", "20", ulp: "-4.9794550763e-01")
    self.bid32_sqrt("3", "[00000001]", "[163040A5]", "20", ulp: "6.6016837933e-01")
    self.bid32_sqrt("3", "[00000003]", "[16539369]", "20", ulp: "5.7505166113e-01")
    self.bid32_sqrt("3", "[00051616]", "[179BDBCF]", "20", ulp: "6.8409149919e-01")
    self.bid32_sqrt("3", "[03000001]", "[17B040A5]", "20", ulp: "6.6016837933e-01")
    self.bid32_sqrt("3", "[03000003]", "[17D39369]", "20", ulp: "5.7505166113e-01")
    self.bid32_sqrt("3", "1.1000E+94", "[471000e8]", "20", ulp: "8.481702e-01")
    self.bid32_sqrt("3", "[3180013A]", "[2F9B09E4]", "20", ulp: "5.1466693504e-01")
    self.bid32_sqrt("3", "[3180013B]", "[2F9B14E7]", "20", ulp: "9.3492988481e-01")
    self.bid32_sqrt("3", "4.000001", "[2f9e8480]", "20", ulp: "2.500000e-01")
    self.bid32_sqrt("3", "4.0", "[32000014]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("3", "[5FB2DCD5]", "[479BDBCD]", "20", ulp: "7.6706345851e-01")
    self.bid32_sqrt("3", "[77F8967F]", "[47B040A5]", "20", ulp: "5.0205449237e-01")
    self.bid32_sqrt("4", "1.1000E+94", "[471000e9]", "20", ulp: "-1.518298e-01")
    self.bid32_sqrt("4", "4.000001", "[2f9e8480]", "20", ulp: "2.500000e-01")
    self.bid32_sqrt("4", "4.0", "[32000014]", "00", ulp: "0.000000e-01")
    self.bid32_sqrt("0", "-Infinity", "[7c000000]", "01")
    self.bid32_sqrt("2", "9999999E+7", "1000000E+1", "20")
  }

  private func bid32_sqrt(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._squareRoot(rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_sub() {
    self.bid32_sub("0", "[00000001]", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "[00080001]", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "1.0", "[00000001]", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "[00080001]", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "1.0", "[32000000]", "00")
    self.bid32_sub("0", "1.0", "-1.0", "[32000014]", "00")
    self.bid32_sub("0", "-1.0", "1.0", "[b2000014]", "00")
    self.bid32_sub("0", "1.0", "-1.0e-96", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "1.0e-96", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "[6098967f]", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "[60989680]", "[2f8f4240]", "00")
    self.bid32_sub("0", "1.0", "[7c000000]", "[7c000000]", "00")
    self.bid32_sub("0", "1.0", "[7c8f423f]", "[7c0f423f]", "00")
    self.bid32_sub("0", "1.0", "[7c8f4240]", "[7c000000]", "00")
    self.bid32_sub("0", "1.0", "[7e100000]", "[7c000000]", "01")
    self.bid32_sub("0", "1.0", "[7e100100]", "[7c000100]", "01")
    self.bid32_sub("0", "1.0", "[7e8f423f]", "[7c0f423f]", "01")
    self.bid32_sub("0", "1.0", "[7e8f4240]", "[7c000000]", "01")
    self.bid32_sub("0", "1.0", "[80000001]", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "-9.999999e-95", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "9.999999e-95", "[2f8f4240]", "20")
    self.bid32_sub("0", "1.0", "-9.999999e96", "[77f8967f]", "20")
    self.bid32_sub("0", "1.0", "9.999999e96", "[f7f8967f]", "20")
    self.bid32_sub("0", "-1.0e-96", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "1.0e-96", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "1.0", "[fc100000]", "[fc000000]", "00")
    self.bid32_sub("0", "1.0", "[fc100100]", "[fc000100]", "00")
    self.bid32_sub("0", "1.0", "[fe000000]", "[fc000000]", "01")
    self.bid32_sub("0", "[6098967f]", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "[60989680]", "1.0", "[af8f4240]", "00")
    self.bid32_sub("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_sub("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_sub("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "01")
    self.bid32_sub("0", "[7c8f423f]", "Infinity", "[7c0f423f]", "00")
    self.bid32_sub("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_sub("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_sub("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_sub("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_sub("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_sub("0", "[80000001]", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "-9.999999e-95", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "9.999999e-95", "1.0", "[af8f4240]", "20")
    self.bid32_sub("0", "9.999999e96", "1.0", "[77f8967f]", "20")
    self.bid32_sub("0", "-9.999999e96", "1.0", "[f7f8967f]", "20")
    self.bid32_sub("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_sub("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_sub("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_sub("0", "Infinity", "NaN", "[7c000000]", "00")
  }

  private func bid32_sub(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._subtracting(other: arg1, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_bid128() {
    self.bid32_to_bid128("0", "[3d000000]", "[306a0000000000000000000000000000]", "00")
    self.bid32_to_bid128("0", "[7c000100]", "[7c0000033b2e3c9fd0803ce800000000]", "00")
    self.bid32_to_bid128("0", "[92229c08]", "[afbe0000000000000000000000229c08]", "00")
    self.bid32_to_bid128("0", "[e5c005c3]", "[afd200000000000000000000008005c3]", "00")
    self.bid32_to_bid128("0", "[fe000000]", "[fc000000000000000000000000000000]", "01")
    self.bid32_to_bid128("0", "-Infinity", "[f8000000000000000000000000000000]", "00")
  }

  private func bid32_to_bid128(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal128._fromDecimal32(arg0, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_bid64() {
    self.bid32_to_bid64("0", "[00000000]", "[2520000000000000]", "00")
    self.bid32_to_bid64("0", "[00000001]", "[2520000000000001]", "00")
    self.bid32_to_bid64("0", "[00000066]", "[2520000000000066]", "00")
    self.bid32_to_bid64("0", "[00001231]", "[2520000000001231]", "00")
    self.bid32_to_bid64("0", "[000027db]", "[25200000000027db]", "00")
    self.bid32_to_bid64("0", "[000f1b60]", "[25200000000f1b60]", "00")
    self.bid32_to_bid64("0", "[0012d687]", "[252000000012d687]", "00")
    self.bid32_to_bid64("0", "[02800000]", "[25c0000000000000]", "00")
    self.bid32_to_bid64("0", "[02800001]", "[25c0000000000001]", "00")
    self.bid32_to_bid64("0", "[2f8f4240]", "[31000000000f4240]", "00")
    self.bid32_to_bid64("0", "[2f9e8480]", "[31000000001e8480]", "00")
    self.bid32_to_bid64("0", "[300186a0]", "[31200000000186a0]", "00")
    self.bid32_to_bid64("0", "[30030d40]", "[3120000000030d40]", "00")
    self.bid32_to_bid64("0", "[30802710]", "[3140000000002710]", "00")
    self.bid32_to_bid64("0", "[30804e20]", "[3140000000004e20]", "00")
    self.bid32_to_bid64("0", "[310003e8]", "[31600000000003e8]", "00")
    self.bid32_to_bid64("0", "[310007d0]", "[31600000000007d0]", "00")
    self.bid32_to_bid64("0", "[31800064]", "[3180000000000064]", "00")
    self.bid32_to_bid64("0", "[318000c8]", "[31800000000000c8]", "00")
    self.bid32_to_bid64("0", "[3200000a]", "[31a000000000000a]", "00")
    self.bid32_to_bid64("0", "[32000014]", "[31a0000000000014]", "00")
    self.bid32_to_bid64("0", "[32800001]", "[31c0000000000001]", "00")
    self.bid32_to_bid64("0", "[32800002]", "[31c0000000000002]", "00")
    self.bid32_to_bid64("0", "[32800003]", "[31c0000000000003]", "00")
    self.bid32_to_bid64("0", "[32800004]", "[31c0000000000004]", "00")
    self.bid32_to_bid64("0", "[32800008]", "[31c0000000000008]", "00")
    self.bid32_to_bid64("0", "[32800010]", "[31c0000000000010]", "00")
    self.bid32_to_bid64("0", "[32800020]", "[31c0000000000020]", "00")
    self.bid32_to_bid64("0", "[32800040]", "[31c0000000000040]", "00")
    self.bid32_to_bid64("0", "[32800080]", "[31c0000000000080]", "00")
    self.bid32_to_bid64("0", "[32800100]", "[31c0000000000100]", "00")
    self.bid32_to_bid64("0", "[32800200]", "[31c0000000000200]", "00")
    self.bid32_to_bid64("0", "[32800400]", "[31c0000000000400]", "00")
    self.bid32_to_bid64("0", "[32800800]", "[31c0000000000800]", "00")
    self.bid32_to_bid64("0", "[32801000]", "[31c0000000001000]", "00")
    self.bid32_to_bid64("0", "[32802000]", "[31c0000000002000]", "00")
    self.bid32_to_bid64("0", "[32804000]", "[31c0000000004000]", "00")
    self.bid32_to_bid64("0", "[32808000]", "[31c0000000008000]", "00")
    self.bid32_to_bid64("0", "[32810000]", "[31c0000000010000]", "00")
    self.bid32_to_bid64("0", "[32820000]", "[31c0000000020000]", "00")
    self.bid32_to_bid64("0", "[32840000]", "[31c0000000040000]", "00")
    self.bid32_to_bid64("0", "[32880000]", "[31c0000000080000]", "00")
    self.bid32_to_bid64("0", "[32900000]", "[31c0000000100000]", "00")
    self.bid32_to_bid64("0", "[32a00000]", "[31c0000000200000]", "00")
    self.bid32_to_bid64("0", "[32c00000]", "[31c0000000400000]", "00")
    self.bid32_to_bid64("0", "[3319999a]", "[31e000000019999a]", "00")
    self.bid32_to_bid64("0", "[33333333]", "[31e0000000333333]", "00")
    self.bid32_to_bid64("0", "[33666666]", "[31e0000000666666]", "00")
    self.bid32_to_bid64("0", "[33947ae1]", "[3200000000147ae1]", "00")
    self.bid32_to_bid64("0", "[33a8f5c3]", "[320000000028f5c3]", "00")
    self.bid32_to_bid64("0", "[5f000000]", "[3ce0000000000000]", "00")
    self.bid32_to_bid64("0", "[5f000001]", "[3ce0000000000001]", "00")
    self.bid32_to_bid64("0", "[5f12d687]", "[3ce000000012d687]", "00")
    self.bid32_to_bid64("0", "[5f800000]", "[3d00000000000000]", "00")
    self.bid32_to_bid64("0", "[5f800001]", "[3d00000000000001]", "00")
    self.bid32_to_bid64("0", "[5f8f4241]", "[3d000000000f4241]", "00")
    self.bid32_to_bid64("0", "[5f92d687]", "[3d0000000012d687]", "00")
    self.bid32_to_bid64("0", "[6018967f]", "[252000000098967f]", "00")
    self.bid32_to_bid64("0", "[607fffff]", "[2580000000000000]", "00")
    self.bid32_to_bid64("0", "[658c3437]", "[2aa00000008c3437]", "00")
    self.bid32_to_bid64("0", "[6ca00000]", "[31c0000000800000]", "00")
    self.bid32_to_bid64("0", "[77eae409]", "[3d000000008ae409]", "00")
    self.bid32_to_bid64("0", "[77f8967e]", "[3d0000000098967e]", "00")
    self.bid32_to_bid64("0", "[77f8967f]", "[3d0000000098967f]", "00")
    self.bid32_to_bid64("0", "[78000000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78000001]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78001000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[780fffff]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78f00000]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78f00001]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[78ffffff]", "[7800000000000000]", "00")
    self.bid32_to_bid64("0", "[7c000000]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7c000001]", "[7c0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[7c000100]", "[7c00003b9aca0000]", "00")
    self.bid32_to_bid64("0", "[7c001000]", "[7c0003b9aca00000]", "00")
    self.bid32_to_bid64("0", "[7c0fffff]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7cf00000]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7cf00001]", "[7c0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[7cffffff]", "[7c00000000000000]", "00")
    self.bid32_to_bid64("0", "[7e000000]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7e000001]", "[7c0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[7e000100]", "[7c00003b9aca0000]", "01")
    self.bid32_to_bid64("0", "[7e0fffff]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7ef00000]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[7ef00001]", "[7c0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[7effffff]", "[7c00000000000000]", "01")
    self.bid32_to_bid64("0", "[80000000]", "[a520000000000000]", "00")
    self.bid32_to_bid64("0", "[80000001]", "[a520000000000001]", "00")
    self.bid32_to_bid64("0", "[800007d0]", "[a5200000000007d0]", "00")
    self.bid32_to_bid64("0", "[800027db]", "[a5200000000027db]", "00")
    self.bid32_to_bid64("0", "[808000c8]", "[a5400000000000c8]", "00")
    self.bid32_to_bid64("0", "[81000014]", "[a560000000000014]", "00")
    self.bid32_to_bid64("0", "[81800002]", "[a580000000000002]", "00")
    self.bid32_to_bid64("0", "[df8f4241]", "[bd000000000f4241]", "00")
    self.bid32_to_bid64("0", "[df92d687]", "[bd0000000012d687]", "00")
    self.bid32_to_bid64("0", "[f420b31f]", "[b94000000080b31f]", "00")
    self.bid32_to_bid64("0", "[f71fffff]", "[bc20000000000000]", "00")
    self.bid32_to_bid64("0", "[f7f8967e]", "[bd0000000098967e]", "00")
    self.bid32_to_bid64("0", "[f7f8967f]", "[bd0000000098967f]", "00")
    self.bid32_to_bid64("0", "[f8000000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8000001]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8001000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f80fffff]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8f00000]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8f00001]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[f8ffffff]", "[f800000000000000]", "00")
    self.bid32_to_bid64("0", "[fc000000]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fc000001]", "[fc0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[fc001000]", "[fc0003b9aca00000]", "00")
    self.bid32_to_bid64("0", "[fc0fffff]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fcf00000]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fcf00001]", "[fc0000003b9aca00]", "00")
    self.bid32_to_bid64("0", "[fcffffff]", "[fc00000000000000]", "00")
    self.bid32_to_bid64("0", "[fe000000]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fe000001]", "[fc0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[fe000100]", "[fc00003b9aca0000]", "01")
    self.bid32_to_bid64("0", "[fe0fffff]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fef00000]", "[fc00000000000000]", "01")
    self.bid32_to_bid64("0", "[fef00001]", "[fc0000003b9aca00]", "01")
    self.bid32_to_bid64("0", "[feffffff]", "[fc00000000000000]", "01")
  }

  private func bid32_to_bid64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Decimal64._fromDecimal32(arg0, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_binary32() {
    self.bid32_to_binary32("0", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[00000001]", "[00000000]", "30")
    self.bid32_to_binary32("0", "[00989680]", "[00000000]", "30")
    self.bid32_to_binary32("0", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[189ABA47]", "[00000000]", "30")
    self.bid32_to_binary32("0", "[189ABA49]", "[00000000]", "30")
    self.bid32_to_binary32("0", "[18EAE91C]", "[00000000]", "30")
    self.bid32_to_binary32("0", "[18EAE923]", "[00000001]", "30")
    self.bid32_to_binary32("0", "[1910095E]", "[00000001]", "30")
    self.bid32_to_binary32("0", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[191561D2]", "[00000001]", "30")
    self.bid32_to_binary32("0", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[192012BC]", "[00000002]", "30")
    self.bid32_to_binary32("0", "[1A0036BD]", "[00000001]", "30")
    self.bid32_to_binary32("0", "[1A6D79F8]", "[00000200]", "30")
    self.bid32_to_binary32("0", "[1A6D79FF]", "[00000200]", "30")
    self.bid32_to_binary32("0", "[1aa473d5]", "[000006a9]", "0x30")
    self.bid32_to_binary32("0", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("0", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("0", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("0", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("0", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("0", "[1DDBD5E3]", "[05000000]", "20")
    self.bid32_to_binary32("0", "[1df6a83d]", "[0525624c]", "0x20")
    self.bid32_to_binary32("0", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("0", "[210fc4d3]", "[0f519a99]", "0x20")
    self.bid32_to_binary32("0", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("0", "[243fa10d]", "[1a49a610]", "0x20")
    self.bid32_to_binary32("0", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("0", "[2794fb5b]", "[251e88d1]", "0x20")
    self.bid32_to_binary32("0", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2af5929a]", "[3053ccd2]", "0x20")
    self.bid32_to_binary32("0", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("0", "[2e1b16d6]", "[3ae8b1ca]", "0x20")
    self.bid32_to_binary32("0", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("0", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("0", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("0", "[32800001]", "[3F800000]", "00")
    self.bid32_to_binary32("0", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("0", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("0", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("0", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("0", "[3281ffff]", "[47FFFF80]", "00")
    self.bid32_to_binary32("0", "[3283ffff]", "[487FFFC0]", "00")
    self.bid32_to_binary32("0", "[3287ffff]", "[48FFFFE0]", "00")
    self.bid32_to_binary32("0", "[328fffff]", "[497FFFF0]", "00")
    self.bid32_to_binary32("0", "[3297ffff]", "[49BFFFF8]", "00")
    self.bid32_to_binary32("0", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("0", "[3319999A]", "[4B800002]", "00")
    self.bid32_to_binary32("0", "[34b46daf]", "[50ffff90]", "0x20")
    self.bid32_to_binary32("0", "[3800AFEC]", "[59800001]", "20")
    self.bid32_to_binary32("0", "[391C25C2]", "[5F7FFFFC]", "20")
    self.bid32_to_binary32("0", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("0", "[3b281625]", "[665e8658]", "0x20")
    self.bid32_to_binary32("0", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("0", "[3e3f69ed]", "[70a7dad8]", "0x20")
    self.bid32_to_binary32("0", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("0", "[404F3A69]", "[77800000]", "20")
    self.bid32_to_binary32("0", "[408FD87B]", "[77FFFFFA]", "20")
    self.bid32_to_binary32("0", "[42B3DEFD]", "[7F7FBE78]", "20")
    self.bid32_to_binary32("0", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("0", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("0", "[42CDE26C]", "[7F800000]", "28")
    self.bid32_to_binary32("0", "[43175D87]", "[7F800000]", "28")
    self.bid32_to_binary32("0", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("0", "[6c58962c]", "[461c3faa]", "0x20")
    self.bid32_to_binary32("0", "[6CA00000]", "[4B000000]", "00")
    self.bid32_to_binary32("0", "[6CB89680]", "[00000000]", "00")
    self.bid32_to_binary32("0", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("0", "[6DC9705F]", "[5A000000]", "20")
    self.bid32_to_binary32("0", "[6de25ddb]", "[5b97c448]", "0x20")
    self.bid32_to_binary32("0", "[6E2CBCCC]", "[5F000000]", "20")
    self.bid32_to_binary32("0", "[7081CEB3]", "[7E800000]", "20")
    self.bid32_to_binary32("0", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("0", "[77F8967F]", "[7F800000]", "28")
    self.bid32_to_binary32("0", "[77f89680]", "[00000000]", "00")
    self.bid32_to_binary32("0", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("0", "[7c000000]", "[7FC00000]", "00")
    self.bid32_to_binary32("0", "[7c0F423F]", "[7FFD08FC]", "00")
    self.bid32_to_binary32("0", "[7c0F4240]", "[7FC00000]", "00")
    self.bid32_to_binary32("0", "[7e000000]", "[7FC00000]", "01")
    self.bid32_to_binary32("0", "[7e0F423F]", "[7FFD08FC]", "01")
    self.bid32_to_binary32("0", "[7e0F4240]", "[7FC00000]", "01")
    self.bid32_to_binary32("0", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[9aa473d5]", "[800006a9]", "0x30")
    self.bid32_to_binary32("0", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("0", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("0", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("0", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("0", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("0", "[9df6a83d]", "[8525624c]", "0x20")
    self.bid32_to_binary32("0", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("0", "[a10fc4d3]", "[8f519a99]", "0x20")
    self.bid32_to_binary32("0", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("0", "[a43fa10d]", "[9a49a610]", "0x20")
    self.bid32_to_binary32("0", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("0", "[a794fb5b]", "[a51e88d1]", "0x20")
    self.bid32_to_binary32("0", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[aaf5929a]", "[b053ccd2]", "0x20")
    self.bid32_to_binary32("0", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("0", "[ae1b16d6]", "[bae8b1ca]", "0x20")
    self.bid32_to_binary32("0", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("0", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("0", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("0", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("0", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("0", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("0", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("0", "[b4b46daf]", "[d0ffff90]", "0x20")
    self.bid32_to_binary32("0", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("0", "[bb281625]", "[e65e8658]", "0x20")
    self.bid32_to_binary32("0", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("0", "[be3f69ed]", "[f0a7dad8]", "0x20")
    self.bid32_to_binary32("0", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("0", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("0", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("0", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("0", "[ec58962c]", "[c61c3faa]", "0x20")
    self.bid32_to_binary32("0", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("0", "[ede25ddb]", "[db97c448]", "0x20")
    self.bid32_to_binary32("0", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("0", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("1", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[191561d2]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("1", "[1aa473d5]", "[000006a8]", "0x30")
    self.bid32_to_binary32("1", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("1", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("1", "[1c91efc7]", "[00800004]", "0x20")
    self.bid32_to_binary32("1", "[1ca3df8c]", "[00fffffa]", "0x20")
    self.bid32_to_binary32("1", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("1", "[1df6a83d]", "[0525624c]", "0x20")
    self.bid32_to_binary32("1", "[1f863bfd]", "[09a9b6ee]", "0x20")
    self.bid32_to_binary32("1", "[210fc4d3]", "[0f519a99]", "0x20")
    self.bid32_to_binary32("1", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("1", "[243fa10d]", "[1a49a60f]", "0x20")
    self.bid32_to_binary32("1", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("1", "[2794fb5b]", "[251e88d0]", "0x20")
    self.bid32_to_binary32("1", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("1", "[2af5929a]", "[3053ccd1]", "0x20")
    self.bid32_to_binary32("1", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("1", "[2e1b16d6]", "[3ae8b1c9]", "0x20")
    self.bid32_to_binary32("1", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("1", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("1", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("1", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("1", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("1", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("1", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("1", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("1", "[34b46daf]", "[50ffff90]", "0x20")
    self.bid32_to_binary32("1", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("1", "[3b281625]", "[665e8658]", "0x20")
    self.bid32_to_binary32("1", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("1", "[3e3f69ed]", "[70a7dad7]", "0x20")
    self.bid32_to_binary32("1", "[3fba1d8a]", "[75963989]", "0x20")
    self.bid32_to_binary32("1", "[42b3ec47]", "[7f7ffffc]", "0x20")
    self.bid32_to_binary32("1", "[42b3ec48]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("1", "[6628c3f7]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("1", "[6c58962c]", "[461c3fa9]", "0x20")
    self.bid32_to_binary32("1", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("1", "[6de25ddb]", "[5b97c448]", "0x20")
    self.bid32_to_binary32("1", "[77f8967f]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("1", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("1", "[80000001]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[83000001]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[83800001]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[991561d3]", "[80000002]", "0x30")
    self.bid32_to_binary32("1", "[9aa473d5]", "[800006a9]", "0x30")
    self.bid32_to_binary32("1", "[9c8f350e]", "[806c85c5]", "0x30")
    self.bid32_to_binary32("1", "[9c91efc6]", "[807ffffe]", "0x30")
    self.bid32_to_binary32("1", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("1", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("1", "[9ca3df8d]", "[81000002]", "0x20")
    self.bid32_to_binary32("1", "[9df6a83d]", "[8525624d]", "0x20")
    self.bid32_to_binary32("1", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("1", "[a10fc4d3]", "[8f519a9a]", "0x20")
    self.bid32_to_binary32("1", "[a2eb6643]", "[95ae43fe]", "0x20")
    self.bid32_to_binary32("1", "[a43fa10d]", "[9a49a610]", "0x20")
    self.bid32_to_binary32("1", "[a607dc84]", "[9f734c58]", "0x20")
    self.bid32_to_binary32("1", "[a794fb5b]", "[a51e88d1]", "0x20")
    self.bid32_to_binary32("1", "[a96a9c7b]", "[ab44a9be]", "0x20")
    self.bid32_to_binary32("1", "[aaf5929a]", "[b053ccd2]", "0x20")
    self.bid32_to_binary32("1", "[ac866feb]", "[b4e27cf6]", "0x20")
    self.bid32_to_binary32("1", "[ae1b16d6]", "[bae8b1ca]", "0x20")
    self.bid32_to_binary32("1", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("1", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("1", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("1", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("1", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("1", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("1", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("1", "[b4b46daf]", "[d0ffff91]", "0x20")
    self.bid32_to_binary32("1", "[b964ab72]", "[e064e57c]", "0x20")
    self.bid32_to_binary32("1", "[bb281625]", "[e65e8659]", "0x20")
    self.bid32_to_binary32("1", "[bcf57036]", "[ec1f289b]", "0x20")
    self.bid32_to_binary32("1", "[be3f69ed]", "[f0a7dad8]", "0x20")
    self.bid32_to_binary32("1", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("1", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("1", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("1", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[ebf887d3]", "[c11ff09d]", "0x20")
    self.bid32_to_binary32("1", "[ec58962c]", "[c61c3faa]", "0x20")
    self.bid32_to_binary32("1", "[ed98395b]", "[d6b57718]", "0x20")
    self.bid32_to_binary32("1", "[ede25ddb]", "[db97c449]", "0x20")
    self.bid32_to_binary32("1", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("1", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("2", "[00000001]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[03000001]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[03800001]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[191561d3]", "[00000002]", "0x30")
    self.bid32_to_binary32("2", "[1aa473d5]", "[000006a9]", "0x30")
    self.bid32_to_binary32("2", "[1c8f350e]", "[006c85c5]", "0x30")
    self.bid32_to_binary32("2", "[1c91efc6]", "[007ffffe]", "0x30")
    self.bid32_to_binary32("2", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("2", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("2", "[1ca3df8d]", "[01000002]", "0x20")
    self.bid32_to_binary32("2", "[1df6a83d]", "[0525624d]", "0x20")
    self.bid32_to_binary32("2", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("2", "[210fc4d3]", "[0f519a9a]", "0x20")
    self.bid32_to_binary32("2", "[22eb6643]", "[15ae43fe]", "0x20")
    self.bid32_to_binary32("2", "[243fa10d]", "[1a49a610]", "0x20")
    self.bid32_to_binary32("2", "[2607dc84]", "[1f734c58]", "0x20")
    self.bid32_to_binary32("2", "[2794fb5b]", "[251e88d1]", "0x20")
    self.bid32_to_binary32("2", "[296a9c7b]", "[2b44a9be]", "0x20")
    self.bid32_to_binary32("2", "[2af5929a]", "[3053ccd2]", "0x20")
    self.bid32_to_binary32("2", "[2c866feb]", "[34e27cf6]", "0x20")
    self.bid32_to_binary32("2", "[2e1b16d6]", "[3ae8b1ca]", "0x20")
    self.bid32_to_binary32("2", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("2", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("2", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("2", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("2", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("2", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("2", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("2", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("2", "[34b46daf]", "[50ffff91]", "0x20")
    self.bid32_to_binary32("2", "[3964ab72]", "[6064e57c]", "0x20")
    self.bid32_to_binary32("2", "[3b281625]", "[665e8659]", "0x20")
    self.bid32_to_binary32("2", "[3cf57036]", "[6c1f289b]", "0x20")
    self.bid32_to_binary32("2", "[3e3f69ed]", "[70a7dad8]", "0x20")
    self.bid32_to_binary32("2", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("2", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("2", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("2", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[6bf887d3]", "[411ff09d]", "0x20")
    self.bid32_to_binary32("2", "[6c58962c]", "[461c3faa]", "0x20")
    self.bid32_to_binary32("2", "[6d98395b]", "[56b57718]", "0x20")
    self.bid32_to_binary32("2", "[6de25ddb]", "[5b97c449]", "0x20")
    self.bid32_to_binary32("2", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("2", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("2", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("2", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("2", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("2", "[991561d2]", "[80000000]", "0x30")
    self.bid32_to_binary32("2", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[9aa473d5]", "[800006a8]", "0x30")
    self.bid32_to_binary32("2", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("2", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("2", "[9c91efc7]", "[80800004]", "0x20")
    self.bid32_to_binary32("2", "[9ca3df8c]", "[80fffffa]", "0x20")
    self.bid32_to_binary32("2", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("2", "[9df6a83d]", "[8525624c]", "0x20")
    self.bid32_to_binary32("2", "[9f863bfd]", "[89a9b6ee]", "0x20")
    self.bid32_to_binary32("2", "[a10fc4d3]", "[8f519a99]", "0x20")
    self.bid32_to_binary32("2", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("2", "[a43fa10d]", "[9a49a60f]", "0x20")
    self.bid32_to_binary32("2", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("2", "[a794fb5b]", "[a51e88d0]", "0x20")
    self.bid32_to_binary32("2", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("2", "[aaf5929a]", "[b053ccd1]", "0x20")
    self.bid32_to_binary32("2", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("2", "[ae1b16d6]", "[bae8b1c9]", "0x20")
    self.bid32_to_binary32("2", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("2", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("2", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("2", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("2", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("2", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("2", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("2", "[b4b46daf]", "[d0ffff90]", "0x20")
    self.bid32_to_binary32("2", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("2", "[bb281625]", "[e65e8658]", "0x20")
    self.bid32_to_binary32("2", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("2", "[be3f69ed]", "[f0a7dad7]", "0x20")
    self.bid32_to_binary32("2", "[bfba1d8a]", "[f5963989]", "0x20")
    self.bid32_to_binary32("2", "[c2b3ec47]", "[ff7ffffc]", "0x20")
    self.bid32_to_binary32("2", "[c2b3ec48]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("2", "[e628c3f7]", "[80000000]", "0x30")
    self.bid32_to_binary32("2", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("2", "[ec58962c]", "[c61c3fa9]", "0x20")
    self.bid32_to_binary32("2", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("2", "[ede25ddb]", "[db97c448]", "0x20")
    self.bid32_to_binary32("2", "[f7f8967f]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("2", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("3", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("3", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("3", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("3", "[191561d2]", "[00000000]", "0x30")
    self.bid32_to_binary32("3", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[1aa473d5]", "[000006a8]", "0x30")
    self.bid32_to_binary32("3", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("3", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("3", "[1c91efc7]", "[00800004]", "0x20")
    self.bid32_to_binary32("3", "[1ca3df8c]", "[00fffffa]", "0x20")
    self.bid32_to_binary32("3", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("3", "[1df6a83d]", "[0525624c]", "0x20")
    self.bid32_to_binary32("3", "[1f863bfd]", "[09a9b6ee]", "0x20")
    self.bid32_to_binary32("3", "[210fc4d3]", "[0f519a99]", "0x20")
    self.bid32_to_binary32("3", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("3", "[243fa10d]", "[1a49a60f]", "0x20")
    self.bid32_to_binary32("3", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("3", "[2794fb5b]", "[251e88d0]", "0x20")
    self.bid32_to_binary32("3", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("3", "[2af5929a]", "[3053ccd1]", "0x20")
    self.bid32_to_binary32("3", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("3", "[2e1b16d6]", "[3ae8b1c9]", "0x20")
    self.bid32_to_binary32("3", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("3", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("3", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("3", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("3", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("3", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("3", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("3", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("3", "[34b46daf]", "[50ffff90]", "0x20")
    self.bid32_to_binary32("3", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("3", "[3b281625]", "[665e8658]", "0x20")
    self.bid32_to_binary32("3", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("3", "[3e3f69ed]", "[70a7dad7]", "0x20")
    self.bid32_to_binary32("3", "[3fba1d8a]", "[75963989]", "0x20")
    self.bid32_to_binary32("3", "[42b3ec47]", "[7f7ffffc]", "0x20")
    self.bid32_to_binary32("3", "[42b3ec48]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("3", "[6628c3f7]", "[00000000]", "0x30")
    self.bid32_to_binary32("3", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("3", "[6c58962c]", "[461c3fa9]", "0x20")
    self.bid32_to_binary32("3", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("3", "[6de25ddb]", "[5b97c448]", "0x20")
    self.bid32_to_binary32("3", "[77f8967f]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("3", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("3", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[991561d2]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("3", "[9aa473d5]", "[800006a8]", "0x30")
    self.bid32_to_binary32("3", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("3", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("3", "[9c91efc7]", "[80800004]", "0x20")
    self.bid32_to_binary32("3", "[9ca3df8c]", "[80fffffa]", "0x20")
    self.bid32_to_binary32("3", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("3", "[9df6a83d]", "[8525624c]", "0x20")
    self.bid32_to_binary32("3", "[9f863bfd]", "[89a9b6ee]", "0x20")
    self.bid32_to_binary32("3", "[a10fc4d3]", "[8f519a99]", "0x20")
    self.bid32_to_binary32("3", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("3", "[a43fa10d]", "[9a49a60f]", "0x20")
    self.bid32_to_binary32("3", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("3", "[a794fb5b]", "[a51e88d0]", "0x20")
    self.bid32_to_binary32("3", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("3", "[aaf5929a]", "[b053ccd1]", "0x20")
    self.bid32_to_binary32("3", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("3", "[ae1b16d6]", "[bae8b1c9]", "0x20")
    self.bid32_to_binary32("3", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("3", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("3", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("3", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("3", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("3", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("3", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("3", "[b4b46daf]", "[d0ffff90]", "0x20")
    self.bid32_to_binary32("3", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("3", "[bb281625]", "[e65e8658]", "0x20")
    self.bid32_to_binary32("3", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("3", "[be3f69ed]", "[f0a7dad7]", "0x20")
    self.bid32_to_binary32("3", "[bfba1d8a]", "[f5963989]", "0x20")
    self.bid32_to_binary32("3", "[c2b3ec47]", "[ff7ffffc]", "0x20")
    self.bid32_to_binary32("3", "[c2b3ec48]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("3", "[e628c3f7]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("3", "[ec58962c]", "[c61c3fa9]", "0x20")
    self.bid32_to_binary32("3", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("3", "[ede25ddb]", "[db97c448]", "0x20")
    self.bid32_to_binary32("3", "[f7f8967f]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("3", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("4", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("4", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("4", "[1aa473d5]", "[000006a9]", "0x30")
    self.bid32_to_binary32("4", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("4", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("4", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("4", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("4", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("4", "[1df6a83d]", "[0525624c]", "0x20")
    self.bid32_to_binary32("4", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("4", "[210fc4d3]", "[0f519a99]", "0x20")
    self.bid32_to_binary32("4", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("4", "[243fa10d]", "[1a49a610]", "0x20")
    self.bid32_to_binary32("4", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("4", "[2794fb5b]", "[251e88d1]", "0x20")
    self.bid32_to_binary32("4", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[2af5929a]", "[3053ccd2]", "0x20")
    self.bid32_to_binary32("4", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("4", "[2e1b16d6]", "[3ae8b1ca]", "0x20")
    self.bid32_to_binary32("4", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("4", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("4", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("4", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("4", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("4", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("4", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("4", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("4", "[34b46daf]", "[50ffff90]", "0x20")
    self.bid32_to_binary32("4", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("4", "[3b281625]", "[665e8658]", "0x20")
    self.bid32_to_binary32("4", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("4", "[3e3f69ed]", "[70a7dad8]", "0x20")
    self.bid32_to_binary32("4", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("4", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("4", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("4", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("4", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("4", "[6c58962c]", "[461c3faa]", "0x20")
    self.bid32_to_binary32("4", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("4", "[6de25ddb]", "[5b97c448]", "0x20")
    self.bid32_to_binary32("4", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("4", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("4", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("4", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("4", "[9aa473d5]", "[800006a9]", "0x30")
    self.bid32_to_binary32("4", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("4", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("4", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("4", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("4", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("4", "[9df6a83d]", "[8525624c]", "0x20")
    self.bid32_to_binary32("4", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("4", "[a10fc4d3]", "[8f519a99]", "0x20")
    self.bid32_to_binary32("4", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("4", "[a43fa10d]", "[9a49a610]", "0x20")
    self.bid32_to_binary32("4", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("4", "[a794fb5b]", "[a51e88d1]", "0x20")
    self.bid32_to_binary32("4", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[aaf5929a]", "[b053ccd2]", "0x20")
    self.bid32_to_binary32("4", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("4", "[ae1b16d6]", "[bae8b1ca]", "0x20")
    self.bid32_to_binary32("4", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("4", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("4", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("4", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("4", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("4", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("4", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("4", "[b4b46daf]", "[d0ffff90]", "0x20")
    self.bid32_to_binary32("4", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("4", "[bb281625]", "[e65e8658]", "0x20")
    self.bid32_to_binary32("4", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("4", "[be3f69ed]", "[f0a7dad8]", "0x20")
    self.bid32_to_binary32("4", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("4", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("4", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("4", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("4", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("4", "[ec58962c]", "[c61c3faa]", "0x20")
    self.bid32_to_binary32("4", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("4", "[ede25ddb]", "[db97c448]", "0x20")
    self.bid32_to_binary32("4", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("4", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("0", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[00000001]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[00000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[000f423f]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[000f423f]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[000f423f]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[000f423f]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[000f423f]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[03000001]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[03000001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("1", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[03800001]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[03800001]", "[00000000]", "0x30")
    self.bid32_to_binary32("0", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("1", "[191561d2]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[191561d2]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[191561d2]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("1", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("2", "[191561d3]", "[00000002]", "0x30")
    self.bid32_to_binary32("3", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("4", "[191561d3]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[1a11214b]", "[00000050]", "0x30")
    self.bid32_to_binary32("1", "[1a11214b]", "[00000050]", "0x30")
    self.bid32_to_binary32("2", "[1a11214b]", "[00000051]", "0x30")
    self.bid32_to_binary32("3", "[1a11214b]", "[00000050]", "0x30")
    self.bid32_to_binary32("4", "[1a11214b]", "[00000050]", "0x30")
    self.bid32_to_binary32("0", "[1a836d0f]", "[000000a0]", "0x30")
    self.bid32_to_binary32("1", "[1a836d0f]", "[000000a0]", "0x30")
    self.bid32_to_binary32("2", "[1a836d0f]", "[000000a1]", "0x30")
    self.bid32_to_binary32("3", "[1a836d0f]", "[000000a0]", "0x30")
    self.bid32_to_binary32("4", "[1a836d0f]", "[000000a0]", "0x30")
    self.bid32_to_binary32("0", "[1b0cc5a9]", "[00001755]", "0x30")
    self.bid32_to_binary32("1", "[1b0cc5a9]", "[00001755]", "0x30")
    self.bid32_to_binary32("2", "[1b0cc5a9]", "[00001756]", "0x30")
    self.bid32_to_binary32("3", "[1b0cc5a9]", "[00001755]", "0x30")
    self.bid32_to_binary32("4", "[1b0cc5a9]", "[00001755]", "0x30")
    self.bid32_to_binary32("0", "[1b198b52]", "[00002eab]", "0x30")
    self.bid32_to_binary32("1", "[1b198b52]", "[00002eaa]", "0x30")
    self.bid32_to_binary32("2", "[1b198b52]", "[00002eab]", "0x30")
    self.bid32_to_binary32("3", "[1b198b52]", "[00002eaa]", "0x30")
    self.bid32_to_binary32("4", "[1b198b52]", "[00002eab]", "0x30")
    self.bid32_to_binary32("0", "[1b8b47f1]", "[0000ce17]", "0x30")
    self.bid32_to_binary32("1", "[1b8b47f1]", "[0000ce17]", "0x30")
    self.bid32_to_binary32("2", "[1b8b47f1]", "[0000ce18]", "0x30")
    self.bid32_to_binary32("3", "[1b8b47f1]", "[0000ce17]", "0x30")
    self.bid32_to_binary32("4", "[1b8b47f1]", "[0000ce17]", "0x30")
    self.bid32_to_binary32("0", "[1bf21b08]", "[00082492]", "0x30")
    self.bid32_to_binary32("1", "[1bf21b08]", "[00082491]", "0x30")
    self.bid32_to_binary32("2", "[1bf21b08]", "[00082492]", "0x30")
    self.bid32_to_binary32("3", "[1bf21b08]", "[00082491]", "0x30")
    self.bid32_to_binary32("4", "[1bf21b08]", "[00082492]", "0x30")
    self.bid32_to_binary32("0", "[1c2cd76f]", "[001fffff]", "0x30")
    self.bid32_to_binary32("1", "[1c2cd76f]", "[001fffff]", "0x30")
    self.bid32_to_binary32("2", "[1c2cd76f]", "[00200000]", "0x30")
    self.bid32_to_binary32("3", "[1c2cd76f]", "[001fffff]", "0x30")
    self.bid32_to_binary32("4", "[1c2cd76f]", "[001fffff]", "0x30")
    self.bid32_to_binary32("0", "[1c2cd770]", "[00200000]", "0x30")
    self.bid32_to_binary32("1", "[1c2cd770]", "[00200000]", "0x30")
    self.bid32_to_binary32("2", "[1c2cd770]", "[00200001]", "0x30")
    self.bid32_to_binary32("3", "[1c2cd770]", "[00200000]", "0x30")
    self.bid32_to_binary32("4", "[1c2cd770]", "[00200000]", "0x30")
    self.bid32_to_binary32("0", "[1c59aedf]", "[003fffff]", "0x30")
    self.bid32_to_binary32("1", "[1c59aedf]", "[003fffff]", "0x30")
    self.bid32_to_binary32("2", "[1c59aedf]", "[00400000]", "0x30")
    self.bid32_to_binary32("3", "[1c59aedf]", "[003fffff]", "0x30")
    self.bid32_to_binary32("4", "[1c59aedf]", "[003fffff]", "0x30")
    self.bid32_to_binary32("0", "[1c59aee0]", "[00400000]", "0x30")
    self.bid32_to_binary32("1", "[1c59aee0]", "[00400000]", "0x30")
    self.bid32_to_binary32("2", "[1c59aee0]", "[00400001]", "0x30")
    self.bid32_to_binary32("3", "[1c59aee0]", "[00400000]", "0x30")
    self.bid32_to_binary32("4", "[1c59aee0]", "[00400000]", "0x30")
    self.bid32_to_binary32("0", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("1", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("2", "[1c8f350e]", "[006c85c5]", "0x30")
    self.bid32_to_binary32("3", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("4", "[1c8f350e]", "[006c85c4]", "0x30")
    self.bid32_to_binary32("0", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("1", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("2", "[1c91efc6]", "[007ffffe]", "0x30")
    self.bid32_to_binary32("3", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("4", "[1c91efc6]", "[007ffffd]", "0x30")
    self.bid32_to_binary32("0", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("1", "[1c91efc7]", "[00800004]", "0x20")
    self.bid32_to_binary32("2", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("3", "[1c91efc7]", "[00800004]", "0x20")
    self.bid32_to_binary32("4", "[1c91efc7]", "[00800005]", "0x20")
    self.bid32_to_binary32("0", "[1c9e6a1c]", "[00d90b88]", "0x20")
    self.bid32_to_binary32("1", "[1c9e6a1c]", "[00d90b88]", "0x20")
    self.bid32_to_binary32("2", "[1c9e6a1c]", "[00d90b89]", "0x20")
    self.bid32_to_binary32("3", "[1c9e6a1c]", "[00d90b88]", "0x20")
    self.bid32_to_binary32("4", "[1c9e6a1c]", "[00d90b88]", "0x20")
    self.bid32_to_binary32("0", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("1", "[1ca3df8c]", "[00fffffa]", "0x20")
    self.bid32_to_binary32("2", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("3", "[1ca3df8c]", "[00fffffa]", "0x20")
    self.bid32_to_binary32("4", "[1ca3df8c]", "[00fffffb]", "0x20")
    self.bid32_to_binary32("0", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("1", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("2", "[1ca3df8d]", "[01000002]", "0x20")
    self.bid32_to_binary32("3", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("4", "[1ca3df8d]", "[01000001]", "0x20")
    self.bid32_to_binary32("0", "[1d042f3f]", "[01154f56]", "0x20")
    self.bid32_to_binary32("1", "[1d042f3f]", "[01154f56]", "0x20")
    self.bid32_to_binary32("2", "[1d042f3f]", "[01154f57]", "0x20")
    self.bid32_to_binary32("3", "[1d042f3f]", "[01154f56]", "0x20")
    self.bid32_to_binary32("4", "[1d042f3f]", "[01154f56]", "0x20")
    self.bid32_to_binary32("0", "[1da9f7c8]", "[0469fa95]", "0x20")
    self.bid32_to_binary32("1", "[1da9f7c8]", "[0469fa95]", "0x20")
    self.bid32_to_binary32("2", "[1da9f7c8]", "[0469fa96]", "0x20")
    self.bid32_to_binary32("3", "[1da9f7c8]", "[0469fa95]", "0x20")
    self.bid32_to_binary32("4", "[1da9f7c8]", "[0469fa95]", "0x20")
    self.bid32_to_binary32("0", "[1e09d7c7]", "[05093092]", "0x20")
    self.bid32_to_binary32("1", "[1e09d7c7]", "[05093091]", "0x20")
    self.bid32_to_binary32("2", "[1e09d7c7]", "[05093092]", "0x20")
    self.bid32_to_binary32("3", "[1e09d7c7]", "[05093091]", "0x20")
    self.bid32_to_binary32("4", "[1e09d7c7]", "[05093092]", "0x20")
    self.bid32_to_binary32("0", "[1efe507f]", "[08898b53]", "0x20")
    self.bid32_to_binary32("1", "[1efe507f]", "[08898b53]", "0x20")
    self.bid32_to_binary32("2", "[1efe507f]", "[08898b54]", "0x20")
    self.bid32_to_binary32("3", "[1efe507f]", "[08898b53]", "0x20")
    self.bid32_to_binary32("4", "[1efe507f]", "[08898b53]", "0x20")
    self.bid32_to_binary32("0", "[1f2c2ed4]", "[09708e01]", "0x20")
    self.bid32_to_binary32("1", "[1f2c2ed4]", "[09708e01]", "0x20")
    self.bid32_to_binary32("2", "[1f2c2ed4]", "[09708e02]", "0x20")
    self.bid32_to_binary32("3", "[1f2c2ed4]", "[09708e01]", "0x20")
    self.bid32_to_binary32("4", "[1f2c2ed4]", "[09708e01]", "0x20")
    self.bid32_to_binary32("0", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("1", "[1f863bfd]", "[09a9b6ee]", "0x20")
    self.bid32_to_binary32("2", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("3", "[1f863bfd]", "[09a9b6ee]", "0x20")
    self.bid32_to_binary32("4", "[1f863bfd]", "[09a9b6ef]", "0x20")
    self.bid32_to_binary32("0", "[1fd221ab]", "[0b8bbd52]", "0x20")
    self.bid32_to_binary32("1", "[1fd221ab]", "[0b8bbd52]", "0x20")
    self.bid32_to_binary32("2", "[1fd221ab]", "[0b8bbd53]", "0x20")
    self.bid32_to_binary32("3", "[1fd221ab]", "[0b8bbd52]", "0x20")
    self.bid32_to_binary32("4", "[1fd221ab]", "[0b8bbd52]", "0x20")
    self.bid32_to_binary32("0", "[205221ab]", "[0d2eaca7]", "0x20")
    self.bid32_to_binary32("1", "[205221ab]", "[0d2eaca6]", "0x20")
    self.bid32_to_binary32("2", "[205221ab]", "[0d2eaca7]", "0x20")
    self.bid32_to_binary32("3", "[205221ab]", "[0d2eaca6]", "0x20")
    self.bid32_to_binary32("4", "[205221ab]", "[0d2eaca7]", "0x20")
    self.bid32_to_binary32("0", "[2097ef8e]", "[0dfe8756]", "0x20")
    self.bid32_to_binary32("1", "[2097ef8e]", "[0dfe8756]", "0x20")
    self.bid32_to_binary32("2", "[2097ef8e]", "[0dfe8757]", "0x20")
    self.bid32_to_binary32("3", "[2097ef8e]", "[0dfe8756]", "0x20")
    self.bid32_to_binary32("4", "[2097ef8e]", "[0dfe8756]", "0x20")
    self.bid32_to_binary32("0", "[2102b8e9]", "[0e10be19]", "0x20")
    self.bid32_to_binary32("1", "[2102b8e9]", "[0e10be19]", "0x20")
    self.bid32_to_binary32("2", "[2102b8e9]", "[0e10be1a]", "0x20")
    self.bid32_to_binary32("3", "[2102b8e9]", "[0e10be19]", "0x20")
    self.bid32_to_binary32("4", "[2102b8e9]", "[0e10be19]", "0x20")
    self.bid32_to_binary32("0", "[21649f67]", "[10a73026]", "0x20")
    self.bid32_to_binary32("1", "[21649f67]", "[10a73026]", "0x20")
    self.bid32_to_binary32("2", "[21649f67]", "[10a73027]", "0x20")
    self.bid32_to_binary32("3", "[21649f67]", "[10a73026]", "0x20")
    self.bid32_to_binary32("4", "[21649f67]", "[10a73026]", "0x20")
    self.bid32_to_binary32("0", "[21a324b9]", "[1191faec]", "0x20")
    self.bid32_to_binary32("1", "[21a324b9]", "[1191faec]", "0x20")
    self.bid32_to_binary32("2", "[21a324b9]", "[1191faed]", "0x20")
    self.bid32_to_binary32("3", "[21a324b9]", "[1191faec]", "0x20")
    self.bid32_to_binary32("4", "[21a324b9]", "[1191faec]", "0x20")
    self.bid32_to_binary32("0", "[22061131]", "[11fc050c]", "0x20")
    self.bid32_to_binary32("1", "[22061131]", "[11fc050c]", "0x20")
    self.bid32_to_binary32("2", "[22061131]", "[11fc050d]", "0x20")
    self.bid32_to_binary32("3", "[22061131]", "[11fc050c]", "0x20")
    self.bid32_to_binary32("4", "[22061131]", "[11fc050c]", "0x20")
    self.bid32_to_binary32("0", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("1", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("2", "[22eb6643]", "[15ae43fe]", "0x20")
    self.bid32_to_binary32("3", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("4", "[22eb6643]", "[15ae43fd]", "0x20")
    self.bid32_to_binary32("0", "[2307d92a]", "[157eb11a]", "0x20")
    self.bid32_to_binary32("1", "[2307d92a]", "[157eb119]", "0x20")
    self.bid32_to_binary32("2", "[2307d92a]", "[157eb11a]", "0x20")
    self.bid32_to_binary32("3", "[2307d92a]", "[157eb119]", "0x20")
    self.bid32_to_binary32("4", "[2307d92a]", "[157eb11a]", "0x20")
    self.bid32_to_binary32("0", "[238436b1]", "[16aaecec]", "0x20")
    self.bid32_to_binary32("1", "[238436b1]", "[16aaecec]", "0x20")
    self.bid32_to_binary32("2", "[238436b1]", "[16aaeced]", "0x20")
    self.bid32_to_binary32("3", "[238436b1]", "[16aaecec]", "0x20")
    self.bid32_to_binary32("4", "[238436b1]", "[16aaecec]", "0x20")
    self.bid32_to_binary32("0", "[23d3dac5]", "[18d498ba]", "0x20")
    self.bid32_to_binary32("1", "[23d3dac5]", "[18d498ba]", "0x20")
    self.bid32_to_binary32("2", "[23d3dac5]", "[18d498bb]", "0x20")
    self.bid32_to_binary32("3", "[23d3dac5]", "[18d498ba]", "0x20")
    self.bid32_to_binary32("4", "[23d3dac5]", "[18d498ba]", "0x20")
    self.bid32_to_binary32("0", "[244d1cdd]", "[1a74614b]", "0x20")
    self.bid32_to_binary32("1", "[244d1cdd]", "[1a74614a]", "0x20")
    self.bid32_to_binary32("2", "[244d1cdd]", "[1a74614b]", "0x20")
    self.bid32_to_binary32("3", "[244d1cdd]", "[1a74614a]", "0x20")
    self.bid32_to_binary32("4", "[244d1cdd]", "[1a74614b]", "0x20")
    self.bid32_to_binary32("0", "[248b60a1]", "[1ab44872]", "0x20")
    self.bid32_to_binary32("1", "[248b60a1]", "[1ab44872]", "0x20")
    self.bid32_to_binary32("2", "[248b60a1]", "[1ab44873]", "0x20")
    self.bid32_to_binary32("3", "[248b60a1]", "[1ab44872]", "0x20")
    self.bid32_to_binary32("4", "[248b60a1]", "[1ab44872]", "0x20")
    self.bid32_to_binary32("0", "[24ff421a]", "[1c7c0f94]", "0x20")
    self.bid32_to_binary32("1", "[24ff421a]", "[1c7c0f93]", "0x20")
    self.bid32_to_binary32("2", "[24ff421a]", "[1c7c0f94]", "0x20")
    self.bid32_to_binary32("3", "[24ff421a]", "[1c7c0f93]", "0x20")
    self.bid32_to_binary32("4", "[24ff421a]", "[1c7c0f94]", "0x20")
    self.bid32_to_binary32("0", "[2603ee42]", "[1ef34c57]", "0x20")
    self.bid32_to_binary32("1", "[2603ee42]", "[1ef34c57]", "0x20")
    self.bid32_to_binary32("2", "[2603ee42]", "[1ef34c58]", "0x20")
    self.bid32_to_binary32("3", "[2603ee42]", "[1ef34c57]", "0x20")
    self.bid32_to_binary32("4", "[2603ee42]", "[1ef34c57]", "0x20")
    self.bid32_to_binary32("0", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("1", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("2", "[2607dc84]", "[1f734c58]", "0x20")
    self.bid32_to_binary32("3", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("4", "[2607dc84]", "[1f734c57]", "0x20")
    self.bid32_to_binary32("0", "[26438f4f]", "[2102adfe]", "0x20")
    self.bid32_to_binary32("1", "[26438f4f]", "[2102adfd]", "0x20")
    self.bid32_to_binary32("2", "[26438f4f]", "[2102adfe]", "0x20")
    self.bid32_to_binary32("3", "[26438f4f]", "[2102adfd]", "0x20")
    self.bid32_to_binary32("4", "[26438f4f]", "[2102adfe]", "0x20")
    self.bid32_to_binary32("0", "[26d88aaa]", "[22d614a1]", "0x20")
    self.bid32_to_binary32("1", "[26d88aaa]", "[22d614a1]", "0x20")
    self.bid32_to_binary32("2", "[26d88aaa]", "[22d614a2]", "0x20")
    self.bid32_to_binary32("3", "[26d88aaa]", "[22d614a1]", "0x20")
    self.bid32_to_binary32("4", "[26d88aaa]", "[22d614a1]", "0x20")
    self.bid32_to_binary32("0", "[2714fb5b]", "[237da7b4]", "0x20")
    self.bid32_to_binary32("1", "[2714fb5b]", "[237da7b4]", "0x20")
    self.bid32_to_binary32("2", "[2714fb5b]", "[237da7b5]", "0x20")
    self.bid32_to_binary32("3", "[2714fb5b]", "[237da7b4]", "0x20")
    self.bid32_to_binary32("4", "[2714fb5b]", "[237da7b4]", "0x20")
    self.bid32_to_binary32("0", "[278435d2]", "[23fe7e3d]", "0x20")
    self.bid32_to_binary32("1", "[278435d2]", "[23fe7e3d]", "0x20")
    self.bid32_to_binary32("2", "[278435d2]", "[23fe7e3e]", "0x20")
    self.bid32_to_binary32("3", "[278435d2]", "[23fe7e3d]", "0x20")
    self.bid32_to_binary32("4", "[278435d2]", "[23fe7e3d]", "0x20")
    self.bid32_to_binary32("0", "[27e84da5]", "[264505fb]", "0x20")
    self.bid32_to_binary32("1", "[27e84da5]", "[264505fa]", "0x20")
    self.bid32_to_binary32("2", "[27e84da5]", "[264505fb]", "0x20")
    self.bid32_to_binary32("3", "[27e84da5]", "[264505fa]", "0x20")
    self.bid32_to_binary32("4", "[27e84da5]", "[264505fb]", "0x20")
    self.bid32_to_binary32("0", "[28043c9d]", "[25a00f88]", "0x20")
    self.bid32_to_binary32("1", "[28043c9d]", "[25a00f88]", "0x20")
    self.bid32_to_binary32("2", "[28043c9d]", "[25a00f89]", "0x20")
    self.bid32_to_binary32("3", "[28043c9d]", "[25a00f88]", "0x20")
    self.bid32_to_binary32("4", "[28043c9d]", "[25a00f88]", "0x20")
    self.bid32_to_binary32("0", "[28843c9d]", "[2748136a]", "0x20")
    self.bid32_to_binary32("1", "[28843c9d]", "[2748136a]", "0x20")
    self.bid32_to_binary32("2", "[28843c9d]", "[2748136b]", "0x20")
    self.bid32_to_binary32("3", "[28843c9d]", "[2748136a]", "0x20")
    self.bid32_to_binary32("4", "[28843c9d]", "[2748136a]", "0x20")
    self.bid32_to_binary32("0", "[28c79466]", "[29534414]", "0x20")
    self.bid32_to_binary32("1", "[28c79466]", "[29534413]", "0x20")
    self.bid32_to_binary32("2", "[28c79466]", "[29534414]", "0x20")
    self.bid32_to_binary32("3", "[28c79466]", "[29534413]", "0x20")
    self.bid32_to_binary32("4", "[28c79466]", "[29534414]", "0x20")
    self.bid32_to_binary32("0", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("1", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("2", "[296a9c7b]", "[2b44a9be]", "0x20")
    self.bid32_to_binary32("3", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[296a9c7b]", "[2b44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2995527f]", "[2bc4a9bd]", "0x20")
    self.bid32_to_binary32("1", "[2995527f]", "[2bc4a9bd]", "0x20")
    self.bid32_to_binary32("2", "[2995527f]", "[2bc4a9be]", "0x20")
    self.bid32_to_binary32("3", "[2995527f]", "[2bc4a9bd]", "0x20")
    self.bid32_to_binary32("4", "[2995527f]", "[2bc4a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2a0443b3]", "[2c44a9bd]", "0x20")
    self.bid32_to_binary32("1", "[2a0443b3]", "[2c44a9bd]", "0x20")
    self.bid32_to_binary32("2", "[2a0443b3]", "[2c44a9be]", "0x20")
    self.bid32_to_binary32("3", "[2a0443b3]", "[2c44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[2a0443b3]", "[2c44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2a6090d9]", "[2e8b2a7f]", "0x20")
    self.bid32_to_binary32("1", "[2a6090d9]", "[2e8b2a7f]", "0x20")
    self.bid32_to_binary32("2", "[2a6090d9]", "[2e8b2a80]", "0x20")
    self.bid32_to_binary32("3", "[2a6090d9]", "[2e8b2a7f]", "0x20")
    self.bid32_to_binary32("4", "[2a6090d9]", "[2e8b2a7f]", "0x20")
    self.bid32_to_binary32("0", "[2b057560]", "[2fc4a9bd]", "0x20")
    self.bid32_to_binary32("1", "[2b057560]", "[2fc4a9bd]", "0x20")
    self.bid32_to_binary32("2", "[2b057560]", "[2fc4a9be]", "0x20")
    self.bid32_to_binary32("3", "[2b057560]", "[2fc4a9bd]", "0x20")
    self.bid32_to_binary32("4", "[2b057560]", "[2fc4a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2b0aeac0]", "[3044a9bd]", "0x20")
    self.bid32_to_binary32("1", "[2b0aeac0]", "[3044a9bd]", "0x20")
    self.bid32_to_binary32("2", "[2b0aeac0]", "[3044a9be]", "0x20")
    self.bid32_to_binary32("3", "[2b0aeac0]", "[3044a9bd]", "0x20")
    self.bid32_to_binary32("4", "[2b0aeac0]", "[3044a9bd]", "0x20")
    self.bid32_to_binary32("0", "[2b29fb19]", "[313d10a0]", "0x20")
    self.bid32_to_binary32("1", "[2b29fb19]", "[313d10a0]", "0x20")
    self.bid32_to_binary32("2", "[2b29fb19]", "[313d10a1]", "0x20")
    self.bid32_to_binary32("3", "[2b29fb19]", "[313d10a0]", "0x20")
    self.bid32_to_binary32("4", "[2b29fb19]", "[313d10a0]", "0x20")
    self.bid32_to_binary32("0", "[2bfbf1bd]", "[33ae6fa3]", "0x20")
    self.bid32_to_binary32("1", "[2bfbf1bd]", "[33ae6fa3]", "0x20")
    self.bid32_to_binary32("2", "[2bfbf1bd]", "[33ae6fa4]", "0x20")
    self.bid32_to_binary32("3", "[2bfbf1bd]", "[33ae6fa3]", "0x20")
    self.bid32_to_binary32("4", "[2bfbf1bd]", "[33ae6fa3]", "0x20")
    self.bid32_to_binary32("0", "[2c1097af]", "[33e984d5]", "0x20")
    self.bid32_to_binary32("1", "[2c1097af]", "[33e984d5]", "0x20")
    self.bid32_to_binary32("2", "[2c1097af]", "[33e984d6]", "0x20")
    self.bid32_to_binary32("3", "[2c1097af]", "[33e984d5]", "0x20")
    self.bid32_to_binary32("4", "[2c1097af]", "[33e984d5]", "0x20")
    self.bid32_to_binary32("0", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("1", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("2", "[2c866feb]", "[34e27cf6]", "0x20")
    self.bid32_to_binary32("3", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("4", "[2c866feb]", "[34e27cf5]", "0x20")
    self.bid32_to_binary32("0", "[2cef11e7]", "[36f43ed0]", "0x20")
    self.bid32_to_binary32("1", "[2cef11e7]", "[36f43ed0]", "0x20")
    self.bid32_to_binary32("2", "[2cef11e7]", "[36f43ed1]", "0x20")
    self.bid32_to_binary32("3", "[2cef11e7]", "[36f43ed0]", "0x20")
    self.bid32_to_binary32("4", "[2cef11e7]", "[36f43ed0]", "0x20")
    self.bid32_to_binary32("0", "[2d856b1a]", "[3814f05c]", "0x20")
    self.bid32_to_binary32("1", "[2d856b1a]", "[3814f05b]", "0x20")
    self.bid32_to_binary32("2", "[2d856b1a]", "[3814f05c]", "0x20")
    self.bid32_to_binary32("3", "[2d856b1a]", "[3814f05b]", "0x20")
    self.bid32_to_binary32("4", "[2d856b1a]", "[3814f05c]", "0x20")
    self.bid32_to_binary32("0", "[2d8ad634]", "[3894f05c]", "0x20")
    self.bid32_to_binary32("1", "[2d8ad634]", "[3894f05b]", "0x20")
    self.bid32_to_binary32("2", "[2d8ad634]", "[3894f05c]", "0x20")
    self.bid32_to_binary32("3", "[2d8ad634]", "[3894f05b]", "0x20")
    self.bid32_to_binary32("4", "[2d8ad634]", "[3894f05c]", "0x20")
    self.bid32_to_binary32("0", "[2de1811c]", "[3a2782dc]", "0x20")
    self.bid32_to_binary32("1", "[2de1811c]", "[3a2782dc]", "0x20")
    self.bid32_to_binary32("2", "[2de1811c]", "[3a2782dd]", "0x20")
    self.bid32_to_binary32("3", "[2de1811c]", "[3a2782dc]", "0x20")
    self.bid32_to_binary32("4", "[2de1811c]", "[3a2782dc]", "0x20")
    self.bid32_to_binary32("0", "[2ead8bfc]", "[3cf48710]", "0x20")
    self.bid32_to_binary32("1", "[2ead8bfc]", "[3cf48710]", "0x20")
    self.bid32_to_binary32("2", "[2ead8bfc]", "[3cf48711]", "0x20")
    self.bid32_to_binary32("3", "[2ead8bfc]", "[3cf48710]", "0x20")
    self.bid32_to_binary32("4", "[2ead8bfc]", "[3cf48710]", "0x20")
    self.bid32_to_binary32("0", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("1", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("2", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("3", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("4", "[2ecd7c6d]", "[3d500000]", "0x00")
    self.bid32_to_binary32("0", "[2f089789]", "[3d66a352]", "0x20")
    self.bid32_to_binary32("1", "[2f089789]", "[3d66a352]", "0x20")
    self.bid32_to_binary32("2", "[2f089789]", "[3d66a353]", "0x20")
    self.bid32_to_binary32("3", "[2f089789]", "[3d66a352]", "0x20")
    self.bid32_to_binary32("4", "[2f089789]", "[3d66a352]", "0x20")
    self.bid32_to_binary32("0", "[3030d188]", "[41fff30e]", "0x20")
    self.bid32_to_binary32("1", "[3030d188]", "[41fff30e]", "0x20")
    self.bid32_to_binary32("2", "[3030d188]", "[41fff30f]", "0x20")
    self.bid32_to_binary32("3", "[3030d188]", "[41fff30e]", "0x20")
    self.bid32_to_binary32("4", "[3030d188]", "[41fff30e]", "0x20")
    self.bid32_to_binary32("0", "[3089c3f9]", "[427fff48]", "0x20")
    self.bid32_to_binary32("1", "[3089c3f9]", "[427fff48]", "0x20")
    self.bid32_to_binary32("2", "[3089c3f9]", "[427fff49]", "0x20")
    self.bid32_to_binary32("3", "[3089c3f9]", "[427fff48]", "0x20")
    self.bid32_to_binary32("4", "[3089c3f9]", "[427fff48]", "0x20")
    self.bid32_to_binary32("0", "[317cffb7]", "[45ffff6a]", "0x20")
    self.bid32_to_binary32("1", "[317cffb7]", "[45ffff6a]", "0x20")
    self.bid32_to_binary32("2", "[317cffb7]", "[45ffff6b]", "0x20")
    self.bid32_to_binary32("3", "[317cffb7]", "[45ffff6a]", "0x20")
    self.bid32_to_binary32("4", "[317cffb7]", "[45ffff6a]", "0x20")
    self.bid32_to_binary32("0", "[3198ffe9]", "[467fff14]", "0x20")
    self.bid32_to_binary32("1", "[3198ffe9]", "[467fff14]", "0x20")
    self.bid32_to_binary32("2", "[3198ffe9]", "[467fff15]", "0x20")
    self.bid32_to_binary32("3", "[3198ffe9]", "[467fff14]", "0x20")
    self.bid32_to_binary32("4", "[3198ffe9]", "[467fff14]", "0x20")
    self.bid32_to_binary32("0", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("1", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("2", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("3", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("4", "[3200000f]", "[3fc00000]", "0x00")
    self.bid32_to_binary32("0", "[3204fffd]", "[46ffff66]", "0x20")
    self.bid32_to_binary32("1", "[3204fffd]", "[46ffff66]", "0x20")
    self.bid32_to_binary32("2", "[3204fffd]", "[46ffff67]", "0x20")
    self.bid32_to_binary32("3", "[3204fffd]", "[46ffff66]", "0x20")
    self.bid32_to_binary32("4", "[3204fffd]", "[46ffff66]", "0x20")
    self.bid32_to_binary32("0", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("1", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("2", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("3", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("4", "[32800000]", "[00000000]", "0x00")
    self.bid32_to_binary32("0", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("1", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("2", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("3", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("4", "[32800001]", "[3f800000]", "0x00")
    self.bid32_to_binary32("0", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("1", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("2", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("3", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("4", "[32800040]", "[42800000]", "0x00")
    self.bid32_to_binary32("0", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("1", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("2", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("3", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("4", "[328003e7]", "[4479c000]", "0x00")
    self.bid32_to_binary32("0", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("1", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("2", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("3", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("4", "[328003e8]", "[447a0000]", "0x00")
    self.bid32_to_binary32("0", "[32bfffff]", "[4a7ffffc]", "0x00")
    self.bid32_to_binary32("1", "[32bfffff]", "[4a7ffffc]", "0x00")
    self.bid32_to_binary32("2", "[32bfffff]", "[4a7ffffc]", "0x00")
    self.bid32_to_binary32("3", "[32bfffff]", "[4a7ffffc]", "0x00")
    self.bid32_to_binary32("4", "[32bfffff]", "[4a7ffffc]", "0x00")
    self.bid32_to_binary32("0", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("1", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("2", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("3", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("4", "[32fffff8]", "[4afffff0]", "0x00")
    self.bid32_to_binary32("0", "[3420c49b]", "[4efffffb]", "0x20")
    self.bid32_to_binary32("1", "[3420c49b]", "[4efffffa]", "0x20")
    self.bid32_to_binary32("2", "[3420c49b]", "[4efffffb]", "0x20")
    self.bid32_to_binary32("3", "[3420c49b]", "[4efffffa]", "0x20")
    self.bid32_to_binary32("4", "[3420c49b]", "[4efffffb]", "0x20")
    self.bid32_to_binary32("0", "[34418926]", "[4f7fffbc]", "0x20")
    self.bid32_to_binary32("1", "[34418926]", "[4f7fffbc]", "0x20")
    self.bid32_to_binary32("2", "[34418926]", "[4f7fffbd]", "0x20")
    self.bid32_to_binary32("3", "[34418926]", "[4f7fffbc]", "0x20")
    self.bid32_to_binary32("4", "[34418926]", "[4f7fffbc]", "0x20")
    self.bid32_to_binary32("0", "[3553e1e3]", "[52fffd1a]", "0x20")
    self.bid32_to_binary32("1", "[3553e1e3]", "[52fffd19]", "0x20")
    self.bid32_to_binary32("2", "[3553e1e3]", "[52fffd1a]", "0x20")
    self.bid32_to_binary32("3", "[3553e1e3]", "[52fffd19]", "0x20")
    self.bid32_to_binary32("4", "[3553e1e3]", "[52fffd1a]", "0x20")
    self.bid32_to_binary32("0", "[3590c6c7]", "[537ffd1a]", "0x20")
    self.bid32_to_binary32("1", "[3590c6c7]", "[537ffd19]", "0x20")
    self.bid32_to_binary32("2", "[3590c6c7]", "[537ffd1a]", "0x20")
    self.bid32_to_binary32("3", "[3590c6c7]", "[537ffd19]", "0x20")
    self.bid32_to_binary32("4", "[3590c6c7]", "[537ffd1a]", "0x20")
    self.bid32_to_binary32("0", "[36aaf1df]", "[577ff894]", "0x20")
    self.bid32_to_binary32("1", "[36aaf1df]", "[577ff893]", "0x20")
    self.bid32_to_binary32("2", "[36aaf1df]", "[577ff894]", "0x20")
    self.bid32_to_binary32("3", "[36aaf1df]", "[577ff893]", "0x20")
    self.bid32_to_binary32("4", "[36aaf1df]", "[577ff894]", "0x20")
    self.bid32_to_binary32("0", "[36d3e3be]", "[57fa02b3]", "0x20")
    self.bid32_to_binary32("1", "[36d3e3be]", "[57fa02b2]", "0x20")
    self.bid32_to_binary32("2", "[36d3e3be]", "[57fa02b3]", "0x20")
    self.bid32_to_binary32("3", "[36d3e3be]", "[57fa02b2]", "0x20")
    self.bid32_to_binary32("4", "[36d3e3be]", "[57fa02b3]", "0x20")
    self.bid32_to_binary32("0", "[37b0fa48]", "[5ae411ec]", "0x20")
    self.bid32_to_binary32("1", "[37b0fa48]", "[5ae411ec]", "0x20")
    self.bid32_to_binary32("2", "[37b0fa48]", "[5ae411ed]", "0x20")
    self.bid32_to_binary32("3", "[37b0fa48]", "[5ae411ec]", "0x20")
    self.bid32_to_binary32("4", "[37b0fa48]", "[5ae411ec]", "0x20")
    self.bid32_to_binary32("0", "[37e9e0b7]", "[5b768415]", "0x20")
    self.bid32_to_binary32("1", "[37e9e0b7]", "[5b768414]", "0x20")
    self.bid32_to_binary32("2", "[37e9e0b7]", "[5b768415]", "0x20")
    self.bid32_to_binary32("3", "[37e9e0b7]", "[5b768414]", "0x20")
    self.bid32_to_binary32("4", "[37e9e0b7]", "[5b768415]", "0x20")
    self.bid32_to_binary32("0", "[38113975]", "[5bc884d6]", "0x20")
    self.bid32_to_binary32("1", "[38113975]", "[5bc884d6]", "0x20")
    self.bid32_to_binary32("2", "[38113975]", "[5bc884d7]", "0x20")
    self.bid32_to_binary32("3", "[38113975]", "[5bc884d6]", "0x20")
    self.bid32_to_binary32("4", "[38113975]", "[5bc884d6]", "0x20")
    self.bid32_to_binary32("0", "[38f2b19b]", "[5ed0a073]", "0x20")
    self.bid32_to_binary32("1", "[38f2b19b]", "[5ed0a073]", "0x20")
    self.bid32_to_binary32("2", "[38f2b19b]", "[5ed0a074]", "0x20")
    self.bid32_to_binary32("3", "[38f2b19b]", "[5ed0a073]", "0x20")
    self.bid32_to_binary32("4", "[38f2b19b]", "[5ed0a073]", "0x20")
    self.bid32_to_binary32("0", "[393255b9]", "[5fe4e57b]", "0x20")
    self.bid32_to_binary32("1", "[393255b9]", "[5fe4e57b]", "0x20")
    self.bid32_to_binary32("2", "[393255b9]", "[5fe4e57c]", "0x20")
    self.bid32_to_binary32("3", "[393255b9]", "[5fe4e57b]", "0x20")
    self.bid32_to_binary32("4", "[393255b9]", "[5fe4e57b]", "0x20")
    self.bid32_to_binary32("0", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("1", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("2", "[3964ab72]", "[6064e57c]", "0x20")
    self.bid32_to_binary32("3", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("4", "[3964ab72]", "[6064e57b]", "0x20")
    self.bid32_to_binary32("0", "[39f35a71]", "[6223ed48]", "0x20")
    self.bid32_to_binary32("1", "[39f35a71]", "[6223ed48]", "0x20")
    self.bid32_to_binary32("2", "[39f35a71]", "[6223ed49]", "0x20")
    self.bid32_to_binary32("3", "[39f35a71]", "[6223ed48]", "0x20")
    self.bid32_to_binary32("4", "[39f35a71]", "[6223ed48]", "0x20")
    self.bid32_to_binary32("0", "[3a17a214]", "[62a7ec64]", "0x20")
    self.bid32_to_binary32("1", "[3a17a214]", "[62a7ec63]", "0x20")
    self.bid32_to_binary32("2", "[3a17a214]", "[62a7ec64]", "0x20")
    self.bid32_to_binary32("3", "[3a17a214]", "[62a7ec63]", "0x20")
    self.bid32_to_binary32("4", "[3a17a214]", "[62a7ec64]", "0x20")
    self.bid32_to_binary32("0", "[3a97a214]", "[6451e77d]", "0x20")
    self.bid32_to_binary32("1", "[3a97a214]", "[6451e77c]", "0x20")
    self.bid32_to_binary32("2", "[3a97a214]", "[6451e77d]", "0x20")
    self.bid32_to_binary32("3", "[3a97a214]", "[6451e77c]", "0x20")
    self.bid32_to_binary32("4", "[3a97a214]", "[6451e77d]", "0x20")
    self.bid32_to_binary32("0", "[3bacc6f7]", "[681b5a26]", "0x20")
    self.bid32_to_binary32("1", "[3bacc6f7]", "[681b5a25]", "0x20")
    self.bid32_to_binary32("2", "[3bacc6f7]", "[681b5a26]", "0x20")
    self.bid32_to_binary32("3", "[3bacc6f7]", "[681b5a25]", "0x20")
    self.bid32_to_binary32("4", "[3bacc6f7]", "[681b5a26]", "0x20")
    self.bid32_to_binary32("0", "[3be33922]", "[68ac1ff1]", "0x20")
    self.bid32_to_binary32("1", "[3be33922]", "[68ac1ff0]", "0x20")
    self.bid32_to_binary32("2", "[3be33922]", "[68ac1ff1]", "0x20")
    self.bid32_to_binary32("3", "[3be33922]", "[68ac1ff0]", "0x20")
    self.bid32_to_binary32("4", "[3be33922]", "[68ac1ff1]", "0x20")
    self.bid32_to_binary32("0", "[3c409f31]", "[6a0c2054]", "0x20")
    self.bid32_to_binary32("1", "[3c409f31]", "[6a0c2053]", "0x20")
    self.bid32_to_binary32("2", "[3c409f31]", "[6a0c2054]", "0x20")
    self.bid32_to_binary32("3", "[3c409f31]", "[6a0c2053]", "0x20")
    self.bid32_to_binary32("4", "[3c409f31]", "[6a0c2054]", "0x20")
    self.bid32_to_binary32("0", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("1", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("2", "[3cf57036]", "[6c1f289b]", "0x20")
    self.bid32_to_binary32("3", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("4", "[3cf57036]", "[6c1f289a]", "0x20")
    self.bid32_to_binary32("0", "[3d24697b]", "[6cf6bccf]", "0x20")
    self.bid32_to_binary32("1", "[3d24697b]", "[6cf6bcce]", "0x20")
    self.bid32_to_binary32("2", "[3d24697b]", "[6cf6bccf]", "0x20")
    self.bid32_to_binary32("3", "[3d24697b]", "[6cf6bcce]", "0x20")
    self.bid32_to_binary32("4", "[3d24697b]", "[6cf6bccf]", "0x20")
    self.bid32_to_binary32("0", "[3d4ad0e4]", "[6d7d7c85]", "0x20")
    self.bid32_to_binary32("1", "[3d4ad0e4]", "[6d7d7c84]", "0x20")
    self.bid32_to_binary32("2", "[3d4ad0e4]", "[6d7d7c85]", "0x20")
    self.bid32_to_binary32("3", "[3d4ad0e4]", "[6d7d7c84]", "0x20")
    self.bid32_to_binary32("4", "[3d4ad0e4]", "[6d7d7c85]", "0x20")
    self.bid32_to_binary32("0", "[3e2b67fc]", "[7065ca5b]", "0x20")
    self.bid32_to_binary32("1", "[3e2b67fc]", "[7065ca5a]", "0x20")
    self.bid32_to_binary32("2", "[3e2b67fc]", "[7065ca5b]", "0x20")
    self.bid32_to_binary32("3", "[3e2b67fc]", "[7065ca5a]", "0x20")
    self.bid32_to_binary32("4", "[3e2b67fc]", "[7065ca5b]", "0x20")
    self.bid32_to_binary32("0", "[3e7ed3da]", "[7127dad8]", "0x20")
    self.bid32_to_binary32("1", "[3e7ed3da]", "[7127dad7]", "0x20")
    self.bid32_to_binary32("2", "[3e7ed3da]", "[7127dad8]", "0x20")
    self.bid32_to_binary32("3", "[3e7ed3da]", "[7127dad7]", "0x20")
    self.bid32_to_binary32("4", "[3e7ed3da]", "[7127dad8]", "0x20")
    self.bid32_to_binary32("0", "[3f741223]", "[74700765]", "0x20")
    self.bid32_to_binary32("1", "[3f741223]", "[74700765]", "0x20")
    self.bid32_to_binary32("2", "[3f741223]", "[74700766]", "0x20")
    self.bid32_to_binary32("3", "[3f741223]", "[74700765]", "0x20")
    self.bid32_to_binary32("4", "[3f741223]", "[74700765]", "0x20")
    self.bid32_to_binary32("0", "[3fa4483a]", "[753b9302]", "0x20")
    self.bid32_to_binary32("1", "[3fa4483a]", "[753b9301]", "0x20")
    self.bid32_to_binary32("2", "[3fa4483a]", "[753b9302]", "0x20")
    self.bid32_to_binary32("3", "[3fa4483a]", "[753b9301]", "0x20")
    self.bid32_to_binary32("4", "[3fa4483a]", "[753b9302]", "0x20")
    self.bid32_to_binary32("0", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("1", "[3fba1d8a]", "[75963989]", "0x20")
    self.bid32_to_binary32("2", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("3", "[3fba1d8a]", "[75963989]", "0x20")
    self.bid32_to_binary32("4", "[3fba1d8a]", "[7596398a]", "0x20")
    self.bid32_to_binary32("0", "[4072a86f]", "[77b93d6a]", "0x20")
    self.bid32_to_binary32("1", "[4072a86f]", "[77b93d6a]", "0x20")
    self.bid32_to_binary32("2", "[4072a86f]", "[77b93d6b]", "0x20")
    self.bid32_to_binary32("3", "[4072a86f]", "[77b93d6a]", "0x20")
    self.bid32_to_binary32("4", "[4072a86f]", "[77b93d6a]", "0x20")
    self.bid32_to_binary32("0", "[40b3a48a]", "[78d09555]", "0x20")
    self.bid32_to_binary32("1", "[40b3a48a]", "[78d09554]", "0x20")
    self.bid32_to_binary32("2", "[40b3a48a]", "[78d09555]", "0x20")
    self.bid32_to_binary32("3", "[40b3a48a]", "[78d09554]", "0x20")
    self.bid32_to_binary32("4", "[40b3a48a]", "[78d09555]", "0x20")
    self.bid32_to_binary32("0", "[40fe07ca]", "[797e8434]", "0x20")
    self.bid32_to_binary32("1", "[40fe07ca]", "[797e8434]", "0x20")
    self.bid32_to_binary32("2", "[40fe07ca]", "[797e8435]", "0x20")
    self.bid32_to_binary32("3", "[40fe07ca]", "[797e8434]", "0x20")
    self.bid32_to_binary32("4", "[40fe07ca]", "[797e8434]", "0x20")
    self.bid32_to_binary32("0", "[412ff378]", "[7a721748]", "0x20")
    self.bid32_to_binary32("1", "[412ff378]", "[7a721747]", "0x20")
    self.bid32_to_binary32("2", "[412ff378]", "[7a721748]", "0x20")
    self.bid32_to_binary32("3", "[412ff378]", "[7a721747]", "0x20")
    self.bid32_to_binary32("4", "[412ff378]", "[7a721748]", "0x20")
    self.bid32_to_binary32("0", "[41ea4c5d]", "[7ca7b58a]", "0x20")
    self.bid32_to_binary32("1", "[41ea4c5d]", "[7ca7b589]", "0x20")
    self.bid32_to_binary32("2", "[41ea4c5d]", "[7ca7b58a]", "0x20")
    self.bid32_to_binary32("3", "[41ea4c5d]", "[7ca7b589]", "0x20")
    self.bid32_to_binary32("4", "[41ea4c5d]", "[7ca7b58a]", "0x20")
    self.bid32_to_binary32("0", "[42154279]", "[7d27b58a]", "0x20")
    self.bid32_to_binary32("1", "[42154279]", "[7d27b589]", "0x20")
    self.bid32_to_binary32("2", "[42154279]", "[7d27b58a]", "0x20")
    self.bid32_to_binary32("3", "[42154279]", "[7d27b589]", "0x20")
    self.bid32_to_binary32("4", "[42154279]", "[7d27b58a]", "0x20")
    self.bid32_to_binary32("0", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("1", "[42b3ec47]", "[7f7ffffc]", "0x20")
    self.bid32_to_binary32("2", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("3", "[42b3ec47]", "[7f7ffffc]", "0x20")
    self.bid32_to_binary32("4", "[42b3ec47]", "[7f7ffffd]", "0x20")
    self.bid32_to_binary32("0", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("1", "[42b3ec48]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("2", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("3", "[42b3ec48]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("4", "[42b3ec48]", "[7f800000]", "0x28")
    self.bid32_to_binary32("0", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("1", "[6628c3f7]", "[00000000]", "0x30")
    self.bid32_to_binary32("2", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("3", "[6628c3f7]", "[00000000]", "0x30")
    self.bid32_to_binary32("4", "[6628c3f7]", "[00000001]", "0x30")
    self.bid32_to_binary32("0", "[6648c3f7]", "[00000006]", "0x30")
    self.bid32_to_binary32("1", "[6648c3f7]", "[00000006]", "0x30")
    self.bid32_to_binary32("2", "[6648c3f7]", "[00000007]", "0x30")
    self.bid32_to_binary32("3", "[6648c3f7]", "[00000006]", "0x30")
    self.bid32_to_binary32("4", "[6648c3f7]", "[00000006]", "0x30")
    self.bid32_to_binary32("0", "[6668c3f7]", "[00000040]", "0x30")
    self.bid32_to_binary32("1", "[6668c3f7]", "[0000003f]", "0x30")
    self.bid32_to_binary32("2", "[6668c3f7]", "[00000040]", "0x30")
    self.bid32_to_binary32("3", "[6668c3f7]", "[0000003f]", "0x30")
    self.bid32_to_binary32("4", "[6668c3f7]", "[00000040]", "0x30")
    self.bid32_to_binary32("0", "[6757de10]", "[03a9567d]", "0x20")
    self.bid32_to_binary32("1", "[6757de10]", "[03a9567d]", "0x20")
    self.bid32_to_binary32("2", "[6757de10]", "[03a9567e]", "0x20")
    self.bid32_to_binary32("3", "[6757de10]", "[03a9567d]", "0x20")
    self.bid32_to_binary32("4", "[6757de10]", "[03a9567d]", "0x20")
    self.bid32_to_binary32("0", "[67980f56]", "[0704767e]", "0x20")
    self.bid32_to_binary32("1", "[67980f56]", "[0704767d]", "0x20")
    self.bid32_to_binary32("2", "[67980f56]", "[0704767e]", "0x20")
    self.bid32_to_binary32("3", "[67980f56]", "[0704767d]", "0x20")
    self.bid32_to_binary32("4", "[67980f56]", "[0704767e]", "0x20")
    self.bid32_to_binary32("0", "[6892a415]", "[143e59d0]", "0x20")
    self.bid32_to_binary32("1", "[6892a415]", "[143e59cf]", "0x20")
    self.bid32_to_binary32("2", "[6892a415]", "[143e59d0]", "0x20")
    self.bid32_to_binary32("3", "[6892a415]", "[143e59cf]", "0x20")
    self.bid32_to_binary32("4", "[6892a415]", "[143e59d0]", "0x20")
    self.bid32_to_binary32("0", "[69569a05]", "[1e3a6f90]", "0x20")
    self.bid32_to_binary32("1", "[69569a05]", "[1e3a6f90]", "0x20")
    self.bid32_to_binary32("2", "[69569a05]", "[1e3a6f91]", "0x20")
    self.bid32_to_binary32("3", "[69569a05]", "[1e3a6f90]", "0x20")
    self.bid32_to_binary32("4", "[69569a05]", "[1e3a6f90]", "0x20")
    self.bid32_to_binary32("0", "[6b8cea0c]", "[3c174e36]", "0x20")
    self.bid32_to_binary32("1", "[6b8cea0c]", "[3c174e36]", "0x20")
    self.bid32_to_binary32("2", "[6b8cea0c]", "[3c174e37]", "0x20")
    self.bid32_to_binary32("3", "[6b8cea0c]", "[3c174e36]", "0x20")
    self.bid32_to_binary32("4", "[6b8cea0c]", "[3c174e36]", "0x20")
    self.bid32_to_binary32("0", "[6bd7b98a]", "[3f7e8d4a]", "0x20")
    self.bid32_to_binary32("1", "[6bd7b98a]", "[3f7e8d49]", "0x20")
    self.bid32_to_binary32("2", "[6bd7b98a]", "[3f7e8d4a]", "0x20")
    self.bid32_to_binary32("3", "[6bd7b98a]", "[3f7e8d49]", "0x20")
    self.bid32_to_binary32("4", "[6bd7b98a]", "[3f7e8d4a]", "0x20")
    self.bid32_to_binary32("0", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("1", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("2", "[6bf887d3]", "[411ff09d]", "0x20")
    self.bid32_to_binary32("3", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("4", "[6bf887d3]", "[411ff09c]", "0x20")
    self.bid32_to_binary32("0", "[6c3894c0]", "[4479fd22]", "0x20")
    self.bid32_to_binary32("1", "[6c3894c0]", "[4479fd21]", "0x20")
    self.bid32_to_binary32("2", "[6c3894c0]", "[4479fd22]", "0x20")
    self.bid32_to_binary32("3", "[6c3894c0]", "[4479fd21]", "0x20")
    self.bid32_to_binary32("4", "[6c3894c0]", "[4479fd22]", "0x20")
    self.bid32_to_binary32("0", "[6c98967e]", "[497423fd]", "0x20")
    self.bid32_to_binary32("1", "[6c98967e]", "[497423fc]", "0x20")
    self.bid32_to_binary32("2", "[6c98967e]", "[497423fd]", "0x20")
    self.bid32_to_binary32("3", "[6c98967e]", "[497423fc]", "0x20")
    self.bid32_to_binary32("4", "[6c98967e]", "[497423fd]", "0x20")
    self.bid32_to_binary32("0", "[6cd8967b]", "[4cbebc1a]", "0x20")
    self.bid32_to_binary32("1", "[6cd8967b]", "[4cbebc19]", "0x20")
    self.bid32_to_binary32("2", "[6cd8967b]", "[4cbebc1a]", "0x20")
    self.bid32_to_binary32("3", "[6cd8967b]", "[4cbebc19]", "0x20")
    self.bid32_to_binary32("4", "[6cd8967b]", "[4cbebc1a]", "0x20")
    self.bid32_to_binary32("0", "[6cf8967f]", "[4e6e6b26]", "0x20")
    self.bid32_to_binary32("1", "[6cf8967f]", "[4e6e6b26]", "0x20")
    self.bid32_to_binary32("2", "[6cf8967f]", "[4e6e6b27]", "0x20")
    self.bid32_to_binary32("3", "[6cf8967f]", "[4e6e6b26]", "0x20")
    self.bid32_to_binary32("4", "[6cf8967f]", "[4e6e6b26]", "0x20")
    self.bid32_to_binary32("0", "[6d38956f]", "[51ba426a]", "0x20")
    self.bid32_to_binary32("1", "[6d38956f]", "[51ba4269]", "0x20")
    self.bid32_to_binary32("2", "[6d38956f]", "[51ba426a]", "0x20")
    self.bid32_to_binary32("3", "[6d38956f]", "[51ba4269]", "0x20")
    self.bid32_to_binary32("4", "[6d38956f]", "[51ba426a]", "0x20")
    self.bid32_to_binary32("0", "[6d781ec7]", "[551112ba]", "0x20")
    self.bid32_to_binary32("1", "[6d781ec7]", "[551112b9]", "0x20")
    self.bid32_to_binary32("2", "[6d781ec7]", "[551112ba]", "0x20")
    self.bid32_to_binary32("3", "[6d781ec7]", "[551112b9]", "0x20")
    self.bid32_to_binary32("4", "[6d781ec7]", "[551112ba]", "0x20")
    self.bid32_to_binary32("0", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("1", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("2", "[6d98395b]", "[56b57718]", "0x20")
    self.bid32_to_binary32("3", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("4", "[6d98395b]", "[56b57717]", "0x20")
    self.bid32_to_binary32("0", "[6dd16393]", "[5a07676e]", "0x20")
    self.bid32_to_binary32("1", "[6dd16393]", "[5a07676d]", "0x20")
    self.bid32_to_binary32("2", "[6dd16393]", "[5a07676e]", "0x20")
    self.bid32_to_binary32("3", "[6dd16393]", "[5a07676d]", "0x20")
    self.bid32_to_binary32("4", "[6dd16393]", "[5a07676e]", "0x20")
    self.bid32_to_binary32("0", "[6e8afc85]", "[63f6e3b3]", "0x20")
    self.bid32_to_binary32("1", "[6e8afc85]", "[63f6e3b3]", "0x20")
    self.bid32_to_binary32("2", "[6e8afc85]", "[63f6e3b4]", "0x20")
    self.bid32_to_binary32("3", "[6e8afc85]", "[63f6e3b3]", "0x20")
    self.bid32_to_binary32("4", "[6e8afc85]", "[63f6e3b3]", "0x20")
    self.bid32_to_binary32("0", "[6ecb2a7f]", "[674121b2]", "0x20")
    self.bid32_to_binary32("1", "[6ecb2a7f]", "[674121b1]", "0x20")
    self.bid32_to_binary32("2", "[6ecb2a7f]", "[674121b2]", "0x20")
    self.bid32_to_binary32("3", "[6ecb2a7f]", "[674121b1]", "0x20")
    self.bid32_to_binary32("4", "[6ecb2a7f]", "[674121b2]", "0x20")
    self.bid32_to_binary32("0", "[6f690028]", "[6f910e17]", "0x20")
    self.bid32_to_binary32("1", "[6f690028]", "[6f910e17]", "0x20")
    self.bid32_to_binary32("2", "[6f690028]", "[6f910e18]", "0x20")
    self.bid32_to_binary32("3", "[6f690028]", "[6f910e17]", "0x20")
    self.bid32_to_binary32("4", "[6f690028]", "[6f910e17]", "0x20")
    self.bid32_to_binary32("0", "[6f927f20]", "[7141e2f9]", "0x20")
    self.bid32_to_binary32("1", "[6f927f20]", "[7141e2f8]", "0x20")
    self.bid32_to_binary32("2", "[6f927f20]", "[7141e2f9]", "0x20")
    self.bid32_to_binary32("3", "[6f927f20]", "[7141e2f8]", "0x20")
    self.bid32_to_binary32("4", "[6f927f20]", "[7141e2f9]", "0x20")
    self.bid32_to_binary32("0", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("1", "[77f8967f]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("2", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("3", "[77f8967f]", "[7f7fffff]", "0x28")
    self.bid32_to_binary32("4", "[77f8967f]", "[7f800000]", "0x28")
    self.bid32_to_binary32("0", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("1", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("2", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("3", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("4", "[78000000]", "[7f800000]", "0x00")
    self.bid32_to_binary32("0", "[7c0c2000]", "[7ff08000]", "0x00")
    self.bid32_to_binary32("0", "[7e0c2000]", "[7ff08000]", "0x01")
    self.bid32_to_binary32("0", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("1", "[80000001]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[80000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[800f423f]", "[80000000]", "0x30")
    self.bid32_to_binary32("1", "[800f423f]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[800f423f]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[800f423f]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[800f423f]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("1", "[83000001]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[83000001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("1", "[83800001]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[83800001]", "[80000000]", "0x30")
    self.bid32_to_binary32("0", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[991561d2]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[991561d2]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[991561d2]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[991561d3]", "[80000002]", "0x30")
    self.bid32_to_binary32("2", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("3", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("4", "[991561d3]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[9a11214b]", "[80000050]", "0x30")
    self.bid32_to_binary32("1", "[9a11214b]", "[80000051]", "0x30")
    self.bid32_to_binary32("2", "[9a11214b]", "[80000050]", "0x30")
    self.bid32_to_binary32("3", "[9a11214b]", "[80000050]", "0x30")
    self.bid32_to_binary32("4", "[9a11214b]", "[80000050]", "0x30")
    self.bid32_to_binary32("0", "[9a836d0f]", "[800000a0]", "0x30")
    self.bid32_to_binary32("1", "[9a836d0f]", "[800000a1]", "0x30")
    self.bid32_to_binary32("2", "[9a836d0f]", "[800000a0]", "0x30")
    self.bid32_to_binary32("3", "[9a836d0f]", "[800000a0]", "0x30")
    self.bid32_to_binary32("4", "[9a836d0f]", "[800000a0]", "0x30")
    self.bid32_to_binary32("0", "[9b0cc5a9]", "[80001755]", "0x30")
    self.bid32_to_binary32("1", "[9b0cc5a9]", "[80001756]", "0x30")
    self.bid32_to_binary32("2", "[9b0cc5a9]", "[80001755]", "0x30")
    self.bid32_to_binary32("3", "[9b0cc5a9]", "[80001755]", "0x30")
    self.bid32_to_binary32("4", "[9b0cc5a9]", "[80001755]", "0x30")
    self.bid32_to_binary32("0", "[9b198b52]", "[80002eab]", "0x30")
    self.bid32_to_binary32("1", "[9b198b52]", "[80002eab]", "0x30")
    self.bid32_to_binary32("2", "[9b198b52]", "[80002eaa]", "0x30")
    self.bid32_to_binary32("3", "[9b198b52]", "[80002eaa]", "0x30")
    self.bid32_to_binary32("4", "[9b198b52]", "[80002eab]", "0x30")
    self.bid32_to_binary32("0", "[9b8b47f1]", "[8000ce17]", "0x30")
    self.bid32_to_binary32("1", "[9b8b47f1]", "[8000ce18]", "0x30")
    self.bid32_to_binary32("2", "[9b8b47f1]", "[8000ce17]", "0x30")
    self.bid32_to_binary32("3", "[9b8b47f1]", "[8000ce17]", "0x30")
    self.bid32_to_binary32("4", "[9b8b47f1]", "[8000ce17]", "0x30")
    self.bid32_to_binary32("0", "[9bf21b08]", "[80082492]", "0x30")
    self.bid32_to_binary32("1", "[9bf21b08]", "[80082492]", "0x30")
    self.bid32_to_binary32("2", "[9bf21b08]", "[80082491]", "0x30")
    self.bid32_to_binary32("3", "[9bf21b08]", "[80082491]", "0x30")
    self.bid32_to_binary32("4", "[9bf21b08]", "[80082492]", "0x30")
    self.bid32_to_binary32("0", "[9c2cd76f]", "[801fffff]", "0x30")
    self.bid32_to_binary32("1", "[9c2cd76f]", "[80200000]", "0x30")
    self.bid32_to_binary32("2", "[9c2cd76f]", "[801fffff]", "0x30")
    self.bid32_to_binary32("3", "[9c2cd76f]", "[801fffff]", "0x30")
    self.bid32_to_binary32("4", "[9c2cd76f]", "[801fffff]", "0x30")
    self.bid32_to_binary32("0", "[9c2cd770]", "[80200000]", "0x30")
    self.bid32_to_binary32("1", "[9c2cd770]", "[80200001]", "0x30")
    self.bid32_to_binary32("2", "[9c2cd770]", "[80200000]", "0x30")
    self.bid32_to_binary32("3", "[9c2cd770]", "[80200000]", "0x30")
    self.bid32_to_binary32("4", "[9c2cd770]", "[80200000]", "0x30")
    self.bid32_to_binary32("0", "[9c59aedf]", "[803fffff]", "0x30")
    self.bid32_to_binary32("1", "[9c59aedf]", "[80400000]", "0x30")
    self.bid32_to_binary32("2", "[9c59aedf]", "[803fffff]", "0x30")
    self.bid32_to_binary32("3", "[9c59aedf]", "[803fffff]", "0x30")
    self.bid32_to_binary32("4", "[9c59aedf]", "[803fffff]", "0x30")
    self.bid32_to_binary32("0", "[9c59aee0]", "[80400000]", "0x30")
    self.bid32_to_binary32("1", "[9c59aee0]", "[80400001]", "0x30")
    self.bid32_to_binary32("2", "[9c59aee0]", "[80400000]", "0x30")
    self.bid32_to_binary32("3", "[9c59aee0]", "[80400000]", "0x30")
    self.bid32_to_binary32("4", "[9c59aee0]", "[80400000]", "0x30")
    self.bid32_to_binary32("0", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("1", "[9c8f350e]", "[806c85c5]", "0x30")
    self.bid32_to_binary32("2", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("3", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("4", "[9c8f350e]", "[806c85c4]", "0x30")
    self.bid32_to_binary32("0", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("1", "[9c91efc6]", "[807ffffe]", "0x30")
    self.bid32_to_binary32("2", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("3", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("4", "[9c91efc6]", "[807ffffd]", "0x30")
    self.bid32_to_binary32("0", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("1", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("2", "[9c91efc7]", "[80800004]", "0x20")
    self.bid32_to_binary32("3", "[9c91efc7]", "[80800004]", "0x20")
    self.bid32_to_binary32("4", "[9c91efc7]", "[80800005]", "0x20")
    self.bid32_to_binary32("0", "[9c9e6a1c]", "[80d90b88]", "0x20")
    self.bid32_to_binary32("1", "[9c9e6a1c]", "[80d90b89]", "0x20")
    self.bid32_to_binary32("2", "[9c9e6a1c]", "[80d90b88]", "0x20")
    self.bid32_to_binary32("3", "[9c9e6a1c]", "[80d90b88]", "0x20")
    self.bid32_to_binary32("4", "[9c9e6a1c]", "[80d90b88]", "0x20")
    self.bid32_to_binary32("0", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("1", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("2", "[9ca3df8c]", "[80fffffa]", "0x20")
    self.bid32_to_binary32("3", "[9ca3df8c]", "[80fffffa]", "0x20")
    self.bid32_to_binary32("4", "[9ca3df8c]", "[80fffffb]", "0x20")
    self.bid32_to_binary32("0", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("1", "[9ca3df8d]", "[81000002]", "0x20")
    self.bid32_to_binary32("2", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("3", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("4", "[9ca3df8d]", "[81000001]", "0x20")
    self.bid32_to_binary32("0", "[9d042f3f]", "[81154f56]", "0x20")
    self.bid32_to_binary32("1", "[9d042f3f]", "[81154f57]", "0x20")
    self.bid32_to_binary32("2", "[9d042f3f]", "[81154f56]", "0x20")
    self.bid32_to_binary32("3", "[9d042f3f]", "[81154f56]", "0x20")
    self.bid32_to_binary32("4", "[9d042f3f]", "[81154f56]", "0x20")
    self.bid32_to_binary32("0", "[9da9f7c8]", "[8469fa95]", "0x20")
    self.bid32_to_binary32("1", "[9da9f7c8]", "[8469fa96]", "0x20")
    self.bid32_to_binary32("2", "[9da9f7c8]", "[8469fa95]", "0x20")
    self.bid32_to_binary32("3", "[9da9f7c8]", "[8469fa95]", "0x20")
    self.bid32_to_binary32("4", "[9da9f7c8]", "[8469fa95]", "0x20")
    self.bid32_to_binary32("0", "[9e09d7c7]", "[85093092]", "0x20")
    self.bid32_to_binary32("1", "[9e09d7c7]", "[85093092]", "0x20")
    self.bid32_to_binary32("2", "[9e09d7c7]", "[85093091]", "0x20")
    self.bid32_to_binary32("3", "[9e09d7c7]", "[85093091]", "0x20")
    self.bid32_to_binary32("4", "[9e09d7c7]", "[85093092]", "0x20")
    self.bid32_to_binary32("0", "[9efe507f]", "[88898b53]", "0x20")
    self.bid32_to_binary32("1", "[9efe507f]", "[88898b54]", "0x20")
    self.bid32_to_binary32("2", "[9efe507f]", "[88898b53]", "0x20")
    self.bid32_to_binary32("3", "[9efe507f]", "[88898b53]", "0x20")
    self.bid32_to_binary32("4", "[9efe507f]", "[88898b53]", "0x20")
    self.bid32_to_binary32("0", "[9f2c2ed4]", "[89708e01]", "0x20")
    self.bid32_to_binary32("1", "[9f2c2ed4]", "[89708e02]", "0x20")
    self.bid32_to_binary32("2", "[9f2c2ed4]", "[89708e01]", "0x20")
    self.bid32_to_binary32("3", "[9f2c2ed4]", "[89708e01]", "0x20")
    self.bid32_to_binary32("4", "[9f2c2ed4]", "[89708e01]", "0x20")
    self.bid32_to_binary32("0", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("1", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("2", "[9f863bfd]", "[89a9b6ee]", "0x20")
    self.bid32_to_binary32("3", "[9f863bfd]", "[89a9b6ee]", "0x20")
    self.bid32_to_binary32("4", "[9f863bfd]", "[89a9b6ef]", "0x20")
    self.bid32_to_binary32("0", "[9fd221ab]", "[8b8bbd52]", "0x20")
    self.bid32_to_binary32("1", "[9fd221ab]", "[8b8bbd53]", "0x20")
    self.bid32_to_binary32("2", "[9fd221ab]", "[8b8bbd52]", "0x20")
    self.bid32_to_binary32("3", "[9fd221ab]", "[8b8bbd52]", "0x20")
    self.bid32_to_binary32("4", "[9fd221ab]", "[8b8bbd52]", "0x20")
    self.bid32_to_binary32("0", "[a05221ab]", "[8d2eaca7]", "0x20")
    self.bid32_to_binary32("1", "[a05221ab]", "[8d2eaca7]", "0x20")
    self.bid32_to_binary32("2", "[a05221ab]", "[8d2eaca6]", "0x20")
    self.bid32_to_binary32("3", "[a05221ab]", "[8d2eaca6]", "0x20")
    self.bid32_to_binary32("4", "[a05221ab]", "[8d2eaca7]", "0x20")
    self.bid32_to_binary32("0", "[a097ef8e]", "[8dfe8756]", "0x20")
    self.bid32_to_binary32("1", "[a097ef8e]", "[8dfe8757]", "0x20")
    self.bid32_to_binary32("2", "[a097ef8e]", "[8dfe8756]", "0x20")
    self.bid32_to_binary32("3", "[a097ef8e]", "[8dfe8756]", "0x20")
    self.bid32_to_binary32("4", "[a097ef8e]", "[8dfe8756]", "0x20")
    self.bid32_to_binary32("0", "[a102b8e9]", "[8e10be19]", "0x20")
    self.bid32_to_binary32("1", "[a102b8e9]", "[8e10be1a]", "0x20")
    self.bid32_to_binary32("2", "[a102b8e9]", "[8e10be19]", "0x20")
    self.bid32_to_binary32("3", "[a102b8e9]", "[8e10be19]", "0x20")
    self.bid32_to_binary32("4", "[a102b8e9]", "[8e10be19]", "0x20")
    self.bid32_to_binary32("0", "[a1649f67]", "[90a73026]", "0x20")
    self.bid32_to_binary32("1", "[a1649f67]", "[90a73027]", "0x20")
    self.bid32_to_binary32("2", "[a1649f67]", "[90a73026]", "0x20")
    self.bid32_to_binary32("3", "[a1649f67]", "[90a73026]", "0x20")
    self.bid32_to_binary32("4", "[a1649f67]", "[90a73026]", "0x20")
    self.bid32_to_binary32("0", "[a1a324b9]", "[9191faec]", "0x20")
    self.bid32_to_binary32("1", "[a1a324b9]", "[9191faed]", "0x20")
    self.bid32_to_binary32("2", "[a1a324b9]", "[9191faec]", "0x20")
    self.bid32_to_binary32("3", "[a1a324b9]", "[9191faec]", "0x20")
    self.bid32_to_binary32("4", "[a1a324b9]", "[9191faec]", "0x20")
    self.bid32_to_binary32("0", "[a2061131]", "[91fc050c]", "0x20")
    self.bid32_to_binary32("1", "[a2061131]", "[91fc050d]", "0x20")
    self.bid32_to_binary32("2", "[a2061131]", "[91fc050c]", "0x20")
    self.bid32_to_binary32("3", "[a2061131]", "[91fc050c]", "0x20")
    self.bid32_to_binary32("4", "[a2061131]", "[91fc050c]", "0x20")
    self.bid32_to_binary32("0", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("1", "[a2eb6643]", "[95ae43fe]", "0x20")
    self.bid32_to_binary32("2", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("3", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("4", "[a2eb6643]", "[95ae43fd]", "0x20")
    self.bid32_to_binary32("0", "[a307d92a]", "[957eb11a]", "0x20")
    self.bid32_to_binary32("1", "[a307d92a]", "[957eb11a]", "0x20")
    self.bid32_to_binary32("2", "[a307d92a]", "[957eb119]", "0x20")
    self.bid32_to_binary32("3", "[a307d92a]", "[957eb119]", "0x20")
    self.bid32_to_binary32("4", "[a307d92a]", "[957eb11a]", "0x20")
    self.bid32_to_binary32("0", "[a38436b1]", "[96aaecec]", "0x20")
    self.bid32_to_binary32("1", "[a38436b1]", "[96aaeced]", "0x20")
    self.bid32_to_binary32("2", "[a38436b1]", "[96aaecec]", "0x20")
    self.bid32_to_binary32("3", "[a38436b1]", "[96aaecec]", "0x20")
    self.bid32_to_binary32("4", "[a38436b1]", "[96aaecec]", "0x20")
    self.bid32_to_binary32("0", "[a3d3dac5]", "[98d498ba]", "0x20")
    self.bid32_to_binary32("1", "[a3d3dac5]", "[98d498bb]", "0x20")
    self.bid32_to_binary32("2", "[a3d3dac5]", "[98d498ba]", "0x20")
    self.bid32_to_binary32("3", "[a3d3dac5]", "[98d498ba]", "0x20")
    self.bid32_to_binary32("4", "[a3d3dac5]", "[98d498ba]", "0x20")
    self.bid32_to_binary32("0", "[a44d1cdd]", "[9a74614b]", "0x20")
    self.bid32_to_binary32("1", "[a44d1cdd]", "[9a74614b]", "0x20")
    self.bid32_to_binary32("2", "[a44d1cdd]", "[9a74614a]", "0x20")
    self.bid32_to_binary32("3", "[a44d1cdd]", "[9a74614a]", "0x20")
    self.bid32_to_binary32("4", "[a44d1cdd]", "[9a74614b]", "0x20")
    self.bid32_to_binary32("0", "[a48b60a1]", "[9ab44872]", "0x20")
    self.bid32_to_binary32("1", "[a48b60a1]", "[9ab44873]", "0x20")
    self.bid32_to_binary32("2", "[a48b60a1]", "[9ab44872]", "0x20")
    self.bid32_to_binary32("3", "[a48b60a1]", "[9ab44872]", "0x20")
    self.bid32_to_binary32("4", "[a48b60a1]", "[9ab44872]", "0x20")
    self.bid32_to_binary32("0", "[a4ff421a]", "[9c7c0f94]", "0x20")
    self.bid32_to_binary32("1", "[a4ff421a]", "[9c7c0f94]", "0x20")
    self.bid32_to_binary32("2", "[a4ff421a]", "[9c7c0f93]", "0x20")
    self.bid32_to_binary32("3", "[a4ff421a]", "[9c7c0f93]", "0x20")
    self.bid32_to_binary32("4", "[a4ff421a]", "[9c7c0f94]", "0x20")
    self.bid32_to_binary32("0", "[a603ee42]", "[9ef34c57]", "0x20")
    self.bid32_to_binary32("1", "[a603ee42]", "[9ef34c58]", "0x20")
    self.bid32_to_binary32("2", "[a603ee42]", "[9ef34c57]", "0x20")
    self.bid32_to_binary32("3", "[a603ee42]", "[9ef34c57]", "0x20")
    self.bid32_to_binary32("4", "[a603ee42]", "[9ef34c57]", "0x20")
    self.bid32_to_binary32("0", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("1", "[a607dc84]", "[9f734c58]", "0x20")
    self.bid32_to_binary32("2", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("3", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("4", "[a607dc84]", "[9f734c57]", "0x20")
    self.bid32_to_binary32("0", "[a6438f4f]", "[a102adfe]", "0x20")
    self.bid32_to_binary32("1", "[a6438f4f]", "[a102adfe]", "0x20")
    self.bid32_to_binary32("2", "[a6438f4f]", "[a102adfd]", "0x20")
    self.bid32_to_binary32("3", "[a6438f4f]", "[a102adfd]", "0x20")
    self.bid32_to_binary32("4", "[a6438f4f]", "[a102adfe]", "0x20")
    self.bid32_to_binary32("0", "[a6d88aaa]", "[a2d614a1]", "0x20")
    self.bid32_to_binary32("1", "[a6d88aaa]", "[a2d614a2]", "0x20")
    self.bid32_to_binary32("2", "[a6d88aaa]", "[a2d614a1]", "0x20")
    self.bid32_to_binary32("3", "[a6d88aaa]", "[a2d614a1]", "0x20")
    self.bid32_to_binary32("4", "[a6d88aaa]", "[a2d614a1]", "0x20")
    self.bid32_to_binary32("0", "[a714fb5b]", "[a37da7b4]", "0x20")
    self.bid32_to_binary32("1", "[a714fb5b]", "[a37da7b5]", "0x20")
    self.bid32_to_binary32("2", "[a714fb5b]", "[a37da7b4]", "0x20")
    self.bid32_to_binary32("3", "[a714fb5b]", "[a37da7b4]", "0x20")
    self.bid32_to_binary32("4", "[a714fb5b]", "[a37da7b4]", "0x20")
    self.bid32_to_binary32("0", "[a78435d2]", "[a3fe7e3d]", "0x20")
    self.bid32_to_binary32("1", "[a78435d2]", "[a3fe7e3e]", "0x20")
    self.bid32_to_binary32("2", "[a78435d2]", "[a3fe7e3d]", "0x20")
    self.bid32_to_binary32("3", "[a78435d2]", "[a3fe7e3d]", "0x20")
    self.bid32_to_binary32("4", "[a78435d2]", "[a3fe7e3d]", "0x20")
    self.bid32_to_binary32("0", "[a7e84da5]", "[a64505fb]", "0x20")
    self.bid32_to_binary32("1", "[a7e84da5]", "[a64505fb]", "0x20")
    self.bid32_to_binary32("2", "[a7e84da5]", "[a64505fa]", "0x20")
    self.bid32_to_binary32("3", "[a7e84da5]", "[a64505fa]", "0x20")
    self.bid32_to_binary32("4", "[a7e84da5]", "[a64505fb]", "0x20")
    self.bid32_to_binary32("0", "[a8043c9d]", "[a5a00f88]", "0x20")
    self.bid32_to_binary32("1", "[a8043c9d]", "[a5a00f89]", "0x20")
    self.bid32_to_binary32("2", "[a8043c9d]", "[a5a00f88]", "0x20")
    self.bid32_to_binary32("3", "[a8043c9d]", "[a5a00f88]", "0x20")
    self.bid32_to_binary32("4", "[a8043c9d]", "[a5a00f88]", "0x20")
    self.bid32_to_binary32("0", "[a8843c9d]", "[a748136a]", "0x20")
    self.bid32_to_binary32("1", "[a8843c9d]", "[a748136b]", "0x20")
    self.bid32_to_binary32("2", "[a8843c9d]", "[a748136a]", "0x20")
    self.bid32_to_binary32("3", "[a8843c9d]", "[a748136a]", "0x20")
    self.bid32_to_binary32("4", "[a8843c9d]", "[a748136a]", "0x20")
    self.bid32_to_binary32("0", "[a8c79466]", "[a9534414]", "0x20")
    self.bid32_to_binary32("1", "[a8c79466]", "[a9534414]", "0x20")
    self.bid32_to_binary32("2", "[a8c79466]", "[a9534413]", "0x20")
    self.bid32_to_binary32("3", "[a8c79466]", "[a9534413]", "0x20")
    self.bid32_to_binary32("4", "[a8c79466]", "[a9534414]", "0x20")
    self.bid32_to_binary32("0", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("1", "[a96a9c7b]", "[ab44a9be]", "0x20")
    self.bid32_to_binary32("2", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("3", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[a96a9c7b]", "[ab44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[a995527f]", "[abc4a9bd]", "0x20")
    self.bid32_to_binary32("1", "[a995527f]", "[abc4a9be]", "0x20")
    self.bid32_to_binary32("2", "[a995527f]", "[abc4a9bd]", "0x20")
    self.bid32_to_binary32("3", "[a995527f]", "[abc4a9bd]", "0x20")
    self.bid32_to_binary32("4", "[a995527f]", "[abc4a9bd]", "0x20")
    self.bid32_to_binary32("0", "[aa0443b3]", "[ac44a9bd]", "0x20")
    self.bid32_to_binary32("1", "[aa0443b3]", "[ac44a9be]", "0x20")
    self.bid32_to_binary32("2", "[aa0443b3]", "[ac44a9bd]", "0x20")
    self.bid32_to_binary32("3", "[aa0443b3]", "[ac44a9bd]", "0x20")
    self.bid32_to_binary32("4", "[aa0443b3]", "[ac44a9bd]", "0x20")
    self.bid32_to_binary32("0", "[aa6090d9]", "[ae8b2a7f]", "0x20")
    self.bid32_to_binary32("1", "[aa6090d9]", "[ae8b2a80]", "0x20")
    self.bid32_to_binary32("2", "[aa6090d9]", "[ae8b2a7f]", "0x20")
    self.bid32_to_binary32("3", "[aa6090d9]", "[ae8b2a7f]", "0x20")
    self.bid32_to_binary32("4", "[aa6090d9]", "[ae8b2a7f]", "0x20")
    self.bid32_to_binary32("0", "[ab057560]", "[afc4a9bd]", "0x20")
    self.bid32_to_binary32("1", "[ab057560]", "[afc4a9be]", "0x20")
    self.bid32_to_binary32("2", "[ab057560]", "[afc4a9bd]", "0x20")
    self.bid32_to_binary32("3", "[ab057560]", "[afc4a9bd]", "0x20")
    self.bid32_to_binary32("4", "[ab057560]", "[afc4a9bd]", "0x20")
    self.bid32_to_binary32("0", "[ab0aeac0]", "[b044a9bd]", "0x20")
    self.bid32_to_binary32("1", "[ab0aeac0]", "[b044a9be]", "0x20")
    self.bid32_to_binary32("2", "[ab0aeac0]", "[b044a9bd]", "0x20")
    self.bid32_to_binary32("3", "[ab0aeac0]", "[b044a9bd]", "0x20")
    self.bid32_to_binary32("4", "[ab0aeac0]", "[b044a9bd]", "0x20")
    self.bid32_to_binary32("0", "[ab29fb19]", "[b13d10a0]", "0x20")
    self.bid32_to_binary32("1", "[ab29fb19]", "[b13d10a1]", "0x20")
    self.bid32_to_binary32("2", "[ab29fb19]", "[b13d10a0]", "0x20")
    self.bid32_to_binary32("3", "[ab29fb19]", "[b13d10a0]", "0x20")
    self.bid32_to_binary32("4", "[ab29fb19]", "[b13d10a0]", "0x20")
    self.bid32_to_binary32("0", "[abfbf1bd]", "[b3ae6fa3]", "0x20")
    self.bid32_to_binary32("1", "[abfbf1bd]", "[b3ae6fa4]", "0x20")
    self.bid32_to_binary32("2", "[abfbf1bd]", "[b3ae6fa3]", "0x20")
    self.bid32_to_binary32("3", "[abfbf1bd]", "[b3ae6fa3]", "0x20")
    self.bid32_to_binary32("4", "[abfbf1bd]", "[b3ae6fa3]", "0x20")
    self.bid32_to_binary32("0", "[ac1097af]", "[b3e984d5]", "0x20")
    self.bid32_to_binary32("1", "[ac1097af]", "[b3e984d6]", "0x20")
    self.bid32_to_binary32("2", "[ac1097af]", "[b3e984d5]", "0x20")
    self.bid32_to_binary32("3", "[ac1097af]", "[b3e984d5]", "0x20")
    self.bid32_to_binary32("4", "[ac1097af]", "[b3e984d5]", "0x20")
    self.bid32_to_binary32("0", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("1", "[ac866feb]", "[b4e27cf6]", "0x20")
    self.bid32_to_binary32("2", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("3", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("4", "[ac866feb]", "[b4e27cf5]", "0x20")
    self.bid32_to_binary32("0", "[acef11e7]", "[b6f43ed0]", "0x20")
    self.bid32_to_binary32("1", "[acef11e7]", "[b6f43ed1]", "0x20")
    self.bid32_to_binary32("2", "[acef11e7]", "[b6f43ed0]", "0x20")
    self.bid32_to_binary32("3", "[acef11e7]", "[b6f43ed0]", "0x20")
    self.bid32_to_binary32("4", "[acef11e7]", "[b6f43ed0]", "0x20")
    self.bid32_to_binary32("0", "[ad856b1a]", "[b814f05c]", "0x20")
    self.bid32_to_binary32("1", "[ad856b1a]", "[b814f05c]", "0x20")
    self.bid32_to_binary32("2", "[ad856b1a]", "[b814f05b]", "0x20")
    self.bid32_to_binary32("3", "[ad856b1a]", "[b814f05b]", "0x20")
    self.bid32_to_binary32("4", "[ad856b1a]", "[b814f05c]", "0x20")
    self.bid32_to_binary32("0", "[ad8ad634]", "[b894f05c]", "0x20")
    self.bid32_to_binary32("1", "[ad8ad634]", "[b894f05c]", "0x20")
    self.bid32_to_binary32("2", "[ad8ad634]", "[b894f05b]", "0x20")
    self.bid32_to_binary32("3", "[ad8ad634]", "[b894f05b]", "0x20")
    self.bid32_to_binary32("4", "[ad8ad634]", "[b894f05c]", "0x20")
    self.bid32_to_binary32("0", "[ade1811c]", "[ba2782dc]", "0x20")
    self.bid32_to_binary32("1", "[ade1811c]", "[ba2782dd]", "0x20")
    self.bid32_to_binary32("2", "[ade1811c]", "[ba2782dc]", "0x20")
    self.bid32_to_binary32("3", "[ade1811c]", "[ba2782dc]", "0x20")
    self.bid32_to_binary32("4", "[ade1811c]", "[ba2782dc]", "0x20")
    self.bid32_to_binary32("0", "[aead8bfc]", "[bcf48710]", "0x20")
    self.bid32_to_binary32("1", "[aead8bfc]", "[bcf48711]", "0x20")
    self.bid32_to_binary32("2", "[aead8bfc]", "[bcf48710]", "0x20")
    self.bid32_to_binary32("3", "[aead8bfc]", "[bcf48710]", "0x20")
    self.bid32_to_binary32("4", "[aead8bfc]", "[bcf48710]", "0x20")
    self.bid32_to_binary32("0", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("1", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("2", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("3", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("4", "[aecd7c6d]", "[bd500000]", "0x00")
    self.bid32_to_binary32("0", "[af089789]", "[bd66a352]", "0x20")
    self.bid32_to_binary32("1", "[af089789]", "[bd66a353]", "0x20")
    self.bid32_to_binary32("2", "[af089789]", "[bd66a352]", "0x20")
    self.bid32_to_binary32("3", "[af089789]", "[bd66a352]", "0x20")
    self.bid32_to_binary32("4", "[af089789]", "[bd66a352]", "0x20")
    self.bid32_to_binary32("0", "[b030d188]", "[c1fff30e]", "0x20")
    self.bid32_to_binary32("1", "[b030d188]", "[c1fff30f]", "0x20")
    self.bid32_to_binary32("2", "[b030d188]", "[c1fff30e]", "0x20")
    self.bid32_to_binary32("3", "[b030d188]", "[c1fff30e]", "0x20")
    self.bid32_to_binary32("4", "[b030d188]", "[c1fff30e]", "0x20")
    self.bid32_to_binary32("0", "[b089c3f9]", "[c27fff48]", "0x20")
    self.bid32_to_binary32("1", "[b089c3f9]", "[c27fff49]", "0x20")
    self.bid32_to_binary32("2", "[b089c3f9]", "[c27fff48]", "0x20")
    self.bid32_to_binary32("3", "[b089c3f9]", "[c27fff48]", "0x20")
    self.bid32_to_binary32("4", "[b089c3f9]", "[c27fff48]", "0x20")
    self.bid32_to_binary32("0", "[b17cffb7]", "[c5ffff6a]", "0x20")
    self.bid32_to_binary32("1", "[b17cffb7]", "[c5ffff6b]", "0x20")
    self.bid32_to_binary32("2", "[b17cffb7]", "[c5ffff6a]", "0x20")
    self.bid32_to_binary32("3", "[b17cffb7]", "[c5ffff6a]", "0x20")
    self.bid32_to_binary32("4", "[b17cffb7]", "[c5ffff6a]", "0x20")
    self.bid32_to_binary32("0", "[b198ffe9]", "[c67fff14]", "0x20")
    self.bid32_to_binary32("1", "[b198ffe9]", "[c67fff15]", "0x20")
    self.bid32_to_binary32("2", "[b198ffe9]", "[c67fff14]", "0x20")
    self.bid32_to_binary32("3", "[b198ffe9]", "[c67fff14]", "0x20")
    self.bid32_to_binary32("4", "[b198ffe9]", "[c67fff14]", "0x20")
    self.bid32_to_binary32("0", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("1", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("2", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("3", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("4", "[b200000f]", "[bfc00000]", "0x00")
    self.bid32_to_binary32("0", "[b204fffd]", "[c6ffff66]", "0x20")
    self.bid32_to_binary32("1", "[b204fffd]", "[c6ffff67]", "0x20")
    self.bid32_to_binary32("2", "[b204fffd]", "[c6ffff66]", "0x20")
    self.bid32_to_binary32("3", "[b204fffd]", "[c6ffff66]", "0x20")
    self.bid32_to_binary32("4", "[b204fffd]", "[c6ffff66]", "0x20")
    self.bid32_to_binary32("0", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("1", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("2", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("3", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("4", "[b2800001]", "[bf800000]", "0x00")
    self.bid32_to_binary32("0", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("1", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("2", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("3", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("4", "[b2800040]", "[c2800000]", "0x00")
    self.bid32_to_binary32("0", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("1", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("2", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("3", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("4", "[b28003e7]", "[c479c000]", "0x00")
    self.bid32_to_binary32("0", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("1", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("2", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("3", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("4", "[b28003e8]", "[c47a0000]", "0x00")
    self.bid32_to_binary32("0", "[b2bfffff]", "[ca7ffffc]", "0x00")
    self.bid32_to_binary32("1", "[b2bfffff]", "[ca7ffffc]", "0x00")
    self.bid32_to_binary32("2", "[b2bfffff]", "[ca7ffffc]", "0x00")
    self.bid32_to_binary32("3", "[b2bfffff]", "[ca7ffffc]", "0x00")
    self.bid32_to_binary32("4", "[b2bfffff]", "[ca7ffffc]", "0x00")
    self.bid32_to_binary32("0", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("1", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("2", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("3", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("4", "[b2fffff8]", "[cafffff0]", "0x00")
    self.bid32_to_binary32("0", "[b420c49b]", "[cefffffb]", "0x20")
    self.bid32_to_binary32("1", "[b420c49b]", "[cefffffb]", "0x20")
    self.bid32_to_binary32("2", "[b420c49b]", "[cefffffa]", "0x20")
    self.bid32_to_binary32("3", "[b420c49b]", "[cefffffa]", "0x20")
    self.bid32_to_binary32("4", "[b420c49b]", "[cefffffb]", "0x20")
    self.bid32_to_binary32("0", "[b4418926]", "[cf7fffbc]", "0x20")
    self.bid32_to_binary32("1", "[b4418926]", "[cf7fffbd]", "0x20")
    self.bid32_to_binary32("2", "[b4418926]", "[cf7fffbc]", "0x20")
    self.bid32_to_binary32("3", "[b4418926]", "[cf7fffbc]", "0x20")
    self.bid32_to_binary32("4", "[b4418926]", "[cf7fffbc]", "0x20")
    self.bid32_to_binary32("0", "[b553e1e3]", "[d2fffd1a]", "0x20")
    self.bid32_to_binary32("1", "[b553e1e3]", "[d2fffd1a]", "0x20")
    self.bid32_to_binary32("2", "[b553e1e3]", "[d2fffd19]", "0x20")
    self.bid32_to_binary32("3", "[b553e1e3]", "[d2fffd19]", "0x20")
    self.bid32_to_binary32("4", "[b553e1e3]", "[d2fffd1a]", "0x20")
    self.bid32_to_binary32("0", "[b590c6c7]", "[d37ffd1a]", "0x20")
    self.bid32_to_binary32("1", "[b590c6c7]", "[d37ffd1a]", "0x20")
    self.bid32_to_binary32("2", "[b590c6c7]", "[d37ffd19]", "0x20")
    self.bid32_to_binary32("3", "[b590c6c7]", "[d37ffd19]", "0x20")
    self.bid32_to_binary32("4", "[b590c6c7]", "[d37ffd1a]", "0x20")
    self.bid32_to_binary32("0", "[b6aaf1df]", "[d77ff894]", "0x20")
    self.bid32_to_binary32("1", "[b6aaf1df]", "[d77ff894]", "0x20")
    self.bid32_to_binary32("2", "[b6aaf1df]", "[d77ff893]", "0x20")
    self.bid32_to_binary32("3", "[b6aaf1df]", "[d77ff893]", "0x20")
    self.bid32_to_binary32("4", "[b6aaf1df]", "[d77ff894]", "0x20")
    self.bid32_to_binary32("0", "[b6d3e3be]", "[d7fa02b3]", "0x20")
    self.bid32_to_binary32("1", "[b6d3e3be]", "[d7fa02b3]", "0x20")
    self.bid32_to_binary32("2", "[b6d3e3be]", "[d7fa02b2]", "0x20")
    self.bid32_to_binary32("3", "[b6d3e3be]", "[d7fa02b2]", "0x20")
    self.bid32_to_binary32("4", "[b6d3e3be]", "[d7fa02b3]", "0x20")
    self.bid32_to_binary32("0", "[b7b0fa48]", "[dae411ec]", "0x20")
    self.bid32_to_binary32("1", "[b7b0fa48]", "[dae411ed]", "0x20")
    self.bid32_to_binary32("2", "[b7b0fa48]", "[dae411ec]", "0x20")
    self.bid32_to_binary32("3", "[b7b0fa48]", "[dae411ec]", "0x20")
    self.bid32_to_binary32("4", "[b7b0fa48]", "[dae411ec]", "0x20")
    self.bid32_to_binary32("0", "[b7e9e0b7]", "[db768415]", "0x20")
    self.bid32_to_binary32("1", "[b7e9e0b7]", "[db768415]", "0x20")
    self.bid32_to_binary32("2", "[b7e9e0b7]", "[db768414]", "0x20")
    self.bid32_to_binary32("3", "[b7e9e0b7]", "[db768414]", "0x20")
    self.bid32_to_binary32("4", "[b7e9e0b7]", "[db768415]", "0x20")
    self.bid32_to_binary32("0", "[b8113975]", "[dbc884d6]", "0x20")
    self.bid32_to_binary32("1", "[b8113975]", "[dbc884d7]", "0x20")
    self.bid32_to_binary32("2", "[b8113975]", "[dbc884d6]", "0x20")
    self.bid32_to_binary32("3", "[b8113975]", "[dbc884d6]", "0x20")
    self.bid32_to_binary32("4", "[b8113975]", "[dbc884d6]", "0x20")
    self.bid32_to_binary32("0", "[b8f2b19b]", "[ded0a073]", "0x20")
    self.bid32_to_binary32("1", "[b8f2b19b]", "[ded0a074]", "0x20")
    self.bid32_to_binary32("2", "[b8f2b19b]", "[ded0a073]", "0x20")
    self.bid32_to_binary32("3", "[b8f2b19b]", "[ded0a073]", "0x20")
    self.bid32_to_binary32("4", "[b8f2b19b]", "[ded0a073]", "0x20")
    self.bid32_to_binary32("0", "[b93255b9]", "[dfe4e57b]", "0x20")
    self.bid32_to_binary32("1", "[b93255b9]", "[dfe4e57c]", "0x20")
    self.bid32_to_binary32("2", "[b93255b9]", "[dfe4e57b]", "0x20")
    self.bid32_to_binary32("3", "[b93255b9]", "[dfe4e57b]", "0x20")
    self.bid32_to_binary32("4", "[b93255b9]", "[dfe4e57b]", "0x20")
    self.bid32_to_binary32("0", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("1", "[b964ab72]", "[e064e57c]", "0x20")
    self.bid32_to_binary32("2", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("3", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("4", "[b964ab72]", "[e064e57b]", "0x20")
    self.bid32_to_binary32("0", "[b9f35a71]", "[e223ed48]", "0x20")
    self.bid32_to_binary32("1", "[b9f35a71]", "[e223ed49]", "0x20")
    self.bid32_to_binary32("2", "[b9f35a71]", "[e223ed48]", "0x20")
    self.bid32_to_binary32("3", "[b9f35a71]", "[e223ed48]", "0x20")
    self.bid32_to_binary32("4", "[b9f35a71]", "[e223ed48]", "0x20")
    self.bid32_to_binary32("0", "[ba17a214]", "[e2a7ec64]", "0x20")
    self.bid32_to_binary32("1", "[ba17a214]", "[e2a7ec64]", "0x20")
    self.bid32_to_binary32("2", "[ba17a214]", "[e2a7ec63]", "0x20")
    self.bid32_to_binary32("3", "[ba17a214]", "[e2a7ec63]", "0x20")
    self.bid32_to_binary32("4", "[ba17a214]", "[e2a7ec64]", "0x20")
    self.bid32_to_binary32("0", "[ba97a214]", "[e451e77d]", "0x20")
    self.bid32_to_binary32("1", "[ba97a214]", "[e451e77d]", "0x20")
    self.bid32_to_binary32("2", "[ba97a214]", "[e451e77c]", "0x20")
    self.bid32_to_binary32("3", "[ba97a214]", "[e451e77c]", "0x20")
    self.bid32_to_binary32("4", "[ba97a214]", "[e451e77d]", "0x20")
    self.bid32_to_binary32("0", "[bbacc6f7]", "[e81b5a26]", "0x20")
    self.bid32_to_binary32("1", "[bbacc6f7]", "[e81b5a26]", "0x20")
    self.bid32_to_binary32("2", "[bbacc6f7]", "[e81b5a25]", "0x20")
    self.bid32_to_binary32("3", "[bbacc6f7]", "[e81b5a25]", "0x20")
    self.bid32_to_binary32("4", "[bbacc6f7]", "[e81b5a26]", "0x20")
    self.bid32_to_binary32("0", "[bbe33922]", "[e8ac1ff1]", "0x20")
    self.bid32_to_binary32("1", "[bbe33922]", "[e8ac1ff1]", "0x20")
    self.bid32_to_binary32("2", "[bbe33922]", "[e8ac1ff0]", "0x20")
    self.bid32_to_binary32("3", "[bbe33922]", "[e8ac1ff0]", "0x20")
    self.bid32_to_binary32("4", "[bbe33922]", "[e8ac1ff1]", "0x20")
    self.bid32_to_binary32("0", "[bc409f31]", "[ea0c2054]", "0x20")
    self.bid32_to_binary32("1", "[bc409f31]", "[ea0c2054]", "0x20")
    self.bid32_to_binary32("2", "[bc409f31]", "[ea0c2053]", "0x20")
    self.bid32_to_binary32("3", "[bc409f31]", "[ea0c2053]", "0x20")
    self.bid32_to_binary32("4", "[bc409f31]", "[ea0c2054]", "0x20")
    self.bid32_to_binary32("0", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("1", "[bcf57036]", "[ec1f289b]", "0x20")
    self.bid32_to_binary32("2", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("3", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("4", "[bcf57036]", "[ec1f289a]", "0x20")
    self.bid32_to_binary32("0", "[bd24697b]", "[ecf6bccf]", "0x20")
    self.bid32_to_binary32("1", "[bd24697b]", "[ecf6bccf]", "0x20")
    self.bid32_to_binary32("2", "[bd24697b]", "[ecf6bcce]", "0x20")
    self.bid32_to_binary32("3", "[bd24697b]", "[ecf6bcce]", "0x20")
    self.bid32_to_binary32("4", "[bd24697b]", "[ecf6bccf]", "0x20")
    self.bid32_to_binary32("0", "[bd4ad0e4]", "[ed7d7c85]", "0x20")
    self.bid32_to_binary32("1", "[bd4ad0e4]", "[ed7d7c85]", "0x20")
    self.bid32_to_binary32("2", "[bd4ad0e4]", "[ed7d7c84]", "0x20")
    self.bid32_to_binary32("3", "[bd4ad0e4]", "[ed7d7c84]", "0x20")
    self.bid32_to_binary32("4", "[bd4ad0e4]", "[ed7d7c85]", "0x20")
    self.bid32_to_binary32("0", "[be2b67fc]", "[f065ca5b]", "0x20")
    self.bid32_to_binary32("1", "[be2b67fc]", "[f065ca5b]", "0x20")
    self.bid32_to_binary32("2", "[be2b67fc]", "[f065ca5a]", "0x20")
    self.bid32_to_binary32("3", "[be2b67fc]", "[f065ca5a]", "0x20")
    self.bid32_to_binary32("4", "[be2b67fc]", "[f065ca5b]", "0x20")
    self.bid32_to_binary32("0", "[be7ed3da]", "[f127dad8]", "0x20")
    self.bid32_to_binary32("1", "[be7ed3da]", "[f127dad8]", "0x20")
    self.bid32_to_binary32("2", "[be7ed3da]", "[f127dad7]", "0x20")
    self.bid32_to_binary32("3", "[be7ed3da]", "[f127dad7]", "0x20")
    self.bid32_to_binary32("4", "[be7ed3da]", "[f127dad8]", "0x20")
    self.bid32_to_binary32("0", "[bf741223]", "[f4700765]", "0x20")
    self.bid32_to_binary32("1", "[bf741223]", "[f4700766]", "0x20")
    self.bid32_to_binary32("2", "[bf741223]", "[f4700765]", "0x20")
    self.bid32_to_binary32("3", "[bf741223]", "[f4700765]", "0x20")
    self.bid32_to_binary32("4", "[bf741223]", "[f4700765]", "0x20")
    self.bid32_to_binary32("0", "[bfa4483a]", "[f53b9302]", "0x20")
    self.bid32_to_binary32("1", "[bfa4483a]", "[f53b9302]", "0x20")
    self.bid32_to_binary32("2", "[bfa4483a]", "[f53b9301]", "0x20")
    self.bid32_to_binary32("3", "[bfa4483a]", "[f53b9301]", "0x20")
    self.bid32_to_binary32("4", "[bfa4483a]", "[f53b9302]", "0x20")
    self.bid32_to_binary32("0", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("1", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("2", "[bfba1d8a]", "[f5963989]", "0x20")
    self.bid32_to_binary32("3", "[bfba1d8a]", "[f5963989]", "0x20")
    self.bid32_to_binary32("4", "[bfba1d8a]", "[f596398a]", "0x20")
    self.bid32_to_binary32("0", "[c072a86f]", "[f7b93d6a]", "0x20")
    self.bid32_to_binary32("1", "[c072a86f]", "[f7b93d6b]", "0x20")
    self.bid32_to_binary32("2", "[c072a86f]", "[f7b93d6a]", "0x20")
    self.bid32_to_binary32("3", "[c072a86f]", "[f7b93d6a]", "0x20")
    self.bid32_to_binary32("4", "[c072a86f]", "[f7b93d6a]", "0x20")
    self.bid32_to_binary32("0", "[c0b3a48a]", "[f8d09555]", "0x20")
    self.bid32_to_binary32("1", "[c0b3a48a]", "[f8d09555]", "0x20")
    self.bid32_to_binary32("2", "[c0b3a48a]", "[f8d09554]", "0x20")
    self.bid32_to_binary32("3", "[c0b3a48a]", "[f8d09554]", "0x20")
    self.bid32_to_binary32("4", "[c0b3a48a]", "[f8d09555]", "0x20")
    self.bid32_to_binary32("0", "[c0fe07ca]", "[f97e8434]", "0x20")
    self.bid32_to_binary32("1", "[c0fe07ca]", "[f97e8435]", "0x20")
    self.bid32_to_binary32("2", "[c0fe07ca]", "[f97e8434]", "0x20")
    self.bid32_to_binary32("3", "[c0fe07ca]", "[f97e8434]", "0x20")
    self.bid32_to_binary32("4", "[c0fe07ca]", "[f97e8434]", "0x20")
    self.bid32_to_binary32("0", "[c12ff378]", "[fa721748]", "0x20")
    self.bid32_to_binary32("1", "[c12ff378]", "[fa721748]", "0x20")
    self.bid32_to_binary32("2", "[c12ff378]", "[fa721747]", "0x20")
    self.bid32_to_binary32("3", "[c12ff378]", "[fa721747]", "0x20")
    self.bid32_to_binary32("4", "[c12ff378]", "[fa721748]", "0x20")
    self.bid32_to_binary32("0", "[c1ea4c5d]", "[fca7b58a]", "0x20")
    self.bid32_to_binary32("1", "[c1ea4c5d]", "[fca7b58a]", "0x20")
    self.bid32_to_binary32("2", "[c1ea4c5d]", "[fca7b589]", "0x20")
    self.bid32_to_binary32("3", "[c1ea4c5d]", "[fca7b589]", "0x20")
    self.bid32_to_binary32("4", "[c1ea4c5d]", "[fca7b58a]", "0x20")
    self.bid32_to_binary32("0", "[c2154279]", "[fd27b58a]", "0x20")
    self.bid32_to_binary32("1", "[c2154279]", "[fd27b58a]", "0x20")
    self.bid32_to_binary32("2", "[c2154279]", "[fd27b589]", "0x20")
    self.bid32_to_binary32("3", "[c2154279]", "[fd27b589]", "0x20")
    self.bid32_to_binary32("4", "[c2154279]", "[fd27b58a]", "0x20")
    self.bid32_to_binary32("0", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("1", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("2", "[c2b3ec47]", "[ff7ffffc]", "0x20")
    self.bid32_to_binary32("3", "[c2b3ec47]", "[ff7ffffc]", "0x20")
    self.bid32_to_binary32("4", "[c2b3ec47]", "[ff7ffffd]", "0x20")
    self.bid32_to_binary32("0", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("1", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("2", "[c2b3ec48]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("3", "[c2b3ec48]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("4", "[c2b3ec48]", "[ff800000]", "0x28")
    self.bid32_to_binary32("0", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("1", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("2", "[e628c3f7]", "[80000000]", "0x30")
    self.bid32_to_binary32("3", "[e628c3f7]", "[80000000]", "0x30")
    self.bid32_to_binary32("4", "[e628c3f7]", "[80000001]", "0x30")
    self.bid32_to_binary32("0", "[e648c3f7]", "[80000006]", "0x30")
    self.bid32_to_binary32("1", "[e648c3f7]", "[80000007]", "0x30")
    self.bid32_to_binary32("2", "[e648c3f7]", "[80000006]", "0x30")
    self.bid32_to_binary32("3", "[e648c3f7]", "[80000006]", "0x30")
    self.bid32_to_binary32("4", "[e648c3f7]", "[80000006]", "0x30")
    self.bid32_to_binary32("0", "[e668c3f7]", "[80000040]", "0x30")
    self.bid32_to_binary32("1", "[e668c3f7]", "[80000040]", "0x30")
    self.bid32_to_binary32("2", "[e668c3f7]", "[8000003f]", "0x30")
    self.bid32_to_binary32("3", "[e668c3f7]", "[8000003f]", "0x30")
    self.bid32_to_binary32("4", "[e668c3f7]", "[80000040]", "0x30")
    self.bid32_to_binary32("0", "[e757de10]", "[83a9567d]", "0x20")
    self.bid32_to_binary32("1", "[e757de10]", "[83a9567e]", "0x20")
    self.bid32_to_binary32("2", "[e757de10]", "[83a9567d]", "0x20")
    self.bid32_to_binary32("3", "[e757de10]", "[83a9567d]", "0x20")
    self.bid32_to_binary32("4", "[e757de10]", "[83a9567d]", "0x20")
    self.bid32_to_binary32("0", "[e7980f56]", "[8704767e]", "0x20")
    self.bid32_to_binary32("1", "[e7980f56]", "[8704767e]", "0x20")
    self.bid32_to_binary32("2", "[e7980f56]", "[8704767d]", "0x20")
    self.bid32_to_binary32("3", "[e7980f56]", "[8704767d]", "0x20")
    self.bid32_to_binary32("4", "[e7980f56]", "[8704767e]", "0x20")
    self.bid32_to_binary32("0", "[e892a415]", "[943e59d0]", "0x20")
    self.bid32_to_binary32("1", "[e892a415]", "[943e59d0]", "0x20")
    self.bid32_to_binary32("2", "[e892a415]", "[943e59cf]", "0x20")
    self.bid32_to_binary32("3", "[e892a415]", "[943e59cf]", "0x20")
    self.bid32_to_binary32("4", "[e892a415]", "[943e59d0]", "0x20")
    self.bid32_to_binary32("0", "[e9569a05]", "[9e3a6f90]", "0x20")
    self.bid32_to_binary32("1", "[e9569a05]", "[9e3a6f91]", "0x20")
    self.bid32_to_binary32("2", "[e9569a05]", "[9e3a6f90]", "0x20")
    self.bid32_to_binary32("3", "[e9569a05]", "[9e3a6f90]", "0x20")
    self.bid32_to_binary32("4", "[e9569a05]", "[9e3a6f90]", "0x20")
    self.bid32_to_binary32("0", "[eb8cea0c]", "[bc174e36]", "0x20")
    self.bid32_to_binary32("1", "[eb8cea0c]", "[bc174e37]", "0x20")
    self.bid32_to_binary32("2", "[eb8cea0c]", "[bc174e36]", "0x20")
    self.bid32_to_binary32("3", "[eb8cea0c]", "[bc174e36]", "0x20")
    self.bid32_to_binary32("4", "[eb8cea0c]", "[bc174e36]", "0x20")
    self.bid32_to_binary32("0", "[ebd7b98a]", "[bf7e8d4a]", "0x20")
    self.bid32_to_binary32("1", "[ebd7b98a]", "[bf7e8d4a]", "0x20")
    self.bid32_to_binary32("2", "[ebd7b98a]", "[bf7e8d49]", "0x20")
    self.bid32_to_binary32("3", "[ebd7b98a]", "[bf7e8d49]", "0x20")
    self.bid32_to_binary32("4", "[ebd7b98a]", "[bf7e8d4a]", "0x20")
    self.bid32_to_binary32("0", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("1", "[ebf887d3]", "[c11ff09d]", "0x20")
    self.bid32_to_binary32("2", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("3", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("4", "[ebf887d3]", "[c11ff09c]", "0x20")
    self.bid32_to_binary32("0", "[ec3894c0]", "[c479fd22]", "0x20")
    self.bid32_to_binary32("1", "[ec3894c0]", "[c479fd22]", "0x20")
    self.bid32_to_binary32("2", "[ec3894c0]", "[c479fd21]", "0x20")
    self.bid32_to_binary32("3", "[ec3894c0]", "[c479fd21]", "0x20")
    self.bid32_to_binary32("4", "[ec3894c0]", "[c479fd22]", "0x20")
    self.bid32_to_binary32("0", "[ec98967e]", "[c97423fd]", "0x20")
    self.bid32_to_binary32("1", "[ec98967e]", "[c97423fd]", "0x20")
    self.bid32_to_binary32("2", "[ec98967e]", "[c97423fc]", "0x20")
    self.bid32_to_binary32("3", "[ec98967e]", "[c97423fc]", "0x20")
    self.bid32_to_binary32("4", "[ec98967e]", "[c97423fd]", "0x20")
    self.bid32_to_binary32("0", "[ecd8967b]", "[ccbebc1a]", "0x20")
    self.bid32_to_binary32("1", "[ecd8967b]", "[ccbebc1a]", "0x20")
    self.bid32_to_binary32("2", "[ecd8967b]", "[ccbebc19]", "0x20")
    self.bid32_to_binary32("3", "[ecd8967b]", "[ccbebc19]", "0x20")
    self.bid32_to_binary32("4", "[ecd8967b]", "[ccbebc1a]", "0x20")
    self.bid32_to_binary32("0", "[ecf8967f]", "[ce6e6b26]", "0x20")
    self.bid32_to_binary32("1", "[ecf8967f]", "[ce6e6b27]", "0x20")
    self.bid32_to_binary32("2", "[ecf8967f]", "[ce6e6b26]", "0x20")
    self.bid32_to_binary32("3", "[ecf8967f]", "[ce6e6b26]", "0x20")
    self.bid32_to_binary32("4", "[ecf8967f]", "[ce6e6b26]", "0x20")
    self.bid32_to_binary32("0", "[ed38956f]", "[d1ba426a]", "0x20")
    self.bid32_to_binary32("1", "[ed38956f]", "[d1ba426a]", "0x20")
    self.bid32_to_binary32("2", "[ed38956f]", "[d1ba4269]", "0x20")
    self.bid32_to_binary32("3", "[ed38956f]", "[d1ba4269]", "0x20")
    self.bid32_to_binary32("4", "[ed38956f]", "[d1ba426a]", "0x20")
    self.bid32_to_binary32("0", "[ed781ec7]", "[d51112ba]", "0x20")
    self.bid32_to_binary32("1", "[ed781ec7]", "[d51112ba]", "0x20")
    self.bid32_to_binary32("2", "[ed781ec7]", "[d51112b9]", "0x20")
    self.bid32_to_binary32("3", "[ed781ec7]", "[d51112b9]", "0x20")
    self.bid32_to_binary32("4", "[ed781ec7]", "[d51112ba]", "0x20")
    self.bid32_to_binary32("0", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("1", "[ed98395b]", "[d6b57718]", "0x20")
    self.bid32_to_binary32("2", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("3", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("4", "[ed98395b]", "[d6b57717]", "0x20")
    self.bid32_to_binary32("0", "[edd16393]", "[da07676e]", "0x20")
    self.bid32_to_binary32("1", "[edd16393]", "[da07676e]", "0x20")
    self.bid32_to_binary32("2", "[edd16393]", "[da07676d]", "0x20")
    self.bid32_to_binary32("3", "[edd16393]", "[da07676d]", "0x20")
    self.bid32_to_binary32("4", "[edd16393]", "[da07676e]", "0x20")
    self.bid32_to_binary32("0", "[ee8afc85]", "[e3f6e3b3]", "0x20")
    self.bid32_to_binary32("1", "[ee8afc85]", "[e3f6e3b4]", "0x20")
    self.bid32_to_binary32("2", "[ee8afc85]", "[e3f6e3b3]", "0x20")
    self.bid32_to_binary32("3", "[ee8afc85]", "[e3f6e3b3]", "0x20")
    self.bid32_to_binary32("4", "[ee8afc85]", "[e3f6e3b3]", "0x20")
    self.bid32_to_binary32("0", "[eecb2a7f]", "[e74121b2]", "0x20")
    self.bid32_to_binary32("1", "[eecb2a7f]", "[e74121b2]", "0x20")
    self.bid32_to_binary32("2", "[eecb2a7f]", "[e74121b1]", "0x20")
    self.bid32_to_binary32("3", "[eecb2a7f]", "[e74121b1]", "0x20")
    self.bid32_to_binary32("4", "[eecb2a7f]", "[e74121b2]", "0x20")
    self.bid32_to_binary32("0", "[ef690028]", "[ef910e17]", "0x20")
    self.bid32_to_binary32("1", "[ef690028]", "[ef910e18]", "0x20")
    self.bid32_to_binary32("2", "[ef690028]", "[ef910e17]", "0x20")
    self.bid32_to_binary32("3", "[ef690028]", "[ef910e17]", "0x20")
    self.bid32_to_binary32("4", "[ef690028]", "[ef910e17]", "0x20")
    self.bid32_to_binary32("0", "[ef927f20]", "[f141e2f9]", "0x20")
    self.bid32_to_binary32("1", "[ef927f20]", "[f141e2f9]", "0x20")
    self.bid32_to_binary32("2", "[ef927f20]", "[f141e2f8]", "0x20")
    self.bid32_to_binary32("3", "[ef927f20]", "[f141e2f8]", "0x20")
    self.bid32_to_binary32("4", "[ef927f20]", "[f141e2f9]", "0x20")
    self.bid32_to_binary32("0", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("1", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("2", "[f7f8967f]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("3", "[f7f8967f]", "[ff7fffff]", "0x28")
    self.bid32_to_binary32("4", "[f7f8967f]", "[ff800000]", "0x28")
    self.bid32_to_binary32("0", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("1", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("2", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("3", "[f8000000]", "[ff800000]", "0x00")
    self.bid32_to_binary32("4", "[f8000000]", "[ff800000]", "0x00")
  }

  private func bid32_to_binary32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseFloat(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toFloat(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_binary64() {
    self.bid32_to_binary64("0", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("0", "[00000001]", "[2AF665BF1D3E6A8D]", "20")
    self.bid32_to_binary64("0", "[00989680]", "[2C75830F53F56FD4]", "20")
    self.bid32_to_binary64("0", "[010bcb3b]", "[2c99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("0", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("0", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("0", "[04f08deb]", "[2e425799582d3bbe]", "0x20")
    self.bid32_to_binary64("0", "[0881888c]", "[2f87d4b57562e710]", "0x20")
    self.bid32_to_binary64("0", "[0c8a06d8]", "[315d0681489839d5]", "0x20")
    self.bid32_to_binary64("0", "[1082384c]", "[32e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("0", "[1489fdf7]", "[34b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("0", "[1871b2b3]", "[365b39ab78718832]", "0x20")
    self.bid32_to_binary64("0", "[189ABA47]", "[366FFFFFE75B0A51]", "20")
    self.bid32_to_binary64("0", "[189ABA49]", "[36700001262D4AB6]", "20")
    self.bid32_to_binary64("0", "[18EAE91C]", "[368FFFFFE75B0A51]", "20")
    self.bid32_to_binary64("0", "[18EAE923]", "[36900000FFDD5204]", "20")
    self.bid32_to_binary64("0", "[1910095E]", "[369800003A243920]", "20")
    self.bid32_to_binary64("0", "[191561D2]", "[369FFFFF4E1B278A]", "20")
    self.bid32_to_binary64("0", "[192012BC]", "[36A800003A243920]", "20")
    self.bid32_to_binary64("0", "[1A0036BD]", "[36A00001262D4AB6]", "20")
    self.bid32_to_binary64("0", "[1A6D79F8]", "[372FFFFFF5B90794]", "20")
    self.bid32_to_binary64("0", "[1A6D79FF]", "[3730000100C331D9]", "20")
    self.bid32_to_binary64("0", "[1c37083b]", "[37f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("0", "[2082ffad]", "[398fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("0", "[24033b59]", "[3b047bf052eac347]", "0x20")
    self.bid32_to_binary64("0", "[2bb057d9]", "[3e61025d42033846]", "0x20")
    self.bid32_to_binary64("0", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("0", "[2ff9ff92]", "[401ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("0", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800001]", "[3FF0000000000000]", "00")
    self.bid32_to_binary64("0", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("0", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("0", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("0", "[3281ffff]", "[40FFFFF000000000]", "00")
    self.bid32_to_binary64("0", "[3283ffff]", "[410FFFF800000000]", "00")
    self.bid32_to_binary64("0", "[3287ffff]", "[411FFFFC00000000]", "00")
    self.bid32_to_binary64("0", "[328fffff]", "[412FFFFE00000000]", "00")
    self.bid32_to_binary64("0", "[3297ffff]", "[4137FFFF00000000]", "00")
    self.bid32_to_binary64("0", "[3319999A]", "[4170000040000000]", "00")
    self.bid32_to_binary64("0", "[33a8f5c2]", "[41afffff90000000]", "0x00")
    self.bid32_to_binary64("0", "[3800AFEC]", "[433000001635E000]", "00")
    self.bid32_to_binary64("0", "[391C25C2]", "[43EFFFFF89707FA8]", "00")
    self.bid32_to_binary64("0", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("0", "[3edc99f0]", "[46532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("0", "[404F3A69]", "[46F00000075046A6]", "20")
    self.bid32_to_binary64("0", "[408FD87B]", "[46FFFFFF3FD4FE24]", "20")
    self.bid32_to_binary64("0", "[42B3DEFD]", "[47EFF7CEF1751C53]", "20")
    self.bid32_to_binary64("0", "[42CDE26C]", "[47F8000027246519]", "20")
    self.bid32_to_binary64("0", "[43175D87]", "[4812000044CCB73D]", "20")
    self.bid32_to_binary64("0", "[47140a10]", "[49b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("0", "[4afda8f2]", "[4b557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("0", "[4e980326]", "[4cd87b809b494507]", "0x20")
    self.bid32_to_binary64("0", "[5aa9d03d]", "[51e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("0", "[69edd92d]", "[3cd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("0", "[6CA00000]", "[4160000000000000]", "00")
    self.bid32_to_binary64("0", "[6CB89680]", "[0000000000000000]", "00")
    self.bid32_to_binary64("0", "[6dc97056]", "[433ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("0", "[6DC9705F]", "[433FFFFFF0D0F600]", "00")
    self.bid32_to_binary64("0", "[6E2CBCCC]", "[43DFFFFFFDDAD230]", "00")
    self.bid32_to_binary64("0", "[70c9732f]", "[483a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("0", "[74b6e7ac]", "[4eaca897d8932bce]", "0x20")
    self.bid32_to_binary64("0", "[758a9968]", "[501f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("0", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("0", "[77F8967F]", "[5412BA093E5C6114]", "20")
    self.bid32_to_binary64("0", "[77f89680]", "[0000000000000000]", "00")
    self.bid32_to_binary64("0", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[7c000000]", "[7FF8000000000000]", "00")
    self.bid32_to_binary64("0", "[7c0F423F]", "[7FFFA11F80000000]", "00")
    self.bid32_to_binary64("0", "[7c0F4240]", "[7FF8000000000000]", "00")
    self.bid32_to_binary64("0", "[7e000000]", "[7FF8000000000000]", "01")
    self.bid32_to_binary64("0", "[7e0F423F]", "[7FFFA11F80000000]", "01")
    self.bid32_to_binary64("0", "[7e0F4240]", "[7FF8000000000000]", "01")
    self.bid32_to_binary64("0", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("0", "[810bcb3b]", "[ac99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("0", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("0", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("0", "[84f08deb]", "[ae425799582d3bbe]", "0x20")
    self.bid32_to_binary64("0", "[8881888c]", "[af87d4b57562e710]", "0x20")
    self.bid32_to_binary64("0", "[8c8a06d8]", "[b15d0681489839d5]", "0x20")
    self.bid32_to_binary64("0", "[9082384c]", "[b2e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("0", "[9489fdf7]", "[b4b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("0", "[9871b2b3]", "[b65b39ab78718832]", "0x20")
    self.bid32_to_binary64("0", "[9c37083b]", "[b7f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("0", "[a082ffad]", "[b98fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("0", "[a4033b59]", "[bb047bf052eac347]", "0x20")
    self.bid32_to_binary64("0", "[abb057d9]", "[be61025d42033846]", "0x20")
    self.bid32_to_binary64("0", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("0", "[aff9ff92]", "[c01ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("0", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("0", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("0", "[b3a8f5c2]", "[c1afffff90000000]", "0x00")
    self.bid32_to_binary64("0", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("0", "[bedc99f0]", "[c6532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("0", "[c7140a10]", "[c9b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("0", "[cafda8f2]", "[cb557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("0", "[ce980326]", "[ccd87b809b494507]", "0x20")
    self.bid32_to_binary64("0", "[daa9d03d]", "[d1e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("0", "[e9edd92d]", "[bcd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("0", "[edc97056]", "[c33ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("0", "[f0c9732f]", "[c83a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("0", "[f4b6e7ac]", "[ceaca897d8932bce]", "0x20")
    self.bid32_to_binary64("0", "[f58a9968]", "[d01f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("0", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("0", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[00000001]", "[2af665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("1", "[010bcb3b]", "[2c99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("1", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("1", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("1", "[04f08deb]", "[2e425799582d3bbd]", "0x20")
    self.bid32_to_binary64("1", "[0881888c]", "[2f87d4b57562e710]", "0x20")
    self.bid32_to_binary64("1", "[0c8a06d8]", "[315d0681489839d5]", "0x20")
    self.bid32_to_binary64("1", "[1082384c]", "[32e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("1", "[1489fdf7]", "[34b00e7db3b3f241]", "0x20")
    self.bid32_to_binary64("1", "[1871b2b3]", "[365b39ab78718831]", "0x20")
    self.bid32_to_binary64("1", "[1c37083b]", "[37f3a2d93e5ad253]", "0x20")
    self.bid32_to_binary64("1", "[2082ffad]", "[398fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("1", "[24033b59]", "[3b047bf052eac347]", "0x20")
    self.bid32_to_binary64("1", "[2bb057d9]", "[3e61025d42033846]", "0x20")
    self.bid32_to_binary64("1", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("1", "[2ff9ff92]", "[401ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("1", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("1", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("1", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("1", "[33a8f5c2]", "[41afffff90000000]", "0x00")
    self.bid32_to_binary64("1", "[3b2e1de6]", "[44cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("1", "[3edc99f0]", "[46532645e1ba93ef]", "0x20")
    self.bid32_to_binary64("1", "[47140a10]", "[49b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("1", "[4afda8f2]", "[4b557eb8ad52a5c8]", "0x20")
    self.bid32_to_binary64("1", "[4e980326]", "[4cd87b809b494507]", "0x20")
    self.bid32_to_binary64("1", "[5aa9d03d]", "[51e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("1", "[69edd92d]", "[3cd0bf1a651525e7]", "0x20")
    self.bid32_to_binary64("1", "[6dc97056]", "[433ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("1", "[70c9732f]", "[483a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("1", "[74b6e7ac]", "[4eaca897d8932bce]", "0x20")
    self.bid32_to_binary64("1", "[758a9968]", "[501f60b4a930ae17]", "0x20")
    self.bid32_to_binary64("1", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("1", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("1", "[810bcb3b]", "[ac99cbd06456ee4f]", "0x20")
    self.bid32_to_binary64("1", "[83000001]", "[ac355c2076bf9a56]", "0x20")
    self.bid32_to_binary64("1", "[83800001]", "[ac6ab328946f80eb]", "0x20")
    self.bid32_to_binary64("1", "[84f08deb]", "[ae425799582d3bbe]", "0x20")
    self.bid32_to_binary64("1", "[8881888c]", "[af87d4b57562e711]", "0x20")
    self.bid32_to_binary64("1", "[8c8a06d8]", "[b15d0681489839d6]", "0x20")
    self.bid32_to_binary64("1", "[9082384c]", "[b2e326cd14f71c24]", "0x20")
    self.bid32_to_binary64("1", "[9489fdf7]", "[b4b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("1", "[9871b2b3]", "[b65b39ab78718832]", "0x20")
    self.bid32_to_binary64("1", "[9c37083b]", "[b7f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("1", "[a082ffad]", "[b98fe3544145e9d9]", "0x20")
    self.bid32_to_binary64("1", "[a4033b59]", "[bb047bf052eac348]", "0x20")
    self.bid32_to_binary64("1", "[abb057d9]", "[be61025d42033847]", "0x20")
    self.bid32_to_binary64("1", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("1", "[aff9ff92]", "[c01ffb2b3461309d]", "0x20")
    self.bid32_to_binary64("1", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("1", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("1", "[b3a8f5c2]", "[c1afffff90000000]", "0x00")
    self.bid32_to_binary64("1", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("1", "[bedc99f0]", "[c6532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("1", "[c7140a10]", "[c9b70105df3d47cc]", "0x20")
    self.bid32_to_binary64("1", "[cafda8f2]", "[cb557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("1", "[ce980326]", "[ccd87b809b494508]", "0x20")
    self.bid32_to_binary64("1", "[daa9d03d]", "[d1e1a1d9135cca54]", "0x20")
    self.bid32_to_binary64("1", "[e9edd92d]", "[bcd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("1", "[edc97056]", "[c33ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("1", "[f0c9732f]", "[c83a78ce1807f5f9]", "0x20")
    self.bid32_to_binary64("1", "[f4b6e7ac]", "[ceaca897d8932bcf]", "0x20")
    self.bid32_to_binary64("1", "[f58a9968]", "[d01f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("1", "[f7f8967f]", "[d412ba093e5c6115]", "0x20")
    self.bid32_to_binary64("1", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("2", "[010bcb3b]", "[2c99cbd06456ee4f]", "0x20")
    self.bid32_to_binary64("2", "[03000001]", "[2c355c2076bf9a56]", "0x20")
    self.bid32_to_binary64("2", "[03800001]", "[2c6ab328946f80eb]", "0x20")
    self.bid32_to_binary64("2", "[04f08deb]", "[2e425799582d3bbe]", "0x20")
    self.bid32_to_binary64("2", "[0881888c]", "[2f87d4b57562e711]", "0x20")
    self.bid32_to_binary64("2", "[0c8a06d8]", "[315d0681489839d6]", "0x20")
    self.bid32_to_binary64("2", "[1082384c]", "[32e326cd14f71c24]", "0x20")
    self.bid32_to_binary64("2", "[1489fdf7]", "[34b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("2", "[1871b2b3]", "[365b39ab78718832]", "0x20")
    self.bid32_to_binary64("2", "[1c37083b]", "[37f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("2", "[2082ffad]", "[398fe3544145e9d9]", "0x20")
    self.bid32_to_binary64("2", "[24033b59]", "[3b047bf052eac348]", "0x20")
    self.bid32_to_binary64("2", "[2bb057d9]", "[3e61025d42033847]", "0x20")
    self.bid32_to_binary64("2", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("2", "[2ff9ff92]", "[401ffb2b3461309d]", "0x20")
    self.bid32_to_binary64("2", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("2", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("2", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("2", "[33a8f5c2]", "[41afffff90000000]", "0x00")
    self.bid32_to_binary64("2", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("2", "[3edc99f0]", "[46532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("2", "[47140a10]", "[49b70105df3d47cc]", "0x20")
    self.bid32_to_binary64("2", "[4afda8f2]", "[4b557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("2", "[4e980326]", "[4cd87b809b494508]", "0x20")
    self.bid32_to_binary64("2", "[5aa9d03d]", "[51e1a1d9135cca54]", "0x20")
    self.bid32_to_binary64("2", "[69edd92d]", "[3cd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("2", "[6dc97056]", "[433ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("2", "[70c9732f]", "[483a78ce1807f5f9]", "0x20")
    self.bid32_to_binary64("2", "[74b6e7ac]", "[4eaca897d8932bcf]", "0x20")
    self.bid32_to_binary64("2", "[758a9968]", "[501f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("2", "[77f8967f]", "[5412ba093e5c6115]", "0x20")
    self.bid32_to_binary64("2", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[80000001]", "[aaf665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("2", "[810bcb3b]", "[ac99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("2", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("2", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("2", "[84f08deb]", "[ae425799582d3bbd]", "0x20")
    self.bid32_to_binary64("2", "[8881888c]", "[af87d4b57562e710]", "0x20")
    self.bid32_to_binary64("2", "[8c8a06d8]", "[b15d0681489839d5]", "0x20")
    self.bid32_to_binary64("2", "[9082384c]", "[b2e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("2", "[9489fdf7]", "[b4b00e7db3b3f241]", "0x20")
    self.bid32_to_binary64("2", "[9871b2b3]", "[b65b39ab78718831]", "0x20")
    self.bid32_to_binary64("2", "[9c37083b]", "[b7f3a2d93e5ad253]", "0x20")
    self.bid32_to_binary64("2", "[a082ffad]", "[b98fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("2", "[a4033b59]", "[bb047bf052eac347]", "0x20")
    self.bid32_to_binary64("2", "[abb057d9]", "[be61025d42033846]", "0x20")
    self.bid32_to_binary64("2", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("2", "[aff9ff92]", "[c01ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("2", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("2", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("2", "[b3a8f5c2]", "[c1afffff90000000]", "0x00")
    self.bid32_to_binary64("2", "[bb2e1de6]", "[c4cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("2", "[bedc99f0]", "[c6532645e1ba93ef]", "0x20")
    self.bid32_to_binary64("2", "[c7140a10]", "[c9b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("2", "[cafda8f2]", "[cb557eb8ad52a5c8]", "0x20")
    self.bid32_to_binary64("2", "[ce980326]", "[ccd87b809b494507]", "0x20")
    self.bid32_to_binary64("2", "[daa9d03d]", "[d1e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("2", "[e9edd92d]", "[bcd0bf1a651525e7]", "0x20")
    self.bid32_to_binary64("2", "[edc97056]", "[c33ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("2", "[f0c9732f]", "[c83a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("2", "[f4b6e7ac]", "[ceaca897d8932bce]", "0x20")
    self.bid32_to_binary64("2", "[f58a9968]", "[d01f60b4a930ae17]", "0x20")
    self.bid32_to_binary64("2", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("2", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[00000001]", "[2af665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("3", "[010bcb3b]", "[2c99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("3", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("3", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("3", "[04f08deb]", "[2e425799582d3bbd]", "0x20")
    self.bid32_to_binary64("3", "[0881888c]", "[2f87d4b57562e710]", "0x20")
    self.bid32_to_binary64("3", "[0c8a06d8]", "[315d0681489839d5]", "0x20")
    self.bid32_to_binary64("3", "[1082384c]", "[32e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("3", "[1489fdf7]", "[34b00e7db3b3f241]", "0x20")
    self.bid32_to_binary64("3", "[1871b2b3]", "[365b39ab78718831]", "0x20")
    self.bid32_to_binary64("3", "[1c37083b]", "[37f3a2d93e5ad253]", "0x20")
    self.bid32_to_binary64("3", "[2082ffad]", "[398fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("3", "[24033b59]", "[3b047bf052eac347]", "0x20")
    self.bid32_to_binary64("3", "[2bb057d9]", "[3e61025d42033846]", "0x20")
    self.bid32_to_binary64("3", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("3", "[2ff9ff92]", "[401ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("3", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("3", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("3", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("3", "[33a8f5c2]", "[41afffff90000000]", "0x00")
    self.bid32_to_binary64("3", "[3b2e1de6]", "[44cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("3", "[3edc99f0]", "[46532645e1ba93ef]", "0x20")
    self.bid32_to_binary64("3", "[47140a10]", "[49b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("3", "[4afda8f2]", "[4b557eb8ad52a5c8]", "0x20")
    self.bid32_to_binary64("3", "[4e980326]", "[4cd87b809b494507]", "0x20")
    self.bid32_to_binary64("3", "[5aa9d03d]", "[51e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("3", "[69edd92d]", "[3cd0bf1a651525e7]", "0x20")
    self.bid32_to_binary64("3", "[6dc97056]", "[433ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("3", "[70c9732f]", "[483a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("3", "[74b6e7ac]", "[4eaca897d8932bce]", "0x20")
    self.bid32_to_binary64("3", "[758a9968]", "[501f60b4a930ae17]", "0x20")
    self.bid32_to_binary64("3", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("3", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[80000001]", "[aaf665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("3", "[810bcb3b]", "[ac99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("3", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("3", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("3", "[84f08deb]", "[ae425799582d3bbd]", "0x20")
    self.bid32_to_binary64("3", "[8881888c]", "[af87d4b57562e710]", "0x20")
    self.bid32_to_binary64("3", "[8c8a06d8]", "[b15d0681489839d5]", "0x20")
    self.bid32_to_binary64("3", "[9082384c]", "[b2e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("3", "[9489fdf7]", "[b4b00e7db3b3f241]", "0x20")
    self.bid32_to_binary64("3", "[9871b2b3]", "[b65b39ab78718831]", "0x20")
    self.bid32_to_binary64("3", "[9c37083b]", "[b7f3a2d93e5ad253]", "0x20")
    self.bid32_to_binary64("3", "[a082ffad]", "[b98fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("3", "[a4033b59]", "[bb047bf052eac347]", "0x20")
    self.bid32_to_binary64("3", "[abb057d9]", "[be61025d42033846]", "0x20")
    self.bid32_to_binary64("3", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("3", "[aff9ff92]", "[c01ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("3", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("3", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("3", "[b3a8f5c2]", "[c1afffff90000000]", "0x00")
    self.bid32_to_binary64("3", "[bb2e1de6]", "[c4cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("3", "[bedc99f0]", "[c6532645e1ba93ef]", "0x20")
    self.bid32_to_binary64("3", "[c7140a10]", "[c9b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("3", "[cafda8f2]", "[cb557eb8ad52a5c8]", "0x20")
    self.bid32_to_binary64("3", "[ce980326]", "[ccd87b809b494507]", "0x20")
    self.bid32_to_binary64("3", "[daa9d03d]", "[d1e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("3", "[e9edd92d]", "[bcd0bf1a651525e7]", "0x20")
    self.bid32_to_binary64("3", "[edc97056]", "[c33ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("3", "[f0c9732f]", "[c83a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("3", "[f4b6e7ac]", "[ceaca897d8932bce]", "0x20")
    self.bid32_to_binary64("3", "[f58a9968]", "[d01f60b4a930ae17]", "0x20")
    self.bid32_to_binary64("3", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("3", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("4", "[010bcb3b]", "[2c99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("4", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("4", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("4", "[04f08deb]", "[2e425799582d3bbe]", "0x20")
    self.bid32_to_binary64("4", "[0881888c]", "[2f87d4b57562e710]", "0x20")
    self.bid32_to_binary64("4", "[0c8a06d8]", "[315d0681489839d5]", "0x20")
    self.bid32_to_binary64("4", "[1082384c]", "[32e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("4", "[1489fdf7]", "[34b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("4", "[1871b2b3]", "[365b39ab78718832]", "0x20")
    self.bid32_to_binary64("4", "[1c37083b]", "[37f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("4", "[2082ffad]", "[398fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("4", "[24033b59]", "[3b047bf052eac347]", "0x20")
    self.bid32_to_binary64("4", "[2bb057d9]", "[3e61025d42033846]", "0x20")
    self.bid32_to_binary64("4", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("4", "[2ff9ff92]", "[401ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("4", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("4", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("4", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("4", "[33a8f5c2]", "[41afffff90000000]", "0x00")
    self.bid32_to_binary64("4", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("4", "[3edc99f0]", "[46532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("4", "[47140a10]", "[49b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("4", "[4afda8f2]", "[4b557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("4", "[4e980326]", "[4cd87b809b494507]", "0x20")
    self.bid32_to_binary64("4", "[5aa9d03d]", "[51e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("4", "[69edd92d]", "[3cd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("4", "[6dc97056]", "[433ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("4", "[70c9732f]", "[483a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("4", "[74b6e7ac]", "[4eaca897d8932bce]", "0x20")
    self.bid32_to_binary64("4", "[758a9968]", "[501f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("4", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("4", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("4", "[810bcb3b]", "[ac99cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("4", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("4", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("4", "[84f08deb]", "[ae425799582d3bbe]", "0x20")
    self.bid32_to_binary64("4", "[8881888c]", "[af87d4b57562e710]", "0x20")
    self.bid32_to_binary64("4", "[8c8a06d8]", "[b15d0681489839d5]", "0x20")
    self.bid32_to_binary64("4", "[9082384c]", "[b2e326cd14f71c23]", "0x20")
    self.bid32_to_binary64("4", "[9489fdf7]", "[b4b00e7db3b3f242]", "0x20")
    self.bid32_to_binary64("4", "[9871b2b3]", "[b65b39ab78718832]", "0x20")
    self.bid32_to_binary64("4", "[9c37083b]", "[b7f3a2d93e5ad254]", "0x20")
    self.bid32_to_binary64("4", "[a082ffad]", "[b98fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("4", "[a4033b59]", "[bb047bf052eac347]", "0x20")
    self.bid32_to_binary64("4", "[abb057d9]", "[be61025d42033846]", "0x20")
    self.bid32_to_binary64("4", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("4", "[aff9ff92]", "[c01ffb2b3461309c]", "0x20")
    self.bid32_to_binary64("4", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("4", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("4", "[b3a8f5c2]", "[c1afffff90000000]", "0x00")
    self.bid32_to_binary64("4", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("4", "[bedc99f0]", "[c6532645e1ba93f0]", "0x20")
    self.bid32_to_binary64("4", "[c7140a10]", "[c9b70105df3d47cb]", "0x20")
    self.bid32_to_binary64("4", "[cafda8f2]", "[cb557eb8ad52a5c9]", "0x20")
    self.bid32_to_binary64("4", "[ce980326]", "[ccd87b809b494507]", "0x20")
    self.bid32_to_binary64("4", "[daa9d03d]", "[d1e1a1d9135cca53]", "0x20")
    self.bid32_to_binary64("4", "[e9edd92d]", "[bcd0bf1a651525e8]", "0x20")
    self.bid32_to_binary64("4", "[edc97056]", "[c33ffffdd85fdc00]", "0x00")
    self.bid32_to_binary64("4", "[f0c9732f]", "[c83a78ce1807f5f8]", "0x20")
    self.bid32_to_binary64("4", "[f4b6e7ac]", "[ceaca897d8932bce]", "0x20")
    self.bid32_to_binary64("4", "[f58a9968]", "[d01f60b4a930ae18]", "0x20")
    self.bid32_to_binary64("4", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("4", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("1", "[00000001]", "[2af665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("2", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("3", "[00000001]", "[2af665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("4", "[00000001]", "[2af665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("0", "[00000007]", "[2b23990739969d3b]", "0x20")
    self.bid32_to_binary64("1", "[00000007]", "[2b23990739969d3b]", "0x20")
    self.bid32_to_binary64("2", "[00000007]", "[2b23990739969d3c]", "0x20")
    self.bid32_to_binary64("3", "[00000007]", "[2b23990739969d3b]", "0x20")
    self.bid32_to_binary64("4", "[00000007]", "[2b23990739969d3b]", "0x20")
    self.bid32_to_binary64("0", "[00001d37]", "[2bc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("1", "[00001d37]", "[2bc472b412fad3d6]", "0x20")
    self.bid32_to_binary64("2", "[00001d37]", "[2bc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("3", "[00001d37]", "[2bc472b412fad3d6]", "0x20")
    self.bid32_to_binary64("4", "[00001d37]", "[2bc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("0", "[00092148]", "[2c298fa448f6e088]", "0x20")
    self.bid32_to_binary64("1", "[00092148]", "[2c298fa448f6e087]", "0x20")
    self.bid32_to_binary64("2", "[00092148]", "[2c298fa448f6e088]", "0x20")
    self.bid32_to_binary64("3", "[00092148]", "[2c298fa448f6e087]", "0x20")
    self.bid32_to_binary64("4", "[00092148]", "[2c298fa448f6e088]", "0x20")
    self.bid32_to_binary64("0", "[000f423f]", "[2c355c1f1063a881]", "0x20")
    self.bid32_to_binary64("1", "[000f423f]", "[2c355c1f1063a881]", "0x20")
    self.bid32_to_binary64("2", "[000f423f]", "[2c355c1f1063a882]", "0x20")
    self.bid32_to_binary64("3", "[000f423f]", "[2c355c1f1063a881]", "0x20")
    self.bid32_to_binary64("4", "[000f423f]", "[2c355c1f1063a881]", "0x20")
    self.bid32_to_binary64("0", "[00baf827]", "[2c89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("1", "[00baf827]", "[2c89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("2", "[00baf827]", "[2c89cbd06456ee4f]", "0x20")
    self.bid32_to_binary64("3", "[00baf827]", "[2c89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("4", "[00baf827]", "[2c89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("0", "[02f41b1a]", "[2d6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("1", "[02f41b1a]", "[2d6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("2", "[02f41b1a]", "[2d6f00051b7ba70b]", "0x20")
    self.bid32_to_binary64("3", "[02f41b1a]", "[2d6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("4", "[02f41b1a]", "[2d6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("0", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("1", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("2", "[03000001]", "[2c355c2076bf9a56]", "0x20")
    self.bid32_to_binary64("3", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("4", "[03000001]", "[2c355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("0", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("1", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("2", "[03800001]", "[2c6ab328946f80eb]", "0x20")
    self.bid32_to_binary64("3", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("4", "[03800001]", "[2c6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("0", "[03bee8cb]", "[2dca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("1", "[03bee8cb]", "[2dca3ead732acfe7]", "0x20")
    self.bid32_to_binary64("2", "[03bee8cb]", "[2dca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("3", "[03bee8cb]", "[2dca3ead732acfe7]", "0x20")
    self.bid32_to_binary64("4", "[03bee8cb]", "[2dca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("0", "[04ae5c6b]", "[2e2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("1", "[04ae5c6b]", "[2e2e38723a5ce17b]", "0x20")
    self.bid32_to_binary64("2", "[04ae5c6b]", "[2e2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("3", "[04ae5c6b]", "[2e2e38723a5ce17b]", "0x20")
    self.bid32_to_binary64("4", "[04ae5c6b]", "[2e2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("0", "[05928b5e]", "[2e82e347647a0ced]", "0x20")
    self.bid32_to_binary64("1", "[05928b5e]", "[2e82e347647a0ced]", "0x20")
    self.bid32_to_binary64("2", "[05928b5e]", "[2e82e347647a0cee]", "0x20")
    self.bid32_to_binary64("3", "[05928b5e]", "[2e82e347647a0ced]", "0x20")
    self.bid32_to_binary64("4", "[05928b5e]", "[2e82e347647a0ced]", "0x20")
    self.bid32_to_binary64("0", "[0693b3d5]", "[2eef5aed7614686b]", "0x20")
    self.bid32_to_binary64("1", "[0693b3d5]", "[2eef5aed7614686b]", "0x20")
    self.bid32_to_binary64("2", "[0693b3d5]", "[2eef5aed7614686c]", "0x20")
    self.bid32_to_binary64("3", "[0693b3d5]", "[2eef5aed7614686b]", "0x20")
    self.bid32_to_binary64("4", "[0693b3d5]", "[2eef5aed7614686b]", "0x20")
    self.bid32_to_binary64("0", "[078a165b]", "[2f491553af7b7353]", "0x20")
    self.bid32_to_binary64("1", "[078a165b]", "[2f491553af7b7352]", "0x20")
    self.bid32_to_binary64("2", "[078a165b]", "[2f491553af7b7353]", "0x20")
    self.bid32_to_binary64("3", "[078a165b]", "[2f491553af7b7352]", "0x20")
    self.bid32_to_binary64("4", "[078a165b]", "[2f491553af7b7353]", "0x20")
    self.bid32_to_binary64("0", "[08806223]", "[2f67d4b57562e710]", "0x20")
    self.bid32_to_binary64("1", "[08806223]", "[2f67d4b57562e710]", "0x20")
    self.bid32_to_binary64("2", "[08806223]", "[2f67d4b57562e711]", "0x20")
    self.bid32_to_binary64("3", "[08806223]", "[2f67d4b57562e710]", "0x20")
    self.bid32_to_binary64("4", "[08806223]", "[2f67d4b57562e710]", "0x20")
    self.bid32_to_binary64("0", "[09831118]", "[30029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("1", "[09831118]", "[30029e2dc3b54484]", "0x20")
    self.bid32_to_binary64("2", "[09831118]", "[30029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("3", "[09831118]", "[30029e2dc3b54484]", "0x20")
    self.bid32_to_binary64("4", "[09831118]", "[30029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("0", "[0a0db57d]", "[305a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("1", "[0a0db57d]", "[305a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("2", "[0a0db57d]", "[305a01fb6d8b1a21]", "0x20")
    self.bid32_to_binary64("3", "[0a0db57d]", "[305a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("4", "[0a0db57d]", "[305a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("0", "[0b2eff07]", "[30e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("1", "[0b2eff07]", "[30e169e9b6071ad7]", "0x20")
    self.bid32_to_binary64("2", "[0b2eff07]", "[30e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("3", "[0b2eff07]", "[30e169e9b6071ad7]", "0x20")
    self.bid32_to_binary64("4", "[0b2eff07]", "[30e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("0", "[0c481023]", "[3154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("1", "[0c481023]", "[3154dc5ee85b9b6d]", "0x20")
    self.bid32_to_binary64("2", "[0c481023]", "[3154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("3", "[0c481023]", "[3154dc5ee85b9b6d]", "0x20")
    self.bid32_to_binary64("4", "[0c481023]", "[3154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("0", "[0f5a3882]", "[3298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("1", "[0f5a3882]", "[3298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("2", "[0f5a3882]", "[3298e83fe1a3d099]", "0x20")
    self.bid32_to_binary64("3", "[0f5a3882]", "[3298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("4", "[0f5a3882]", "[3298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("0", "[1013aee5]", "[32e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("1", "[1013aee5]", "[32e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("2", "[1013aee5]", "[32e0fb2580647d97]", "0x20")
    self.bid32_to_binary64("3", "[1013aee5]", "[32e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("4", "[1013aee5]", "[32e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("0", "[112822cc]", "[335b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("1", "[112822cc]", "[335b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("2", "[112822cc]", "[335b0d330b7ea471]", "0x20")
    self.bid32_to_binary64("3", "[112822cc]", "[335b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("4", "[112822cc]", "[335b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("0", "[1214ff06]", "[33b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("1", "[1214ff06]", "[33b61c8f73bc9e74]", "0x20")
    self.bid32_to_binary64("2", "[1214ff06]", "[33b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("3", "[1214ff06]", "[33b61c8f73bc9e74]", "0x20")
    self.bid32_to_binary64("4", "[1214ff06]", "[33b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("0", "[130cf727]", "[341555ae28ababee]", "0x20")
    self.bid32_to_binary64("1", "[130cf727]", "[341555ae28ababed]", "0x20")
    self.bid32_to_binary64("2", "[130cf727]", "[341555ae28ababee]", "0x20")
    self.bid32_to_binary64("3", "[130cf727]", "[341555ae28ababed]", "0x20")
    self.bid32_to_binary64("4", "[130cf727]", "[341555ae28ababee]", "0x20")
    self.bid32_to_binary64("0", "[140422b9]", "[3465442a5d58f916]", "0x20")
    self.bid32_to_binary64("1", "[140422b9]", "[3465442a5d58f915]", "0x20")
    self.bid32_to_binary64("2", "[140422b9]", "[3465442a5d58f916]", "0x20")
    self.bid32_to_binary64("3", "[140422b9]", "[3465442a5d58f915]", "0x20")
    self.bid32_to_binary64("4", "[140422b9]", "[3465442a5d58f916]", "0x20")
    self.bid32_to_binary64("0", "[15055f9a]", "[34d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("1", "[15055f9a]", "[34d59644266c9f6a]", "0x20")
    self.bid32_to_binary64("2", "[15055f9a]", "[34d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("3", "[15055f9a]", "[34d59644266c9f6a]", "0x20")
    self.bid32_to_binary64("4", "[15055f9a]", "[34d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("0", "[16034202]", "[35347326e213daf9]", "0x20")
    self.bid32_to_binary64("1", "[16034202]", "[35347326e213daf8]", "0x20")
    self.bid32_to_binary64("2", "[16034202]", "[35347326e213daf9]", "0x20")
    self.bid32_to_binary64("3", "[16034202]", "[35347326e213daf8]", "0x20")
    self.bid32_to_binary64("4", "[16034202]", "[35347326e213daf9]", "0x20")
    self.bid32_to_binary64("0", "[1797c30b]", "[3602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("1", "[1797c30b]", "[3602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("2", "[1797c30b]", "[3602351e3c9ac5b1]", "0x20")
    self.bid32_to_binary64("3", "[1797c30b]", "[3602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("4", "[1797c30b]", "[3602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("0", "[18daf55c]", "[368b39ab78718832]", "0x20")
    self.bid32_to_binary64("1", "[18daf55c]", "[368b39ab78718831]", "0x20")
    self.bid32_to_binary64("2", "[18daf55c]", "[368b39ab78718832]", "0x20")
    self.bid32_to_binary64("3", "[18daf55c]", "[368b39ab78718831]", "0x20")
    self.bid32_to_binary64("4", "[18daf55c]", "[368b39ab78718832]", "0x20")
    self.bid32_to_binary64("0", "[1a033de6]", "[36de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("1", "[1a033de6]", "[36de528bf5efa60b]", "0x20")
    self.bid32_to_binary64("2", "[1a033de6]", "[36de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("3", "[1a033de6]", "[36de528bf5efa60b]", "0x20")
    self.bid32_to_binary64("4", "[1a033de6]", "[36de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("0", "[1abc1faf]", "[3755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("1", "[1abc1faf]", "[3755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("2", "[1abc1faf]", "[3755f7be21275cb6]", "0x20")
    self.bid32_to_binary64("3", "[1abc1faf]", "[3755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("4", "[1abc1faf]", "[3755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("0", "[1bea90e4]", "[37ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("1", "[1bea90e4]", "[37ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("2", "[1bea90e4]", "[37ce6b5150d93207]", "0x20")
    self.bid32_to_binary64("3", "[1bea90e4]", "[37ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("4", "[1bea90e4]", "[37ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("0", "[1c974493]", "[3814c17116f185ba]", "0x20")
    self.bid32_to_binary64("1", "[1c974493]", "[3814c17116f185ba]", "0x20")
    self.bid32_to_binary64("2", "[1c974493]", "[3814c17116f185bb]", "0x20")
    self.bid32_to_binary64("3", "[1c974493]", "[3814c17116f185ba]", "0x20")
    self.bid32_to_binary64("4", "[1c974493]", "[3814c17116f185ba]", "0x20")
    self.bid32_to_binary64("0", "[1e045d65]", "[388e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("1", "[1e045d65]", "[388e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("2", "[1e045d65]", "[388e6b1a754d5158]", "0x20")
    self.bid32_to_binary64("3", "[1e045d65]", "[388e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("4", "[1e045d65]", "[388e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("0", "[1e8f8b66]", "[38e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("1", "[1e8f8b66]", "[38e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("2", "[1e8f8b66]", "[38e0ed2e61e9fa85]", "0x20")
    self.bid32_to_binary64("3", "[1e8f8b66]", "[38e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("4", "[1e8f8b66]", "[38e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("0", "[1f921289]", "[394ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("1", "[1f921289]", "[394ebfa4445b9dcc]", "0x20")
    self.bid32_to_binary64("2", "[1f921289]", "[394ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("3", "[1f921289]", "[394ebfa4445b9dcc]", "0x20")
    self.bid32_to_binary64("4", "[1f921289]", "[394ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("0", "[2089e611]", "[39aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("1", "[2089e611]", "[39aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("2", "[2089e611]", "[39aa50b43ab3dff9]", "0x20")
    self.bid32_to_binary64("3", "[2089e611]", "[39aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("4", "[2089e611]", "[39aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("0", "[2187ad40]", "[3a0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("1", "[2187ad40]", "[3a0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("2", "[2187ad40]", "[3a0fe3544145e9d9]", "0x20")
    self.bid32_to_binary64("3", "[2187ad40]", "[3a0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("4", "[2187ad40]", "[3a0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("0", "[228167f2]", "[3a52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("1", "[228167f2]", "[3a52405b773fbdf2]", "0x20")
    self.bid32_to_binary64("2", "[228167f2]", "[3a52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("3", "[228167f2]", "[3a52405b773fbdf2]", "0x20")
    self.bid32_to_binary64("4", "[228167f2]", "[3a52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("0", "[235d0cc5]", "[3ae7974855c6a628]", "0x20")
    self.bid32_to_binary64("1", "[235d0cc5]", "[3ae7974855c6a627]", "0x20")
    self.bid32_to_binary64("2", "[235d0cc5]", "[3ae7974855c6a628]", "0x20")
    self.bid32_to_binary64("3", "[235d0cc5]", "[3ae7974855c6a627]", "0x20")
    self.bid32_to_binary64("4", "[235d0cc5]", "[3ae7974855c6a628]", "0x20")
    self.bid32_to_binary64("0", "[2484c195]", "[3b42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("1", "[2484c195]", "[3b42d756dfcb1bb3]", "0x20")
    self.bid32_to_binary64("2", "[2484c195]", "[3b42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("3", "[2484c195]", "[3b42d756dfcb1bb3]", "0x20")
    self.bid32_to_binary64("4", "[2484c195]", "[3b42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("0", "[27706288]", "[3c953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("1", "[27706288]", "[3c953a9985dbde6b]", "0x20")
    self.bid32_to_binary64("2", "[27706288]", "[3c953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("3", "[27706288]", "[3c953a9985dbde6b]", "0x20")
    self.bid32_to_binary64("4", "[27706288]", "[3c953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("0", "[28531201]", "[3cf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("1", "[28531201]", "[3cf8849dd33c95ae]", "0x20")
    self.bid32_to_binary64("2", "[28531201]", "[3cf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("3", "[28531201]", "[3cf8849dd33c95ae]", "0x20")
    self.bid32_to_binary64("4", "[28531201]", "[3cf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("0", "[2926162b]", "[3d519078a913357e]", "0x20")
    self.bid32_to_binary64("1", "[2926162b]", "[3d519078a913357d]", "0x20")
    self.bid32_to_binary64("2", "[2926162b]", "[3d519078a913357e]", "0x20")
    self.bid32_to_binary64("3", "[2926162b]", "[3d519078a913357d]", "0x20")
    self.bid32_to_binary64("4", "[2926162b]", "[3d519078a913357e]", "0x20")
    self.bid32_to_binary64("0", "[2a126b15]", "[3daa8b263af79514]", "0x20")
    self.bid32_to_binary64("1", "[2a126b15]", "[3daa8b263af79514]", "0x20")
    self.bid32_to_binary64("2", "[2a126b15]", "[3daa8b263af79515]", "0x20")
    self.bid32_to_binary64("3", "[2a126b15]", "[3daa8b263af79514]", "0x20")
    self.bid32_to_binary64("4", "[2a126b15]", "[3daa8b263af79514]", "0x20")
    self.bid32_to_binary64("0", "[2b12abe1]", "[3e1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("1", "[2b12abe1]", "[3e1505aa4b8c33d5]", "0x20")
    self.bid32_to_binary64("2", "[2b12abe1]", "[3e1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("3", "[2b12abe1]", "[3e1505aa4b8c33d5]", "0x20")
    self.bid32_to_binary64("4", "[2b12abe1]", "[3e1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("0", "[2c07ee93]", "[3e6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("1", "[2c07ee93]", "[3e6be872a8b30d7c]", "0x20")
    self.bid32_to_binary64("2", "[2c07ee93]", "[3e6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("3", "[2c07ee93]", "[3e6be872a8b30d7c]", "0x20")
    self.bid32_to_binary64("4", "[2c07ee93]", "[3e6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("0", "[2d0333ed]", "[3ec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("1", "[2d0333ed]", "[3ec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("2", "[2d0333ed]", "[3ec19b96f36ec68c]", "0x20")
    self.bid32_to_binary64("3", "[2d0333ed]", "[3ec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("4", "[2d0333ed]", "[3ec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("0", "[2e04b977]", "[3f344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("1", "[2e04b977]", "[3f344a9ca8ba155c]", "0x20")
    self.bid32_to_binary64("2", "[2e04b977]", "[3f344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("3", "[2e04b977]", "[3f344a9ca8ba155c]", "0x20")
    self.bid32_to_binary64("4", "[2e04b977]", "[3f344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("0", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("1", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("2", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("3", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("4", "[2ecd7c6d]", "[3faa000000000000]", "0x00")
    self.bid32_to_binary64("0", "[2f03cf77]", "[3f99923bd746a352]", "0x20")
    self.bid32_to_binary64("1", "[2f03cf77]", "[3f99923bd746a352]", "0x20")
    self.bid32_to_binary64("2", "[2f03cf77]", "[3f99923bd746a353]", "0x20")
    self.bid32_to_binary64("3", "[2f03cf77]", "[3f99923bd746a352]", "0x20")
    self.bid32_to_binary64("4", "[2f03cf77]", "[3f99923bd746a352]", "0x20")
    self.bid32_to_binary64("0", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("1", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("2", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("3", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("4", "[3200000f]", "[3ff8000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800000]", "[0000000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800001]", "[3ff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("1", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("2", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("3", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("4", "[32800040]", "[4050000000000000]", "0x00")
    self.bid32_to_binary64("0", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("1", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("2", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("3", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("4", "[328003e7]", "[408f380000000000]", "0x00")
    self.bid32_to_binary64("0", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("1", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("2", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("3", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("4", "[328003e8]", "[408f400000000000]", "0x00")
    self.bid32_to_binary64("0", "[330f4240]", "[416312d000000000]", "0x00")
    self.bid32_to_binary64("1", "[330f4240]", "[416312d000000000]", "0x00")
    self.bid32_to_binary64("2", "[330f4240]", "[416312d000000000]", "0x00")
    self.bid32_to_binary64("3", "[330f4240]", "[416312d000000000]", "0x00")
    self.bid32_to_binary64("4", "[330f4240]", "[416312d000000000]", "0x00")
    self.bid32_to_binary64("0", "[340f4240]", "[41cdcd6500000000]", "0x00")
    self.bid32_to_binary64("1", "[340f4240]", "[41cdcd6500000000]", "0x00")
    self.bid32_to_binary64("2", "[340f4240]", "[41cdcd6500000000]", "0x00")
    self.bid32_to_binary64("3", "[340f4240]", "[41cdcd6500000000]", "0x00")
    self.bid32_to_binary64("4", "[340f4240]", "[41cdcd6500000000]", "0x00")
    self.bid32_to_binary64("0", "[34e8db8b]", "[422fffffcb600000]", "0x00")
    self.bid32_to_binary64("1", "[34e8db8b]", "[422fffffcb600000]", "0x00")
    self.bid32_to_binary64("2", "[34e8db8b]", "[422fffffcb600000]", "0x00")
    self.bid32_to_binary64("3", "[34e8db8b]", "[422fffffcb600000]", "0x00")
    self.bid32_to_binary64("4", "[34e8db8b]", "[422fffffcb600000]", "0x00")
    self.bid32_to_binary64("0", "[35c31bde]", "[428fffffc19c0000]", "0x00")
    self.bid32_to_binary64("1", "[35c31bde]", "[428fffffc19c0000]", "0x00")
    self.bid32_to_binary64("2", "[35c31bde]", "[428fffffc19c0000]", "0x00")
    self.bid32_to_binary64("3", "[35c31bde]", "[428fffffc19c0000]", "0x00")
    self.bid32_to_binary64("4", "[35c31bde]", "[428fffffc19c0000]", "0x00")
    self.bid32_to_binary64("0", "[36aaf31d]", "[42efffff6dafa000]", "0x00")
    self.bid32_to_binary64("1", "[36aaf31d]", "[42efffff6dafa000]", "0x00")
    self.bid32_to_binary64("2", "[36aaf31d]", "[42efffff6dafa000]", "0x00")
    self.bid32_to_binary64("3", "[36aaf31d]", "[42efffff6dafa000]", "0x00")
    self.bid32_to_binary64("4", "[36aaf31d]", "[42efffff6dafa000]", "0x00")
    self.bid32_to_binary64("0", "[379b7cdf]", "[434fffff0265ce00]", "0x00")
    self.bid32_to_binary64("1", "[379b7cdf]", "[434fffff0265ce00]", "0x00")
    self.bid32_to_binary64("2", "[379b7cdf]", "[434fffff0265ce00]", "0x00")
    self.bid32_to_binary64("3", "[379b7cdf]", "[434fffff0265ce00]", "0x00")
    self.bid32_to_binary64("4", "[379b7cdf]", "[434fffff0265ce00]", "0x00")
    self.bid32_to_binary64("0", "[38919799]", "[43afffff15062d20]", "0x00")
    self.bid32_to_binary64("1", "[38919799]", "[43afffff15062d20]", "0x00")
    self.bid32_to_binary64("2", "[38919799]", "[43afffff15062d20]", "0x00")
    self.bid32_to_binary64("3", "[38919799]", "[43afffff15062d20]", "0x00")
    self.bid32_to_binary64("4", "[38919799]", "[43afffff15062d20]", "0x00")
    self.bid32_to_binary64("0", "[39709702]", "[440ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("1", "[39709702]", "[440ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("2", "[39709702]", "[440ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("3", "[39709702]", "[440ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("4", "[39709702]", "[440ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("0", "[3a480eae]", "[446ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("1", "[3a480eae]", "[446ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("2", "[3a480eae]", "[446ffff8ae1d5b3e]", "0x20")
    self.bid32_to_binary64("3", "[3a480eae]", "[446ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("4", "[3a480eae]", "[446ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("0", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("1", "[3b2e1de6]", "[44cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("2", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("3", "[3b2e1de6]", "[44cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("4", "[3b2e1de6]", "[44cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("0", "[3eae4cf8]", "[46432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("1", "[3eae4cf8]", "[46432645e1ba93ef]", "0x20")
    self.bid32_to_binary64("2", "[3eae4cf8]", "[46432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("3", "[3eae4cf8]", "[46432645e1ba93ef]", "0x20")
    self.bid32_to_binary64("4", "[3eae4cf8]", "[46432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("0", "[40339017]", "[46e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("1", "[40339017]", "[46e4d3794ce2fc25]", "0x20")
    self.bid32_to_binary64("2", "[40339017]", "[46e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("3", "[40339017]", "[46e4d3794ce2fc25]", "0x20")
    self.bid32_to_binary64("4", "[40339017]", "[46e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("0", "[414f28a1]", "[4758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("1", "[414f28a1]", "[4758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("2", "[414f28a1]", "[4758fa63afcbb901]", "0x20")
    self.bid32_to_binary64("3", "[414f28a1]", "[4758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("4", "[414f28a1]", "[4758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("0", "[422f6fcd]", "[47b7635b25f99028]", "0x20")
    self.bid32_to_binary64("1", "[422f6fcd]", "[47b7635b25f99028]", "0x20")
    self.bid32_to_binary64("2", "[422f6fcd]", "[47b7635b25f99029]", "0x20")
    self.bid32_to_binary64("3", "[422f6fcd]", "[47b7635b25f99028]", "0x20")
    self.bid32_to_binary64("4", "[422f6fcd]", "[47b7635b25f99028]", "0x20")
    self.bid32_to_binary64("0", "[4325b75d]", "[481d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("1", "[4325b75d]", "[481d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("2", "[4325b75d]", "[481d0e38a791f98c]", "0x20")
    self.bid32_to_binary64("3", "[4325b75d]", "[481d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("4", "[4325b75d]", "[481d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("0", "[44180782]", "[487cec9bb224f009]", "0x20")
    self.bid32_to_binary64("1", "[44180782]", "[487cec9bb224f008]", "0x20")
    self.bid32_to_binary64("2", "[44180782]", "[487cec9bb224f009]", "0x20")
    self.bid32_to_binary64("3", "[44180782]", "[487cec9bb224f008]", "0x20")
    self.bid32_to_binary64("4", "[44180782]", "[487cec9bb224f009]", "0x20")
    self.bid32_to_binary64("0", "[448fd534]", "[48a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("1", "[448fd534]", "[48a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("2", "[448fd534]", "[48a7d2950dc76da5]", "0x20")
    self.bid32_to_binary64("3", "[448fd534]", "[48a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("4", "[448fd534]", "[48a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("0", "[45e200a2]", "[493ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("1", "[45e200a2]", "[493ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("2", "[45e200a2]", "[493ccce2f3f92a21]", "0x20")
    self.bid32_to_binary64("3", "[45e200a2]", "[493ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("4", "[45e200a2]", "[493ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("0", "[46990c94]", "[49870105df3d47cb]", "0x20")
    self.bid32_to_binary64("1", "[46990c94]", "[49870105df3d47cb]", "0x20")
    self.bid32_to_binary64("2", "[46990c94]", "[49870105df3d47cc]", "0x20")
    self.bid32_to_binary64("3", "[46990c94]", "[49870105df3d47cb]", "0x20")
    self.bid32_to_binary64("4", "[46990c94]", "[49870105df3d47cb]", "0x20")
    self.bid32_to_binary64("0", "[475833b0]", "[49d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("1", "[475833b0]", "[49d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("2", "[475833b0]", "[49d9500d7197e3f3]", "0x20")
    self.bid32_to_binary64("3", "[475833b0]", "[49d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("4", "[475833b0]", "[49d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("0", "[48f7761f]", "[4a80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("1", "[48f7761f]", "[4a80bd77ca6bbb83]", "0x20")
    self.bid32_to_binary64("2", "[48f7761f]", "[4a80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("3", "[48f7761f]", "[4a80bd77ca6bbb83]", "0x20")
    self.bid32_to_binary64("4", "[48f7761f]", "[4a80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("0", "[4aa33587]", "[4b38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("1", "[4aa33587]", "[4b38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("2", "[4aa33587]", "[4b38174e40cc5cdd]", "0x20")
    self.bid32_to_binary64("3", "[4aa33587]", "[4b38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("4", "[4aa33587]", "[4b38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("0", "[4bd07892]", "[4bb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("1", "[4bd07892]", "[4bb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("2", "[4bd07892]", "[4bb5820c3849fd46]", "0x20")
    self.bid32_to_binary64("3", "[4bd07892]", "[4bb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("4", "[4bd07892]", "[4bb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("0", "[4cc6ce43]", "[4c1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("1", "[4cc6ce43]", "[4c1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("2", "[4cc6ce43]", "[4c1d91e14e502ba5]", "0x20")
    self.bid32_to_binary64("3", "[4cc6ce43]", "[4c1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("4", "[4cc6ce43]", "[4c1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("0", "[4dddfe1d]", "[4c8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("1", "[4dddfe1d]", "[4c8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("2", "[4dddfe1d]", "[4c8eaaa179d3b16a]", "0x20")
    self.bid32_to_binary64("3", "[4dddfe1d]", "[4c8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("4", "[4dddfe1d]", "[4c8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("0", "[4eb63e8d]", "[4ceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("1", "[4eb63e8d]", "[4ceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("2", "[4eb63e8d]", "[4ceba7376fe9b0b6]", "0x20")
    self.bid32_to_binary64("3", "[4eb63e8d]", "[4ceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("4", "[4eb63e8d]", "[4ceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("0", "[4f93259c]", "[4d3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("1", "[4f93259c]", "[4d3e80b6d8e19214]", "0x20")
    self.bid32_to_binary64("2", "[4f93259c]", "[4d3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("3", "[4f93259c]", "[4d3e80b6d8e19214]", "0x20")
    self.bid32_to_binary64("4", "[4f93259c]", "[4d3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("0", "[50915f90]", "[4da59f732b2972d8]", "0x20")
    self.bid32_to_binary64("1", "[50915f90]", "[4da59f732b2972d7]", "0x20")
    self.bid32_to_binary64("2", "[50915f90]", "[4da59f732b2972d8]", "0x20")
    self.bid32_to_binary64("3", "[50915f90]", "[4da59f732b2972d7]", "0x20")
    self.bid32_to_binary64("4", "[50915f90]", "[4da59f732b2972d8]", "0x20")
    self.bid32_to_binary64("0", "[518fe3b1]", "[4e0ee668761a362d]", "0x20")
    self.bid32_to_binary64("1", "[518fe3b1]", "[4e0ee668761a362d]", "0x20")
    self.bid32_to_binary64("2", "[518fe3b1]", "[4e0ee668761a362e]", "0x20")
    self.bid32_to_binary64("3", "[518fe3b1]", "[4e0ee668761a362d]", "0x20")
    self.bid32_to_binary64("4", "[518fe3b1]", "[4e0ee668761a362d]", "0x20")
    self.bid32_to_binary64("0", "[5267acbe]", "[4e6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("1", "[5267acbe]", "[4e6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("2", "[5267acbe]", "[4e6f809f0d2df224]", "0x20")
    self.bid32_to_binary64("3", "[5267acbe]", "[4e6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("4", "[5267acbe]", "[4e6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("0", "[533c4ff6]", "[4ecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("1", "[533c4ff6]", "[4ecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("2", "[533c4ff6]", "[4ecca28f4c04a954]", "0x20")
    self.bid32_to_binary64("3", "[533c4ff6]", "[4ecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("4", "[533c4ff6]", "[4ecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("0", "[53ba0840]", "[4f0138643a016132]", "0x20")
    self.bid32_to_binary64("1", "[53ba0840]", "[4f0138643a016131]", "0x20")
    self.bid32_to_binary64("2", "[53ba0840]", "[4f0138643a016132]", "0x20")
    self.bid32_to_binary64("3", "[53ba0840]", "[4f0138643a016131]", "0x20")
    self.bid32_to_binary64("4", "[53ba0840]", "[4f0138643a016132]", "0x20")
    self.bid32_to_binary64("0", "[555ecc47]", "[4fab7880df2e5188]", "0x20")
    self.bid32_to_binary64("1", "[555ecc47]", "[4fab7880df2e5187]", "0x20")
    self.bid32_to_binary64("2", "[555ecc47]", "[4fab7880df2e5188]", "0x20")
    self.bid32_to_binary64("3", "[555ecc47]", "[4fab7880df2e5187]", "0x20")
    self.bid32_to_binary64("4", "[555ecc47]", "[4fab7880df2e5188]", "0x20")
    self.bid32_to_binary64("0", "[5622a65a]", "[4fff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("1", "[5622a65a]", "[4fff60b4a930ae17]", "0x20")
    self.bid32_to_binary64("2", "[5622a65a]", "[4fff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("3", "[5622a65a]", "[4fff60b4a930ae17]", "0x20")
    self.bid32_to_binary64("4", "[5622a65a]", "[4fff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("0", "[576ff6af]", "[5083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("1", "[576ff6af]", "[5083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("2", "[576ff6af]", "[5083cd885220ea7d]", "0x20")
    self.bid32_to_binary64("3", "[576ff6af]", "[5083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("4", "[576ff6af]", "[5083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("0", "[5969ea91]", "[5156de262e569d42]", "0x20")
    self.bid32_to_binary64("1", "[5969ea91]", "[5156de262e569d41]", "0x20")
    self.bid32_to_binary64("2", "[5969ea91]", "[5156de262e569d42]", "0x20")
    self.bid32_to_binary64("3", "[5969ea91]", "[5156de262e569d41]", "0x20")
    self.bid32_to_binary64("4", "[5969ea91]", "[5156de262e569d42]", "0x20")
    self.bid32_to_binary64("0", "[5a5b2e31]", "[51bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("1", "[5a5b2e31]", "[51bec27efe8a377c]", "0x20")
    self.bid32_to_binary64("2", "[5a5b2e31]", "[51bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("3", "[5a5b2e31]", "[51bec27efe8a377c]", "0x20")
    self.bid32_to_binary64("4", "[5a5b2e31]", "[51bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("0", "[5b217364]", "[5211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("1", "[5b217364]", "[5211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("2", "[5b217364]", "[5211a1d9135cca54]", "0x20")
    self.bid32_to_binary64("3", "[5b217364]", "[5211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("4", "[5b217364]", "[5211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("0", "[5c1ceb38]", "[5277d15bf3186081]", "0x20")
    self.bid32_to_binary64("1", "[5c1ceb38]", "[5277d15bf3186080]", "0x20")
    self.bid32_to_binary64("2", "[5c1ceb38]", "[5277d15bf3186081]", "0x20")
    self.bid32_to_binary64("3", "[5c1ceb38]", "[5277d15bf3186080]", "0x20")
    self.bid32_to_binary64("4", "[5c1ceb38]", "[5277d15bf3186081]", "0x20")
    self.bid32_to_binary64("0", "[5cebc132]", "[52cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("1", "[5cebc132]", "[52cbbbd1aedbf9bf]", "0x20")
    self.bid32_to_binary64("2", "[5cebc132]", "[52cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("3", "[5cebc132]", "[52cbbbd1aedbf9bf]", "0x20")
    self.bid32_to_binary64("4", "[5cebc132]", "[52cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("0", "[5debc132]", "[5335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("1", "[5debc132]", "[5335aabbd09bdb1d]", "0x20")
    self.bid32_to_binary64("2", "[5debc132]", "[5335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("3", "[5debc132]", "[5335aabbd09bdb1d]", "0x20")
    self.bid32_to_binary64("4", "[5debc132]", "[5335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("0", "[5ecfa52e]", "[539905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("1", "[5ecfa52e]", "[539905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("2", "[5ecfa52e]", "[539905e9b292dc2c]", "0x20")
    self.bid32_to_binary64("3", "[5ecfa52e]", "[539905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("4", "[5ecfa52e]", "[539905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("0", "[606c26d1]", "[2d07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("1", "[606c26d1]", "[2d07f2ef5801decc]", "0x20")
    self.bid32_to_binary64("2", "[606c26d1]", "[2d07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("3", "[606c26d1]", "[2d07f2ef5801decc]", "0x20")
    self.bid32_to_binary64("4", "[606c26d1]", "[2d07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("0", "[6349bc1f]", "[31cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("1", "[6349bc1f]", "[31cf264d8b4a562f]", "0x20")
    self.bid32_to_binary64("2", "[6349bc1f]", "[31cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("3", "[6349bc1f]", "[31cf264d8b4a562f]", "0x20")
    self.bid32_to_binary64("4", "[6349bc1f]", "[31cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("0", "[6389bc1f]", "[323855ec94d21355]", "0x20")
    self.bid32_to_binary64("1", "[6389bc1f]", "[323855ec94d21355]", "0x20")
    self.bid32_to_binary64("2", "[6389bc1f]", "[323855ec94d21356]", "0x20")
    self.bid32_to_binary64("3", "[6389bc1f]", "[323855ec94d21355]", "0x20")
    self.bid32_to_binary64("4", "[6389bc1f]", "[323855ec94d21355]", "0x20")
    self.bid32_to_binary64("0", "[65b4a326]", "[35c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("1", "[65b4a326]", "[35c2390ea64283d1]", "0x20")
    self.bid32_to_binary64("2", "[65b4a326]", "[35c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("3", "[65b4a326]", "[35c2390ea64283d1]", "0x20")
    self.bid32_to_binary64("4", "[65b4a326]", "[35c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("0", "[69402c61]", "[3bc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("1", "[69402c61]", "[3bc3d5783e85fcf7]", "0x20")
    self.bid32_to_binary64("2", "[69402c61]", "[3bc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("3", "[69402c61]", "[3bc3d5783e85fcf7]", "0x20")
    self.bid32_to_binary64("4", "[69402c61]", "[3bc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("0", "[6994afb0]", "[3c31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("1", "[6994afb0]", "[3c31f99e11ea0a23]", "0x20")
    self.bid32_to_binary64("2", "[6994afb0]", "[3c31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("3", "[6994afb0]", "[3c31f99e11ea0a23]", "0x20")
    self.bid32_to_binary64("4", "[6994afb0]", "[3c31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("0", "[6bf87d22]", "[4023fcacd184c272]", "0x20")
    self.bid32_to_binary64("1", "[6bf87d22]", "[4023fcacd184c271]", "0x20")
    self.bid32_to_binary64("2", "[6bf87d22]", "[4023fcacd184c272]", "0x20")
    self.bid32_to_binary64("3", "[6bf87d22]", "[4023fcacd184c271]", "0x20")
    self.bid32_to_binary64("4", "[6bf87d22]", "[4023fcacd184c272]", "0x20")
    self.bid32_to_binary64("0", "[6c3895e6]", "[408f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("1", "[6c3895e6]", "[408f3fe075f6fd21]", "0x20")
    self.bid32_to_binary64("2", "[6c3895e6]", "[408f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("3", "[6c3895e6]", "[408f3fe075f6fd21]", "0x20")
    self.bid32_to_binary64("4", "[6c3895e6]", "[408f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("0", "[6c789672]", "[40f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("1", "[6c789672]", "[40f869fdc28f5c28]", "0x20")
    self.bid32_to_binary64("2", "[6c789672]", "[40f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("3", "[6c789672]", "[40f869fdc28f5c28]", "0x20")
    self.bid32_to_binary64("4", "[6c789672]", "[40f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("0", "[6f1831eb]", "[4554a053134cb954]", "0x20")
    self.bid32_to_binary64("1", "[6f1831eb]", "[4554a053134cb953]", "0x20")
    self.bid32_to_binary64("2", "[6f1831eb]", "[4554a053134cb954]", "0x20")
    self.bid32_to_binary64("3", "[6f1831eb]", "[4554a053134cb953]", "0x20")
    self.bid32_to_binary64("4", "[6f1831eb]", "[4554a053134cb954]", "0x20")
    self.bid32_to_binary64("0", "[6f5372a3]", "[45bf392946d76a98]", "0x20")
    self.bid32_to_binary64("1", "[6f5372a3]", "[45bf392946d76a97]", "0x20")
    self.bid32_to_binary64("2", "[6f5372a3]", "[45bf392946d76a98]", "0x20")
    self.bid32_to_binary64("3", "[6f5372a3]", "[45bf392946d76a97]", "0x20")
    self.bid32_to_binary64("4", "[6f5372a3]", "[45bf392946d76a98]", "0x20")
    self.bid32_to_binary64("0", "[6f8c3f94]", "[462733bfae0801fd]", "0x20")
    self.bid32_to_binary64("1", "[6f8c3f94]", "[462733bfae0801fd]", "0x20")
    self.bid32_to_binary64("2", "[6f8c3f94]", "[462733bfae0801fe]", "0x20")
    self.bid32_to_binary64("3", "[6f8c3f94]", "[462733bfae0801fd]", "0x20")
    self.bid32_to_binary64("4", "[6f8c3f94]", "[462733bfae0801fd]", "0x20")
    self.bid32_to_binary64("0", "[72749d39]", "[4af0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("1", "[72749d39]", "[4af0450e3ddd8f30]", "0x20")
    self.bid32_to_binary64("2", "[72749d39]", "[4af0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("3", "[72749d39]", "[4af0450e3ddd8f30]", "0x20")
    self.bid32_to_binary64("4", "[72749d39]", "[4af0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("0", "[7606b40a]", "[50f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("1", "[7606b40a]", "[50f29cf5a7177b3f]", "0x20")
    self.bid32_to_binary64("2", "[7606b40a]", "[50f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("3", "[7606b40a]", "[50f29cf5a7177b3f]", "0x20")
    self.bid32_to_binary64("4", "[7606b40a]", "[50f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("0", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("1", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("2", "[77f8967f]", "[5412ba093e5c6115]", "0x20")
    self.bid32_to_binary64("3", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("4", "[77f8967f]", "[5412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("0", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[78000000]", "[7ff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[7c0c2000]", "[7ffe100000000000]", "0x00")
    self.bid32_to_binary64("0", "[7e0c2000]", "[7ffe100000000000]", "0x01")
    self.bid32_to_binary64("0", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("1", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("2", "[80000001]", "[aaf665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("3", "[80000001]", "[aaf665bf1d3e6a8c]", "0x20")
    self.bid32_to_binary64("4", "[80000001]", "[aaf665bf1d3e6a8d]", "0x20")
    self.bid32_to_binary64("0", "[80000007]", "[ab23990739969d3b]", "0x20")
    self.bid32_to_binary64("1", "[80000007]", "[ab23990739969d3c]", "0x20")
    self.bid32_to_binary64("2", "[80000007]", "[ab23990739969d3b]", "0x20")
    self.bid32_to_binary64("3", "[80000007]", "[ab23990739969d3b]", "0x20")
    self.bid32_to_binary64("4", "[80000007]", "[ab23990739969d3b]", "0x20")
    self.bid32_to_binary64("0", "[80001d37]", "[abc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("1", "[80001d37]", "[abc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("2", "[80001d37]", "[abc472b412fad3d6]", "0x20")
    self.bid32_to_binary64("3", "[80001d37]", "[abc472b412fad3d6]", "0x20")
    self.bid32_to_binary64("4", "[80001d37]", "[abc472b412fad3d7]", "0x20")
    self.bid32_to_binary64("0", "[80092148]", "[ac298fa448f6e088]", "0x20")
    self.bid32_to_binary64("1", "[80092148]", "[ac298fa448f6e088]", "0x20")
    self.bid32_to_binary64("2", "[80092148]", "[ac298fa448f6e087]", "0x20")
    self.bid32_to_binary64("3", "[80092148]", "[ac298fa448f6e087]", "0x20")
    self.bid32_to_binary64("4", "[80092148]", "[ac298fa448f6e088]", "0x20")
    self.bid32_to_binary64("0", "[800f423f]", "[ac355c1f1063a881]", "0x20")
    self.bid32_to_binary64("1", "[800f423f]", "[ac355c1f1063a882]", "0x20")
    self.bid32_to_binary64("2", "[800f423f]", "[ac355c1f1063a881]", "0x20")
    self.bid32_to_binary64("3", "[800f423f]", "[ac355c1f1063a881]", "0x20")
    self.bid32_to_binary64("4", "[800f423f]", "[ac355c1f1063a881]", "0x20")
    self.bid32_to_binary64("0", "[80baf827]", "[ac89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("1", "[80baf827]", "[ac89cbd06456ee4f]", "0x20")
    self.bid32_to_binary64("2", "[80baf827]", "[ac89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("3", "[80baf827]", "[ac89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("4", "[80baf827]", "[ac89cbd06456ee4e]", "0x20")
    self.bid32_to_binary64("0", "[82f41b1a]", "[ad6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("1", "[82f41b1a]", "[ad6f00051b7ba70b]", "0x20")
    self.bid32_to_binary64("2", "[82f41b1a]", "[ad6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("3", "[82f41b1a]", "[ad6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("4", "[82f41b1a]", "[ad6f00051b7ba70a]", "0x20")
    self.bid32_to_binary64("0", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("1", "[83000001]", "[ac355c2076bf9a56]", "0x20")
    self.bid32_to_binary64("2", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("3", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("4", "[83000001]", "[ac355c2076bf9a55]", "0x20")
    self.bid32_to_binary64("0", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("1", "[83800001]", "[ac6ab328946f80eb]", "0x20")
    self.bid32_to_binary64("2", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("3", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("4", "[83800001]", "[ac6ab328946f80ea]", "0x20")
    self.bid32_to_binary64("0", "[83bee8cb]", "[adca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("1", "[83bee8cb]", "[adca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("2", "[83bee8cb]", "[adca3ead732acfe7]", "0x20")
    self.bid32_to_binary64("3", "[83bee8cb]", "[adca3ead732acfe7]", "0x20")
    self.bid32_to_binary64("4", "[83bee8cb]", "[adca3ead732acfe8]", "0x20")
    self.bid32_to_binary64("0", "[84ae5c6b]", "[ae2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("1", "[84ae5c6b]", "[ae2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("2", "[84ae5c6b]", "[ae2e38723a5ce17b]", "0x20")
    self.bid32_to_binary64("3", "[84ae5c6b]", "[ae2e38723a5ce17b]", "0x20")
    self.bid32_to_binary64("4", "[84ae5c6b]", "[ae2e38723a5ce17c]", "0x20")
    self.bid32_to_binary64("0", "[85928b5e]", "[ae82e347647a0ced]", "0x20")
    self.bid32_to_binary64("1", "[85928b5e]", "[ae82e347647a0cee]", "0x20")
    self.bid32_to_binary64("2", "[85928b5e]", "[ae82e347647a0ced]", "0x20")
    self.bid32_to_binary64("3", "[85928b5e]", "[ae82e347647a0ced]", "0x20")
    self.bid32_to_binary64("4", "[85928b5e]", "[ae82e347647a0ced]", "0x20")
    self.bid32_to_binary64("0", "[8693b3d5]", "[aeef5aed7614686b]", "0x20")
    self.bid32_to_binary64("1", "[8693b3d5]", "[aeef5aed7614686c]", "0x20")
    self.bid32_to_binary64("2", "[8693b3d5]", "[aeef5aed7614686b]", "0x20")
    self.bid32_to_binary64("3", "[8693b3d5]", "[aeef5aed7614686b]", "0x20")
    self.bid32_to_binary64("4", "[8693b3d5]", "[aeef5aed7614686b]", "0x20")
    self.bid32_to_binary64("0", "[878a165b]", "[af491553af7b7353]", "0x20")
    self.bid32_to_binary64("1", "[878a165b]", "[af491553af7b7353]", "0x20")
    self.bid32_to_binary64("2", "[878a165b]", "[af491553af7b7352]", "0x20")
    self.bid32_to_binary64("3", "[878a165b]", "[af491553af7b7352]", "0x20")
    self.bid32_to_binary64("4", "[878a165b]", "[af491553af7b7353]", "0x20")
    self.bid32_to_binary64("0", "[88806223]", "[af67d4b57562e710]", "0x20")
    self.bid32_to_binary64("1", "[88806223]", "[af67d4b57562e711]", "0x20")
    self.bid32_to_binary64("2", "[88806223]", "[af67d4b57562e710]", "0x20")
    self.bid32_to_binary64("3", "[88806223]", "[af67d4b57562e710]", "0x20")
    self.bid32_to_binary64("4", "[88806223]", "[af67d4b57562e710]", "0x20")
    self.bid32_to_binary64("0", "[89831118]", "[b0029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("1", "[89831118]", "[b0029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("2", "[89831118]", "[b0029e2dc3b54484]", "0x20")
    self.bid32_to_binary64("3", "[89831118]", "[b0029e2dc3b54484]", "0x20")
    self.bid32_to_binary64("4", "[89831118]", "[b0029e2dc3b54485]", "0x20")
    self.bid32_to_binary64("0", "[8a0db57d]", "[b05a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("1", "[8a0db57d]", "[b05a01fb6d8b1a21]", "0x20")
    self.bid32_to_binary64("2", "[8a0db57d]", "[b05a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("3", "[8a0db57d]", "[b05a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("4", "[8a0db57d]", "[b05a01fb6d8b1a20]", "0x20")
    self.bid32_to_binary64("0", "[8b2eff07]", "[b0e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("1", "[8b2eff07]", "[b0e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("2", "[8b2eff07]", "[b0e169e9b6071ad7]", "0x20")
    self.bid32_to_binary64("3", "[8b2eff07]", "[b0e169e9b6071ad7]", "0x20")
    self.bid32_to_binary64("4", "[8b2eff07]", "[b0e169e9b6071ad8]", "0x20")
    self.bid32_to_binary64("0", "[8c481023]", "[b154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("1", "[8c481023]", "[b154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("2", "[8c481023]", "[b154dc5ee85b9b6d]", "0x20")
    self.bid32_to_binary64("3", "[8c481023]", "[b154dc5ee85b9b6d]", "0x20")
    self.bid32_to_binary64("4", "[8c481023]", "[b154dc5ee85b9b6e]", "0x20")
    self.bid32_to_binary64("0", "[8f5a3882]", "[b298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("1", "[8f5a3882]", "[b298e83fe1a3d099]", "0x20")
    self.bid32_to_binary64("2", "[8f5a3882]", "[b298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("3", "[8f5a3882]", "[b298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("4", "[8f5a3882]", "[b298e83fe1a3d098]", "0x20")
    self.bid32_to_binary64("0", "[9013aee5]", "[b2e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("1", "[9013aee5]", "[b2e0fb2580647d97]", "0x20")
    self.bid32_to_binary64("2", "[9013aee5]", "[b2e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("3", "[9013aee5]", "[b2e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("4", "[9013aee5]", "[b2e0fb2580647d96]", "0x20")
    self.bid32_to_binary64("0", "[912822cc]", "[b35b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("1", "[912822cc]", "[b35b0d330b7ea471]", "0x20")
    self.bid32_to_binary64("2", "[912822cc]", "[b35b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("3", "[912822cc]", "[b35b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("4", "[912822cc]", "[b35b0d330b7ea470]", "0x20")
    self.bid32_to_binary64("0", "[9214ff06]", "[b3b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("1", "[9214ff06]", "[b3b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("2", "[9214ff06]", "[b3b61c8f73bc9e74]", "0x20")
    self.bid32_to_binary64("3", "[9214ff06]", "[b3b61c8f73bc9e74]", "0x20")
    self.bid32_to_binary64("4", "[9214ff06]", "[b3b61c8f73bc9e75]", "0x20")
    self.bid32_to_binary64("0", "[930cf727]", "[b41555ae28ababee]", "0x20")
    self.bid32_to_binary64("1", "[930cf727]", "[b41555ae28ababee]", "0x20")
    self.bid32_to_binary64("2", "[930cf727]", "[b41555ae28ababed]", "0x20")
    self.bid32_to_binary64("3", "[930cf727]", "[b41555ae28ababed]", "0x20")
    self.bid32_to_binary64("4", "[930cf727]", "[b41555ae28ababee]", "0x20")
    self.bid32_to_binary64("0", "[940422b9]", "[b465442a5d58f916]", "0x20")
    self.bid32_to_binary64("1", "[940422b9]", "[b465442a5d58f916]", "0x20")
    self.bid32_to_binary64("2", "[940422b9]", "[b465442a5d58f915]", "0x20")
    self.bid32_to_binary64("3", "[940422b9]", "[b465442a5d58f915]", "0x20")
    self.bid32_to_binary64("4", "[940422b9]", "[b465442a5d58f916]", "0x20")
    self.bid32_to_binary64("0", "[95055f9a]", "[b4d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("1", "[95055f9a]", "[b4d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("2", "[95055f9a]", "[b4d59644266c9f6a]", "0x20")
    self.bid32_to_binary64("3", "[95055f9a]", "[b4d59644266c9f6a]", "0x20")
    self.bid32_to_binary64("4", "[95055f9a]", "[b4d59644266c9f6b]", "0x20")
    self.bid32_to_binary64("0", "[96034202]", "[b5347326e213daf9]", "0x20")
    self.bid32_to_binary64("1", "[96034202]", "[b5347326e213daf9]", "0x20")
    self.bid32_to_binary64("2", "[96034202]", "[b5347326e213daf8]", "0x20")
    self.bid32_to_binary64("3", "[96034202]", "[b5347326e213daf8]", "0x20")
    self.bid32_to_binary64("4", "[96034202]", "[b5347326e213daf9]", "0x20")
    self.bid32_to_binary64("0", "[9797c30b]", "[b602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("1", "[9797c30b]", "[b602351e3c9ac5b1]", "0x20")
    self.bid32_to_binary64("2", "[9797c30b]", "[b602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("3", "[9797c30b]", "[b602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("4", "[9797c30b]", "[b602351e3c9ac5b0]", "0x20")
    self.bid32_to_binary64("0", "[98daf55c]", "[b68b39ab78718832]", "0x20")
    self.bid32_to_binary64("1", "[98daf55c]", "[b68b39ab78718832]", "0x20")
    self.bid32_to_binary64("2", "[98daf55c]", "[b68b39ab78718831]", "0x20")
    self.bid32_to_binary64("3", "[98daf55c]", "[b68b39ab78718831]", "0x20")
    self.bid32_to_binary64("4", "[98daf55c]", "[b68b39ab78718832]", "0x20")
    self.bid32_to_binary64("0", "[9a033de6]", "[b6de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("1", "[9a033de6]", "[b6de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("2", "[9a033de6]", "[b6de528bf5efa60b]", "0x20")
    self.bid32_to_binary64("3", "[9a033de6]", "[b6de528bf5efa60b]", "0x20")
    self.bid32_to_binary64("4", "[9a033de6]", "[b6de528bf5efa60c]", "0x20")
    self.bid32_to_binary64("0", "[9abc1faf]", "[b755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("1", "[9abc1faf]", "[b755f7be21275cb6]", "0x20")
    self.bid32_to_binary64("2", "[9abc1faf]", "[b755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("3", "[9abc1faf]", "[b755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("4", "[9abc1faf]", "[b755f7be21275cb5]", "0x20")
    self.bid32_to_binary64("0", "[9bea90e4]", "[b7ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("1", "[9bea90e4]", "[b7ce6b5150d93207]", "0x20")
    self.bid32_to_binary64("2", "[9bea90e4]", "[b7ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("3", "[9bea90e4]", "[b7ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("4", "[9bea90e4]", "[b7ce6b5150d93206]", "0x20")
    self.bid32_to_binary64("0", "[9c974493]", "[b814c17116f185ba]", "0x20")
    self.bid32_to_binary64("1", "[9c974493]", "[b814c17116f185bb]", "0x20")
    self.bid32_to_binary64("2", "[9c974493]", "[b814c17116f185ba]", "0x20")
    self.bid32_to_binary64("3", "[9c974493]", "[b814c17116f185ba]", "0x20")
    self.bid32_to_binary64("4", "[9c974493]", "[b814c17116f185ba]", "0x20")
    self.bid32_to_binary64("0", "[9e045d65]", "[b88e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("1", "[9e045d65]", "[b88e6b1a754d5158]", "0x20")
    self.bid32_to_binary64("2", "[9e045d65]", "[b88e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("3", "[9e045d65]", "[b88e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("4", "[9e045d65]", "[b88e6b1a754d5157]", "0x20")
    self.bid32_to_binary64("0", "[9e8f8b66]", "[b8e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("1", "[9e8f8b66]", "[b8e0ed2e61e9fa85]", "0x20")
    self.bid32_to_binary64("2", "[9e8f8b66]", "[b8e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("3", "[9e8f8b66]", "[b8e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("4", "[9e8f8b66]", "[b8e0ed2e61e9fa84]", "0x20")
    self.bid32_to_binary64("0", "[9f921289]", "[b94ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("1", "[9f921289]", "[b94ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("2", "[9f921289]", "[b94ebfa4445b9dcc]", "0x20")
    self.bid32_to_binary64("3", "[9f921289]", "[b94ebfa4445b9dcc]", "0x20")
    self.bid32_to_binary64("4", "[9f921289]", "[b94ebfa4445b9dcd]", "0x20")
    self.bid32_to_binary64("0", "[a089e611]", "[b9aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("1", "[a089e611]", "[b9aa50b43ab3dff9]", "0x20")
    self.bid32_to_binary64("2", "[a089e611]", "[b9aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("3", "[a089e611]", "[b9aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("4", "[a089e611]", "[b9aa50b43ab3dff8]", "0x20")
    self.bid32_to_binary64("0", "[a187ad40]", "[ba0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("1", "[a187ad40]", "[ba0fe3544145e9d9]", "0x20")
    self.bid32_to_binary64("2", "[a187ad40]", "[ba0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("3", "[a187ad40]", "[ba0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("4", "[a187ad40]", "[ba0fe3544145e9d8]", "0x20")
    self.bid32_to_binary64("0", "[a28167f2]", "[ba52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("1", "[a28167f2]", "[ba52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("2", "[a28167f2]", "[ba52405b773fbdf2]", "0x20")
    self.bid32_to_binary64("3", "[a28167f2]", "[ba52405b773fbdf2]", "0x20")
    self.bid32_to_binary64("4", "[a28167f2]", "[ba52405b773fbdf3]", "0x20")
    self.bid32_to_binary64("0", "[a35d0cc5]", "[bae7974855c6a628]", "0x20")
    self.bid32_to_binary64("1", "[a35d0cc5]", "[bae7974855c6a628]", "0x20")
    self.bid32_to_binary64("2", "[a35d0cc5]", "[bae7974855c6a627]", "0x20")
    self.bid32_to_binary64("3", "[a35d0cc5]", "[bae7974855c6a627]", "0x20")
    self.bid32_to_binary64("4", "[a35d0cc5]", "[bae7974855c6a628]", "0x20")
    self.bid32_to_binary64("0", "[a484c195]", "[bb42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("1", "[a484c195]", "[bb42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("2", "[a484c195]", "[bb42d756dfcb1bb3]", "0x20")
    self.bid32_to_binary64("3", "[a484c195]", "[bb42d756dfcb1bb3]", "0x20")
    self.bid32_to_binary64("4", "[a484c195]", "[bb42d756dfcb1bb4]", "0x20")
    self.bid32_to_binary64("0", "[a7706288]", "[bc953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("1", "[a7706288]", "[bc953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("2", "[a7706288]", "[bc953a9985dbde6b]", "0x20")
    self.bid32_to_binary64("3", "[a7706288]", "[bc953a9985dbde6b]", "0x20")
    self.bid32_to_binary64("4", "[a7706288]", "[bc953a9985dbde6c]", "0x20")
    self.bid32_to_binary64("0", "[a8531201]", "[bcf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("1", "[a8531201]", "[bcf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("2", "[a8531201]", "[bcf8849dd33c95ae]", "0x20")
    self.bid32_to_binary64("3", "[a8531201]", "[bcf8849dd33c95ae]", "0x20")
    self.bid32_to_binary64("4", "[a8531201]", "[bcf8849dd33c95af]", "0x20")
    self.bid32_to_binary64("0", "[a926162b]", "[bd519078a913357e]", "0x20")
    self.bid32_to_binary64("1", "[a926162b]", "[bd519078a913357e]", "0x20")
    self.bid32_to_binary64("2", "[a926162b]", "[bd519078a913357d]", "0x20")
    self.bid32_to_binary64("3", "[a926162b]", "[bd519078a913357d]", "0x20")
    self.bid32_to_binary64("4", "[a926162b]", "[bd519078a913357e]", "0x20")
    self.bid32_to_binary64("0", "[aa126b15]", "[bdaa8b263af79514]", "0x20")
    self.bid32_to_binary64("1", "[aa126b15]", "[bdaa8b263af79515]", "0x20")
    self.bid32_to_binary64("2", "[aa126b15]", "[bdaa8b263af79514]", "0x20")
    self.bid32_to_binary64("3", "[aa126b15]", "[bdaa8b263af79514]", "0x20")
    self.bid32_to_binary64("4", "[aa126b15]", "[bdaa8b263af79514]", "0x20")
    self.bid32_to_binary64("0", "[ab12abe1]", "[be1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("1", "[ab12abe1]", "[be1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("2", "[ab12abe1]", "[be1505aa4b8c33d5]", "0x20")
    self.bid32_to_binary64("3", "[ab12abe1]", "[be1505aa4b8c33d5]", "0x20")
    self.bid32_to_binary64("4", "[ab12abe1]", "[be1505aa4b8c33d6]", "0x20")
    self.bid32_to_binary64("0", "[ac07ee93]", "[be6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("1", "[ac07ee93]", "[be6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("2", "[ac07ee93]", "[be6be872a8b30d7c]", "0x20")
    self.bid32_to_binary64("3", "[ac07ee93]", "[be6be872a8b30d7c]", "0x20")
    self.bid32_to_binary64("4", "[ac07ee93]", "[be6be872a8b30d7d]", "0x20")
    self.bid32_to_binary64("0", "[ad0333ed]", "[bec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("1", "[ad0333ed]", "[bec19b96f36ec68c]", "0x20")
    self.bid32_to_binary64("2", "[ad0333ed]", "[bec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("3", "[ad0333ed]", "[bec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("4", "[ad0333ed]", "[bec19b96f36ec68b]", "0x20")
    self.bid32_to_binary64("0", "[ae04b977]", "[bf344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("1", "[ae04b977]", "[bf344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("2", "[ae04b977]", "[bf344a9ca8ba155c]", "0x20")
    self.bid32_to_binary64("3", "[ae04b977]", "[bf344a9ca8ba155c]", "0x20")
    self.bid32_to_binary64("4", "[ae04b977]", "[bf344a9ca8ba155d]", "0x20")
    self.bid32_to_binary64("0", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("1", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("2", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("3", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("4", "[aecd7c6d]", "[bfaa000000000000]", "0x00")
    self.bid32_to_binary64("0", "[af03cf77]", "[bf99923bd746a352]", "0x20")
    self.bid32_to_binary64("1", "[af03cf77]", "[bf99923bd746a353]", "0x20")
    self.bid32_to_binary64("2", "[af03cf77]", "[bf99923bd746a352]", "0x20")
    self.bid32_to_binary64("3", "[af03cf77]", "[bf99923bd746a352]", "0x20")
    self.bid32_to_binary64("4", "[af03cf77]", "[bf99923bd746a352]", "0x20")
    self.bid32_to_binary64("0", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b200000f]", "[bff8000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b2800001]", "[bff0000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("1", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("2", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("3", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("4", "[b2800040]", "[c050000000000000]", "0x00")
    self.bid32_to_binary64("0", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("1", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("2", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("3", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("4", "[b28003e7]", "[c08f380000000000]", "0x00")
    self.bid32_to_binary64("0", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("1", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("2", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("3", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("4", "[b28003e8]", "[c08f400000000000]", "0x00")
    self.bid32_to_binary64("0", "[b30f4240]", "[c16312d000000000]", "0x00")
    self.bid32_to_binary64("1", "[b30f4240]", "[c16312d000000000]", "0x00")
    self.bid32_to_binary64("2", "[b30f4240]", "[c16312d000000000]", "0x00")
    self.bid32_to_binary64("3", "[b30f4240]", "[c16312d000000000]", "0x00")
    self.bid32_to_binary64("4", "[b30f4240]", "[c16312d000000000]", "0x00")
    self.bid32_to_binary64("0", "[b40f4240]", "[c1cdcd6500000000]", "0x00")
    self.bid32_to_binary64("1", "[b40f4240]", "[c1cdcd6500000000]", "0x00")
    self.bid32_to_binary64("2", "[b40f4240]", "[c1cdcd6500000000]", "0x00")
    self.bid32_to_binary64("3", "[b40f4240]", "[c1cdcd6500000000]", "0x00")
    self.bid32_to_binary64("4", "[b40f4240]", "[c1cdcd6500000000]", "0x00")
    self.bid32_to_binary64("0", "[b4e8db8b]", "[c22fffffcb600000]", "0x00")
    self.bid32_to_binary64("1", "[b4e8db8b]", "[c22fffffcb600000]", "0x00")
    self.bid32_to_binary64("2", "[b4e8db8b]", "[c22fffffcb600000]", "0x00")
    self.bid32_to_binary64("3", "[b4e8db8b]", "[c22fffffcb600000]", "0x00")
    self.bid32_to_binary64("4", "[b4e8db8b]", "[c22fffffcb600000]", "0x00")
    self.bid32_to_binary64("0", "[b5c31bde]", "[c28fffffc19c0000]", "0x00")
    self.bid32_to_binary64("1", "[b5c31bde]", "[c28fffffc19c0000]", "0x00")
    self.bid32_to_binary64("2", "[b5c31bde]", "[c28fffffc19c0000]", "0x00")
    self.bid32_to_binary64("3", "[b5c31bde]", "[c28fffffc19c0000]", "0x00")
    self.bid32_to_binary64("4", "[b5c31bde]", "[c28fffffc19c0000]", "0x00")
    self.bid32_to_binary64("0", "[b6aaf31d]", "[c2efffff6dafa000]", "0x00")
    self.bid32_to_binary64("1", "[b6aaf31d]", "[c2efffff6dafa000]", "0x00")
    self.bid32_to_binary64("2", "[b6aaf31d]", "[c2efffff6dafa000]", "0x00")
    self.bid32_to_binary64("3", "[b6aaf31d]", "[c2efffff6dafa000]", "0x00")
    self.bid32_to_binary64("4", "[b6aaf31d]", "[c2efffff6dafa000]", "0x00")
    self.bid32_to_binary64("0", "[b79b7cdf]", "[c34fffff0265ce00]", "0x00")
    self.bid32_to_binary64("1", "[b79b7cdf]", "[c34fffff0265ce00]", "0x00")
    self.bid32_to_binary64("2", "[b79b7cdf]", "[c34fffff0265ce00]", "0x00")
    self.bid32_to_binary64("3", "[b79b7cdf]", "[c34fffff0265ce00]", "0x00")
    self.bid32_to_binary64("4", "[b79b7cdf]", "[c34fffff0265ce00]", "0x00")
    self.bid32_to_binary64("0", "[b8919799]", "[c3afffff15062d20]", "0x00")
    self.bid32_to_binary64("1", "[b8919799]", "[c3afffff15062d20]", "0x00")
    self.bid32_to_binary64("2", "[b8919799]", "[c3afffff15062d20]", "0x00")
    self.bid32_to_binary64("3", "[b8919799]", "[c3afffff15062d20]", "0x00")
    self.bid32_to_binary64("4", "[b8919799]", "[c3afffff15062d20]", "0x00")
    self.bid32_to_binary64("0", "[b9709702]", "[c40ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("1", "[b9709702]", "[c40ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("2", "[b9709702]", "[c40ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("3", "[b9709702]", "[c40ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("4", "[b9709702]", "[c40ffffdd4e1ca2a]", "0x00")
    self.bid32_to_binary64("0", "[ba480eae]", "[c46ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("1", "[ba480eae]", "[c46ffff8ae1d5b3e]", "0x20")
    self.bid32_to_binary64("2", "[ba480eae]", "[c46ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("3", "[ba480eae]", "[c46ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("4", "[ba480eae]", "[c46ffff8ae1d5b3d]", "0x20")
    self.bid32_to_binary64("0", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("1", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("2", "[bb2e1de6]", "[c4cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("3", "[bb2e1de6]", "[c4cffffcd7edc455]", "0x20")
    self.bid32_to_binary64("4", "[bb2e1de6]", "[c4cffffcd7edc456]", "0x20")
    self.bid32_to_binary64("0", "[beae4cf8]", "[c6432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("1", "[beae4cf8]", "[c6432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("2", "[beae4cf8]", "[c6432645e1ba93ef]", "0x20")
    self.bid32_to_binary64("3", "[beae4cf8]", "[c6432645e1ba93ef]", "0x20")
    self.bid32_to_binary64("4", "[beae4cf8]", "[c6432645e1ba93f0]", "0x20")
    self.bid32_to_binary64("0", "[c0339017]", "[c6e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("1", "[c0339017]", "[c6e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("2", "[c0339017]", "[c6e4d3794ce2fc25]", "0x20")
    self.bid32_to_binary64("3", "[c0339017]", "[c6e4d3794ce2fc25]", "0x20")
    self.bid32_to_binary64("4", "[c0339017]", "[c6e4d3794ce2fc26]", "0x20")
    self.bid32_to_binary64("0", "[c14f28a1]", "[c758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("1", "[c14f28a1]", "[c758fa63afcbb901]", "0x20")
    self.bid32_to_binary64("2", "[c14f28a1]", "[c758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("3", "[c14f28a1]", "[c758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("4", "[c14f28a1]", "[c758fa63afcbb900]", "0x20")
    self.bid32_to_binary64("0", "[c22f6fcd]", "[c7b7635b25f99028]", "0x20")
    self.bid32_to_binary64("1", "[c22f6fcd]", "[c7b7635b25f99029]", "0x20")
    self.bid32_to_binary64("2", "[c22f6fcd]", "[c7b7635b25f99028]", "0x20")
    self.bid32_to_binary64("3", "[c22f6fcd]", "[c7b7635b25f99028]", "0x20")
    self.bid32_to_binary64("4", "[c22f6fcd]", "[c7b7635b25f99028]", "0x20")
    self.bid32_to_binary64("0", "[c325b75d]", "[c81d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("1", "[c325b75d]", "[c81d0e38a791f98c]", "0x20")
    self.bid32_to_binary64("2", "[c325b75d]", "[c81d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("3", "[c325b75d]", "[c81d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("4", "[c325b75d]", "[c81d0e38a791f98b]", "0x20")
    self.bid32_to_binary64("0", "[c4180782]", "[c87cec9bb224f009]", "0x20")
    self.bid32_to_binary64("1", "[c4180782]", "[c87cec9bb224f009]", "0x20")
    self.bid32_to_binary64("2", "[c4180782]", "[c87cec9bb224f008]", "0x20")
    self.bid32_to_binary64("3", "[c4180782]", "[c87cec9bb224f008]", "0x20")
    self.bid32_to_binary64("4", "[c4180782]", "[c87cec9bb224f009]", "0x20")
    self.bid32_to_binary64("0", "[c48fd534]", "[c8a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("1", "[c48fd534]", "[c8a7d2950dc76da5]", "0x20")
    self.bid32_to_binary64("2", "[c48fd534]", "[c8a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("3", "[c48fd534]", "[c8a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("4", "[c48fd534]", "[c8a7d2950dc76da4]", "0x20")
    self.bid32_to_binary64("0", "[c5e200a2]", "[c93ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("1", "[c5e200a2]", "[c93ccce2f3f92a21]", "0x20")
    self.bid32_to_binary64("2", "[c5e200a2]", "[c93ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("3", "[c5e200a2]", "[c93ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("4", "[c5e200a2]", "[c93ccce2f3f92a20]", "0x20")
    self.bid32_to_binary64("0", "[c6990c94]", "[c9870105df3d47cb]", "0x20")
    self.bid32_to_binary64("1", "[c6990c94]", "[c9870105df3d47cc]", "0x20")
    self.bid32_to_binary64("2", "[c6990c94]", "[c9870105df3d47cb]", "0x20")
    self.bid32_to_binary64("3", "[c6990c94]", "[c9870105df3d47cb]", "0x20")
    self.bid32_to_binary64("4", "[c6990c94]", "[c9870105df3d47cb]", "0x20")
    self.bid32_to_binary64("0", "[c75833b0]", "[c9d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("1", "[c75833b0]", "[c9d9500d7197e3f3]", "0x20")
    self.bid32_to_binary64("2", "[c75833b0]", "[c9d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("3", "[c75833b0]", "[c9d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("4", "[c75833b0]", "[c9d9500d7197e3f2]", "0x20")
    self.bid32_to_binary64("0", "[c8f7761f]", "[ca80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("1", "[c8f7761f]", "[ca80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("2", "[c8f7761f]", "[ca80bd77ca6bbb83]", "0x20")
    self.bid32_to_binary64("3", "[c8f7761f]", "[ca80bd77ca6bbb83]", "0x20")
    self.bid32_to_binary64("4", "[c8f7761f]", "[ca80bd77ca6bbb84]", "0x20")
    self.bid32_to_binary64("0", "[caa33587]", "[cb38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("1", "[caa33587]", "[cb38174e40cc5cdd]", "0x20")
    self.bid32_to_binary64("2", "[caa33587]", "[cb38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("3", "[caa33587]", "[cb38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("4", "[caa33587]", "[cb38174e40cc5cdc]", "0x20")
    self.bid32_to_binary64("0", "[cbd07892]", "[cbb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("1", "[cbd07892]", "[cbb5820c3849fd46]", "0x20")
    self.bid32_to_binary64("2", "[cbd07892]", "[cbb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("3", "[cbd07892]", "[cbb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("4", "[cbd07892]", "[cbb5820c3849fd45]", "0x20")
    self.bid32_to_binary64("0", "[ccc6ce43]", "[cc1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("1", "[ccc6ce43]", "[cc1d91e14e502ba5]", "0x20")
    self.bid32_to_binary64("2", "[ccc6ce43]", "[cc1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("3", "[ccc6ce43]", "[cc1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("4", "[ccc6ce43]", "[cc1d91e14e502ba4]", "0x20")
    self.bid32_to_binary64("0", "[cdddfe1d]", "[cc8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("1", "[cdddfe1d]", "[cc8eaaa179d3b16a]", "0x20")
    self.bid32_to_binary64("2", "[cdddfe1d]", "[cc8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("3", "[cdddfe1d]", "[cc8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("4", "[cdddfe1d]", "[cc8eaaa179d3b169]", "0x20")
    self.bid32_to_binary64("0", "[ceb63e8d]", "[cceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("1", "[ceb63e8d]", "[cceba7376fe9b0b6]", "0x20")
    self.bid32_to_binary64("2", "[ceb63e8d]", "[cceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("3", "[ceb63e8d]", "[cceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("4", "[ceb63e8d]", "[cceba7376fe9b0b5]", "0x20")
    self.bid32_to_binary64("0", "[cf93259c]", "[cd3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("1", "[cf93259c]", "[cd3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("2", "[cf93259c]", "[cd3e80b6d8e19214]", "0x20")
    self.bid32_to_binary64("3", "[cf93259c]", "[cd3e80b6d8e19214]", "0x20")
    self.bid32_to_binary64("4", "[cf93259c]", "[cd3e80b6d8e19215]", "0x20")
    self.bid32_to_binary64("0", "[d0915f90]", "[cda59f732b2972d8]", "0x20")
    self.bid32_to_binary64("1", "[d0915f90]", "[cda59f732b2972d8]", "0x20")
    self.bid32_to_binary64("2", "[d0915f90]", "[cda59f732b2972d7]", "0x20")
    self.bid32_to_binary64("3", "[d0915f90]", "[cda59f732b2972d7]", "0x20")
    self.bid32_to_binary64("4", "[d0915f90]", "[cda59f732b2972d8]", "0x20")
    self.bid32_to_binary64("0", "[d18fe3b1]", "[ce0ee668761a362d]", "0x20")
    self.bid32_to_binary64("1", "[d18fe3b1]", "[ce0ee668761a362e]", "0x20")
    self.bid32_to_binary64("2", "[d18fe3b1]", "[ce0ee668761a362d]", "0x20")
    self.bid32_to_binary64("3", "[d18fe3b1]", "[ce0ee668761a362d]", "0x20")
    self.bid32_to_binary64("4", "[d18fe3b1]", "[ce0ee668761a362d]", "0x20")
    self.bid32_to_binary64("0", "[d267acbe]", "[ce6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("1", "[d267acbe]", "[ce6f809f0d2df224]", "0x20")
    self.bid32_to_binary64("2", "[d267acbe]", "[ce6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("3", "[d267acbe]", "[ce6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("4", "[d267acbe]", "[ce6f809f0d2df223]", "0x20")
    self.bid32_to_binary64("0", "[d33c4ff6]", "[cecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("1", "[d33c4ff6]", "[cecca28f4c04a954]", "0x20")
    self.bid32_to_binary64("2", "[d33c4ff6]", "[cecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("3", "[d33c4ff6]", "[cecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("4", "[d33c4ff6]", "[cecca28f4c04a953]", "0x20")
    self.bid32_to_binary64("0", "[d3ba0840]", "[cf0138643a016132]", "0x20")
    self.bid32_to_binary64("1", "[d3ba0840]", "[cf0138643a016132]", "0x20")
    self.bid32_to_binary64("2", "[d3ba0840]", "[cf0138643a016131]", "0x20")
    self.bid32_to_binary64("3", "[d3ba0840]", "[cf0138643a016131]", "0x20")
    self.bid32_to_binary64("4", "[d3ba0840]", "[cf0138643a016132]", "0x20")
    self.bid32_to_binary64("0", "[d55ecc47]", "[cfab7880df2e5188]", "0x20")
    self.bid32_to_binary64("1", "[d55ecc47]", "[cfab7880df2e5188]", "0x20")
    self.bid32_to_binary64("2", "[d55ecc47]", "[cfab7880df2e5187]", "0x20")
    self.bid32_to_binary64("3", "[d55ecc47]", "[cfab7880df2e5187]", "0x20")
    self.bid32_to_binary64("4", "[d55ecc47]", "[cfab7880df2e5188]", "0x20")
    self.bid32_to_binary64("0", "[d622a65a]", "[cfff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("1", "[d622a65a]", "[cfff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("2", "[d622a65a]", "[cfff60b4a930ae17]", "0x20")
    self.bid32_to_binary64("3", "[d622a65a]", "[cfff60b4a930ae17]", "0x20")
    self.bid32_to_binary64("4", "[d622a65a]", "[cfff60b4a930ae18]", "0x20")
    self.bid32_to_binary64("0", "[d76ff6af]", "[d083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("1", "[d76ff6af]", "[d083cd885220ea7d]", "0x20")
    self.bid32_to_binary64("2", "[d76ff6af]", "[d083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("3", "[d76ff6af]", "[d083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("4", "[d76ff6af]", "[d083cd885220ea7c]", "0x20")
    self.bid32_to_binary64("0", "[d969ea91]", "[d156de262e569d42]", "0x20")
    self.bid32_to_binary64("1", "[d969ea91]", "[d156de262e569d42]", "0x20")
    self.bid32_to_binary64("2", "[d969ea91]", "[d156de262e569d41]", "0x20")
    self.bid32_to_binary64("3", "[d969ea91]", "[d156de262e569d41]", "0x20")
    self.bid32_to_binary64("4", "[d969ea91]", "[d156de262e569d42]", "0x20")
    self.bid32_to_binary64("0", "[da5b2e31]", "[d1bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("1", "[da5b2e31]", "[d1bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("2", "[da5b2e31]", "[d1bec27efe8a377c]", "0x20")
    self.bid32_to_binary64("3", "[da5b2e31]", "[d1bec27efe8a377c]", "0x20")
    self.bid32_to_binary64("4", "[da5b2e31]", "[d1bec27efe8a377d]", "0x20")
    self.bid32_to_binary64("0", "[db217364]", "[d211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("1", "[db217364]", "[d211a1d9135cca54]", "0x20")
    self.bid32_to_binary64("2", "[db217364]", "[d211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("3", "[db217364]", "[d211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("4", "[db217364]", "[d211a1d9135cca53]", "0x20")
    self.bid32_to_binary64("0", "[dc1ceb38]", "[d277d15bf3186081]", "0x20")
    self.bid32_to_binary64("1", "[dc1ceb38]", "[d277d15bf3186081]", "0x20")
    self.bid32_to_binary64("2", "[dc1ceb38]", "[d277d15bf3186080]", "0x20")
    self.bid32_to_binary64("3", "[dc1ceb38]", "[d277d15bf3186080]", "0x20")
    self.bid32_to_binary64("4", "[dc1ceb38]", "[d277d15bf3186081]", "0x20")
    self.bid32_to_binary64("0", "[dcebc132]", "[d2cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("1", "[dcebc132]", "[d2cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("2", "[dcebc132]", "[d2cbbbd1aedbf9bf]", "0x20")
    self.bid32_to_binary64("3", "[dcebc132]", "[d2cbbbd1aedbf9bf]", "0x20")
    self.bid32_to_binary64("4", "[dcebc132]", "[d2cbbbd1aedbf9c0]", "0x20")
    self.bid32_to_binary64("0", "[ddebc132]", "[d335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("1", "[ddebc132]", "[d335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("2", "[ddebc132]", "[d335aabbd09bdb1d]", "0x20")
    self.bid32_to_binary64("3", "[ddebc132]", "[d335aabbd09bdb1d]", "0x20")
    self.bid32_to_binary64("4", "[ddebc132]", "[d335aabbd09bdb1e]", "0x20")
    self.bid32_to_binary64("0", "[decfa52e]", "[d39905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("1", "[decfa52e]", "[d39905e9b292dc2c]", "0x20")
    self.bid32_to_binary64("2", "[decfa52e]", "[d39905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("3", "[decfa52e]", "[d39905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("4", "[decfa52e]", "[d39905e9b292dc2b]", "0x20")
    self.bid32_to_binary64("0", "[e06c26d1]", "[ad07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("1", "[e06c26d1]", "[ad07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("2", "[e06c26d1]", "[ad07f2ef5801decc]", "0x20")
    self.bid32_to_binary64("3", "[e06c26d1]", "[ad07f2ef5801decc]", "0x20")
    self.bid32_to_binary64("4", "[e06c26d1]", "[ad07f2ef5801decd]", "0x20")
    self.bid32_to_binary64("0", "[e349bc1f]", "[b1cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("1", "[e349bc1f]", "[b1cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("2", "[e349bc1f]", "[b1cf264d8b4a562f]", "0x20")
    self.bid32_to_binary64("3", "[e349bc1f]", "[b1cf264d8b4a562f]", "0x20")
    self.bid32_to_binary64("4", "[e349bc1f]", "[b1cf264d8b4a5630]", "0x20")
    self.bid32_to_binary64("0", "[e389bc1f]", "[b23855ec94d21355]", "0x20")
    self.bid32_to_binary64("1", "[e389bc1f]", "[b23855ec94d21356]", "0x20")
    self.bid32_to_binary64("2", "[e389bc1f]", "[b23855ec94d21355]", "0x20")
    self.bid32_to_binary64("3", "[e389bc1f]", "[b23855ec94d21355]", "0x20")
    self.bid32_to_binary64("4", "[e389bc1f]", "[b23855ec94d21355]", "0x20")
    self.bid32_to_binary64("0", "[e5b4a326]", "[b5c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("1", "[e5b4a326]", "[b5c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("2", "[e5b4a326]", "[b5c2390ea64283d1]", "0x20")
    self.bid32_to_binary64("3", "[e5b4a326]", "[b5c2390ea64283d1]", "0x20")
    self.bid32_to_binary64("4", "[e5b4a326]", "[b5c2390ea64283d2]", "0x20")
    self.bid32_to_binary64("0", "[e9402c61]", "[bbc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("1", "[e9402c61]", "[bbc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("2", "[e9402c61]", "[bbc3d5783e85fcf7]", "0x20")
    self.bid32_to_binary64("3", "[e9402c61]", "[bbc3d5783e85fcf7]", "0x20")
    self.bid32_to_binary64("4", "[e9402c61]", "[bbc3d5783e85fcf8]", "0x20")
    self.bid32_to_binary64("0", "[e994afb0]", "[bc31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("1", "[e994afb0]", "[bc31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("2", "[e994afb0]", "[bc31f99e11ea0a23]", "0x20")
    self.bid32_to_binary64("3", "[e994afb0]", "[bc31f99e11ea0a23]", "0x20")
    self.bid32_to_binary64("4", "[e994afb0]", "[bc31f99e11ea0a24]", "0x20")
    self.bid32_to_binary64("0", "[ebf87d22]", "[c023fcacd184c272]", "0x20")
    self.bid32_to_binary64("1", "[ebf87d22]", "[c023fcacd184c272]", "0x20")
    self.bid32_to_binary64("2", "[ebf87d22]", "[c023fcacd184c271]", "0x20")
    self.bid32_to_binary64("3", "[ebf87d22]", "[c023fcacd184c271]", "0x20")
    self.bid32_to_binary64("4", "[ebf87d22]", "[c023fcacd184c272]", "0x20")
    self.bid32_to_binary64("0", "[ec3895e6]", "[c08f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("1", "[ec3895e6]", "[c08f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("2", "[ec3895e6]", "[c08f3fe075f6fd21]", "0x20")
    self.bid32_to_binary64("3", "[ec3895e6]", "[c08f3fe075f6fd21]", "0x20")
    self.bid32_to_binary64("4", "[ec3895e6]", "[c08f3fe075f6fd22]", "0x20")
    self.bid32_to_binary64("0", "[ec789672]", "[c0f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("1", "[ec789672]", "[c0f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("2", "[ec789672]", "[c0f869fdc28f5c28]", "0x20")
    self.bid32_to_binary64("3", "[ec789672]", "[c0f869fdc28f5c28]", "0x20")
    self.bid32_to_binary64("4", "[ec789672]", "[c0f869fdc28f5c29]", "0x20")
    self.bid32_to_binary64("0", "[ef1831eb]", "[c554a053134cb954]", "0x20")
    self.bid32_to_binary64("1", "[ef1831eb]", "[c554a053134cb954]", "0x20")
    self.bid32_to_binary64("2", "[ef1831eb]", "[c554a053134cb953]", "0x20")
    self.bid32_to_binary64("3", "[ef1831eb]", "[c554a053134cb953]", "0x20")
    self.bid32_to_binary64("4", "[ef1831eb]", "[c554a053134cb954]", "0x20")
    self.bid32_to_binary64("0", "[ef5372a3]", "[c5bf392946d76a98]", "0x20")
    self.bid32_to_binary64("1", "[ef5372a3]", "[c5bf392946d76a98]", "0x20")
    self.bid32_to_binary64("2", "[ef5372a3]", "[c5bf392946d76a97]", "0x20")
    self.bid32_to_binary64("3", "[ef5372a3]", "[c5bf392946d76a97]", "0x20")
    self.bid32_to_binary64("4", "[ef5372a3]", "[c5bf392946d76a98]", "0x20")
    self.bid32_to_binary64("0", "[ef8c3f94]", "[c62733bfae0801fd]", "0x20")
    self.bid32_to_binary64("1", "[ef8c3f94]", "[c62733bfae0801fe]", "0x20")
    self.bid32_to_binary64("2", "[ef8c3f94]", "[c62733bfae0801fd]", "0x20")
    self.bid32_to_binary64("3", "[ef8c3f94]", "[c62733bfae0801fd]", "0x20")
    self.bid32_to_binary64("4", "[ef8c3f94]", "[c62733bfae0801fd]", "0x20")
    self.bid32_to_binary64("0", "[f2749d39]", "[caf0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("1", "[f2749d39]", "[caf0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("2", "[f2749d39]", "[caf0450e3ddd8f30]", "0x20")
    self.bid32_to_binary64("3", "[f2749d39]", "[caf0450e3ddd8f30]", "0x20")
    self.bid32_to_binary64("4", "[f2749d39]", "[caf0450e3ddd8f31]", "0x20")
    self.bid32_to_binary64("0", "[f606b40a]", "[d0f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("1", "[f606b40a]", "[d0f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("2", "[f606b40a]", "[d0f29cf5a7177b3f]", "0x20")
    self.bid32_to_binary64("3", "[f606b40a]", "[d0f29cf5a7177b3f]", "0x20")
    self.bid32_to_binary64("4", "[f606b40a]", "[d0f29cf5a7177b40]", "0x20")
    self.bid32_to_binary64("0", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("1", "[f7f8967f]", "[d412ba093e5c6115]", "0x20")
    self.bid32_to_binary64("2", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("3", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("4", "[f7f8967f]", "[d412ba093e5c6114]", "0x20")
    self.bid32_to_binary64("0", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("1", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("2", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("3", "[f8000000]", "[fff0000000000000]", "0x00")
    self.bid32_to_binary64("4", "[f8000000]", "[fff0000000000000]", "0x00")
  }

  private func bid32_to_binary64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDouble(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toDouble(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_binary80() {
    self.bid32_to_binary80("0", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("0", "[00000001]", "[3EAFB32DF8E9F3546564]", "20")
    self.bid32_to_binary80("0", "[00989680]", "[3EC7AC187A9FAB7EA236]", "20")
    self.bid32_to_binary80("0", "[00e4129b]", "[3ec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("0", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("0", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("0", "[050c0bbc]", "[3ee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("0", "[088ccd5f]", "[3efbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("0", "[0c8286b1]", "[3f13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("0", "[10807f5e]", "[3f2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("0", "[140246fb]", "[3f45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("0", "[1857cbb0]", "[3f65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("0", "[189ABA47]", "[3F66FFFFFF3AD8528848]", "20")
    self.bid32_to_binary80("0", "[189ABA49]", "[3F67800009316A55B12B]", "20")
    self.bid32_to_binary80("0", "[18EAE91C]", "[3F68FFFFFF3AD8528848]", "20")
    self.bid32_to_binary80("0", "[18EAE923]", "[3F69800007FEEA90238B]", "20")
    self.bid32_to_binary80("0", "[1910095E]", "[3F69C00001D121C90178]", "20")
    self.bid32_to_binary80("0", "[191561D2]", "[3F69FFFFFA70D93C51C4]", "20")
    self.bid32_to_binary80("0", "[192012BC]", "[3F6AC00001D121C90178]", "20")
    self.bid32_to_binary80("0", "[1A0036BD]", "[3F6A800009316A55B12B]", "20")
    self.bid32_to_binary80("0", "[1A6D79F8]", "[3F72FFFFFFADC83C9D64]", "20")
    self.bid32_to_binary80("0", "[1A6D79FF]", "[3F7380000806198EC4DC]", "20")
    self.bid32_to_binary80("0", "[1c1199d6]", "[3f7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("0", "[20156c3b]", "[3f98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("0", "[24023509]", "[3fafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("0", "[27ff6d74]", "[3fccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("0", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800001]", "[3FFF8000000000000000]", "00")
    self.bid32_to_binary80("0", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("0", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("0", "[3281ffff]", "[400FFFFF800000000000]", "00")
    self.bid32_to_binary80("0", "[3283ffff]", "[4010FFFFC00000000000]", "00")
    self.bid32_to_binary80("0", "[3287ffff]", "[4011FFFFE00000000000]", "00")
    self.bid32_to_binary80("0", "[328fffff]", "[4012FFFFF00000000000]", "00")
    self.bid32_to_binary80("0", "[3297ffff]", "[4013BFFFF80000000000]", "00")
    self.bid32_to_binary80("0", "[3319999A]", "[40178000020000000000]", "00")
    self.bid32_to_binary80("0", "[33d1eb85]", "[401bffffffa000000000]", "0x00")
    self.bid32_to_binary80("0", "[379b7cdf]", "[4034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("0", "[3800AFEC]", "[4033800000B1AF000000]", "00")
    self.bid32_to_binary80("0", "[391C25C2]", "[403EFFFFFC4B83FD4000]", "00")
    self.bid32_to_binary80("0", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("0", "[404F3A69]", "[406F8000003A82352E2F]", "20")
    self.bid32_to_binary80("0", "[408FD87B]", "[406FFFFFF9FEA7F11CBD]", "20")
    self.bid32_to_binary80("0", "[42B3DEFD]", "[407EFFBE778BA8E296D3]", "20")
    self.bid32_to_binary80("0", "[42CDE26C]", "[407FC00001392328C9D2]", "20")
    self.bid32_to_binary80("0", "[43175D87]", "[40819000022665B9E7B4]", "20")
    self.bid32_to_binary80("0", "[434fc428]", "[4082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("0", "[476737cd]", "[409decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("0", "[4b24a835]", "[40b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("0", "[4e142f94]", "[40ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("0", "[52aa1214]", "[40e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("0", "[56ac9d4e]", "[4103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("0", "[5a4dd37a]", "[411bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("0", "[6ae5a321]", "[3fe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("0", "[6bf860f5]", "[40029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("0", "[6CA00000]", "[40168000000000000000]", "00")
    self.bid32_to_binary80("0", "[6CB89680]", "[00000000000000000000]", "00")
    self.bid32_to_binary80("0", "[6DC9705F]", "[4033FFFFFF8687B00000]", "00")
    self.bid32_to_binary80("0", "[6E2CBCCC]", "[403DFFFFFFEED6918000]", "00")
    self.bid32_to_binary80("0", "[6fd12853]", "[40699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("0", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("0", "[77F8967F]", "[414195D049F2E308A39B]", "20")
    self.bid32_to_binary80("0", "[77f89680]", "[00000000000000000000]", "00")
    self.bid32_to_binary80("0", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[7c000000]", "[7FFFC000000000000000]", "00")
    self.bid32_to_binary80("0", "[7c0F423F]", "[7FFFFD08FC0000000000]", "00")
    self.bid32_to_binary80("0", "[7c0F4240]", "[7FFFC000000000000000]", "00")
    self.bid32_to_binary80("0", "[7e000000]", "[7FFFC000000000000000]", "01")
    self.bid32_to_binary80("0", "[7e0F423F]", "[7FFFFD08FC0000000000]", "01")
    self.bid32_to_binary80("0", "[7e0F4240]", "[7FFFC000000000000000]", "01")
    self.bid32_to_binary80("0", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("0", "[80e4129b]", "[bec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("0", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("0", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("0", "[850c0bbc]", "[bee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("0", "[888ccd5f]", "[befbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("0", "[8c8286b1]", "[bf13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("0", "[90807f5e]", "[bf2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("0", "[940246fb]", "[bf45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("0", "[9857cbb0]", "[bf65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("0", "[9c1199d6]", "[bf7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("0", "[a0156c3b]", "[bf98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("0", "[a4023509]", "[bfafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("0", "[a7ff6d74]", "[bfccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("0", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b3d1eb85]", "[c01bffffffa000000000]", "0x00")
    self.bid32_to_binary80("0", "[b79b7cdf]", "[c034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("0", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("0", "[c34fc428]", "[c082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("0", "[c76737cd]", "[c09decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("0", "[cb24a835]", "[c0b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("0", "[ce142f94]", "[c0ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("0", "[d2aa1214]", "[c0e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("0", "[d6ac9d4e]", "[c103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("0", "[da4dd37a]", "[c11bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("0", "[eae5a321]", "[bfe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("0", "[ebf860f5]", "[c0029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("0", "[efd12853]", "[c0699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("0", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("0", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("1", "[00e4129b]", "[3ec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("1", "[03000001]", "[3ec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("1", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("1", "[050c0bbc]", "[3ee49d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("1", "[088ccd5f]", "[3efbc6f6c664e23beceb]", "0x20")
    self.bid32_to_binary80("1", "[0c8286b1]", "[3f13ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("1", "[10807f5e]", "[3f2c895a3da7c43d4653]", "0x20")
    self.bid32_to_binary80("1", "[140246fb]", "[3f45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("1", "[1857cbb0]", "[3f65a82edd1434865214]", "0x20")
    self.bid32_to_binary80("1", "[1c1199d6]", "[3f7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("1", "[20156c3b]", "[3f98b63eac51571dc157]", "0x20")
    self.bid32_to_binary80("1", "[24023509]", "[3fafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("1", "[27ff6d74]", "[3fccf0b42ec84f951e43]", "0x20")
    self.bid32_to_binary80("1", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("1", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("1", "[33d1eb85]", "[401bffffffa000000000]", "0x00")
    self.bid32_to_binary80("1", "[379b7cdf]", "[4034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("1", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("1", "[434fc428]", "[4082f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("1", "[476737cd]", "[409decfa1245d6a4eca1]", "0x20")
    self.bid32_to_binary80("1", "[4b24a835]", "[40b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("1", "[4e142f94]", "[40ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("1", "[52aa1214]", "[40e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("1", "[56ac9d4e]", "[4103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("1", "[5a4dd37a]", "[411bd2098824cea0c297]", "0x20")
    self.bid32_to_binary80("1", "[6ae5a321]", "[3fe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("1", "[6bf860f5]", "[40029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("1", "[6fd12853]", "[40699616dfeb83c05433]", "0x20")
    self.bid32_to_binary80("1", "[77f8967f]", "[414195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("1", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[80000001]", "[beafb32df8e9f3546565]", "0x20")
    self.bid32_to_binary80("1", "[80e4129b]", "[bec9af1b73614f0650ad]", "0x20")
    self.bid32_to_binary80("1", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("1", "[83800001]", "[bec6d59944a37c0752a3]", "0x20")
    self.bid32_to_binary80("1", "[850c0bbc]", "[bee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("1", "[888ccd5f]", "[befbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("1", "[8c8286b1]", "[bf13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("1", "[90807f5e]", "[bf2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("1", "[940246fb]", "[bf45bb5cd9d5191cd281]", "0x20")
    self.bid32_to_binary80("1", "[9857cbb0]", "[bf65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("1", "[9c1199d6]", "[bf7dc8f78d334d80b34b]", "0x20")
    self.bid32_to_binary80("1", "[a0156c3b]", "[bf98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("1", "[a4023509]", "[bfafdfd55f5573762397]", "0x20")
    self.bid32_to_binary80("1", "[a7ff6d74]", "[bfccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("1", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b3d1eb85]", "[c01bffffffa000000000]", "0x00")
    self.bid32_to_binary80("1", "[b79b7cdf]", "[c034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("1", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("1", "[c34fc428]", "[c082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("1", "[c76737cd]", "[c09decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("1", "[cb24a835]", "[c0b6fad159a093311dc6]", "0x20")
    self.bid32_to_binary80("1", "[ce142f94]", "[c0ca83b80547dcf45a11]", "0x20")
    self.bid32_to_binary80("1", "[d2aa1214]", "[c0e8ffab862dcceeafa8]", "0x20")
    self.bid32_to_binary80("1", "[d6ac9d4e]", "[c103ca01d5bfa8f62a35]", "0x20")
    self.bid32_to_binary80("1", "[da4dd37a]", "[c11bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("1", "[eae5a321]", "[bfe7bc13e231080a1126]", "0x20")
    self.bid32_to_binary80("1", "[ebf860f5]", "[c0029fc7db2b3461309d]", "0x20")
    self.bid32_to_binary80("1", "[efd12853]", "[c0699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("1", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("1", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[00000001]", "[3eafb32df8e9f3546565]", "0x20")
    self.bid32_to_binary80("2", "[00e4129b]", "[3ec9af1b73614f0650ad]", "0x20")
    self.bid32_to_binary80("2", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("2", "[03800001]", "[3ec6d59944a37c0752a3]", "0x20")
    self.bid32_to_binary80("2", "[050c0bbc]", "[3ee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("2", "[088ccd5f]", "[3efbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("2", "[0c8286b1]", "[3f13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("2", "[10807f5e]", "[3f2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("2", "[140246fb]", "[3f45bb5cd9d5191cd281]", "0x20")
    self.bid32_to_binary80("2", "[1857cbb0]", "[3f65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("2", "[1c1199d6]", "[3f7dc8f78d334d80b34b]", "0x20")
    self.bid32_to_binary80("2", "[20156c3b]", "[3f98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("2", "[24023509]", "[3fafdfd55f5573762397]", "0x20")
    self.bid32_to_binary80("2", "[27ff6d74]", "[3fccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("2", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("2", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("2", "[33d1eb85]", "[401bffffffa000000000]", "0x00")
    self.bid32_to_binary80("2", "[379b7cdf]", "[4034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("2", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("2", "[434fc428]", "[4082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("2", "[476737cd]", "[409decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("2", "[4b24a835]", "[40b6fad159a093311dc6]", "0x20")
    self.bid32_to_binary80("2", "[4e142f94]", "[40ca83b80547dcf45a11]", "0x20")
    self.bid32_to_binary80("2", "[52aa1214]", "[40e8ffab862dcceeafa8]", "0x20")
    self.bid32_to_binary80("2", "[56ac9d4e]", "[4103ca01d5bfa8f62a35]", "0x20")
    self.bid32_to_binary80("2", "[5a4dd37a]", "[411bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("2", "[6ae5a321]", "[3fe7bc13e231080a1126]", "0x20")
    self.bid32_to_binary80("2", "[6bf860f5]", "[40029fc7db2b3461309d]", "0x20")
    self.bid32_to_binary80("2", "[6fd12853]", "[40699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("2", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("2", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("2", "[80e4129b]", "[bec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("2", "[83000001]", "[bec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("2", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("2", "[850c0bbc]", "[bee49d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("2", "[888ccd5f]", "[befbc6f6c664e23beceb]", "0x20")
    self.bid32_to_binary80("2", "[8c8286b1]", "[bf13ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("2", "[90807f5e]", "[bf2c895a3da7c43d4653]", "0x20")
    self.bid32_to_binary80("2", "[940246fb]", "[bf45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("2", "[9857cbb0]", "[bf65a82edd1434865214]", "0x20")
    self.bid32_to_binary80("2", "[9c1199d6]", "[bf7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("2", "[a0156c3b]", "[bf98b63eac51571dc157]", "0x20")
    self.bid32_to_binary80("2", "[a4023509]", "[bfafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("2", "[a7ff6d74]", "[bfccf0b42ec84f951e43]", "0x20")
    self.bid32_to_binary80("2", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b3d1eb85]", "[c01bffffffa000000000]", "0x00")
    self.bid32_to_binary80("2", "[b79b7cdf]", "[c034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("2", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("2", "[c34fc428]", "[c082f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("2", "[c76737cd]", "[c09decfa1245d6a4eca1]", "0x20")
    self.bid32_to_binary80("2", "[cb24a835]", "[c0b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("2", "[ce142f94]", "[c0ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("2", "[d2aa1214]", "[c0e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("2", "[d6ac9d4e]", "[c103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("2", "[da4dd37a]", "[c11bd2098824cea0c297]", "0x20")
    self.bid32_to_binary80("2", "[eae5a321]", "[bfe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("2", "[ebf860f5]", "[c0029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("2", "[efd12853]", "[c0699616dfeb83c05433]", "0x20")
    self.bid32_to_binary80("2", "[f7f8967f]", "[c14195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("2", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("3", "[00e4129b]", "[3ec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("3", "[03000001]", "[3ec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("3", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("3", "[050c0bbc]", "[3ee49d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("3", "[088ccd5f]", "[3efbc6f6c664e23beceb]", "0x20")
    self.bid32_to_binary80("3", "[0c8286b1]", "[3f13ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("3", "[10807f5e]", "[3f2c895a3da7c43d4653]", "0x20")
    self.bid32_to_binary80("3", "[140246fb]", "[3f45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("3", "[1857cbb0]", "[3f65a82edd1434865214]", "0x20")
    self.bid32_to_binary80("3", "[1c1199d6]", "[3f7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("3", "[20156c3b]", "[3f98b63eac51571dc157]", "0x20")
    self.bid32_to_binary80("3", "[24023509]", "[3fafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("3", "[27ff6d74]", "[3fccf0b42ec84f951e43]", "0x20")
    self.bid32_to_binary80("3", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("3", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("3", "[33d1eb85]", "[401bffffffa000000000]", "0x00")
    self.bid32_to_binary80("3", "[379b7cdf]", "[4034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("3", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("3", "[434fc428]", "[4082f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("3", "[476737cd]", "[409decfa1245d6a4eca1]", "0x20")
    self.bid32_to_binary80("3", "[4b24a835]", "[40b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("3", "[4e142f94]", "[40ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("3", "[52aa1214]", "[40e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("3", "[56ac9d4e]", "[4103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("3", "[5a4dd37a]", "[411bd2098824cea0c297]", "0x20")
    self.bid32_to_binary80("3", "[6ae5a321]", "[3fe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("3", "[6bf860f5]", "[40029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("3", "[6fd12853]", "[40699616dfeb83c05433]", "0x20")
    self.bid32_to_binary80("3", "[77f8967f]", "[414195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("3", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("3", "[80e4129b]", "[bec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("3", "[83000001]", "[bec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("3", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("3", "[850c0bbc]", "[bee49d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("3", "[888ccd5f]", "[befbc6f6c664e23beceb]", "0x20")
    self.bid32_to_binary80("3", "[8c8286b1]", "[bf13ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("3", "[90807f5e]", "[bf2c895a3da7c43d4653]", "0x20")
    self.bid32_to_binary80("3", "[940246fb]", "[bf45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("3", "[9857cbb0]", "[bf65a82edd1434865214]", "0x20")
    self.bid32_to_binary80("3", "[9c1199d6]", "[bf7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("3", "[a0156c3b]", "[bf98b63eac51571dc157]", "0x20")
    self.bid32_to_binary80("3", "[a4023509]", "[bfafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("3", "[a7ff6d74]", "[bfccf0b42ec84f951e43]", "0x20")
    self.bid32_to_binary80("3", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b3d1eb85]", "[c01bffffffa000000000]", "0x00")
    self.bid32_to_binary80("3", "[b79b7cdf]", "[c034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("3", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("3", "[c34fc428]", "[c082f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("3", "[c76737cd]", "[c09decfa1245d6a4eca1]", "0x20")
    self.bid32_to_binary80("3", "[cb24a835]", "[c0b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("3", "[ce142f94]", "[c0ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("3", "[d2aa1214]", "[c0e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("3", "[d6ac9d4e]", "[c103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("3", "[da4dd37a]", "[c11bd2098824cea0c297]", "0x20")
    self.bid32_to_binary80("3", "[eae5a321]", "[bfe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("3", "[ebf860f5]", "[c0029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("3", "[efd12853]", "[c0699616dfeb83c05433]", "0x20")
    self.bid32_to_binary80("3", "[f7f8967f]", "[c14195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("3", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("4", "[00e4129b]", "[3ec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("4", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("4", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("4", "[050c0bbc]", "[3ee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("4", "[088ccd5f]", "[3efbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("4", "[0c8286b1]", "[3f13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("4", "[10807f5e]", "[3f2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("4", "[140246fb]", "[3f45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("4", "[1857cbb0]", "[3f65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("4", "[1c1199d6]", "[3f7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("4", "[20156c3b]", "[3f98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("4", "[24023509]", "[3fafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("4", "[27ff6d74]", "[3fccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("4", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("4", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("4", "[33d1eb85]", "[401bffffffa000000000]", "0x00")
    self.bid32_to_binary80("4", "[379b7cdf]", "[4034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("4", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("4", "[434fc428]", "[4082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("4", "[476737cd]", "[409decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("4", "[4b24a835]", "[40b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("4", "[4e142f94]", "[40ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("4", "[52aa1214]", "[40e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("4", "[56ac9d4e]", "[4103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("4", "[5a4dd37a]", "[411bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("4", "[6ae5a321]", "[3fe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("4", "[6bf860f5]", "[40029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("4", "[6fd12853]", "[40699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("4", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("4", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("4", "[80e4129b]", "[bec9af1b73614f0650ac]", "0x20")
    self.bid32_to_binary80("4", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("4", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("4", "[850c0bbc]", "[bee49d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("4", "[888ccd5f]", "[befbc6f6c664e23becec]", "0x20")
    self.bid32_to_binary80("4", "[8c8286b1]", "[bf13ea0166331944e660]", "0x20")
    self.bid32_to_binary80("4", "[90807f5e]", "[bf2c895a3da7c43d4654]", "0x20")
    self.bid32_to_binary80("4", "[940246fb]", "[bf45bb5cd9d5191cd280]", "0x20")
    self.bid32_to_binary80("4", "[9857cbb0]", "[bf65a82edd1434865215]", "0x20")
    self.bid32_to_binary80("4", "[9c1199d6]", "[bf7dc8f78d334d80b34a]", "0x20")
    self.bid32_to_binary80("4", "[a0156c3b]", "[bf98b63eac51571dc158]", "0x20")
    self.bid32_to_binary80("4", "[a4023509]", "[bfafdfd55f5573762396]", "0x20")
    self.bid32_to_binary80("4", "[a7ff6d74]", "[bfccf0b42ec84f951e44]", "0x20")
    self.bid32_to_binary80("4", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b3d1eb85]", "[c01bffffffa000000000]", "0x00")
    self.bid32_to_binary80("4", "[b79b7cdf]", "[c034fffff8132e700000]", "0x00")
    self.bid32_to_binary80("4", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("4", "[c34fc428]", "[c082f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("4", "[c76737cd]", "[c09decfa1245d6a4eca2]", "0x20")
    self.bid32_to_binary80("4", "[cb24a835]", "[c0b6fad159a093311dc5]", "0x20")
    self.bid32_to_binary80("4", "[ce142f94]", "[c0ca83b80547dcf45a10]", "0x20")
    self.bid32_to_binary80("4", "[d2aa1214]", "[c0e8ffab862dcceeafa7]", "0x20")
    self.bid32_to_binary80("4", "[d6ac9d4e]", "[c103ca01d5bfa8f62a34]", "0x20")
    self.bid32_to_binary80("4", "[da4dd37a]", "[c11bd2098824cea0c298]", "0x20")
    self.bid32_to_binary80("4", "[eae5a321]", "[bfe7bc13e231080a1125]", "0x20")
    self.bid32_to_binary80("4", "[ebf860f5]", "[c0029fc7db2b3461309c]", "0x20")
    self.bid32_to_binary80("4", "[efd12853]", "[c0699616dfeb83c05434]", "0x20")
    self.bid32_to_binary80("4", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("4", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("1", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("2", "[00000001]", "[3eafb32df8e9f3546565]", "0x20")
    self.bid32_to_binary80("3", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("4", "[00000001]", "[3eafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("0", "[0000002a]", "[3eb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("1", "[0000002a]", "[3eb4eb2c56b30f5ec513]", "0x20")
    self.bid32_to_binary80("2", "[0000002a]", "[3eb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("3", "[0000002a]", "[3eb4eb2c56b30f5ec513]", "0x20")
    self.bid32_to_binary80("4", "[0000002a]", "[3eb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("0", "[00002448]", "[3ebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("1", "[00002448]", "[3ebccb26df7740226ff4]", "0x20")
    self.bid32_to_binary80("2", "[00002448]", "[3ebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("3", "[00002448]", "[3ebccb26df7740226ff4]", "0x20")
    self.bid32_to_binary80("4", "[00002448]", "[3ebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("0", "[000c94f6]", "[3ec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("1", "[000c94f6]", "[3ec38ce6a6d0bd9715e6]", "0x20")
    self.bid32_to_binary80("2", "[000c94f6]", "[3ec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("3", "[000c94f6]", "[3ec38ce6a6d0bd9715e6]", "0x20")
    self.bid32_to_binary80("4", "[000c94f6]", "[3ec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("0", "[000f423f]", "[3ec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("1", "[000f423f]", "[3ec3aae0f8831d44094c]", "0x20")
    self.bid32_to_binary80("2", "[000f423f]", "[3ec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("3", "[000f423f]", "[3ec3aae0f8831d44094c]", "0x20")
    self.bid32_to_binary80("4", "[000f423f]", "[3ec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("0", "[00e6fc08]", "[3ec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("1", "[00e6fc08]", "[3ec9b433cc13309029b2]", "0x20")
    self.bid32_to_binary80("2", "[00e6fc08]", "[3ec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("3", "[00e6fc08]", "[3ec9b433cc13309029b2]", "0x20")
    self.bid32_to_binary80("4", "[00e6fc08]", "[3ec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("0", "[01f57b63]", "[3ed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("1", "[01f57b63]", "[3ed0a09a01d2e4316a7e]", "0x20")
    self.bid32_to_binary80("2", "[01f57b63]", "[3ed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("3", "[01f57b63]", "[3ed0a09a01d2e4316a7e]", "0x20")
    self.bid32_to_binary80("4", "[01f57b63]", "[3ed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("0", "[02bd6196]", "[3ed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("1", "[02bd6196]", "[3ed6831c040ec465338d]", "0x20")
    self.bid32_to_binary80("2", "[02bd6196]", "[3ed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("3", "[02bd6196]", "[3ed6831c040ec465338d]", "0x20")
    self.bid32_to_binary80("4", "[02bd6196]", "[3ed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("0", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("1", "[03000001]", "[3ec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("2", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("3", "[03000001]", "[3ec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("4", "[03000001]", "[3ec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("0", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("1", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("2", "[03800001]", "[3ec6d59944a37c0752a3]", "0x20")
    self.bid32_to_binary80("3", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("4", "[03800001]", "[3ec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("0", "[0395073f]", "[3edb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("1", "[0395073f]", "[3edb8c5cf3180c49cc02]", "0x20")
    self.bid32_to_binary80("2", "[0395073f]", "[3edb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("3", "[0395073f]", "[3edb8c5cf3180c49cc02]", "0x20")
    self.bid32_to_binary80("4", "[0395073f]", "[3edb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("0", "[050302ef]", "[3ee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("1", "[050302ef]", "[3ee29d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("2", "[050302ef]", "[3ee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("3", "[050302ef]", "[3ee29d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("4", "[050302ef]", "[3ee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("0", "[0586b551]", "[3ee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("1", "[0586b551]", "[3ee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("2", "[0586b551]", "[3ee6daa3c3cc53047869]", "0x20")
    self.bid32_to_binary80("3", "[0586b551]", "[3ee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("4", "[0586b551]", "[3ee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("0", "[06918b6d]", "[3eeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("1", "[06918b6d]", "[3eeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("2", "[06918b6d]", "[3eeedf5e79713b1833a5]", "0x20")
    self.bid32_to_binary80("3", "[06918b6d]", "[3eeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("4", "[06918b6d]", "[3eeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("0", "[0782301b]", "[3ef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("1", "[0782301b]", "[3ef2ae188de76300b56f]", "0x20")
    self.bid32_to_binary80("2", "[0782301b]", "[3ef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("3", "[0782301b]", "[3ef2ae188de76300b56f]", "0x20")
    self.bid32_to_binary80("4", "[0782301b]", "[3ef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("0", "[08846036]", "[3efa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("1", "[08846036]", "[3efa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("2", "[08846036]", "[3efa88032edcc5588dc0]", "0x20")
    self.bid32_to_binary80("3", "[08846036]", "[3efa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("4", "[08846036]", "[3efa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("0", "[09835834]", "[3f00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("1", "[09835834]", "[3f00a26efaba8e0155a2]", "0x20")
    self.bid32_to_binary80("2", "[09835834]", "[3f00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("3", "[09835834]", "[3f00a26efaba8e0155a2]", "0x20")
    self.bid32_to_binary80("4", "[09835834]", "[3f00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("0", "[0a6bf47e]", "[3f08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("1", "[0a6bf47e]", "[3f08ccce3a6a6ce1d6a3]", "0x20")
    self.bid32_to_binary80("2", "[0a6bf47e]", "[3f08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("3", "[0a6bf47e]", "[3f08ccce3a6a6ce1d6a3]", "0x20")
    self.bid32_to_binary80("4", "[0a6bf47e]", "[3f08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("0", "[0b186ea4]", "[3f0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("1", "[0b186ea4]", "[3f0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("2", "[0b186ea4]", "[3f0d90d8fb12d906b0d9]", "0x20")
    self.bid32_to_binary80("3", "[0b186ea4]", "[3f0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("4", "[0b186ea4]", "[3f0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("0", "[0c0ca175]", "[3f12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("1", "[0c0ca175]", "[3f12ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("2", "[0c0ca175]", "[3f12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("3", "[0c0ca175]", "[3f12ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("4", "[0c0ca175]", "[3f12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("0", "[0e5623eb]", "[3f22f383c95544305354]", "0x20")
    self.bid32_to_binary80("1", "[0e5623eb]", "[3f22f383c95544305354]", "0x20")
    self.bid32_to_binary80("2", "[0e5623eb]", "[3f22f383c95544305355]", "0x20")
    self.bid32_to_binary80("3", "[0e5623eb]", "[3f22f383c95544305354]", "0x20")
    self.bid32_to_binary80("4", "[0e5623eb]", "[3f22f383c95544305354]", "0x20")
    self.bid32_to_binary80("0", "[0f7195ef]", "[3f29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("1", "[0f7195ef]", "[3f29fadc53b7e7c2ebf2]", "0x20")
    self.bid32_to_binary80("2", "[0f7195ef]", "[3f29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("3", "[0f7195ef]", "[3f29fadc53b7e7c2ebf2]", "0x20")
    self.bid32_to_binary80("4", "[0f7195ef]", "[3f29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("0", "[103cb6b8]", "[3f2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("1", "[103cb6b8]", "[3f2fd183f3804540fa07]", "0x20")
    self.bid32_to_binary80("2", "[103cb6b8]", "[3f2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("3", "[103cb6b8]", "[3f2fd183f3804540fa07]", "0x20")
    self.bid32_to_binary80("4", "[103cb6b8]", "[3f2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("0", "[111edaba]", "[3f35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("1", "[111edaba]", "[3f35a65dd9707ceff5b5]", "0x20")
    self.bid32_to_binary80("2", "[111edaba]", "[3f35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("3", "[111edaba]", "[3f35a65dd9707ceff5b5]", "0x20")
    self.bid32_to_binary80("4", "[111edaba]", "[3f35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("0", "[121d4835]", "[3f3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("1", "[121d4835]", "[3f3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("2", "[121d4835]", "[3f3bf6b36b576acfd920]", "0x20")
    self.bid32_to_binary80("3", "[121d4835]", "[3f3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("4", "[121d4835]", "[3f3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("0", "[1307d52e]", "[3f40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("1", "[1307d52e]", "[3f40ce38845bb7273a84]", "0x20")
    self.bid32_to_binary80("2", "[1307d52e]", "[3f40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("3", "[1307d52e]", "[3f40ce38845bb7273a84]", "0x20")
    self.bid32_to_binary80("4", "[1307d52e]", "[3f40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("0", "[140991c8]", "[3f47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("1", "[140991c8]", "[3f47c4d513e04f2d1119]", "0x20")
    self.bid32_to_binary80("2", "[140991c8]", "[3f47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("3", "[140991c8]", "[3f47c4d513e04f2d1119]", "0x20")
    self.bid32_to_binary80("4", "[140991c8]", "[3f47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("0", "[1505d9e7]", "[3f4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("1", "[1505d9e7]", "[3f4dbc0cb9aa51ffb73b]", "0x20")
    self.bid32_to_binary80("2", "[1505d9e7]", "[3f4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("3", "[1505d9e7]", "[3f4dbc0cb9aa51ffb73b]", "0x20")
    self.bid32_to_binary80("4", "[1505d9e7]", "[3f4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("0", "[1603e05a]", "[3f53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("1", "[1603e05a]", "[3f53c2a8bbd51dfcd6ad]", "0x20")
    self.bid32_to_binary80("2", "[1603e05a]", "[3f53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("3", "[1603e05a]", "[3f53c2a8bbd51dfcd6ad]", "0x20")
    self.bid32_to_binary80("4", "[1603e05a]", "[3f53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("0", "[17e0a142]", "[3f629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("1", "[17e0a142]", "[3f629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("2", "[17e0a142]", "[3f629415bcbf18c96ed7]", "0x20")
    self.bid32_to_binary80("3", "[17e0a142]", "[3f629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("4", "[17e0a142]", "[3f629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("0", "[18cd3fce]", "[3f68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("1", "[18cd3fce]", "[3f68b8f9a5001079be39]", "0x20")
    self.bid32_to_binary80("2", "[18cd3fce]", "[3f68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("3", "[18cd3fce]", "[3f68b8f9a5001079be39]", "0x20")
    self.bid32_to_binary80("4", "[18cd3fce]", "[3f68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("0", "[19c542e5]", "[3f6f8191938060568174]", "0x20")
    self.bid32_to_binary80("1", "[19c542e5]", "[3f6f8191938060568174]", "0x20")
    self.bid32_to_binary80("2", "[19c542e5]", "[3f6f8191938060568175]", "0x20")
    self.bid32_to_binary80("3", "[19c542e5]", "[3f6f8191938060568174]", "0x20")
    self.bid32_to_binary80("4", "[19c542e5]", "[3f6f8191938060568174]", "0x20")
    self.bid32_to_binary80("0", "[1bef45e8]", "[3f7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("1", "[1bef45e8]", "[3f7cfe1a4f733938064b]", "0x20")
    self.bid32_to_binary80("2", "[1bef45e8]", "[3f7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("3", "[1bef45e8]", "[3f7cfe1a4f733938064b]", "0x20")
    self.bid32_to_binary80("4", "[1bef45e8]", "[3f7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("0", "[1ca03047]", "[3f81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("1", "[1ca03047]", "[3f81e5b49589959db96d]", "0x20")
    self.bid32_to_binary80("2", "[1ca03047]", "[3f81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("3", "[1ca03047]", "[3f81e5b49589959db96d]", "0x20")
    self.bid32_to_binary80("4", "[1ca03047]", "[3f81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("0", "[1d836169]", "[3f8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("1", "[1d836169]", "[3f8596c69530a4f32463]", "0x20")
    self.bid32_to_binary80("2", "[1d836169]", "[3f8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("3", "[1d836169]", "[3f8596c69530a4f32463]", "0x20")
    self.bid32_to_binary80("4", "[1d836169]", "[3f8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("0", "[1e8ad150]", "[3f8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("1", "[1e8ad150]", "[3f8dbc783a7cce2fed7c]", "0x20")
    self.bid32_to_binary80("2", "[1e8ad150]", "[3f8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("3", "[1e8ad150]", "[3f8dbc783a7cce2fed7c]", "0x20")
    self.bid32_to_binary80("4", "[1e8ad150]", "[3f8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("0", "[1f8c94e3]", "[3f94ab40703120836057]", "0x20")
    self.bid32_to_binary80("1", "[1f8c94e3]", "[3f94ab40703120836056]", "0x20")
    self.bid32_to_binary80("2", "[1f8c94e3]", "[3f94ab40703120836057]", "0x20")
    self.bid32_to_binary80("3", "[1f8c94e3]", "[3f94ab40703120836056]", "0x20")
    self.bid32_to_binary80("4", "[1f8c94e3]", "[3f94ab40703120836057]", "0x20")
    self.bid32_to_binary80("0", "[2089dc81]", "[3f9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("1", "[2089dc81]", "[3f9ad1ba42a1df9fb3da]", "0x20")
    self.bid32_to_binary80("2", "[2089dc81]", "[3f9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("3", "[2089dc81]", "[3f9ad1ba42a1df9fb3da]", "0x20")
    self.bid32_to_binary80("4", "[2089dc81]", "[3f9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("0", "[21863ac2]", "[3fa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("1", "[21863ac2]", "[3fa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("2", "[21863ac2]", "[3fa0cf02eb13dc36e0ea]", "0x20")
    self.bid32_to_binary80("3", "[21863ac2]", "[3fa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("4", "[21863ac2]", "[3fa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("0", "[2284ec38]", "[3fa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("1", "[2284ec38]", "[3fa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("2", "[2284ec38]", "[3fa6ff9a4c6ee1a7a328]", "0x20")
    self.bid32_to_binary80("3", "[2284ec38]", "[3fa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("4", "[2284ec38]", "[3fa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("0", "[237ac6d6]", "[3faef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("1", "[237ac6d6]", "[3faef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("2", "[237ac6d6]", "[3faef9054f11e79e9035]", "0x20")
    self.bid32_to_binary80("3", "[237ac6d6]", "[3faef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("4", "[237ac6d6]", "[3faef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("0", "[248d2919]", "[3fb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("1", "[248d2919]", "[3fb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("2", "[248d2919]", "[3fb5d0897bbb542b42e3]", "0x20")
    self.bid32_to_binary80("3", "[248d2919]", "[3fb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("4", "[248d2919]", "[3fb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("0", "[25044c83]", "[3fb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("1", "[25044c83]", "[3fb7aa4bc2ba05f0111f]", "0x20")
    self.bid32_to_binary80("2", "[25044c83]", "[3fb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("3", "[25044c83]", "[3fb7aa4bc2ba05f0111f]", "0x20")
    self.bid32_to_binary80("4", "[25044c83]", "[3fb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("0", "[277af9b1]", "[3fc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("1", "[277af9b1]", "[3fc9b9d5c977b2a77192]", "0x20")
    self.bid32_to_binary80("2", "[277af9b1]", "[3fc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("3", "[277af9b1]", "[3fc9b9d5c977b2a77192]", "0x20")
    self.bid32_to_binary80("4", "[277af9b1]", "[3fc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("0", "[2868c06d]", "[3fcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("1", "[2868c06d]", "[3fcff7567ec2244a9fdb]", "0x20")
    self.bid32_to_binary80("2", "[2868c06d]", "[3fcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("3", "[2868c06d]", "[3fcff7567ec2244a9fdb]", "0x20")
    self.bid32_to_binary80("4", "[2868c06d]", "[3fcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("0", "[2929e692]", "[3fd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("1", "[2929e692]", "[3fd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("2", "[2929e692]", "[3fd59a960f3956aea3ea]", "0x20")
    self.bid32_to_binary80("3", "[2929e692]", "[3fd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("4", "[2929e692]", "[3fd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("0", "[2a24dce3]", "[3fdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("1", "[2a24dce3]", "[3fdbd47ff2bb76052ac9]", "0x20")
    self.bid32_to_binary80("2", "[2a24dce3]", "[3fdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("3", "[2a24dce3]", "[3fdbd47ff2bb76052ac9]", "0x20")
    self.bid32_to_binary80("4", "[2a24dce3]", "[3fdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("0", "[2b1b9a0d]", "[3fe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("1", "[2b1b9a0d]", "[3fe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("2", "[2b1b9a0d]", "[3fe1f89d53cbf427e7de]", "0x20")
    self.bid32_to_binary80("3", "[2b1b9a0d]", "[3fe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("4", "[2b1b9a0d]", "[3fe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("0", "[2c047c26]", "[3fe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("1", "[2c047c26]", "[3fe5fc7b02cd09d4aaf5]", "0x20")
    self.bid32_to_binary80("2", "[2c047c26]", "[3fe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("3", "[2c047c26]", "[3fe5fc7b02cd09d4aaf5]", "0x20")
    self.bid32_to_binary80("4", "[2c047c26]", "[3fe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("0", "[2d08680d]", "[3fedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("1", "[2d08680d]", "[3fedb8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("2", "[2d08680d]", "[3fedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("3", "[2d08680d]", "[3fedb8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("4", "[2d08680d]", "[3fedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("0", "[2e056150]", "[3ff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("1", "[2e056150]", "[3ff3b8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("2", "[2e056150]", "[3ff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("3", "[2e056150]", "[3ff3b8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("4", "[2e056150]", "[3ff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("0", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[2ecd7c6d]", "[3ffad000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[2f04845c]", "[3ff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("1", "[2f04845c]", "[3ff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("2", "[2f04845c]", "[3ff9f281923bd746a353]", "0x20")
    self.bid32_to_binary80("3", "[2f04845c]", "[3ff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("4", "[2f04845c]", "[3ff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("0", "[30061248]", "[4000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("1", "[30061248]", "[4000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("2", "[30061248]", "[4000fea747d805e5f30f]", "0x20")
    self.bid32_to_binary80("3", "[30061248]", "[4000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("4", "[30061248]", "[4000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("0", "[3103e7d9]", "[4006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("1", "[3103e7d9]", "[4006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("2", "[3103e7d9]", "[4006fff604189374bc6b]", "0x20")
    self.bid32_to_binary80("3", "[3103e7d9]", "[4006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("4", "[3103e7d9]", "[4006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("0", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[3200000f]", "[3fffc000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800000]", "[00000000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800001]", "[3fff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[32800040]", "[40058000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("1", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("2", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("3", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("4", "[328003e7]", "[4008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("0", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("1", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("2", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("3", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("4", "[328003e8]", "[4008fa00000000000000]", "0x00")
    self.bid32_to_binary80("0", "[330f4240]", "[40169896800000000000]", "0x00")
    self.bid32_to_binary80("1", "[330f4240]", "[40169896800000000000]", "0x00")
    self.bid32_to_binary80("2", "[330f4240]", "[40169896800000000000]", "0x00")
    self.bid32_to_binary80("3", "[330f4240]", "[40169896800000000000]", "0x00")
    self.bid32_to_binary80("4", "[330f4240]", "[40169896800000000000]", "0x00")
    self.bid32_to_binary80("0", "[340f4240]", "[401cee6b280000000000]", "0x00")
    self.bid32_to_binary80("1", "[340f4240]", "[401cee6b280000000000]", "0x00")
    self.bid32_to_binary80("2", "[340f4240]", "[401cee6b280000000000]", "0x00")
    self.bid32_to_binary80("3", "[340f4240]", "[401cee6b280000000000]", "0x00")
    self.bid32_to_binary80("4", "[340f4240]", "[401cee6b280000000000]", "0x00")
    self.bid32_to_binary80("0", "[350f4240]", "[4023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("1", "[350f4240]", "[4023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("2", "[350f4240]", "[4023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("3", "[350f4240]", "[4023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("4", "[350f4240]", "[4023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("0", "[36d5e63b]", "[402ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("1", "[36d5e63b]", "[402ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("2", "[36d5e63b]", "[402ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("3", "[36d5e63b]", "[402ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("4", "[36d5e63b]", "[402ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("0", "[37b6f9bf]", "[4035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("1", "[37b6f9bf]", "[4035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("2", "[37b6f9bf]", "[4035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("3", "[37b6f9bf]", "[4035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("4", "[37b6f9bf]", "[4035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("0", "[38a32f33]", "[403bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("1", "[38a32f33]", "[403bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("2", "[38a32f33]", "[403bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("3", "[38a32f33]", "[403bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("4", "[38a32f33]", "[403bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("0", "[3996849b]", "[4041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("1", "[3996849b]", "[4041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("2", "[3996849b]", "[4041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("3", "[3996849b]", "[4041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("4", "[3996849b]", "[4041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("0", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("1", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("2", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("3", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("4", "[3b5c3bcc]", "[404dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("0", "[3c3b0790]", "[4053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("1", "[3c3b0790]", "[4053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("2", "[3c3b0790]", "[4053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("3", "[3c3b0790]", "[4053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("4", "[3c3b0790]", "[4053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("0", "[413c9dfa]", "[40759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("1", "[413c9dfa]", "[40759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("2", "[413c9dfa]", "[40759904e14fb5e066dc]", "0x20")
    self.bid32_to_binary80("3", "[413c9dfa]", "[40759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("4", "[413c9dfa]", "[40759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("0", "[422ff974]", "[407bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("1", "[422ff974]", "[407bbd39ca88ae4dbdca]", "0x20")
    self.bid32_to_binary80("2", "[422ff974]", "[407bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("3", "[422ff974]", "[407bbd39ca88ae4dbdca]", "0x20")
    self.bid32_to_binary80("4", "[422ff974]", "[407bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("0", "[4313f10a]", "[4080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("1", "[4313f10a]", "[4080f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("2", "[4313f10a]", "[4080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("3", "[4313f10a]", "[4080f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("4", "[4313f10a]", "[4080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("0", "[442d405d]", "[4088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("1", "[442d405d]", "[4088d9e0ae29c8496a56]", "0x20")
    self.bid32_to_binary80("2", "[442d405d]", "[4088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("3", "[442d405d]", "[4088d9e0ae29c8496a56]", "0x20")
    self.bid32_to_binary80("4", "[442d405d]", "[4088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("0", "[46de06f0]", "[409aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("1", "[46de06f0]", "[409aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("2", "[46de06f0]", "[409aacb3546b8b93fd12]", "0x20")
    self.bid32_to_binary80("3", "[46de06f0]", "[409aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("4", "[46de06f0]", "[409aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("0", "[4793e462]", "[409ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("1", "[4793e462]", "[409ee459b0121faa0081]", "0x20")
    self.bid32_to_binary80("2", "[4793e462]", "[409ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("3", "[4793e462]", "[409ee459b0121faa0081]", "0x20")
    self.bid32_to_binary80("4", "[4793e462]", "[409ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("0", "[48a8b2a2]", "[40a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("1", "[48a8b2a2]", "[40a6b67ec3eb98ab8e80]", "0x20")
    self.bid32_to_binary80("2", "[48a8b2a2]", "[40a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("3", "[48a8b2a2]", "[40a6b67ec3eb98ab8e80]", "0x20")
    self.bid32_to_binary80("4", "[48a8b2a2]", "[40a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("0", "[49b6e3cd]", "[40adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("1", "[49b6e3cd]", "[40adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("2", "[49b6e3cd]", "[40adc04aeac9a5faa3a1]", "0x20")
    self.bid32_to_binary80("3", "[49b6e3cd]", "[40adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("4", "[49b6e3cd]", "[40adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("0", "[4ac9506a]", "[40b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("1", "[4ac9506a]", "[40b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("2", "[4ac9506a]", "[40b4c8a77ae6dc274b05]", "0x20")
    self.bid32_to_binary80("3", "[4ac9506a]", "[40b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("4", "[4ac9506a]", "[40b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("0", "[4b9a6697]", "[40b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("1", "[4b9a6697]", "[40b9e1cd2f739e889e7f]", "0x20")
    self.bid32_to_binary80("2", "[4b9a6697]", "[40b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("3", "[4b9a6697]", "[40b9e1cd2f739e889e7f]", "0x20")
    self.bid32_to_binary80("4", "[4b9a6697]", "[40b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("0", "[4c9a6697]", "[40c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("1", "[4c9a6697]", "[40c0b0684d1253dabbd3]", "0x20")
    self.bid32_to_binary80("2", "[4c9a6697]", "[40c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("3", "[4c9a6697]", "[40c0b0684d1253dabbd3]", "0x20")
    self.bid32_to_binary80("4", "[4c9a6697]", "[40c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("0", "[4de2d61a]", "[40c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("1", "[4de2d61a]", "[40c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("2", "[4de2d61a]", "[40c980fcc884b7a737d4]", "0x20")
    self.bid32_to_binary80("3", "[4de2d61a]", "[40c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("4", "[4de2d61a]", "[40c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("0", "[4ecc8d0f]", "[40cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("1", "[4ecc8d0f]", "[40cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("2", "[4ecc8d0f]", "[40cf9c197deb8c9856ad]", "0x20")
    self.bid32_to_binary80("3", "[4ecc8d0f]", "[40cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("4", "[4ecc8d0f]", "[40cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("0", "[4fb82a11]", "[40d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("1", "[4fb82a11]", "[40d5b2f3299ec7be0c09]", "0x20")
    self.bid32_to_binary80("2", "[4fb82a11]", "[40d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("3", "[4fb82a11]", "[40d5b2f3299ec7be0c09]", "0x20")
    self.bid32_to_binary80("4", "[4fb82a11]", "[40d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("0", "[50acee74]", "[40dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("1", "[50acee74]", "[40dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("2", "[50acee74]", "[40dbdfaff40679ad8f0d]", "0x20")
    self.bid32_to_binary80("3", "[50acee74]", "[40dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("4", "[50acee74]", "[40dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("0", "[519e2c6b]", "[40e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("1", "[519e2c6b]", "[40e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("2", "[519e2c6b]", "[40e1eab676baf37301a9]", "0x20")
    self.bid32_to_binary80("3", "[519e2c6b]", "[40e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("4", "[519e2c6b]", "[40e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("0", "[528fdb2b]", "[40e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("1", "[528fdb2b]", "[40e7c0b8742478c6f621]", "0x20")
    self.bid32_to_binary80("2", "[528fdb2b]", "[40e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("3", "[528fdb2b]", "[40e7c0b8742478c6f621]", "0x20")
    self.bid32_to_binary80("4", "[528fdb2b]", "[40e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("0", "[536f4abe]", "[40edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("1", "[536f4abe]", "[40edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("2", "[536f4abe]", "[40edd35b278e3553c20f]", "0x20")
    self.bid32_to_binary80("3", "[536f4abe]", "[40edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("4", "[536f4abe]", "[40edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("0", "[543446e4]", "[40f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("1", "[543446e4]", "[40f39b1feb90aa8ea133]", "0x20")
    self.bid32_to_binary80("2", "[543446e4]", "[40f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("3", "[543446e4]", "[40f39b1feb90aa8ea133]", "0x20")
    self.bid32_to_binary80("4", "[543446e4]", "[40f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("0", "[551f6e68]", "[40f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("1", "[551f6e68]", "[40f991bb397504579b74]", "0x20")
    self.bid32_to_binary80("2", "[551f6e68]", "[40f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("3", "[551f6e68]", "[40f991bb397504579b74]", "0x20")
    self.bid32_to_binary80("4", "[551f6e68]", "[40f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("0", "[56164ea7]", "[40ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("1", "[56164ea7]", "[40ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("2", "[56164ea7]", "[40ffa19b116620c4ee91]", "0x20")
    self.bid32_to_binary80("3", "[56164ea7]", "[40ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("4", "[56164ea7]", "[40ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("0", "[574def7f]", "[4107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("1", "[574def7f]", "[4107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("2", "[574def7f]", "[4107dc8cbba9515359d1]", "0x20")
    self.bid32_to_binary80("3", "[574def7f]", "[4107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("4", "[574def7f]", "[4107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("0", "[5846b52f]", "[410e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("1", "[5846b52f]", "[410e9c532ad92698f0b1]", "0x20")
    self.bid32_to_binary80("2", "[5846b52f]", "[410e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("3", "[5846b52f]", "[410e9c532ad92698f0b1]", "0x20")
    self.bid32_to_binary80("4", "[5846b52f]", "[410e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("0", "[59119c63]", "[4112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("1", "[59119c63]", "[4112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("2", "[59119c63]", "[4112f3584cd8d30fb549]", "0x20")
    self.bid32_to_binary80("3", "[59119c63]", "[4112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("4", "[59119c63]", "[4112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("0", "[5b73172b]", "[4122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("1", "[5b73172b]", "[4122f2a94f4bec46b2ba]", "0x20")
    self.bid32_to_binary80("2", "[5b73172b]", "[4122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("3", "[5b73172b]", "[4122f2a94f4bec46b2ba]", "0x20")
    self.bid32_to_binary80("4", "[5b73172b]", "[4122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("0", "[5c48d46a]", "[4128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("1", "[5c48d46a]", "[4128efeed8495e3a70d3]", "0x20")
    self.bid32_to_binary80("2", "[5c48d46a]", "[4128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("3", "[5c48d46a]", "[4128efeed8495e3a70d3]", "0x20")
    self.bid32_to_binary80("4", "[5c48d46a]", "[4128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("0", "[5d28d834]", "[412ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("1", "[5d28d834]", "[412ed23fe862820d7b7e]", "0x20")
    self.bid32_to_binary80("2", "[5d28d834]", "[412ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("3", "[5d28d834]", "[412ed23fe862820d7b7e]", "0x20")
    self.bid32_to_binary80("4", "[5d28d834]", "[412ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("0", "[5e1f60e1]", "[4134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("1", "[5e1f60e1]", "[4134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("2", "[5e1f60e1]", "[4134fc60eab62f36d223]", "0x20")
    self.bid32_to_binary80("3", "[5e1f60e1]", "[4134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("4", "[5e1f60e1]", "[4134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("0", "[6349ac2f]", "[3f1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("1", "[6349ac2f]", "[3f1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("2", "[6349ac2f]", "[3f1cf915969b6d3a1c1b]", "0x20")
    self.bid32_to_binary80("3", "[6349ac2f]", "[3f1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("4", "[6349ac2f]", "[3f1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("0", "[65b39ec0]", "[3f5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("1", "[65b39ec0]", "[3f5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("2", "[65b39ec0]", "[3f5c90c90f4bd7dd19a3]", "0x20")
    self.bid32_to_binary80("3", "[65b39ec0]", "[3f5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("4", "[65b39ec0]", "[3f5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("0", "[66a7add2]", "[3f76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("1", "[66a7add2]", "[3f76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("2", "[66a7add2]", "[3f76c64b8906a24ae472]", "0x20")
    self.bid32_to_binary80("3", "[66a7add2]", "[3f76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("4", "[66a7add2]", "[3f76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("0", "[6981c887]", "[3fc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("1", "[6981c887]", "[3fc2fb099512f5dc2b75]", "0x20")
    self.bid32_to_binary80("2", "[6981c887]", "[3fc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("3", "[6981c887]", "[3fc2fb099512f5dc2b75]", "0x20")
    self.bid32_to_binary80("4", "[6981c887]", "[3fc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("0", "[6c789675]", "[400fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("1", "[6c789675]", "[400fc34ff1eb851eb851]", "0x20")
    self.bid32_to_binary80("2", "[6c789675]", "[400fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("3", "[6c789675]", "[400fc34ff1eb851eb851]", "0x20")
    self.bid32_to_binary80("4", "[6c789675]", "[400fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("0", "[6d6637bd]", "[4029fffffff528000000]", "0x00")
    self.bid32_to_binary80("1", "[6d6637bd]", "[4029fffffff528000000]", "0x00")
    self.bid32_to_binary80("2", "[6d6637bd]", "[4029fffffff528000000]", "0x00")
    self.bid32_to_binary80("3", "[6d6637bd]", "[4029fffffff528000000]", "0x00")
    self.bid32_to_binary80("4", "[6d6637bd]", "[4029fffffff528000000]", "0x00")
    self.bid32_to_binary80("0", "[6e901d7a]", "[4047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("1", "[6e901d7a]", "[4047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("2", "[6e901d7a]", "[4047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("3", "[6e901d7a]", "[4047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("4", "[6e901d7a]", "[4047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("0", "[6f5892a3]", "[405c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("1", "[6f5892a3]", "[405c813bf3c1c802b3cf]", "0x20")
    self.bid32_to_binary80("2", "[6f5892a3]", "[405c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("3", "[6f5892a3]", "[405c813bf3c1c802b3cf]", "0x20")
    self.bid32_to_binary80("4", "[6f5892a3]", "[405c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("0", "[6f98701b]", "[4062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("1", "[6f98701b]", "[4062c9bff93a48227eab]", "0x20")
    self.bid32_to_binary80("2", "[6f98701b]", "[4062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("3", "[6f98701b]", "[4062c9bff93a48227eab]", "0x20")
    self.bid32_to_binary80("4", "[6f98701b]", "[4062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("0", "[6fd52853]", "[40699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("1", "[6fd52853]", "[40699a39aa768dc0f858]", "0x20")
    self.bid32_to_binary80("2", "[6fd52853]", "[40699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("3", "[6fd52853]", "[40699a39aa768dc0f858]", "0x20")
    self.bid32_to_binary80("4", "[6fd52853]", "[40699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("0", "[700a494b]", "[406fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("1", "[700a494b]", "[406fdf69df99fddd33bd]", "0x20")
    self.bid32_to_binary80("2", "[700a494b]", "[406fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("3", "[700a494b]", "[406fdf69df99fddd33bd]", "0x20")
    self.bid32_to_binary80("4", "[700a494b]", "[406fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("0", "[71296142]", "[408dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("1", "[71296142]", "[408dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("2", "[71296142]", "[408dceb4d1593d6fc041]", "0x20")
    self.bid32_to_binary80("3", "[71296142]", "[408dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("4", "[71296142]", "[408dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("0", "[71696142]", "[4094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("1", "[71696142]", "[4094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("2", "[71696142]", "[4094a17d438db7ff4e33]", "0x20")
    self.bid32_to_binary80("3", "[71696142]", "[4094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("4", "[71696142]", "[4094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("0", "[7691cf0c]", "[411cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("1", "[7691cf0c]", "[411cc4c12abd32cdc49d]", "0x20")
    self.bid32_to_binary80("2", "[7691cf0c]", "[411cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("3", "[7691cf0c]", "[411cc4c12abd32cdc49d]", "0x20")
    self.bid32_to_binary80("4", "[7691cf0c]", "[411cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("0", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("1", "[77f8967f]", "[414195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("2", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("3", "[77f8967f]", "[414195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("4", "[77f8967f]", "[414195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("0", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[78000000]", "[7fff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[7c0c2000]", "[7ffff080000000000000]", "0x00")
    self.bid32_to_binary80("0", "[7e0c2000]", "[7ffff080000000000000]", "0x01")
    self.bid32_to_binary80("0", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("1", "[80000001]", "[beafb32df8e9f3546565]", "0x20")
    self.bid32_to_binary80("2", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("3", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("4", "[80000001]", "[beafb32df8e9f3546564]", "0x20")
    self.bid32_to_binary80("0", "[8000002a]", "[beb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("1", "[8000002a]", "[beb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("2", "[8000002a]", "[beb4eb2c56b30f5ec513]", "0x20")
    self.bid32_to_binary80("3", "[8000002a]", "[beb4eb2c56b30f5ec513]", "0x20")
    self.bid32_to_binary80("4", "[8000002a]", "[beb4eb2c56b30f5ec514]", "0x20")
    self.bid32_to_binary80("0", "[80002448]", "[bebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("1", "[80002448]", "[bebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("2", "[80002448]", "[bebccb26df7740226ff4]", "0x20")
    self.bid32_to_binary80("3", "[80002448]", "[bebccb26df7740226ff4]", "0x20")
    self.bid32_to_binary80("4", "[80002448]", "[bebccb26df7740226ff5]", "0x20")
    self.bid32_to_binary80("0", "[800c94f6]", "[bec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("1", "[800c94f6]", "[bec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("2", "[800c94f6]", "[bec38ce6a6d0bd9715e6]", "0x20")
    self.bid32_to_binary80("3", "[800c94f6]", "[bec38ce6a6d0bd9715e6]", "0x20")
    self.bid32_to_binary80("4", "[800c94f6]", "[bec38ce6a6d0bd9715e7]", "0x20")
    self.bid32_to_binary80("0", "[800f423f]", "[bec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("1", "[800f423f]", "[bec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("2", "[800f423f]", "[bec3aae0f8831d44094c]", "0x20")
    self.bid32_to_binary80("3", "[800f423f]", "[bec3aae0f8831d44094c]", "0x20")
    self.bid32_to_binary80("4", "[800f423f]", "[bec3aae0f8831d44094d]", "0x20")
    self.bid32_to_binary80("0", "[80e6fc08]", "[bec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("1", "[80e6fc08]", "[bec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("2", "[80e6fc08]", "[bec9b433cc13309029b2]", "0x20")
    self.bid32_to_binary80("3", "[80e6fc08]", "[bec9b433cc13309029b2]", "0x20")
    self.bid32_to_binary80("4", "[80e6fc08]", "[bec9b433cc13309029b3]", "0x20")
    self.bid32_to_binary80("0", "[81f57b63]", "[bed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("1", "[81f57b63]", "[bed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("2", "[81f57b63]", "[bed0a09a01d2e4316a7e]", "0x20")
    self.bid32_to_binary80("3", "[81f57b63]", "[bed0a09a01d2e4316a7e]", "0x20")
    self.bid32_to_binary80("4", "[81f57b63]", "[bed0a09a01d2e4316a7f]", "0x20")
    self.bid32_to_binary80("0", "[82bd6196]", "[bed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("1", "[82bd6196]", "[bed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("2", "[82bd6196]", "[bed6831c040ec465338d]", "0x20")
    self.bid32_to_binary80("3", "[82bd6196]", "[bed6831c040ec465338d]", "0x20")
    self.bid32_to_binary80("4", "[82bd6196]", "[bed6831c040ec465338e]", "0x20")
    self.bid32_to_binary80("0", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("1", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("2", "[83000001]", "[bec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("3", "[83000001]", "[bec3aae103b5fcd2a881]", "0x20")
    self.bid32_to_binary80("4", "[83000001]", "[bec3aae103b5fcd2a882]", "0x20")
    self.bid32_to_binary80("0", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("1", "[83800001]", "[bec6d59944a37c0752a3]", "0x20")
    self.bid32_to_binary80("2", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("3", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("4", "[83800001]", "[bec6d59944a37c0752a2]", "0x20")
    self.bid32_to_binary80("0", "[8395073f]", "[bedb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("1", "[8395073f]", "[bedb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("2", "[8395073f]", "[bedb8c5cf3180c49cc02]", "0x20")
    self.bid32_to_binary80("3", "[8395073f]", "[bedb8c5cf3180c49cc02]", "0x20")
    self.bid32_to_binary80("4", "[8395073f]", "[bedb8c5cf3180c49cc03]", "0x20")
    self.bid32_to_binary80("0", "[850302ef]", "[bee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("1", "[850302ef]", "[bee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("2", "[850302ef]", "[bee29d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("3", "[850302ef]", "[bee29d0abd02e3b42e1e]", "0x20")
    self.bid32_to_binary80("4", "[850302ef]", "[bee29d0abd02e3b42e1f]", "0x20")
    self.bid32_to_binary80("0", "[8586b551]", "[bee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("1", "[8586b551]", "[bee6daa3c3cc53047869]", "0x20")
    self.bid32_to_binary80("2", "[8586b551]", "[bee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("3", "[8586b551]", "[bee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("4", "[8586b551]", "[bee6daa3c3cc53047868]", "0x20")
    self.bid32_to_binary80("0", "[86918b6d]", "[beeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("1", "[86918b6d]", "[beeedf5e79713b1833a5]", "0x20")
    self.bid32_to_binary80("2", "[86918b6d]", "[beeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("3", "[86918b6d]", "[beeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("4", "[86918b6d]", "[beeedf5e79713b1833a4]", "0x20")
    self.bid32_to_binary80("0", "[8782301b]", "[bef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("1", "[8782301b]", "[bef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("2", "[8782301b]", "[bef2ae188de76300b56f]", "0x20")
    self.bid32_to_binary80("3", "[8782301b]", "[bef2ae188de76300b56f]", "0x20")
    self.bid32_to_binary80("4", "[8782301b]", "[bef2ae188de76300b570]", "0x20")
    self.bid32_to_binary80("0", "[88846036]", "[befa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("1", "[88846036]", "[befa88032edcc5588dc0]", "0x20")
    self.bid32_to_binary80("2", "[88846036]", "[befa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("3", "[88846036]", "[befa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("4", "[88846036]", "[befa88032edcc5588dbf]", "0x20")
    self.bid32_to_binary80("0", "[89835834]", "[bf00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("1", "[89835834]", "[bf00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("2", "[89835834]", "[bf00a26efaba8e0155a2]", "0x20")
    self.bid32_to_binary80("3", "[89835834]", "[bf00a26efaba8e0155a2]", "0x20")
    self.bid32_to_binary80("4", "[89835834]", "[bf00a26efaba8e0155a3]", "0x20")
    self.bid32_to_binary80("0", "[8a6bf47e]", "[bf08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("1", "[8a6bf47e]", "[bf08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("2", "[8a6bf47e]", "[bf08ccce3a6a6ce1d6a3]", "0x20")
    self.bid32_to_binary80("3", "[8a6bf47e]", "[bf08ccce3a6a6ce1d6a3]", "0x20")
    self.bid32_to_binary80("4", "[8a6bf47e]", "[bf08ccce3a6a6ce1d6a4]", "0x20")
    self.bid32_to_binary80("0", "[8b186ea4]", "[bf0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("1", "[8b186ea4]", "[bf0d90d8fb12d906b0d9]", "0x20")
    self.bid32_to_binary80("2", "[8b186ea4]", "[bf0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("3", "[8b186ea4]", "[bf0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("4", "[8b186ea4]", "[bf0d90d8fb12d906b0d8]", "0x20")
    self.bid32_to_binary80("0", "[8c0ca175]", "[bf12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("1", "[8c0ca175]", "[bf12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("2", "[8c0ca175]", "[bf12ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("3", "[8c0ca175]", "[bf12ea0166331944e65f]", "0x20")
    self.bid32_to_binary80("4", "[8c0ca175]", "[bf12ea0166331944e660]", "0x20")
    self.bid32_to_binary80("0", "[8e5623eb]", "[bf22f383c95544305354]", "0x20")
    self.bid32_to_binary80("1", "[8e5623eb]", "[bf22f383c95544305355]", "0x20")
    self.bid32_to_binary80("2", "[8e5623eb]", "[bf22f383c95544305354]", "0x20")
    self.bid32_to_binary80("3", "[8e5623eb]", "[bf22f383c95544305354]", "0x20")
    self.bid32_to_binary80("4", "[8e5623eb]", "[bf22f383c95544305354]", "0x20")
    self.bid32_to_binary80("0", "[8f7195ef]", "[bf29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("1", "[8f7195ef]", "[bf29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("2", "[8f7195ef]", "[bf29fadc53b7e7c2ebf2]", "0x20")
    self.bid32_to_binary80("3", "[8f7195ef]", "[bf29fadc53b7e7c2ebf2]", "0x20")
    self.bid32_to_binary80("4", "[8f7195ef]", "[bf29fadc53b7e7c2ebf3]", "0x20")
    self.bid32_to_binary80("0", "[903cb6b8]", "[bf2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("1", "[903cb6b8]", "[bf2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("2", "[903cb6b8]", "[bf2fd183f3804540fa07]", "0x20")
    self.bid32_to_binary80("3", "[903cb6b8]", "[bf2fd183f3804540fa07]", "0x20")
    self.bid32_to_binary80("4", "[903cb6b8]", "[bf2fd183f3804540fa08]", "0x20")
    self.bid32_to_binary80("0", "[911edaba]", "[bf35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("1", "[911edaba]", "[bf35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("2", "[911edaba]", "[bf35a65dd9707ceff5b5]", "0x20")
    self.bid32_to_binary80("3", "[911edaba]", "[bf35a65dd9707ceff5b5]", "0x20")
    self.bid32_to_binary80("4", "[911edaba]", "[bf35a65dd9707ceff5b6]", "0x20")
    self.bid32_to_binary80("0", "[921d4835]", "[bf3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("1", "[921d4835]", "[bf3bf6b36b576acfd920]", "0x20")
    self.bid32_to_binary80("2", "[921d4835]", "[bf3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("3", "[921d4835]", "[bf3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("4", "[921d4835]", "[bf3bf6b36b576acfd91f]", "0x20")
    self.bid32_to_binary80("0", "[9307d52e]", "[bf40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("1", "[9307d52e]", "[bf40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("2", "[9307d52e]", "[bf40ce38845bb7273a84]", "0x20")
    self.bid32_to_binary80("3", "[9307d52e]", "[bf40ce38845bb7273a84]", "0x20")
    self.bid32_to_binary80("4", "[9307d52e]", "[bf40ce38845bb7273a85]", "0x20")
    self.bid32_to_binary80("0", "[940991c8]", "[bf47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("1", "[940991c8]", "[bf47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("2", "[940991c8]", "[bf47c4d513e04f2d1119]", "0x20")
    self.bid32_to_binary80("3", "[940991c8]", "[bf47c4d513e04f2d1119]", "0x20")
    self.bid32_to_binary80("4", "[940991c8]", "[bf47c4d513e04f2d111a]", "0x20")
    self.bid32_to_binary80("0", "[9505d9e7]", "[bf4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("1", "[9505d9e7]", "[bf4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("2", "[9505d9e7]", "[bf4dbc0cb9aa51ffb73b]", "0x20")
    self.bid32_to_binary80("3", "[9505d9e7]", "[bf4dbc0cb9aa51ffb73b]", "0x20")
    self.bid32_to_binary80("4", "[9505d9e7]", "[bf4dbc0cb9aa51ffb73c]", "0x20")
    self.bid32_to_binary80("0", "[9603e05a]", "[bf53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("1", "[9603e05a]", "[bf53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("2", "[9603e05a]", "[bf53c2a8bbd51dfcd6ad]", "0x20")
    self.bid32_to_binary80("3", "[9603e05a]", "[bf53c2a8bbd51dfcd6ad]", "0x20")
    self.bid32_to_binary80("4", "[9603e05a]", "[bf53c2a8bbd51dfcd6ae]", "0x20")
    self.bid32_to_binary80("0", "[97e0a142]", "[bf629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("1", "[97e0a142]", "[bf629415bcbf18c96ed7]", "0x20")
    self.bid32_to_binary80("2", "[97e0a142]", "[bf629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("3", "[97e0a142]", "[bf629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("4", "[97e0a142]", "[bf629415bcbf18c96ed6]", "0x20")
    self.bid32_to_binary80("0", "[98cd3fce]", "[bf68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("1", "[98cd3fce]", "[bf68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("2", "[98cd3fce]", "[bf68b8f9a5001079be39]", "0x20")
    self.bid32_to_binary80("3", "[98cd3fce]", "[bf68b8f9a5001079be39]", "0x20")
    self.bid32_to_binary80("4", "[98cd3fce]", "[bf68b8f9a5001079be3a]", "0x20")
    self.bid32_to_binary80("0", "[99c542e5]", "[bf6f8191938060568174]", "0x20")
    self.bid32_to_binary80("1", "[99c542e5]", "[bf6f8191938060568175]", "0x20")
    self.bid32_to_binary80("2", "[99c542e5]", "[bf6f8191938060568174]", "0x20")
    self.bid32_to_binary80("3", "[99c542e5]", "[bf6f8191938060568174]", "0x20")
    self.bid32_to_binary80("4", "[99c542e5]", "[bf6f8191938060568174]", "0x20")
    self.bid32_to_binary80("0", "[9bef45e8]", "[bf7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("1", "[9bef45e8]", "[bf7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("2", "[9bef45e8]", "[bf7cfe1a4f733938064b]", "0x20")
    self.bid32_to_binary80("3", "[9bef45e8]", "[bf7cfe1a4f733938064b]", "0x20")
    self.bid32_to_binary80("4", "[9bef45e8]", "[bf7cfe1a4f733938064c]", "0x20")
    self.bid32_to_binary80("0", "[9ca03047]", "[bf81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("1", "[9ca03047]", "[bf81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("2", "[9ca03047]", "[bf81e5b49589959db96d]", "0x20")
    self.bid32_to_binary80("3", "[9ca03047]", "[bf81e5b49589959db96d]", "0x20")
    self.bid32_to_binary80("4", "[9ca03047]", "[bf81e5b49589959db96e]", "0x20")
    self.bid32_to_binary80("0", "[9d836169]", "[bf8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("1", "[9d836169]", "[bf8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("2", "[9d836169]", "[bf8596c69530a4f32463]", "0x20")
    self.bid32_to_binary80("3", "[9d836169]", "[bf8596c69530a4f32463]", "0x20")
    self.bid32_to_binary80("4", "[9d836169]", "[bf8596c69530a4f32464]", "0x20")
    self.bid32_to_binary80("0", "[9e8ad150]", "[bf8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("1", "[9e8ad150]", "[bf8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("2", "[9e8ad150]", "[bf8dbc783a7cce2fed7c]", "0x20")
    self.bid32_to_binary80("3", "[9e8ad150]", "[bf8dbc783a7cce2fed7c]", "0x20")
    self.bid32_to_binary80("4", "[9e8ad150]", "[bf8dbc783a7cce2fed7d]", "0x20")
    self.bid32_to_binary80("0", "[9f8c94e3]", "[bf94ab40703120836057]", "0x20")
    self.bid32_to_binary80("1", "[9f8c94e3]", "[bf94ab40703120836057]", "0x20")
    self.bid32_to_binary80("2", "[9f8c94e3]", "[bf94ab40703120836056]", "0x20")
    self.bid32_to_binary80("3", "[9f8c94e3]", "[bf94ab40703120836056]", "0x20")
    self.bid32_to_binary80("4", "[9f8c94e3]", "[bf94ab40703120836057]", "0x20")
    self.bid32_to_binary80("0", "[a089dc81]", "[bf9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("1", "[a089dc81]", "[bf9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("2", "[a089dc81]", "[bf9ad1ba42a1df9fb3da]", "0x20")
    self.bid32_to_binary80("3", "[a089dc81]", "[bf9ad1ba42a1df9fb3da]", "0x20")
    self.bid32_to_binary80("4", "[a089dc81]", "[bf9ad1ba42a1df9fb3db]", "0x20")
    self.bid32_to_binary80("0", "[a1863ac2]", "[bfa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("1", "[a1863ac2]", "[bfa0cf02eb13dc36e0ea]", "0x20")
    self.bid32_to_binary80("2", "[a1863ac2]", "[bfa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("3", "[a1863ac2]", "[bfa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("4", "[a1863ac2]", "[bfa0cf02eb13dc36e0e9]", "0x20")
    self.bid32_to_binary80("0", "[a284ec38]", "[bfa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("1", "[a284ec38]", "[bfa6ff9a4c6ee1a7a328]", "0x20")
    self.bid32_to_binary80("2", "[a284ec38]", "[bfa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("3", "[a284ec38]", "[bfa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("4", "[a284ec38]", "[bfa6ff9a4c6ee1a7a327]", "0x20")
    self.bid32_to_binary80("0", "[a37ac6d6]", "[bfaef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("1", "[a37ac6d6]", "[bfaef9054f11e79e9035]", "0x20")
    self.bid32_to_binary80("2", "[a37ac6d6]", "[bfaef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("3", "[a37ac6d6]", "[bfaef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("4", "[a37ac6d6]", "[bfaef9054f11e79e9034]", "0x20")
    self.bid32_to_binary80("0", "[a48d2919]", "[bfb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("1", "[a48d2919]", "[bfb5d0897bbb542b42e3]", "0x20")
    self.bid32_to_binary80("2", "[a48d2919]", "[bfb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("3", "[a48d2919]", "[bfb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("4", "[a48d2919]", "[bfb5d0897bbb542b42e2]", "0x20")
    self.bid32_to_binary80("0", "[a5044c83]", "[bfb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("1", "[a5044c83]", "[bfb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("2", "[a5044c83]", "[bfb7aa4bc2ba05f0111f]", "0x20")
    self.bid32_to_binary80("3", "[a5044c83]", "[bfb7aa4bc2ba05f0111f]", "0x20")
    self.bid32_to_binary80("4", "[a5044c83]", "[bfb7aa4bc2ba05f01120]", "0x20")
    self.bid32_to_binary80("0", "[a77af9b1]", "[bfc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("1", "[a77af9b1]", "[bfc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("2", "[a77af9b1]", "[bfc9b9d5c977b2a77192]", "0x20")
    self.bid32_to_binary80("3", "[a77af9b1]", "[bfc9b9d5c977b2a77192]", "0x20")
    self.bid32_to_binary80("4", "[a77af9b1]", "[bfc9b9d5c977b2a77193]", "0x20")
    self.bid32_to_binary80("0", "[a868c06d]", "[bfcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("1", "[a868c06d]", "[bfcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("2", "[a868c06d]", "[bfcff7567ec2244a9fdb]", "0x20")
    self.bid32_to_binary80("3", "[a868c06d]", "[bfcff7567ec2244a9fdb]", "0x20")
    self.bid32_to_binary80("4", "[a868c06d]", "[bfcff7567ec2244a9fdc]", "0x20")
    self.bid32_to_binary80("0", "[a929e692]", "[bfd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("1", "[a929e692]", "[bfd59a960f3956aea3ea]", "0x20")
    self.bid32_to_binary80("2", "[a929e692]", "[bfd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("3", "[a929e692]", "[bfd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("4", "[a929e692]", "[bfd59a960f3956aea3e9]", "0x20")
    self.bid32_to_binary80("0", "[aa24dce3]", "[bfdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("1", "[aa24dce3]", "[bfdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("2", "[aa24dce3]", "[bfdbd47ff2bb76052ac9]", "0x20")
    self.bid32_to_binary80("3", "[aa24dce3]", "[bfdbd47ff2bb76052ac9]", "0x20")
    self.bid32_to_binary80("4", "[aa24dce3]", "[bfdbd47ff2bb76052aca]", "0x20")
    self.bid32_to_binary80("0", "[ab1b9a0d]", "[bfe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("1", "[ab1b9a0d]", "[bfe1f89d53cbf427e7de]", "0x20")
    self.bid32_to_binary80("2", "[ab1b9a0d]", "[bfe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("3", "[ab1b9a0d]", "[bfe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("4", "[ab1b9a0d]", "[bfe1f89d53cbf427e7dd]", "0x20")
    self.bid32_to_binary80("0", "[ac047c26]", "[bfe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("1", "[ac047c26]", "[bfe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("2", "[ac047c26]", "[bfe5fc7b02cd09d4aaf5]", "0x20")
    self.bid32_to_binary80("3", "[ac047c26]", "[bfe5fc7b02cd09d4aaf5]", "0x20")
    self.bid32_to_binary80("4", "[ac047c26]", "[bfe5fc7b02cd09d4aaf6]", "0x20")
    self.bid32_to_binary80("0", "[ad08680d]", "[bfedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("1", "[ad08680d]", "[bfedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("2", "[ad08680d]", "[bfedb8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("3", "[ad08680d]", "[bfedb8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("4", "[ad08680d]", "[bfedb8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("0", "[ae056150]", "[bff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("1", "[ae056150]", "[bff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("2", "[ae056150]", "[bff3b8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("3", "[ae056150]", "[bff3b8dc18dee2e8b1c9]", "0x20")
    self.bid32_to_binary80("4", "[ae056150]", "[bff3b8dc18dee2e8b1ca]", "0x20")
    self.bid32_to_binary80("0", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[aecd7c6d]", "[bffad000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[af04845c]", "[bff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("1", "[af04845c]", "[bff9f281923bd746a353]", "0x20")
    self.bid32_to_binary80("2", "[af04845c]", "[bff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("3", "[af04845c]", "[bff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("4", "[af04845c]", "[bff9f281923bd746a352]", "0x20")
    self.bid32_to_binary80("0", "[b0061248]", "[c000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("1", "[b0061248]", "[c000fea747d805e5f30f]", "0x20")
    self.bid32_to_binary80("2", "[b0061248]", "[c000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("3", "[b0061248]", "[c000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("4", "[b0061248]", "[c000fea747d805e5f30e]", "0x20")
    self.bid32_to_binary80("0", "[b103e7d9]", "[c006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("1", "[b103e7d9]", "[c006fff604189374bc6b]", "0x20")
    self.bid32_to_binary80("2", "[b103e7d9]", "[c006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("3", "[b103e7d9]", "[c006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("4", "[b103e7d9]", "[c006fff604189374bc6a]", "0x20")
    self.bid32_to_binary80("0", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b200000f]", "[bfffc000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b2800001]", "[bfff8000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b2800040]", "[c0058000000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b28003e7]", "[c008f9c0000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("1", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("2", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("3", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("4", "[b28003e8]", "[c008fa00000000000000]", "0x00")
    self.bid32_to_binary80("0", "[b30f4240]", "[c0169896800000000000]", "0x00")
    self.bid32_to_binary80("1", "[b30f4240]", "[c0169896800000000000]", "0x00")
    self.bid32_to_binary80("2", "[b30f4240]", "[c0169896800000000000]", "0x00")
    self.bid32_to_binary80("3", "[b30f4240]", "[c0169896800000000000]", "0x00")
    self.bid32_to_binary80("4", "[b30f4240]", "[c0169896800000000000]", "0x00")
    self.bid32_to_binary80("0", "[b40f4240]", "[c01cee6b280000000000]", "0x00")
    self.bid32_to_binary80("1", "[b40f4240]", "[c01cee6b280000000000]", "0x00")
    self.bid32_to_binary80("2", "[b40f4240]", "[c01cee6b280000000000]", "0x00")
    self.bid32_to_binary80("3", "[b40f4240]", "[c01cee6b280000000000]", "0x00")
    self.bid32_to_binary80("4", "[b40f4240]", "[c01cee6b280000000000]", "0x00")
    self.bid32_to_binary80("0", "[b50f4240]", "[c023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("1", "[b50f4240]", "[c023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("2", "[b50f4240]", "[c023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("3", "[b50f4240]", "[c023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("4", "[b50f4240]", "[c023ba43b74000000000]", "0x00")
    self.bid32_to_binary80("0", "[b6d5e63b]", "[c02ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("1", "[b6d5e63b]", "[c02ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("2", "[b6d5e63b]", "[c02ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("3", "[b6d5e63b]", "[c02ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("4", "[b6d5e63b]", "[c02ffffffe686d800000]", "0x00")
    self.bid32_to_binary80("0", "[b7b6f9bf]", "[c035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("1", "[b7b6f9bf]", "[c035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("2", "[b7b6f9bf]", "[c035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("3", "[b7b6f9bf]", "[c035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("4", "[b7b6f9bf]", "[c035fffffcbb46380000]", "0x00")
    self.bid32_to_binary80("0", "[b8a32f33]", "[c03bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("1", "[b8a32f33]", "[c03bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("2", "[b8a32f33]", "[c03bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("3", "[b8a32f33]", "[c03bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("4", "[b8a32f33]", "[c03bffffffeed6918000]", "0x00")
    self.bid32_to_binary80("0", "[b996849b]", "[c041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("1", "[b996849b]", "[c041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("2", "[b996849b]", "[c041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("3", "[b996849b]", "[c041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("4", "[b996849b]", "[c041fffffa0570609800]", "0x00")
    self.bid32_to_binary80("0", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("1", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("2", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("3", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("4", "[bb5c3bcc]", "[c04dffffe6bf6e22aff0]", "0x00")
    self.bid32_to_binary80("0", "[bc3b0790]", "[c053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("1", "[bc3b0790]", "[c053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("2", "[bc3b0790]", "[c053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("3", "[bc3b0790]", "[c053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("4", "[bc3b0790]", "[c053fffff4a024d65754]", "0x00")
    self.bid32_to_binary80("0", "[c13c9dfa]", "[c0759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("1", "[c13c9dfa]", "[c0759904e14fb5e066dc]", "0x20")
    self.bid32_to_binary80("2", "[c13c9dfa]", "[c0759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("3", "[c13c9dfa]", "[c0759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("4", "[c13c9dfa]", "[c0759904e14fb5e066db]", "0x20")
    self.bid32_to_binary80("0", "[c22ff974]", "[c07bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("1", "[c22ff974]", "[c07bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("2", "[c22ff974]", "[c07bbd39ca88ae4dbdca]", "0x20")
    self.bid32_to_binary80("3", "[c22ff974]", "[c07bbd39ca88ae4dbdca]", "0x20")
    self.bid32_to_binary80("4", "[c22ff974]", "[c07bbd39ca88ae4dbdcb]", "0x20")
    self.bid32_to_binary80("0", "[c313f10a]", "[c080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("1", "[c313f10a]", "[c080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("2", "[c313f10a]", "[c080f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("3", "[c313f10a]", "[c080f5cc76f1b27895a1]", "0x20")
    self.bid32_to_binary80("4", "[c313f10a]", "[c080f5cc76f1b27895a2]", "0x20")
    self.bid32_to_binary80("0", "[c42d405d]", "[c088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("1", "[c42d405d]", "[c088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("2", "[c42d405d]", "[c088d9e0ae29c8496a56]", "0x20")
    self.bid32_to_binary80("3", "[c42d405d]", "[c088d9e0ae29c8496a56]", "0x20")
    self.bid32_to_binary80("4", "[c42d405d]", "[c088d9e0ae29c8496a57]", "0x20")
    self.bid32_to_binary80("0", "[c6de06f0]", "[c09aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("1", "[c6de06f0]", "[c09aacb3546b8b93fd12]", "0x20")
    self.bid32_to_binary80("2", "[c6de06f0]", "[c09aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("3", "[c6de06f0]", "[c09aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("4", "[c6de06f0]", "[c09aacb3546b8b93fd11]", "0x20")
    self.bid32_to_binary80("0", "[c793e462]", "[c09ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("1", "[c793e462]", "[c09ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("2", "[c793e462]", "[c09ee459b0121faa0081]", "0x20")
    self.bid32_to_binary80("3", "[c793e462]", "[c09ee459b0121faa0081]", "0x20")
    self.bid32_to_binary80("4", "[c793e462]", "[c09ee459b0121faa0082]", "0x20")
    self.bid32_to_binary80("0", "[c8a8b2a2]", "[c0a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("1", "[c8a8b2a2]", "[c0a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("2", "[c8a8b2a2]", "[c0a6b67ec3eb98ab8e80]", "0x20")
    self.bid32_to_binary80("3", "[c8a8b2a2]", "[c0a6b67ec3eb98ab8e80]", "0x20")
    self.bid32_to_binary80("4", "[c8a8b2a2]", "[c0a6b67ec3eb98ab8e81]", "0x20")
    self.bid32_to_binary80("0", "[c9b6e3cd]", "[c0adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("1", "[c9b6e3cd]", "[c0adc04aeac9a5faa3a1]", "0x20")
    self.bid32_to_binary80("2", "[c9b6e3cd]", "[c0adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("3", "[c9b6e3cd]", "[c0adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("4", "[c9b6e3cd]", "[c0adc04aeac9a5faa3a0]", "0x20")
    self.bid32_to_binary80("0", "[cac9506a]", "[c0b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("1", "[cac9506a]", "[c0b4c8a77ae6dc274b05]", "0x20")
    self.bid32_to_binary80("2", "[cac9506a]", "[c0b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("3", "[cac9506a]", "[c0b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("4", "[cac9506a]", "[c0b4c8a77ae6dc274b04]", "0x20")
    self.bid32_to_binary80("0", "[cb9a6697]", "[c0b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("1", "[cb9a6697]", "[c0b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("2", "[cb9a6697]", "[c0b9e1cd2f739e889e7f]", "0x20")
    self.bid32_to_binary80("3", "[cb9a6697]", "[c0b9e1cd2f739e889e7f]", "0x20")
    self.bid32_to_binary80("4", "[cb9a6697]", "[c0b9e1cd2f739e889e80]", "0x20")
    self.bid32_to_binary80("0", "[cc9a6697]", "[c0c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("1", "[cc9a6697]", "[c0c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("2", "[cc9a6697]", "[c0c0b0684d1253dabbd3]", "0x20")
    self.bid32_to_binary80("3", "[cc9a6697]", "[c0c0b0684d1253dabbd3]", "0x20")
    self.bid32_to_binary80("4", "[cc9a6697]", "[c0c0b0684d1253dabbd4]", "0x20")
    self.bid32_to_binary80("0", "[cde2d61a]", "[c0c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("1", "[cde2d61a]", "[c0c980fcc884b7a737d4]", "0x20")
    self.bid32_to_binary80("2", "[cde2d61a]", "[c0c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("3", "[cde2d61a]", "[c0c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("4", "[cde2d61a]", "[c0c980fcc884b7a737d3]", "0x20")
    self.bid32_to_binary80("0", "[cecc8d0f]", "[c0cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("1", "[cecc8d0f]", "[c0cf9c197deb8c9856ad]", "0x20")
    self.bid32_to_binary80("2", "[cecc8d0f]", "[c0cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("3", "[cecc8d0f]", "[c0cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("4", "[cecc8d0f]", "[c0cf9c197deb8c9856ac]", "0x20")
    self.bid32_to_binary80("0", "[cfb82a11]", "[c0d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("1", "[cfb82a11]", "[c0d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("2", "[cfb82a11]", "[c0d5b2f3299ec7be0c09]", "0x20")
    self.bid32_to_binary80("3", "[cfb82a11]", "[c0d5b2f3299ec7be0c09]", "0x20")
    self.bid32_to_binary80("4", "[cfb82a11]", "[c0d5b2f3299ec7be0c0a]", "0x20")
    self.bid32_to_binary80("0", "[d0acee74]", "[c0dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("1", "[d0acee74]", "[c0dbdfaff40679ad8f0d]", "0x20")
    self.bid32_to_binary80("2", "[d0acee74]", "[c0dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("3", "[d0acee74]", "[c0dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("4", "[d0acee74]", "[c0dbdfaff40679ad8f0c]", "0x20")
    self.bid32_to_binary80("0", "[d19e2c6b]", "[c0e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("1", "[d19e2c6b]", "[c0e1eab676baf37301a9]", "0x20")
    self.bid32_to_binary80("2", "[d19e2c6b]", "[c0e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("3", "[d19e2c6b]", "[c0e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("4", "[d19e2c6b]", "[c0e1eab676baf37301a8]", "0x20")
    self.bid32_to_binary80("0", "[d28fdb2b]", "[c0e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("1", "[d28fdb2b]", "[c0e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("2", "[d28fdb2b]", "[c0e7c0b8742478c6f621]", "0x20")
    self.bid32_to_binary80("3", "[d28fdb2b]", "[c0e7c0b8742478c6f621]", "0x20")
    self.bid32_to_binary80("4", "[d28fdb2b]", "[c0e7c0b8742478c6f622]", "0x20")
    self.bid32_to_binary80("0", "[d36f4abe]", "[c0edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("1", "[d36f4abe]", "[c0edd35b278e3553c20f]", "0x20")
    self.bid32_to_binary80("2", "[d36f4abe]", "[c0edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("3", "[d36f4abe]", "[c0edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("4", "[d36f4abe]", "[c0edd35b278e3553c20e]", "0x20")
    self.bid32_to_binary80("0", "[d43446e4]", "[c0f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("1", "[d43446e4]", "[c0f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("2", "[d43446e4]", "[c0f39b1feb90aa8ea133]", "0x20")
    self.bid32_to_binary80("3", "[d43446e4]", "[c0f39b1feb90aa8ea133]", "0x20")
    self.bid32_to_binary80("4", "[d43446e4]", "[c0f39b1feb90aa8ea134]", "0x20")
    self.bid32_to_binary80("0", "[d51f6e68]", "[c0f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("1", "[d51f6e68]", "[c0f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("2", "[d51f6e68]", "[c0f991bb397504579b74]", "0x20")
    self.bid32_to_binary80("3", "[d51f6e68]", "[c0f991bb397504579b74]", "0x20")
    self.bid32_to_binary80("4", "[d51f6e68]", "[c0f991bb397504579b75]", "0x20")
    self.bid32_to_binary80("0", "[d6164ea7]", "[c0ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("1", "[d6164ea7]", "[c0ffa19b116620c4ee91]", "0x20")
    self.bid32_to_binary80("2", "[d6164ea7]", "[c0ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("3", "[d6164ea7]", "[c0ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("4", "[d6164ea7]", "[c0ffa19b116620c4ee90]", "0x20")
    self.bid32_to_binary80("0", "[d74def7f]", "[c107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("1", "[d74def7f]", "[c107dc8cbba9515359d1]", "0x20")
    self.bid32_to_binary80("2", "[d74def7f]", "[c107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("3", "[d74def7f]", "[c107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("4", "[d74def7f]", "[c107dc8cbba9515359d0]", "0x20")
    self.bid32_to_binary80("0", "[d846b52f]", "[c10e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("1", "[d846b52f]", "[c10e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("2", "[d846b52f]", "[c10e9c532ad92698f0b1]", "0x20")
    self.bid32_to_binary80("3", "[d846b52f]", "[c10e9c532ad92698f0b1]", "0x20")
    self.bid32_to_binary80("4", "[d846b52f]", "[c10e9c532ad92698f0b2]", "0x20")
    self.bid32_to_binary80("0", "[d9119c63]", "[c112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("1", "[d9119c63]", "[c112f3584cd8d30fb549]", "0x20")
    self.bid32_to_binary80("2", "[d9119c63]", "[c112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("3", "[d9119c63]", "[c112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("4", "[d9119c63]", "[c112f3584cd8d30fb548]", "0x20")
    self.bid32_to_binary80("0", "[db73172b]", "[c122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("1", "[db73172b]", "[c122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("2", "[db73172b]", "[c122f2a94f4bec46b2ba]", "0x20")
    self.bid32_to_binary80("3", "[db73172b]", "[c122f2a94f4bec46b2ba]", "0x20")
    self.bid32_to_binary80("4", "[db73172b]", "[c122f2a94f4bec46b2bb]", "0x20")
    self.bid32_to_binary80("0", "[dc48d46a]", "[c128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("1", "[dc48d46a]", "[c128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("2", "[dc48d46a]", "[c128efeed8495e3a70d3]", "0x20")
    self.bid32_to_binary80("3", "[dc48d46a]", "[c128efeed8495e3a70d3]", "0x20")
    self.bid32_to_binary80("4", "[dc48d46a]", "[c128efeed8495e3a70d4]", "0x20")
    self.bid32_to_binary80("0", "[dd28d834]", "[c12ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("1", "[dd28d834]", "[c12ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("2", "[dd28d834]", "[c12ed23fe862820d7b7e]", "0x20")
    self.bid32_to_binary80("3", "[dd28d834]", "[c12ed23fe862820d7b7e]", "0x20")
    self.bid32_to_binary80("4", "[dd28d834]", "[c12ed23fe862820d7b7f]", "0x20")
    self.bid32_to_binary80("0", "[de1f60e1]", "[c134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("1", "[de1f60e1]", "[c134fc60eab62f36d223]", "0x20")
    self.bid32_to_binary80("2", "[de1f60e1]", "[c134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("3", "[de1f60e1]", "[c134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("4", "[de1f60e1]", "[c134fc60eab62f36d222]", "0x20")
    self.bid32_to_binary80("0", "[e349ac2f]", "[bf1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("1", "[e349ac2f]", "[bf1cf915969b6d3a1c1b]", "0x20")
    self.bid32_to_binary80("2", "[e349ac2f]", "[bf1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("3", "[e349ac2f]", "[bf1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("4", "[e349ac2f]", "[bf1cf915969b6d3a1c1a]", "0x20")
    self.bid32_to_binary80("0", "[e5b39ec0]", "[bf5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("1", "[e5b39ec0]", "[bf5c90c90f4bd7dd19a3]", "0x20")
    self.bid32_to_binary80("2", "[e5b39ec0]", "[bf5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("3", "[e5b39ec0]", "[bf5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("4", "[e5b39ec0]", "[bf5c90c90f4bd7dd19a2]", "0x20")
    self.bid32_to_binary80("0", "[e6a7add2]", "[bf76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("1", "[e6a7add2]", "[bf76c64b8906a24ae472]", "0x20")
    self.bid32_to_binary80("2", "[e6a7add2]", "[bf76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("3", "[e6a7add2]", "[bf76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("4", "[e6a7add2]", "[bf76c64b8906a24ae471]", "0x20")
    self.bid32_to_binary80("0", "[e981c887]", "[bfc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("1", "[e981c887]", "[bfc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("2", "[e981c887]", "[bfc2fb099512f5dc2b75]", "0x20")
    self.bid32_to_binary80("3", "[e981c887]", "[bfc2fb099512f5dc2b75]", "0x20")
    self.bid32_to_binary80("4", "[e981c887]", "[bfc2fb099512f5dc2b76]", "0x20")
    self.bid32_to_binary80("0", "[ec789675]", "[c00fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("1", "[ec789675]", "[c00fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("2", "[ec789675]", "[c00fc34ff1eb851eb851]", "0x20")
    self.bid32_to_binary80("3", "[ec789675]", "[c00fc34ff1eb851eb851]", "0x20")
    self.bid32_to_binary80("4", "[ec789675]", "[c00fc34ff1eb851eb852]", "0x20")
    self.bid32_to_binary80("0", "[ed6637bd]", "[c029fffffff528000000]", "0x00")
    self.bid32_to_binary80("1", "[ed6637bd]", "[c029fffffff528000000]", "0x00")
    self.bid32_to_binary80("2", "[ed6637bd]", "[c029fffffff528000000]", "0x00")
    self.bid32_to_binary80("3", "[ed6637bd]", "[c029fffffff528000000]", "0x00")
    self.bid32_to_binary80("4", "[ed6637bd]", "[c029fffffff528000000]", "0x00")
    self.bid32_to_binary80("0", "[ee901d7a]", "[c047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("1", "[ee901d7a]", "[c047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("2", "[ee901d7a]", "[c047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("3", "[ee901d7a]", "[c047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("4", "[ee901d7a]", "[c047fffffabb56818c80]", "0x00")
    self.bid32_to_binary80("0", "[ef5892a3]", "[c05c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("1", "[ef5892a3]", "[c05c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("2", "[ef5892a3]", "[c05c813bf3c1c802b3cf]", "0x20")
    self.bid32_to_binary80("3", "[ef5892a3]", "[c05c813bf3c1c802b3cf]", "0x20")
    self.bid32_to_binary80("4", "[ef5892a3]", "[c05c813bf3c1c802b3d0]", "0x20")
    self.bid32_to_binary80("0", "[ef98701b]", "[c062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("1", "[ef98701b]", "[c062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("2", "[ef98701b]", "[c062c9bff93a48227eab]", "0x20")
    self.bid32_to_binary80("3", "[ef98701b]", "[c062c9bff93a48227eab]", "0x20")
    self.bid32_to_binary80("4", "[ef98701b]", "[c062c9bff93a48227eac]", "0x20")
    self.bid32_to_binary80("0", "[efd52853]", "[c0699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("1", "[efd52853]", "[c0699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("2", "[efd52853]", "[c0699a39aa768dc0f858]", "0x20")
    self.bid32_to_binary80("3", "[efd52853]", "[c0699a39aa768dc0f858]", "0x20")
    self.bid32_to_binary80("4", "[efd52853]", "[c0699a39aa768dc0f859]", "0x20")
    self.bid32_to_binary80("0", "[f00a494b]", "[c06fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("1", "[f00a494b]", "[c06fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("2", "[f00a494b]", "[c06fdf69df99fddd33bd]", "0x20")
    self.bid32_to_binary80("3", "[f00a494b]", "[c06fdf69df99fddd33bd]", "0x20")
    self.bid32_to_binary80("4", "[f00a494b]", "[c06fdf69df99fddd33be]", "0x20")
    self.bid32_to_binary80("0", "[f1296142]", "[c08dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("1", "[f1296142]", "[c08dceb4d1593d6fc041]", "0x20")
    self.bid32_to_binary80("2", "[f1296142]", "[c08dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("3", "[f1296142]", "[c08dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("4", "[f1296142]", "[c08dceb4d1593d6fc040]", "0x20")
    self.bid32_to_binary80("0", "[f1696142]", "[c094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("1", "[f1696142]", "[c094a17d438db7ff4e33]", "0x20")
    self.bid32_to_binary80("2", "[f1696142]", "[c094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("3", "[f1696142]", "[c094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("4", "[f1696142]", "[c094a17d438db7ff4e32]", "0x20")
    self.bid32_to_binary80("0", "[f691cf0c]", "[c11cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("1", "[f691cf0c]", "[c11cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("2", "[f691cf0c]", "[c11cc4c12abd32cdc49d]", "0x20")
    self.bid32_to_binary80("3", "[f691cf0c]", "[c11cc4c12abd32cdc49d]", "0x20")
    self.bid32_to_binary80("4", "[f691cf0c]", "[c11cc4c12abd32cdc49e]", "0x20")
    self.bid32_to_binary80("0", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("1", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("2", "[f7f8967f]", "[c14195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("3", "[f7f8967f]", "[c14195d049f2e308a39a]", "0x20")
    self.bid32_to_binary80("4", "[f7f8967f]", "[c14195d049f2e308a39b]", "0x20")
    self.bid32_to_binary80("0", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("1", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("2", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("3", "[f8000000]", "[ffff8000000000000000]", "0x00")
    self.bid32_to_binary80("4", "[f8000000]", "[ffff8000000000000000]", "0x00")
  }

  private func bid32_to_binary80(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
#if (arch(i386) || arch(x86_64)) && !os(Windows) && !os(Android)

    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseFloat80(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toFloat80(rounding: rounding, status: &status)
    self.assertBinaryFloatingPoint(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)

#endif
  }

  func test_bid32_to_int16_ceil() {
    self.bid32_to_int16_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int16_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_int16_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int16_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_int16_ceil("0", "[31B1FF6A]", "32767", "00")
    self.bid32_to_int16_ceil("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_ceil("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_int16_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_int16_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_int16_ceil("0", "[3204FFF1]", "32767", "00")
    self.bid32_to_int16_ceil("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_int16_ceil("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_ceil("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_int16_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int16_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_ceil("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_ceil("0", "[7e000000]", "-32768", "01")
  }

  private func bid32_to_int16_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_floor() {
    self.bid32_to_int16_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int16_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_int16_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int16_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_int16_floor("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_int16_floor("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_floor("0", "[31B1FFCE]", "32767", "00")
    self.bid32_to_int16_floor("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[32000005]", "0", "00")
    self.bid32_to_int16_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_int16_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_int16_floor("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_int16_floor("0", "[3204FFFB]", "32767", "00")
    self.bid32_to_int16_floor("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_floor("0", "32767.5", "32767", "00")
    self.bid32_to_int16_floor("0", "[32800001]", "1", "00")
    self.bid32_to_int16_floor("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_floor("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[33800003]", "300", "00")
    self.bid32_to_int16_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int16_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_floor("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_floor("0", "[7e000000]", "-32768", "01")
  }

  private func bid32_to_int16_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_int() {
    self.bid32_to_int16_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int16_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_int16_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int16_int("0", "[310003E7]", "0", "00")
    self.bid32_to_int16_int("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_int16_int("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_int("0", "[31B1FFCE]", "32767", "00")
    self.bid32_to_int16_int("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_int("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_int("0", "[32000005]", "0", "00")
    self.bid32_to_int16_int("0", "[3200000F]", "1", "00")
    self.bid32_to_int16_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_int16_int("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_int16_int("0", "[3204FFFB]", "32767", "00")
    self.bid32_to_int16_int("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_int("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_int("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_int("0", "32767.5", "32767", "00")
    self.bid32_to_int16_int("0", "[32800001]", "1", "00")
    self.bid32_to_int16_int("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_int("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_int("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_int("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_int("0", "[33800003]", "300", "00")
    self.bid32_to_int16_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int16_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_int("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_int("0", "[7e000000]", "-32768", "01")
  }

  private func bid32_to_int16_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_rnint() {
    self.bid32_to_int16_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int16_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_int16_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int16_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_int16_rnint("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_int16_rnint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_rnint("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_int16_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_int16_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_int16_rnint("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_int16_rnint("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_int16_rnint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_rnint("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_int16_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int16_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_rnint("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_rnint("0", "[7e000000]", "-32768", "01")
  }

  private func bid32_to_int16_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_rninta() {
    self.bid32_to_int16_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int16_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_int16_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int16_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_int16_rninta("0", "[31B1FF6A]", "32767", "00")
    self.bid32_to_int16_rninta("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_rninta("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_int16_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_int16_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_int16_rninta("0", "[3204FFF1]", "32767", "00")
    self.bid32_to_int16_rninta("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_int16_rninta("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_rninta("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_int16_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int16_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_rninta("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "[7e000000]", "-32768", "01")
    self.bid32_to_int16_rninta("0", "-9", "-9", "00")
  }

  private func bid32_to_int16_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_xceil() {
    self.bid32_to_int16_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int16_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_int16_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int16_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_int16_xceil("0", "[31B1FF6A]", "32767", "20")
    self.bid32_to_int16_xceil("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_xceil("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_int16_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_int16_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_int16_xceil("0", "[3204FFF1]", "32767", "20")
    self.bid32_to_int16_xceil("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_int16_xceil("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_xceil("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_int16_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int16_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_xceil("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "[7e000000]", "-32768", "01")
    self.bid32_to_int16_xceil("0", "-1E-96", "0", "20")
    self.bid32_to_int16_xceil("0", "-9", "-9", "00")
  }

  private func bid32_to_int16_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_xfloor() {
    self.bid32_to_int16_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int16_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_int16_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int16_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_int16_xfloor("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_int16_xfloor("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_xfloor("0", "[31B1FFCE]", "32767", "20")
    self.bid32_to_int16_xfloor("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_int16_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_int16_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_int16_xfloor("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_int16_xfloor("0", "[3204FFFB]", "32767", "20")
    self.bid32_to_int16_xfloor("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "32767.5", "32767", "20")
    self.bid32_to_int16_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_int16_xfloor("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_xfloor("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_int16_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int16_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_xfloor("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "[7e000000]", "-32768", "01")
    self.bid32_to_int16_xfloor("0", "-1E-96", "-1", "20")
    self.bid32_to_int16_xfloor("0", "-9", "-9", "00")
  }

  private func bid32_to_int16_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_xint() {
    self.bid32_to_int16_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int16_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_int16_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int16_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_int16_xint("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_int16_xint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_xint("0", "[31B1FFCE]", "32767", "20")
    self.bid32_to_int16_xint("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[32000005]", "0", "20")
    self.bid32_to_int16_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_int16_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int16_xint("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_int16_xint("0", "[3204FFFB]", "32767", "20")
    self.bid32_to_int16_xint("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_xint("0", "32767.5", "32767", "20")
    self.bid32_to_int16_xint("0", "[32800001]", "1", "00")
    self.bid32_to_int16_xint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_xint("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[33800003]", "300", "00")
    self.bid32_to_int16_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int16_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_xint("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "[7e000000]", "-32768", "01")
    self.bid32_to_int16_xint("0", "-9", "-9", "00")
  }

  private func bid32_to_int16_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_xrnint() {
    self.bid32_to_int16_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int16_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_int16_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int16_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_int16_xrnint("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_int16_xrnint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_xrnint("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_int16_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_int16_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int16_xrnint("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_int16_xrnint("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_int16_xrnint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_xrnint("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_int16_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int16_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_xrnint("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "[7e000000]", "-32768", "01")
    self.bid32_to_int16_xrnint("0", "1E-96", "0", "20")
    self.bid32_to_int16_xrnint("0", "-9", "-9", "00")
    self.bid32_to_int16_xrnint("0", "5.05", "5", "20")
    self.bid32_to_int16_xrnint("0", "5.0005", "5", "20")
  }

  private func bid32_to_int16_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int16_xrninta() {
    self.bid32_to_int16_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int16_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int16_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_int16_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int16_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int16_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_int16_xrninta("0", "[31B1FF6A]", "32767", "20")
    self.bid32_to_int16_xrninta("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_int16_xrninta("0", "[31B1FFCE]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31B20000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31B20032]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31B20064]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31E3FF9C]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31E3FFCE]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31E40000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31E40032]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[31E40064]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_int16_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_int16_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_int16_xrninta("0", "[3204FFF1]", "32767", "20")
    self.bid32_to_int16_xrninta("0", "[3204FFFB]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32050005]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[3209FFFB]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[320A0005]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "32767.5", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_int16_xrninta("0", "[32807FFF]", "32767", "00")
    self.bid32_to_int16_xrninta("0", "[32808000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32808001]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[3280FFFF]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32810000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[32810001]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_int16_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int16_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int16_xrninta("0", "[78000000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[7c000000]", "-32768", "01")
    self.bid32_to_int16_xrninta("0", "[7e000000]", "-32768", "01")
  }

  private func bid32_to_int16_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int16(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_ceil() {
    self.bid32_to_int32_ceil("0", "1", "1", "00")
    self.bid32_to_int32_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int32_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_int32_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int32_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_int32_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_int32_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_int32_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_int32_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_int32_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int32_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_ceil("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "-99999.51", "-99999", "00")
    self.bid32_to_int32_ceil("0", "999999.5", "1000000", "00")
    self.bid32_to_int32_ceil("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[93c6fc97]", "0", "00")
    self.bid32_to_int32_ceil("0", "[ecd7924f]", "-99333910", "00")
    self.bid32_to_int32_ceil("0", "[b452f3e4]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[b2cdad3b]", "-5090619", "00")
    self.bid32_to_int32_ceil("0", "[93c6fc97]", "0", "00")
    self.bid32_to_int32_ceil("0", "[ecd7924f]", "-99333910", "00")
    self.bid32_to_int32_ceil("0", "[b452f3e4]", "-2147483648", "01")
    self.bid32_to_int32_ceil("0", "[b2cdad3b]", "-5090619", "00")
  }

  private func bid32_to_int32_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_floor() {
    self.bid32_to_int32_floor("0", "1", "1", "00")
    self.bid32_to_int32_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int32_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_int32_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int32_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_int32_floor("0", "[32000005]", "0", "00")
    self.bid32_to_int32_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_int32_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_int32_floor("0", "[32800001]", "1", "00")
    self.bid32_to_int32_floor("0", "[33800003]", "300", "00")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int32_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_floor("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "-99999.51", "-100000", "00")
    self.bid32_to_int32_floor("0", "999999.5", "999999", "00")
    self.bid32_to_int32_floor("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[e5f47fb9]", "-1", "00")
    self.bid32_to_int32_floor("0", "[b477a242]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[ebefa8cf]", "-10", "00")
    self.bid32_to_int32_floor("0", "[b4180630]", "-1574448000", "00")
    self.bid32_to_int32_floor("0", "[eca46618]", "-8676888", "00")
    self.bid32_to_int32_floor("0", "[e5f47fb9]", "-1", "00")
    self.bid32_to_int32_floor("0", "[b477a242]", "-2147483648", "01")
    self.bid32_to_int32_floor("0", "[ebefa8cf]", "-10", "00")
    self.bid32_to_int32_floor("0", "[b4180630]", "-1574448000", "00")
    self.bid32_to_int32_floor("0", "[eca46618]", "-8676888", "00")
  }

  private func bid32_to_int32_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_int() {
    self.bid32_to_int32_int("0", "1", "1", "00")
    self.bid32_to_int32_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int32_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_int32_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int32_int("0", "[310003E7]", "0", "00")
    self.bid32_to_int32_int("0", "[32000005]", "0", "00")
    self.bid32_to_int32_int("0", "[3200000F]", "1", "00")
    self.bid32_to_int32_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_int32_int("0", "[32800001]", "1", "00")
    self.bid32_to_int32_int("0", "[33800003]", "300", "00")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int32_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_int("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "-99999.51", "-99999", "00")
    self.bid32_to_int32_int("0", "999999.5", "999999", "00")
    self.bid32_to_int32_int("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[b4296e09]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[ecaecdb2]", "-9358770", "00")
    self.bid32_to_int32_int("0", "[b376a87c]", "-77763800", "00")
    self.bid32_to_int32_int("0", "[b4296e09]", "-2147483648", "01")
    self.bid32_to_int32_int("0", "[ecaecdb2]", "-9358770", "00")
    self.bid32_to_int32_int("0", "[b376a87c]", "-77763800", "00")
  }

  private func bid32_to_int32_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_rnint() {
    self.bid32_to_int32_rnint("0", "1", "1", "00")
    self.bid32_to_int32_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int32_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_int32_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int32_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_int32_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_int32_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_int32_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_int32_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_int32_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int32_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_rnint("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "-99999.51", "-100000", "00")
    self.bid32_to_int32_rnint("0", "999999.5", "1000000", "00")
    self.bid32_to_int32_rnint("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[6097d406]", "0", "00")
    self.bid32_to_int32_rnint("0", "[b340f2e2]", "-42564820", "00")
    self.bid32_to_int32_rnint("0", "[af7ee7c4]", "-1", "00")
    self.bid32_to_int32_rnint("0", "[b28985da]", "-624090", "00")
    self.bid32_to_int32_rnint("0", "[b42b9828]", "-2147483648", "01")
    self.bid32_to_int32_rnint("0", "[6097d406]", "0", "00")
    self.bid32_to_int32_rnint("0", "[b340f2e2]", "-42564820", "00")
    self.bid32_to_int32_rnint("0", "[af7ee7c4]", "-1", "00")
    self.bid32_to_int32_rnint("0", "[b28985da]", "-624090", "00")
    self.bid32_to_int32_rnint("0", "[b42b9828]", "-2147483648", "01")
  }

  private func bid32_to_int32_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_rninta() {
    self.bid32_to_int32_rninta("0", "1", "1", "00")
    self.bid32_to_int32_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int32_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_int32_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int32_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_int32_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_int32_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_int32_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_int32_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_int32_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int32_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_rninta("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "-99999.51", "-100000", "00")
    self.bid32_to_int32_rninta("0", "999999.5", "1000000", "00")
    self.bid32_to_int32_rninta("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_rninta("0", "[9e429fd5]", "0", "00")
    self.bid32_to_int32_rninta("0", "[af1d57f9]", "0", "00")
    self.bid32_to_int32_rninta("0", "[9e429fd5]", "0", "00")
    self.bid32_to_int32_rninta("0", "[af1d57f9]", "0", "00")
  }

  private func bid32_to_int32_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_xceil() {
    self.bid32_to_int32_xceil("0", "1", "1", "00")
    self.bid32_to_int32_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int32_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_int32_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int32_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_int32_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_int32_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_int32_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_int32_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_int32_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int32_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_xceil("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_xceil("0", "-99999.51", "-99999", "20")
    self.bid32_to_int32_xceil("0", "999999.5", "1000000", "20")
    self.bid32_to_int32_xceil("0", "9.99E+32", "-2147483648", "01")
  }

  private func bid32_to_int32_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_xfloor() {
    self.bid32_to_int32_xfloor("0", "1", "1", "00")
    self.bid32_to_int32_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int32_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_int32_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int32_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_int32_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_int32_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_int32_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_int32_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_int32_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int32_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_xfloor("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_xfloor("0", "-99999.51", "-100000", "20")
    self.bid32_to_int32_xfloor("0", "999999.5", "999999", "20")
    self.bid32_to_int32_xfloor("0", "9.99E+32", "-2147483648", "01")
  }

  private func bid32_to_int32_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_xint() {
    self.bid32_to_int32_xint("0", "1", "1", "00")
    self.bid32_to_int32_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int32_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_int32_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int32_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_int32_xint("0", "[32000005]", "0", "20")
    self.bid32_to_int32_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_int32_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int32_xint("0", "[32800001]", "1", "00")
    self.bid32_to_int32_xint("0", "[33800003]", "300", "00")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int32_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_xint("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_xint("0", "-99999.51", "-99999", "20")
    self.bid32_to_int32_xint("0", "999999.5", "999999", "20")
    self.bid32_to_int32_xint("0", "9.99E+32", "-2147483648", "01")
  }

  private func bid32_to_int32_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_xrnint() {
    self.bid32_to_int32_xrnint("0", "1", "1", "00")
    self.bid32_to_int32_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int32_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_int32_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int32_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_int32_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_int32_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_int32_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int32_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_int32_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int32_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_xrnint("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_xrnint("0", "-99999.51", "-100000", "20")
    self.bid32_to_int32_xrnint("0", "999999.5", "1000000", "20")
    self.bid32_to_int32_xrnint("0", "9.99E+32", "-2147483648", "01")
  }

  private func bid32_to_int32_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int32_xrninta() {
    self.bid32_to_int32_xrninta("0", "1", "1", "00")
    self.bid32_to_int32_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int32_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int32_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_int32_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int32_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int32_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_int32_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_int32_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_int32_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_int32_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_int32_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[3420C49C]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[343D0900]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[34418937]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[344C4B40]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[349E8480]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37000004]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37000005]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[37800002]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int32_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int32_xrninta("0", "[78000000]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[7c000000]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[7e000000]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "-99999.51", "-100000", "20")
    self.bid32_to_int32_xrninta("0", "999999.5", "1000000", "20")
    self.bid32_to_int32_xrninta("0", "9.99E+32", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[83c38f12]", "0", "20")
    self.bid32_to_int32_xrninta("0", "[ec308823]", "-947", "20")
    self.bid32_to_int32_xrninta("0", "[b151f5b3]", "-5371", "20")
    self.bid32_to_int32_xrninta("0", "[b4821111]", "-1354410000", "00")
    self.bid32_to_int32_xrninta("0", "[b2ba2474]", "-3810420", "00")
    self.bid32_to_int32_xrninta("0", "[af58924a]", "-1", "20")
    self.bid32_to_int32_xrninta("0", "[ed02e042]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[af204833]", "0", "20")
    self.bid32_to_int32_xrninta("0", "[83c38f12]", "0", "20")
    self.bid32_to_int32_xrninta("0", "[ec308823]", "-947", "20")
    self.bid32_to_int32_xrninta("0", "[b151f5b3]", "-5371", "20")
    self.bid32_to_int32_xrninta("0", "[b4821111]", "-1354410000", "00")
    self.bid32_to_int32_xrninta("0", "[b2ba2474]", "-3810420", "00")
    self.bid32_to_int32_xrninta("0", "[af58924a]", "-1", "20")
    self.bid32_to_int32_xrninta("0", "[ed02e042]", "-2147483648", "01")
    self.bid32_to_int32_xrninta("0", "[af204833]", "0", "20")
  }

  private func bid32_to_int32_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int32(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_ceil() {
    self.bid32_to_int64_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int64_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_int64_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int64_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_int64_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_int64_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_int64_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_int64_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_int64_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_int64_ceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_ceil("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_ceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_ceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_ceil("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_ceil("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_ceil("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int64_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_ceil("0", "[9f2a7e77]", "0", "00")
    self.bid32_to_int64_ceil("0", "[b1e6e4f3]", "-67432", "00")
    self.bid32_to_int64_ceil("0", "[b7779680]", "-7837312000000000", "00")
    self.bid32_to_int64_ceil("0", "[b8ad09ed]", "-2951661000000000000", "00")
    self.bid32_to_int64_ceil("0", "[b2aff7d7]", "-3143639", "00")
    self.bid32_to_int64_ceil("0", "[390ec0ec]", "-9223372036854775808", "01")
    self.bid32_to_int64_ceil("0", "[ee2d211a]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_floor() {
    self.bid32_to_int64_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int64_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_int64_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int64_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_int64_floor("0", "[32000005]", "0", "00")
    self.bid32_to_int64_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_int64_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_int64_floor("0", "[32800001]", "1", "00")
    self.bid32_to_int64_floor("0", "[33800003]", "300", "00")
    self.bid32_to_int64_floor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_floor("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_floor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_floor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_floor("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_floor("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_floor("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int64_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_floor("0", "[abb6ec5e]", "-1", "00")
    self.bid32_to_int64_floor("0", "[b573664e]", "-756283000000", "00")
    self.bid32_to_int64_floor("0", "[aff9a3e7]", "-8", "00")
    self.bid32_to_int64_floor("0", "[b1468402]", "-4622", "00")
    self.bid32_to_int64_floor("0", "[b907acb3]", "-5029630000000000000", "00")
    self.bid32_to_int64_floor("0", "[b2d974f6]", "-5862646", "00")
    self.bid32_to_int64_floor("0", "[6e2fe37b]", "-9223372036854775808", "01")
    self.bid32_to_int64_floor("0", "[ee37276b]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_int() {
    self.bid32_to_int64_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int64_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_int64_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int64_int("0", "[310003E7]", "0", "00")
    self.bid32_to_int64_int("0", "[32000005]", "0", "00")
    self.bid32_to_int64_int("0", "[3200000F]", "1", "00")
    self.bid32_to_int64_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_int64_int("0", "[32800001]", "1", "00")
    self.bid32_to_int64_int("0", "[33800003]", "300", "00")
    self.bid32_to_int64_int("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_int("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_int("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_int("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_int("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_int("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_int("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int64_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_int("0", "[b348af10]", "-47634080", "00")
    self.bid32_to_int64_int("0", "[b8fd0b20]", "-8194848000000000000", "00")
    self.bid32_to_int64_int("0", "[b118546b]", "-1594", "00")
    self.bid32_to_int64_int("0", "[b2e373ef]", "-6517743", "00")
    self.bid32_to_int64_int("0", "[6e37ff6b]", "-9223372036854775808", "01")
    self.bid32_to_int64_int("0", "[ee34dc83]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_rnint() {
    self.bid32_to_int64_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int64_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_int64_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_int64_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_int64_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_int64_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_int64_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_int64_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_int64_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_int64_rnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_rnint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_rnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_rnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_rnint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rnint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rnint("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int64_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_rnint("0", "[1a0b8046]", "0", "00")
    self.bid32_to_int64_rnint("0", "[b6bf79a9]", "-415991300000000", "00")
    self.bid32_to_int64_rnint("0", "[b1083e83]", "-540", "00")
    self.bid32_to_int64_rnint("0", "[b8fd527a]", "-8213114000000000000", "00")
    self.bid32_to_int64_rnint("0", "[6e339763]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[b2d4e02b]", "-5562411", "00")
    self.bid32_to_int64_rnint("0", "[af79538c]", "-1", "00")
    self.bid32_to_int64_rnint("0", "[b90e14c3]", "-9223372036854775808", "01")
    self.bid32_to_int64_rnint("0", "[1a0b8046]", "0", "00")
    self.bid32_to_int64_rnint("0", "[b6bf79a9]", "-415991300000000", "00")
    self.bid32_to_int64_rnint("0", "[b1083e83]", "-540", "00")
    self.bid32_to_int64_rnint("0", "[b8fd527a]", "-8213114000000000000", "00")
  }

  private func bid32_to_int64_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_rninta() {
    self.bid32_to_int64_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int64_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_int64_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_int64_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_int64_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_int64_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_int64_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_int64_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_int64_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_int64_rninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_rninta("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_rninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_rninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_rninta("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_rninta("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_rninta("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int64_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_rninta("0", "[02150004]", "0", "00")
    self.bid32_to_int64_rninta("0", "[2f1609ec]", "0", "00")
    self.bid32_to_int64_rninta("0", "[ee35f9c8]", "-9223372036854775808", "01")
    self.bid32_to_int64_rninta("0", "[6e2d3f13]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_xceil() {
    self.bid32_to_int64_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int64_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_int64_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int64_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_int64_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_int64_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_int64_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_int64_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_int64_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_int64_xceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_xceil("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_xceil("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xceil("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xceil("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int64_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_xceil("0", "[b7779680]", "-7837312000000000", "00")
    self.bid32_to_int64_xceil("0", "[b8ad09ed]", "-2951661000000000000", "00")
    self.bid32_to_int64_xceil("0", "[b2aff7d7]", "-3143639", "00")
    self.bid32_to_int64_xceil("0", "[390ec0ec]", "-9223372036854775808", "01")
    self.bid32_to_int64_xceil("0", "[ee2d211a]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_xfloor() {
    self.bid32_to_int64_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int64_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_int64_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int64_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_int64_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_int64_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_int64_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_int64_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_int64_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_int64_xfloor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_xfloor("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xfloor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xfloor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xfloor("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int64_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[b573664e]", "-756283000000", "00")
    self.bid32_to_int64_xfloor("0", "[b907acb3]", "-5029630000000000000", "00")
    self.bid32_to_int64_xfloor("0", "[b2d974f6]", "-5862646", "00")
    self.bid32_to_int64_xfloor("0", "[6e2fe37b]", "-9223372036854775808", "01")
    self.bid32_to_int64_xfloor("0", "[ee37276b]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_xint() {
    self.bid32_to_int64_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int64_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_int64_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int64_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_int64_xint("0", "[32000005]", "0", "20")
    self.bid32_to_int64_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_int64_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int64_xint("0", "[32800001]", "1", "00")
    self.bid32_to_int64_xint("0", "[33800003]", "300", "00")
    self.bid32_to_int64_xint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_xint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_xint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xint("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int64_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_xint("0", "[6e37ff6b]", "-9223372036854775808", "01")
    self.bid32_to_int64_xint("0", "[ee34dc83]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_xrnint() {
    self.bid32_to_int64_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int64_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_int64_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_int64_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_int64_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_int64_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_int64_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_int64_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_int64_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_int64_xrnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_xrnint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xrnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xrnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrnint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int64_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_xrnint("0", "[6e339763]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrnint("0", "[b2d4e02b]", "-5562411", "00")
    self.bid32_to_int64_xrnint("0", "[b90e14c3]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int64_xrninta() {
    self.bid32_to_int64_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int64_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int64_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_int64_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_int64_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_int64_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_int64_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_int64_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_int64_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_int64_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_int64_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_int64_xrninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_int64_xrninta("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xrninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_int64_xrninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37000005]", "5000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_int64_xrninta("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[390F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3916E360]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391C25C2]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[391E8480]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[392625A0]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[398F4240]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[3B80000F]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3B800019]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3C000001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3C000002]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[3C800001]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int64_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[78000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[7c000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[7e000000]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[1fa89a0e]", "0", "20")
    self.bid32_to_int64_xrninta("0", "[b177f37f]", "-7861", "20")
    self.bid32_to_int64_xrninta("0", "[b72d8189]", "-2982281000000000", "00")
    self.bid32_to_int64_xrninta("0", "[2f4280fa]", "0", "20")
    self.bid32_to_int64_xrninta("0", "[eca5614b]", "-8741195", "00")
    self.bid32_to_int64_xrninta("0", "[3010cc49]", "11", "20")
    self.bid32_to_int64_xrninta("0", "[af68a852]", "-1", "20")
    self.bid32_to_int64_xrninta("0", "[b8c7af87]", "-4697991000000000000", "00")
    self.bid32_to_int64_xrninta("0", "[ee304e41]", "-9223372036854775808", "01")
    self.bid32_to_int64_xrninta("0", "[6e32dc30]", "-9223372036854775808", "01")
  }

  private func bid32_to_int64_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int64(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_ceil() {
    self.bid32_to_int8_ceil("0", "-126.5", "-126", "00")
    self.bid32_to_int8_ceil("0", "127.5", "-128", "01")
    self.bid32_to_int8_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int8_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_int8_ceil("0", "[30934D68]", "127", "00")
    self.bid32_to_int8_ceil("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_ceil("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_int8_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_int8_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_int8_ceil("0", "[320004F1]", "127", "00")
    self.bid32_to_int8_ceil("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_int8_ceil("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_ceil("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int8_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_ceil("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_ceil("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_floor() {
    self.bid32_to_int8_floor("0", "-126.5", "-127", "00")
    self.bid32_to_int8_floor("0", "127.5", "127", "00")
    self.bid32_to_int8_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int8_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_int8_floor("0", "[30934D68]", "126", "00")
    self.bid32_to_int8_floor("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_floor("0", "[30937478]", "127", "00")
    self.bid32_to_int8_floor("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_floor("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_floor("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_int8_floor("0", "[32000005]", "0", "00")
    self.bid32_to_int8_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_int8_floor("0", "[320004F1]", "126", "00")
    self.bid32_to_int8_floor("0", "[320004FB]", "127", "00")
    self.bid32_to_int8_floor("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_floor("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32800001]", "1", "00")
    self.bid32_to_int8_floor("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_floor("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_floor("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_floor("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_floor("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int8_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_floor("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_floor("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_floor("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_int() {
    self.bid32_to_int8_int("0", "-126.5", "-126", "00")
    self.bid32_to_int8_int("0", "127.5", "127", "00")
    self.bid32_to_int8_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int8_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_int8_int("0", "[30934D68]", "126", "00")
    self.bid32_to_int8_int("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_int("0", "[30937478]", "127", "00")
    self.bid32_to_int8_int("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_int("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_int("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_int("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_int("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_int("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_int("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_int("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_int("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_int("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_int("0", "[310003E7]", "0", "00")
    self.bid32_to_int8_int("0", "[32000005]", "0", "00")
    self.bid32_to_int8_int("0", "[3200000F]", "1", "00")
    self.bid32_to_int8_int("0", "[320004F1]", "126", "00")
    self.bid32_to_int8_int("0", "[320004FB]", "127", "00")
    self.bid32_to_int8_int("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_int("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_int("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_int("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_int("0", "[32800001]", "1", "00")
    self.bid32_to_int8_int("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_int("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_int("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_int("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_int("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_int("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_int("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_int8_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_int("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_int("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_int("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_rnint() {
    self.bid32_to_int8_rnint("0", "-126.5", "-126", "00")
    self.bid32_to_int8_rnint("0", "127.5", "-128", "01")
    self.bid32_to_int8_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_int8_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_int8_rnint("0", "[30934D68]", "126", "00")
    self.bid32_to_int8_rnint("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_rnint("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_int8_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_int8_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_int8_rnint("0", "[320004F1]", "126", "00")
    self.bid32_to_int8_rnint("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_int8_rnint("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_rnint("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int8_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_rnint("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_rnint("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_rninta() {
    self.bid32_to_int8_rninta("0", "-126.5", "-127", "00")
    self.bid32_to_int8_rninta("0", "127.5", "-128", "01")
    self.bid32_to_int8_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_int8_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_int8_rninta("0", "[30934D68]", "127", "00")
    self.bid32_to_int8_rninta("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_rninta("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_int8_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_int8_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_int8_rninta("0", "[320004F1]", "127", "00")
    self.bid32_to_int8_rninta("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_int8_rninta("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_rninta("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_int8_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_rninta("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_rninta("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_xceil() {
    self.bid32_to_int8_xceil("0", "-126.5", "-126", "20")
    self.bid32_to_int8_xceil("0", "127.5", "-128", "01")
    self.bid32_to_int8_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int8_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_int8_xceil("0", "[30934D68]", "127", "20")
    self.bid32_to_int8_xceil("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_xceil("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_int8_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_int8_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_int8_xceil("0", "[320004F1]", "127", "20")
    self.bid32_to_int8_xceil("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_int8_xceil("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_xceil("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int8_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_xceil("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_xceil("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_xfloor() {
    self.bid32_to_int8_xfloor("0", "-126.5", "-127", "20")
    self.bid32_to_int8_xfloor("0", "127.5", "127", "20")
    self.bid32_to_int8_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int8_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_int8_xfloor("0", "[30934D68]", "126", "20")
    self.bid32_to_int8_xfloor("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_xfloor("0", "[30937478]", "127", "20")
    self.bid32_to_int8_xfloor("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_int8_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_int8_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_int8_xfloor("0", "[320004F1]", "126", "20")
    self.bid32_to_int8_xfloor("0", "[320004FB]", "127", "20")
    self.bid32_to_int8_xfloor("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_int8_xfloor("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_xfloor("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int8_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_xfloor("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_xfloor("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_xint() {
    self.bid32_to_int8_xint("0", "-126.5", "-126", "20")
    self.bid32_to_int8_xint("0", "127.5", "127", "20")
    self.bid32_to_int8_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int8_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_int8_xint("0", "[30934D68]", "126", "20")
    self.bid32_to_int8_xint("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_xint("0", "[30937478]", "127", "20")
    self.bid32_to_int8_xint("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_xint("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_xint("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_int8_xint("0", "[32000005]", "0", "20")
    self.bid32_to_int8_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_int8_xint("0", "[320004F1]", "126", "20")
    self.bid32_to_int8_xint("0", "[320004FB]", "127", "20")
    self.bid32_to_int8_xint("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_xint("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32800001]", "1", "00")
    self.bid32_to_int8_xint("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_xint("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_xint("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_xint("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_xint("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_int8_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_xint("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_xint("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_xint("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_xrnint() {
    self.bid32_to_int8_xrnint("0", "-126.5", "-126", "20")
    self.bid32_to_int8_xrnint("0", "127.5", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_int8_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_int8_xrnint("0", "[30934D68]", "126", "20")
    self.bid32_to_int8_xrnint("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_xrnint("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_int8_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_int8_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_int8_xrnint("0", "[320004F1]", "126", "20")
    self.bid32_to_int8_xrnint("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_int8_xrnint("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_xrnint("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int8_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_xrnint("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_xrnint("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_int8_xrninta() {
    self.bid32_to_int8_xrninta("0", "-126.5", "-127", "20")
    self.bid32_to_int8_xrninta("0", "127.5", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_int8_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_int8_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_int8_xrninta("0", "[30934D68]", "127", "20")
    self.bid32_to_int8_xrninta("0", "[309360F0]", "127", "00")
    self.bid32_to_int8_xrninta("0", "[30937478]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30938800]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30939B88]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[3093AF10]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30A6E8F0]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30A6FC78]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30A71000]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30A72388]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30A73710]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30ADC6C0]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[30ADDA48]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_int8_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_int8_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_int8_xrninta("0", "[320004F1]", "127", "20")
    self.bid32_to_int8_xrninta("0", "[320004FB]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32000505]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[320009FB]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32000A05]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32000BBD]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_int8_xrninta("0", "[3280007F]", "127", "00")
    self.bid32_to_int8_xrninta("0", "[32800080]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32800081]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[328000FF]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32800100]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[32800101]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[33800003]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_int8_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_int8_xrninta("0", "[78000000]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[7c000000]", "-128", "01")
    self.bid32_to_int8_xrninta("0", "[7e000000]", "-128", "01")
  }

  private func bid32_to_int8_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = Int8(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_string() {
    self.bid32_to_string("0", "[0200000a]", "+1.0e-96", "00")
    self.bid32_to_string("0", "[3200000a]", "+1.0", "00")
    self.bid32_to_string("0", "[6018967f]", "+9.999999e-95", "00")
    self.bid32_to_string("0", "[77f8967f]", "+9.999999e96", "00")
    self.bid32_to_string("0", "[78000000]", "+Inf", "00")
    self.bid32_to_string("0", "[78000200]", "+Inf", "00")
    self.bid32_to_string("0", "[7c000000]", "+NaN", "00")
    self.bid32_to_string("0", "[7c000200]", "+NaN", "00")
    self.bid32_to_string("0", "[7e000000]", "+SNaN", "00")
    self.bid32_to_string("0", "[7e000200]", "+SNaN", "00")
    self.bid32_to_string("0", "[8200000a]", "-1.0e-96", "00")
    self.bid32_to_string("0", "[b200000a]", "-1.0", "00")
    self.bid32_to_string("0", "[e018967f]", "-9.999999e-95", "00")
    self.bid32_to_string("0", "[f7f8967f]", "-9.999999e96", "00")
    self.bid32_to_string("0", "[f8000000]", "-Inf", "00")
    self.bid32_to_string("0", "[f8fff000]", "-Inf", "00")
    self.bid32_to_string("0", "[fc000000]", "-NaN", "00")
    self.bid32_to_string("0", "[fcfff000]", "-NaN", "00")
    self.bid32_to_string("0", "[fe000000]", "-SNaN", "00")
    self.bid32_to_string("0", "[fefff000]", "-SNaN", "00")
  }

  private func bid32_to_string(
    _ _rounding: String,
    _ _arg0: String,
    _ expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._toString(status: &status)
    self.assertToString(Decimal32.self, result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_totalOrder() {
    self.bid32_totalOrder("0", "[00000000]", "[21020082]", "1", "00")
    self.bid32_totalOrder("0", "[00000001]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[00080001]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "0E+89", "Infinity", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[00000001]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[00080001]", "0", "00")
    self.bid32_totalOrder("0", "1.00", "1", "1", "00")
    self.bid32_totalOrder("0", "1.0", "-1.0", "0", "00")
    self.bid32_totalOrder("0", "-1.0", "1.0", "1", "00")
    self.bid32_totalOrder("0", "1.0", "1.0", "1", "00")
    self.bid32_totalOrder("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_totalOrder("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[60989680]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[7c000000]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7e100000]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7e100100]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7e8f423f]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[7e8f4240]", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[80000001]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_totalOrder("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_totalOrder("0", "1.0", "-9.999999e96", "0", "00")
    self.bid32_totalOrder("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_totalOrder("0", "1.0E+91", "1.234567E+95", "1", "00")
    self.bid32_totalOrder("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_totalOrder("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_totalOrder("0", "1.0", "[fc100000]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[fc100100]", "0", "00")
    self.bid32_totalOrder("0", "1.0", "[fe000000]", "0", "00")
    self.bid32_totalOrder("0", "1", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[1913a25c]", "[17b56781]", "0", "00")
    self.bid32_totalOrder("0", "1E+89", "1E+90", "1", "00")
    self.bid32_totalOrder("0", "[3f000000]", "[01000000]", "0", "00")
    self.bid32_totalOrder("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[60989680]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[78000000]", "[0a43704a]", "0", "00")
    self.bid32_totalOrder("0", "[7c000000]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7c8f423f]", "[7e100000]", "0", "00")
    self.bid32_totalOrder("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_totalOrder("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7e0afbfe]", "[7e000000]", "0", "00")
    self.bid32_totalOrder("0", "[7e0efddf]", "[7e07fffd]", "0", "00")
    self.bid32_totalOrder("0", "[7e100000]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7e100100]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7e8f423f]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[7e8f4240]", "1.0", "0", "00")
    self.bid32_totalOrder("0", "[80000001]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[90752206]", "[91045f9f]", "0", "00")
    self.bid32_totalOrder("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_totalOrder("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_totalOrder("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_totalOrder("0", "-9.999999e96", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[e9ee807c]", "[f8000000]", "0", "00")
    self.bid32_totalOrder("0", "[f8000000]", "[a7031841]", "1", "00")
    self.bid32_totalOrder("0", "[fc000000]", "[fe000000]", "1", "00")
    self.bid32_totalOrder("0", "[fc100000]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[fc100100]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[fe000000]", "1.0", "1", "00")
    self.bid32_totalOrder("0", "[fe000000]", "[fe0de7ff]", "0", "00")
    self.bid32_totalOrder("0", "[fe077e9f]", "[fe09ff9f]", "0", "00")
    self.bid32_totalOrder("0", "[fe07ffea]", "[fe000000]", "1", "00")
    self.bid32_totalOrder("0", "Infinity", "0E+89", "0", "00")
    self.bid32_totalOrder("0", "Infinity", "NaN", "1", "00")
    self.bid32_totalOrder("0", "[7e000000]", "[7e0b297f]", "1", "00")
    self.bid32_totalOrder("0", "[7c0f423f]", "NaN", "0", "00")
    self.bid32_totalOrder("0", "[7c000000]", "[7e000000]", "0", "00")
    self.bid32_totalOrder("0", "[7e000000]", "[7c000000]", "1", "00")
    self.bid32_totalOrder("0", "[fc000000]", "[fe000000]", "1", "00")
    self.bid32_totalOrder("0", "[fe000000]", "[fc000000]", "0", "00")
    self.bid32_totalOrder("0", "[7e000002]", "[7e000001]", "0", "00")
    self.bid32_totalOrder("0", "[7c000001]", "[7c000002]", "1", "00")
    self.bid32_totalOrder("0", "[fe000002]", "[fe000001]", "1", "00")
    self.bid32_totalOrder("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_totalOrder("0", "0", "1", "1", "00")
    self.bid32_totalOrder("0", "-0", "-1", "0", "00")
    self.bid32_totalOrder("0", "-1", "-0", "1", "00")
    self.bid32_totalOrder("0", "-12", "-10", "1", "00")
    self.bid32_totalOrder("0", "10", "12", "1", "00")
    self.bid32_totalOrder("0", "-10", "-12", "0", "00")
    self.bid32_totalOrder("0", "-2E+10", "-10", "1", "00")
    self.bid32_totalOrder("0", "10", "2E+10", "1", "00")
    self.bid32_totalOrder("0", "-10", "-2E+10", "0", "00")
    self.bid32_totalOrder("0", "99", "1E+2", "1", "00")
    self.bid32_totalOrder("0", "-99", "-1E+2", "0", "00")
    self.bid32_totalOrder("0", "-101", "-1E+2", "1", "00")
    self.bid32_totalOrder("0", "101", "1E+2", "0", "00")
    self.bid32_totalOrder("0", "[77f89680]", "[77f89681]", "1", "00")
  }

  private func bid32_totalOrder(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let result = arg0.isTotallyOrdered(belowOrEqualTo: arg1)
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_totalOrderMag() {
    self.bid32_totalOrderMag("0", "[00000000]", "[2d63d55d]", "1", "00")
    self.bid32_totalOrderMag("0", "[00000001]", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "[00080001]", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "[02080082]", "[00185004]", "0", "00")
    self.bid32_totalOrderMag("0", "0E+89", "0E+90", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[00000001]", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "[00080001]", "0", "00")
    self.bid32_totalOrderMag("0", "1.00", "1", "1", "00")
    self.bid32_totalOrderMag("0", "-1.0", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "-1.0", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "-1.0e-96", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "1.0e-96", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "[6098967f]", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "[60989680]", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7c000000]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7c8f423f]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7c8f4240]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7e100000]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7e100100]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7e8f423f]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[7e8f4240]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[80000001]", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "-9.999999e-95", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "9.999999e-95", "0", "00")
    self.bid32_totalOrderMag("0", "1.0", "-9.999999e96", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "9.999999e96", "1", "00")
    self.bid32_totalOrderMag("0", "-1.0e-96", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "1.0e-96", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[fc100000]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[fc100100]", "1", "00")
    self.bid32_totalOrderMag("0", "1.0", "[fe000000]", "1", "00")
    self.bid32_totalOrderMag("0", "1", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[39800000]", "[08000000]", "0", "00")
    self.bid32_totalOrderMag("0", "[4d6627c2]", "[00000000]", "0", "00")
    self.bid32_totalOrderMag("0", "[6098967f]", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "[60989680]", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "[7c000000]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7c8f423f]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7c8f423f]", "[7e100000]", "0", "00")
    self.bid32_totalOrderMag("0", "[7c8f423f]", "Infinity", "0", "00")
    self.bid32_totalOrderMag("0", "[7c8f4240]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7e100000]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7e100100]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7e8f423f]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[7e8f4240]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[80000001]", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "[97f94c0c]", "[19a20ab1]", "1", "00")
    self.bid32_totalOrderMag("0", "-9.999999e-95", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "9.999999e-95", "1.0", "1", "00")
    self.bid32_totalOrderMag("0", "-9.999999e96", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "9.999999e96", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[bbaea547]", "[78000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[f8000000]", "[04421908]", "0", "00")
    self.bid32_totalOrderMag("0", "[fc100000]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[fc100100]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[fe000000]", "1.0", "0", "00")
    self.bid32_totalOrderMag("0", "[fe000000]", "[fe000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[fe0dedcf]", "[fe0affff]", "0", "00")
    self.bid32_totalOrderMag("0", "[fe0effff]", "[fe000000]", "0", "00")
    self.bid32_totalOrderMag("0", "Infinity", "NaN", "1", "00")
    self.bid32_totalOrderMag("0", "[7c000000]", "[7e000000]", "0", "00")
    self.bid32_totalOrderMag("0", "[7e000000]", "[7c000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[fc000000]", "[fe000000]", "0", "00")
    self.bid32_totalOrderMag("0", "[fe000000]", "[fc000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[78000000]", "[78000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[f8000000]", "[f8000000]", "1", "00")
    self.bid32_totalOrderMag("0", "[32800001]", "[2F8F4240]", "0", "00")
    self.bid32_totalOrderMag("0", "[b2800001]", "[AF8F4240]", "0", "00")
    self.bid32_totalOrderMag("0", "[7e000002]", "[7e000001]", "0", "00")
    self.bid32_totalOrderMag("0", "[7c000001]", "[7c000002]", "1", "00")
    self.bid32_totalOrderMag("0", "[78000001]", "[78000002]", "1", "00")
    self.bid32_totalOrderMag("0", "101", "1E+2", "0", "00")
    self.bid32_totalOrderMag("0", "99", "1E+2", "1", "00")
    self.bid32_totalOrderMag("0", "1E+2", "101", "1", "00")
    self.bid32_totalOrderMag("0", "1E+2", "99", "0", "00")
  }

  private func bid32_totalOrderMag(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseDecimal32(_arg1, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    let arg0Mag = arg0.magnitude
    let arg1Mag = arg1.magnitude
    let result = arg0Mag.isTotallyOrdered(belowOrEqualTo: arg1Mag)
    self.assertBool(result, expected, file, line)
  }

  func test_bid32_to_uint16_ceil() {
    self.bid32_to_uint16_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint16_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint16_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[31B1FF6A]", "32767", "00")
    self.bid32_to_uint16_ceil("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_ceil("0", "[31B1FFCE]", "32768", "00")
    self.bid32_to_uint16_ceil("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_ceil("0", "[31B20032]", "32769", "00")
    self.bid32_to_uint16_ceil("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_ceil("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_ceil("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_uint16_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint16_ceil("0", "[3204FFF1]", "32767", "00")
    self.bid32_to_uint16_ceil("0", "[3204FFFB]", "32768", "00")
    self.bid32_to_uint16_ceil("0", "[32050005]", "32769", "00")
    self.bid32_to_uint16_ceil("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_ceil("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_ceil("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_ceil("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_ceil("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_ceil("0", "65534.5", "65535", "00")
    self.bid32_to_uint16_ceil("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint16_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_ceil("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_ceil("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_floor() {
    self.bid32_to_uint16_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint16_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint16_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint16_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_uint16_floor("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_uint16_floor("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_floor("0", "[31B1FFCE]", "32767", "00")
    self.bid32_to_uint16_floor("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_floor("0", "[31B20032]", "32768", "00")
    self.bid32_to_uint16_floor("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_floor("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_floor("0", "[31E3FFCE]", "65535", "00")
    self.bid32_to_uint16_floor("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[32000005]", "0", "00")
    self.bid32_to_uint16_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_uint16_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint16_floor("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_uint16_floor("0", "[3204FFFB]", "32767", "00")
    self.bid32_to_uint16_floor("0", "[32050005]", "32768", "00")
    self.bid32_to_uint16_floor("0", "[3209FFFB]", "65535", "00")
    self.bid32_to_uint16_floor("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_floor("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_floor("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_floor("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_floor("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_floor("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_floor("0", "65534.5", "65534", "00")
    self.bid32_to_uint16_floor("0", "65535.5", "65535", "00")
    self.bid32_to_uint16_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint16_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_floor("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_floor("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_int() {
    self.bid32_to_uint16_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint16_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint16_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint16_int("0", "[310003E7]", "0", "00")
    self.bid32_to_uint16_int("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_uint16_int("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_int("0", "[31B1FFCE]", "32767", "00")
    self.bid32_to_uint16_int("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_int("0", "[31B20032]", "32768", "00")
    self.bid32_to_uint16_int("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_int("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_int("0", "[31E3FFCE]", "65535", "00")
    self.bid32_to_uint16_int("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_int("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_int("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_int("0", "[32000005]", "0", "00")
    self.bid32_to_uint16_int("0", "[3200000F]", "1", "00")
    self.bid32_to_uint16_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint16_int("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_uint16_int("0", "[3204FFFB]", "32767", "00")
    self.bid32_to_uint16_int("0", "[32050005]", "32768", "00")
    self.bid32_to_uint16_int("0", "[3209FFFB]", "65535", "00")
    self.bid32_to_uint16_int("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_int("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_int("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_int("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_int("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_int("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_int("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_int("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_int("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_int("0", "65534.5", "65534", "00")
    self.bid32_to_uint16_int("0", "65535.5", "65535", "00")
    self.bid32_to_uint16_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint16_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_int("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_int("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_int("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_rnint() {
    self.bid32_to_uint16_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint16_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint16_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint16_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_uint16_rnint("0", "[31B1FF6A]", "32766", "00")
    self.bid32_to_uint16_rnint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_rnint("0", "[31B1FFCE]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[31B20032]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_rnint("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_rnint("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_uint16_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_uint16_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint16_rnint("0", "[3204FFF1]", "32766", "00")
    self.bid32_to_uint16_rnint("0", "[3204FFFB]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[32050005]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_rnint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_rnint("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_rnint("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_rnint("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_rnint("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_rnint("0", "65534.5", "65534", "00")
    self.bid32_to_uint16_rnint("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint16_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_rnint("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_rnint("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_rninta() {
    self.bid32_to_uint16_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint16_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint16_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[31B1FF6A]", "32767", "00")
    self.bid32_to_uint16_rninta("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_rninta("0", "[31B1FFCE]", "32768", "00")
    self.bid32_to_uint16_rninta("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_rninta("0", "[31B20032]", "32769", "00")
    self.bid32_to_uint16_rninta("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_rninta("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_rninta("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_uint16_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint16_rninta("0", "[3204FFF1]", "32767", "00")
    self.bid32_to_uint16_rninta("0", "[3204FFFB]", "32768", "00")
    self.bid32_to_uint16_rninta("0", "[32050005]", "32769", "00")
    self.bid32_to_uint16_rninta("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_rninta("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_rninta("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_rninta("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_rninta("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_rninta("0", "65534.5", "65535", "00")
    self.bid32_to_uint16_rninta("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint16_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_rninta("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_rninta("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_xceil() {
    self.bid32_to_uint16_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint16_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint16_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint16_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_uint16_xceil("0", "[31B1FF6A]", "32767", "20")
    self.bid32_to_uint16_xceil("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_xceil("0", "[31B1FFCE]", "32768", "20")
    self.bid32_to_uint16_xceil("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_xceil("0", "[31B20032]", "32769", "20")
    self.bid32_to_uint16_xceil("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_xceil("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_xceil("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_uint16_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_uint16_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint16_xceil("0", "[3204FFF1]", "32767", "20")
    self.bid32_to_uint16_xceil("0", "[3204FFFB]", "32768", "20")
    self.bid32_to_uint16_xceil("0", "[32050005]", "32769", "20")
    self.bid32_to_uint16_xceil("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_xceil("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_xceil("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_xceil("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_xceil("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_xceil("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_xceil("0", "65534.5", "65535", "20")
    self.bid32_to_uint16_xceil("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint16_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_xceil("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_xceil("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_xfloor() {
    self.bid32_to_uint16_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint16_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint16_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint16_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_uint16_xfloor("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_uint16_xfloor("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_xfloor("0", "[31B1FFCE]", "32767", "20")
    self.bid32_to_uint16_xfloor("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_xfloor("0", "[31B20032]", "32768", "20")
    self.bid32_to_uint16_xfloor("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_xfloor("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_xfloor("0", "[31E3FFCE]", "65535", "20")
    self.bid32_to_uint16_xfloor("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_uint16_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_uint16_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint16_xfloor("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_uint16_xfloor("0", "[3204FFFB]", "32767", "20")
    self.bid32_to_uint16_xfloor("0", "[32050005]", "32768", "20")
    self.bid32_to_uint16_xfloor("0", "[3209FFFB]", "65535", "20")
    self.bid32_to_uint16_xfloor("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_xfloor("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_xfloor("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_xfloor("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_xfloor("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_xfloor("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_xfloor("0", "65534.5", "65534", "20")
    self.bid32_to_uint16_xfloor("0", "65535.5", "65535", "20")
    self.bid32_to_uint16_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint16_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_xfloor("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_xfloor("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_xint() {
    self.bid32_to_uint16_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint16_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint16_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint16_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_uint16_xint("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_uint16_xint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_xint("0", "[31B1FFCE]", "32767", "20")
    self.bid32_to_uint16_xint("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_xint("0", "[31B20032]", "32768", "20")
    self.bid32_to_uint16_xint("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_xint("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_xint("0", "[31E3FFCE]", "65535", "20")
    self.bid32_to_uint16_xint("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[32000005]", "0", "20")
    self.bid32_to_uint16_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_uint16_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint16_xint("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_uint16_xint("0", "[3204FFFB]", "32767", "20")
    self.bid32_to_uint16_xint("0", "[32050005]", "32768", "20")
    self.bid32_to_uint16_xint("0", "[3209FFFB]", "65535", "20")
    self.bid32_to_uint16_xint("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_xint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_xint("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_xint("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_xint("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_xint("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_xint("0", "65534.5", "65534", "20")
    self.bid32_to_uint16_xint("0", "65535.5", "65535", "20")
    self.bid32_to_uint16_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint16_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_xint("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_xint("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_xrnint() {
    self.bid32_to_uint16_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint16_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint16_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint16_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_uint16_xrnint("0", "[31B1FF6A]", "32766", "20")
    self.bid32_to_uint16_xrnint("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_xrnint("0", "[31B1FFCE]", "32768", "20")
    self.bid32_to_uint16_xrnint("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_xrnint("0", "[31B20032]", "32768", "20")
    self.bid32_to_uint16_xrnint("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_xrnint("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_xrnint("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_uint16_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_uint16_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint16_xrnint("0", "[3204FFF1]", "32766", "20")
    self.bid32_to_uint16_xrnint("0", "[3204FFFB]", "32768", "20")
    self.bid32_to_uint16_xrnint("0", "[32050005]", "32768", "20")
    self.bid32_to_uint16_xrnint("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_xrnint("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_xrnint("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_xrnint("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_xrnint("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_xrnint("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_xrnint("0", "65534.5", "65534", "20")
    self.bid32_to_uint16_xrnint("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint16_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_xrnint("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_xrnint("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint16_xrninta() {
    self.bid32_to_uint16_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint16_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint16_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint16_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint16_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint16_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_uint16_xrninta("0", "[31B1FF6A]", "32767", "20")
    self.bid32_to_uint16_xrninta("0", "[31B1FF9C]", "32767", "00")
    self.bid32_to_uint16_xrninta("0", "[31B1FFCE]", "32768", "20")
    self.bid32_to_uint16_xrninta("0", "[31B20000]", "32768", "00")
    self.bid32_to_uint16_xrninta("0", "[31B20032]", "32769", "20")
    self.bid32_to_uint16_xrninta("0", "[31B20064]", "32769", "00")
    self.bid32_to_uint16_xrninta("0", "[31E3FF9C]", "65535", "00")
    self.bid32_to_uint16_xrninta("0", "[31E3FFCE]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[31E40000]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[31E40032]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[31E40064]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_uint16_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_uint16_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint16_xrninta("0", "[3204FFF1]", "32767", "20")
    self.bid32_to_uint16_xrninta("0", "[3204FFFB]", "32768", "20")
    self.bid32_to_uint16_xrninta("0", "[32050005]", "32769", "20")
    self.bid32_to_uint16_xrninta("0", "[3209FFFB]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[320A0005]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint16_xrninta("0", "[32807FFF]", "32767", "00")
    self.bid32_to_uint16_xrninta("0", "[32808000]", "32768", "00")
    self.bid32_to_uint16_xrninta("0", "[32808001]", "32769", "00")
    self.bid32_to_uint16_xrninta("0", "[3280FFFF]", "65535", "00")
    self.bid32_to_uint16_xrninta("0", "[32810000]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[32810001]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint16_xrninta("0", "65534.5", "65535", "20")
    self.bid32_to_uint16_xrninta("0", "65535.5", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint16_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint16_xrninta("0", "[78000000]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[7c000000]", "32768", "01")
    self.bid32_to_uint16_xrninta("0", "[7e000000]", "32768", "01")
  }

  private func bid32_to_uint16_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt16(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt16(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_ceil() {
    self.bid32_to_uint32_ceil("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint32_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint32_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_uint32_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint32_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_ceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_ceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_ceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_ceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_ceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_ceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_ceil("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_ceil("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint32_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_ceil("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[86021840]", "0", "00")
    self.bid32_to_uint32_ceil("0", "[b4295201]", "2147483648", "01")
    self.bid32_to_uint32_ceil("0", "[86021840]", "0", "00")
    self.bid32_to_uint32_ceil("0", "[b4295201]", "2147483648", "01")
  }

  private func bid32_to_uint32_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_floor() {
    self.bid32_to_uint32_floor("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint32_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint32_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint32_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_uint32_floor("0", "[32000005]", "0", "00")
    self.bid32_to_uint32_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_uint32_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint32_floor("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_floor("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_floor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_floor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_floor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_floor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_floor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_floor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_floor("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_floor("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint32_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_floor("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_floor("0", "-9.51", "2147483648", "01")
  }

  private func bid32_to_uint32_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_int() {
    self.bid32_to_uint32_int("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint32_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint32_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint32_int("0", "[310003E7]", "0", "00")
    self.bid32_to_uint32_int("0", "[32000005]", "0", "00")
    self.bid32_to_uint32_int("0", "[3200000F]", "1", "00")
    self.bid32_to_uint32_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint32_int("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_int("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_int("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_int("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_int("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_int("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_int("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_int("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_int("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_int("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint32_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_int("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[ed053e9b]", "2147483648", "01")
    self.bid32_to_uint32_int("0", "[ed053e9b]", "2147483648", "01")
  }

  private func bid32_to_uint32_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_rnint() {
    self.bid32_to_uint32_rnint("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint32_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint32_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint32_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_uint32_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_uint32_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_uint32_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint32_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_rnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rnint("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_rnint("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint32_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_rnint("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[21fdc4a0]", "0", "00")
    self.bid32_to_uint32_rnint("0", "[b44ee7af]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[ebd7fb7f]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[21fdc4a0]", "0", "00")
    self.bid32_to_uint32_rnint("0", "[b44ee7af]", "2147483648", "01")
    self.bid32_to_uint32_rnint("0", "[ebd7fb7f]", "2147483648", "01")
  }

  private func bid32_to_uint32_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_rninta() {
    self.bid32_to_uint32_rninta("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint32_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint32_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_uint32_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint32_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_rninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_rninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_rninta("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_rninta("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint32_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_rninta("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[03686c39]", "0", "00")
    self.bid32_to_uint32_rninta("0", "[ebcdb7df]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[2f2d9792]", "0", "00")
    self.bid32_to_uint32_rninta("0", "[b4535b16]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[03686c39]", "0", "00")
    self.bid32_to_uint32_rninta("0", "[ebcdb7df]", "2147483648", "01")
    self.bid32_to_uint32_rninta("0", "[2f2d9792]", "0", "00")
    self.bid32_to_uint32_rninta("0", "[b4535b16]", "2147483648", "01")
  }

  private func bid32_to_uint32_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_xceil() {
    self.bid32_to_uint32_xceil("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint32_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint32_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint32_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_uint32_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_uint32_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_uint32_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint32_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_xceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xceil("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xceil("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_xceil("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint32_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_xceil("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[a3448255]", "0", "20")
    self.bid32_to_uint32_xceil("0", "[b44d64a5]", "2147483648", "01")
    self.bid32_to_uint32_xceil("0", "[a3448255]", "0", "20")
    self.bid32_to_uint32_xceil("0", "[b44d64a5]", "2147483648", "01")
  }

  private func bid32_to_uint32_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_xfloor() {
    self.bid32_to_uint32_xfloor("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint32_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint32_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint32_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_uint32_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_uint32_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_uint32_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint32_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xfloor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_xfloor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xfloor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xfloor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xfloor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xfloor("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xfloor("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_xfloor("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint32_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_xfloor("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_xfloor("0", "-9.51", "2147483648", "01")
  }

  private func bid32_to_uint32_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_xint() {
    self.bid32_to_uint32_xint("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint32_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint32_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint32_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_uint32_xint("0", "[32000005]", "0", "20")
    self.bid32_to_uint32_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_uint32_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint32_xint("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_xint("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_xint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xint("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_xint("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint32_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_xint("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[b41e4f57]", "2147483648", "01")
    self.bid32_to_uint32_xint("0", "[b41e4f57]", "2147483648", "01")
  }

  private func bid32_to_uint32_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_xrnint() {
    self.bid32_to_uint32_xrnint("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint32_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint32_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint32_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_uint32_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_uint32_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_uint32_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint32_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_xrnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrnint("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrnint("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_xrnint("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint32_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_xrnint("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[0b0b8608]", "0", "20")
    self.bid32_to_uint32_xrnint("0", "[2fe0399c]", "6", "20")
    self.bid32_to_uint32_xrnint("0", "[6c4608a8]", "8784", "20")
    self.bid32_to_uint32_xrnint("0", "[af769c48]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[b41cb2b5]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[0b0b8608]", "0", "20")
    self.bid32_to_uint32_xrnint("0", "[2fe0399c]", "6", "20")
    self.bid32_to_uint32_xrnint("0", "[6c4608a8]", "8784", "20")
    self.bid32_to_uint32_xrnint("0", "[af769c48]", "2147483648", "01")
    self.bid32_to_uint32_xrnint("0", "[b41cb2b5]", "2147483648", "01")
  }

  private func bid32_to_uint32_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint32_xrninta() {
    self.bid32_to_uint32_xrninta("0", "1.1E+90", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint32_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint32_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint32_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint32_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint32_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_uint32_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_uint32_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_uint32_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint32_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint32_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[3420C49C]", "2147484000", "00")
    self.bid32_to_uint32_xrninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint32_xrninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrninta("0", "[34418937]", "4294967000", "00")
    self.bid32_to_uint32_xrninta("0", "[344C4B40]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[349E8480]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint32_xrninta("0", "[37000005]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[37800002]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint32_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint32_xrninta("0", "[78000000]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[7c000000]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[7e000000]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "-9.51", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[22d51bfe]", "0", "20")
    self.bid32_to_uint32_xrninta("0", "[6c15d82c]", "98", "20")
    self.bid32_to_uint32_xrninta("0", "[320c8002]", "81920", "20")
    self.bid32_to_uint32_xrninta("0", "[af77ffdf]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[2f202101]", "0", "20")
    self.bid32_to_uint32_xrninta("0", "[ed0b7ef9]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[22d51bfe]", "0", "20")
    self.bid32_to_uint32_xrninta("0", "[6c15d82c]", "98", "20")
    self.bid32_to_uint32_xrninta("0", "[320c8002]", "81920", "20")
    self.bid32_to_uint32_xrninta("0", "[af77ffdf]", "2147483648", "01")
    self.bid32_to_uint32_xrninta("0", "[2f202101]", "0", "20")
    self.bid32_to_uint32_xrninta("0", "[ed0b7ef9]", "2147483648", "01")
  }

  private func bid32_to_uint32_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt32(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_ceil() {
    self.bid32_to_uint64_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint64_ceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_ceil("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint64_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_uint64_ceil("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint64_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_ceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_ceil("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_ceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_ceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_ceil("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint64_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_ceil("0", "[8165906a]", "0", "00")
    self.bid32_to_uint64_ceil("0", "[b9757a7f]", "9223372036854775808", "01")
    self.bid32_to_uint64_ceil("0", "[b72b88c4]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_floor() {
    self.bid32_to_uint64_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint64_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint64_floor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_floor("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint64_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_uint64_floor("0", "[32000005]", "0", "00")
    self.bid32_to_uint64_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_uint64_floor("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint64_floor("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_floor("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_floor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_floor("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_floor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_floor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_floor("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_floor("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_floor("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_floor("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint64_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_floor("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_floor("0", "[c2922102]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_int() {
    self.bid32_to_uint64_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint64_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint64_int("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_int("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint64_int("0", "[310003E7]", "0", "00")
    self.bid32_to_uint64_int("0", "[32000005]", "0", "00")
    self.bid32_to_uint64_int("0", "[3200000F]", "1", "00")
    self.bid32_to_uint64_int("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint64_int("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_int("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_int("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_int("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_int("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_int("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_int("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_int("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_int("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_int("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_int("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_int("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_int("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_int("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint64_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_int("0", "[b2195818]", "9223372036854775808", "01")
    self.bid32_to_uint64_int("0", "[b96c5e41]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_rnint() {
    self.bid32_to_uint64_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint64_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint64_rnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_rnint("0", "[30ADDA48]", "300", "00")
    self.bid32_to_uint64_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_uint64_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_uint64_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_uint64_rnint("0", "[32000BBD]", "300", "00")
    self.bid32_to_uint64_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_rnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_rnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_rnint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_rnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_rnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rnint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint64_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_rnint("0", "[00000004]", "0", "00")
    self.bid32_to_uint64_rnint("0", "[edebd600]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[b978931a]", "9223372036854775808", "01")
    self.bid32_to_uint64_rnint("0", "[ebc7ffff]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_rninta() {
    self.bid32_to_uint64_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint64_rninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_rninta("0", "[30ADDA48]", "301", "00")
    self.bid32_to_uint64_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_uint64_rninta("0", "[32000BBD]", "301", "00")
    self.bid32_to_uint64_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_rninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_rninta("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_rninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_rninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_rninta("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint64_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_rninta("0", "[ebc88f0e]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[1d457020]", "0", "00")
    self.bid32_to_uint64_rninta("0", "[b0d21615]", "9223372036854775808", "01")
    self.bid32_to_uint64_rninta("0", "[3000b2a1]", "0", "00")
    self.bid32_to_uint64_rninta("0", "[ee516e72]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_xceil() {
    self.bid32_to_uint64_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint64_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint64_xceil("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_xceil("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint64_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_uint64_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_uint64_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_uint64_xceil("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint64_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_xceil("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_xceil("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_xceil("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xceil("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xceil("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xceil("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint64_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_xceil("0", "[a3448255]", "0", "20")
    self.bid32_to_uint64_xceil("0", "[b7b3b050]", "9223372036854775808", "01")
    self.bid32_to_uint64_xceil("0", "[b9828b73]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_xfloor() {
    self.bid32_to_uint64_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint64_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint64_xfloor("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_xfloor("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint64_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_uint64_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_uint64_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_uint64_xfloor("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint64_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_xfloor("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_xfloor("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint64_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xfloor("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_xfloor("0", "[d514b4a1]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_xint() {
    self.bid32_to_uint64_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint64_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint64_xint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_xint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint64_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_uint64_xint("0", "[32000005]", "0", "20")
    self.bid32_to_uint64_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_uint64_xint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint64_xint("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_xint("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_xint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_xint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_xint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xint("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xint("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint64_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_xint("0", "[b8ea7bdb]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[b9881c6e]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[b8ea7bdb]", "9223372036854775808", "01")
    self.bid32_to_uint64_xint("0", "[b9881c6e]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_xrnint() {
    self.bid32_to_uint64_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint64_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint64_xrnint("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_xrnint("0", "[30ADDA48]", "300", "20")
    self.bid32_to_uint64_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_uint64_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_uint64_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_uint64_xrnint("0", "[32000BBD]", "300", "20")
    self.bid32_to_uint64_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_xrnint("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_xrnint("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint64_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_xrnint("0", "[867d69c8]", "0", "20")
    self.bid32_to_uint64_xrnint("0", "[b17b9175]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[30607ba3]", "63", "20")
    self.bid32_to_uint64_xrnint("0", "[31d26497]", "53997", "20")
    self.bid32_to_uint64_xrnint("0", "[b92f92aa]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrnint("0", "[af77e97d]", "9223372036854775808", "01")
  }

  private func bid32_to_uint64_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint64_xrninta() {
    self.bid32_to_uint64_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint64_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint64_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint64_xrninta("0", "[30ADC6C0]", "300", "00")
    self.bid32_to_uint64_xrninta("0", "[30ADDA48]", "301", "20")
    self.bid32_to_uint64_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_uint64_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_uint64_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_uint64_xrninta("0", "[32000BBD]", "301", "20")
    self.bid32_to_uint64_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint64_xrninta("0", "[33800003]", "300", "00")
    self.bid32_to_uint64_xrninta("0", "[343D0900]", "4000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[344C4B40]", "5000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[349E8480]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3635AFE5]", "35184370000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37000004]", "4000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37000005]", "5000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[371E8480]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[37800002]", "20000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[390F4240]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3916E360]", "15000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391C25C2]", "18446740000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[391E8480]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[392625A0]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[398F4240]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3A000002]", "2000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3B80000F]", "15000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3B800019]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3C000001]", "10000000000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[3C000002]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[3C800001]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint64_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[6E2CBCCC]", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[78000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[7c000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[7e000000]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "9.223372E+18", "9223372000000000000", "00")
    self.bid32_to_uint64_xrninta("0", "[12004784]", "0", "20")
    self.bid32_to_uint64_xrninta("0", "[b77efc23]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[b9688f1e]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[af2bfdd3]", "0", "20")
    self.bid32_to_uint64_xrninta("0", "[ebc2ed92]", "9223372036854775808", "01")
    self.bid32_to_uint64_xrninta("0", "[31bb3bd1]", "38819", "20")
    self.bid32_to_uint64_xrninta("0", "[30e41959]", "656", "20")
  }

  private func bid32_to_uint64_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt64(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_ceil() {
    self.bid32_to_uint8_ceil("0", "254.5", "255", "00")
    self.bid32_to_uint8_ceil("0", "255.5", "128", "01")
    self.bid32_to_uint8_ceil("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint8_ceil("0", "[30934D68]", "127", "00")
    self.bid32_to_uint8_ceil("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_ceil("0", "[30937478]", "128", "00")
    self.bid32_to_uint8_ceil("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_ceil("0", "[30939B88]", "129", "00")
    self.bid32_to_uint8_ceil("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_ceil("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_ceil("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[310003E7]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[32000005]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[3200000F]", "2", "00")
    self.bid32_to_uint8_ceil("0", "[320004F1]", "127", "00")
    self.bid32_to_uint8_ceil("0", "[320004FB]", "128", "00")
    self.bid32_to_uint8_ceil("0", "[32000505]", "129", "00")
    self.bid32_to_uint8_ceil("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_ceil("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_ceil("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_ceil("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_ceil("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint8_ceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_ceil("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_ceil("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_ceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_floor() {
    self.bid32_to_uint8_floor("0", "254.5", "254", "00")
    self.bid32_to_uint8_floor("0", "255.5", "255", "00")
    self.bid32_to_uint8_floor("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint8_floor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_floor("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint8_floor("0", "[30934D68]", "126", "00")
    self.bid32_to_uint8_floor("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_floor("0", "[30937478]", "127", "00")
    self.bid32_to_uint8_floor("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_floor("0", "[30939B88]", "128", "00")
    self.bid32_to_uint8_floor("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_floor("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_floor("0", "[30A6FC78]", "255", "00")
    self.bid32_to_uint8_floor("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_floor("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_floor("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_floor("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_floor("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_floor("0", "[310003E7]", "0", "00")
    self.bid32_to_uint8_floor("0", "[32000005]", "0", "00")
    self.bid32_to_uint8_floor("0", "[3200000F]", "1", "00")
    self.bid32_to_uint8_floor("0", "[320004F1]", "126", "00")
    self.bid32_to_uint8_floor("0", "[320004FB]", "127", "00")
    self.bid32_to_uint8_floor("0", "[32000505]", "128", "00")
    self.bid32_to_uint8_floor("0", "[320009FB]", "255", "00")
    self.bid32_to_uint8_floor("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_floor("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_floor("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_floor("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_floor("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_floor("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_floor("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_floor("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_floor("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_floor("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_floor("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint8_floor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_floor("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_floor("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_floor("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_floor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_int() {
    self.bid32_to_uint8_int("0", "254.5", "254", "00")
    self.bid32_to_uint8_int("0", "255.5", "255", "00")
    self.bid32_to_uint8_int("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint8_int("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_int("0", "[2F96E360]", "1", "00")
    self.bid32_to_uint8_int("0", "[30934D68]", "126", "00")
    self.bid32_to_uint8_int("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_int("0", "[30937478]", "127", "00")
    self.bid32_to_uint8_int("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_int("0", "[30939B88]", "128", "00")
    self.bid32_to_uint8_int("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_int("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_int("0", "[30A6FC78]", "255", "00")
    self.bid32_to_uint8_int("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_int("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_int("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_int("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_int("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_int("0", "[310003E7]", "0", "00")
    self.bid32_to_uint8_int("0", "[32000005]", "0", "00")
    self.bid32_to_uint8_int("0", "[3200000F]", "1", "00")
    self.bid32_to_uint8_int("0", "[320004F1]", "126", "00")
    self.bid32_to_uint8_int("0", "[320004FB]", "127", "00")
    self.bid32_to_uint8_int("0", "[32000505]", "128", "00")
    self.bid32_to_uint8_int("0", "[320009FB]", "255", "00")
    self.bid32_to_uint8_int("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_int("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_int("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_int("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_int("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_int("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_int("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_int("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_int("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_int("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_int("0", "[6BD86F70]", "0", "00")
    self.bid32_to_uint8_int("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_int("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_int("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_int("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_int(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_rnint() {
    self.bid32_to_uint8_rnint("0", "254.5", "254", "00")
    self.bid32_to_uint8_rnint("0", "255.5", "128", "01")
    self.bid32_to_uint8_rnint("0", "[2F4C4B40]", "0", "00")
    self.bid32_to_uint8_rnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_rnint("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint8_rnint("0", "[30934D68]", "126", "00")
    self.bid32_to_uint8_rnint("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_rnint("0", "[30937478]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[30939B88]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_rnint("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_rnint("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[310003E7]", "1", "00")
    self.bid32_to_uint8_rnint("0", "[32000005]", "0", "00")
    self.bid32_to_uint8_rnint("0", "[3200000F]", "2", "00")
    self.bid32_to_uint8_rnint("0", "[320004F1]", "126", "00")
    self.bid32_to_uint8_rnint("0", "[320004FB]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[32000505]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_rnint("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_rnint("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_rnint("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_rnint("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_rnint("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint8_rnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_rnint("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_rnint("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_rnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_rninta() {
    self.bid32_to_uint8_rninta("0", "254.5", "255", "00")
    self.bid32_to_uint8_rninta("0", "255.5", "128", "01")
    self.bid32_to_uint8_rninta("0", "[2F4C4B40]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[2F96E360]", "2", "00")
    self.bid32_to_uint8_rninta("0", "[30934D68]", "127", "00")
    self.bid32_to_uint8_rninta("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_rninta("0", "[30937478]", "128", "00")
    self.bid32_to_uint8_rninta("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_rninta("0", "[30939B88]", "129", "00")
    self.bid32_to_uint8_rninta("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_rninta("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_rninta("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[310003E7]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[32000005]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[3200000F]", "2", "00")
    self.bid32_to_uint8_rninta("0", "[320004F1]", "127", "00")
    self.bid32_to_uint8_rninta("0", "[320004FB]", "128", "00")
    self.bid32_to_uint8_rninta("0", "[32000505]", "129", "00")
    self.bid32_to_uint8_rninta("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_rninta("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_rninta("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_rninta("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_rninta("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[6BD86F70]", "1", "00")
    self.bid32_to_uint8_rninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_rninta("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_rninta("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_rninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_xceil() {
    self.bid32_to_uint8_xceil("0", "254.5", "255", "20")
    self.bid32_to_uint8_xceil("0", "255.5", "128", "01")
    self.bid32_to_uint8_xceil("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint8_xceil("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_xceil("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint8_xceil("0", "[30934D68]", "127", "20")
    self.bid32_to_uint8_xceil("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_xceil("0", "[30937478]", "128", "20")
    self.bid32_to_uint8_xceil("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_xceil("0", "[30939B88]", "129", "20")
    self.bid32_to_uint8_xceil("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_xceil("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_xceil("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[310003E7]", "1", "20")
    self.bid32_to_uint8_xceil("0", "[32000005]", "1", "20")
    self.bid32_to_uint8_xceil("0", "[3200000F]", "2", "20")
    self.bid32_to_uint8_xceil("0", "[320004F1]", "127", "20")
    self.bid32_to_uint8_xceil("0", "[320004FB]", "128", "20")
    self.bid32_to_uint8_xceil("0", "[32000505]", "129", "20")
    self.bid32_to_uint8_xceil("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_xceil("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_xceil("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_xceil("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_xceil("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_xceil("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint8_xceil("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_xceil("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_xceil("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_xceil(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .up, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_xfloor() {
    self.bid32_to_uint8_xfloor("0", "254.5", "254", "20")
    self.bid32_to_uint8_xfloor("0", "255.5", "255", "20")
    self.bid32_to_uint8_xfloor("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint8_xfloor("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_xfloor("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint8_xfloor("0", "[30934D68]", "126", "20")
    self.bid32_to_uint8_xfloor("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_xfloor("0", "[30937478]", "127", "20")
    self.bid32_to_uint8_xfloor("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_xfloor("0", "[30939B88]", "128", "20")
    self.bid32_to_uint8_xfloor("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_xfloor("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_xfloor("0", "[30A6FC78]", "255", "20")
    self.bid32_to_uint8_xfloor("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[310003E7]", "0", "20")
    self.bid32_to_uint8_xfloor("0", "[32000005]", "0", "20")
    self.bid32_to_uint8_xfloor("0", "[3200000F]", "1", "20")
    self.bid32_to_uint8_xfloor("0", "[320004F1]", "126", "20")
    self.bid32_to_uint8_xfloor("0", "[320004FB]", "127", "20")
    self.bid32_to_uint8_xfloor("0", "[32000505]", "128", "20")
    self.bid32_to_uint8_xfloor("0", "[320009FB]", "255", "20")
    self.bid32_to_uint8_xfloor("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_xfloor("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_xfloor("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_xfloor("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_xfloor("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_xfloor("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint8_xfloor("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_xfloor("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_xfloor("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_xfloor(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .down, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_xint() {
    self.bid32_to_uint8_xint("0", "254.5", "254", "20")
    self.bid32_to_uint8_xint("0", "255.5", "255", "20")
    self.bid32_to_uint8_xint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint8_xint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_xint("0", "[2F96E360]", "1", "20")
    self.bid32_to_uint8_xint("0", "[30934D68]", "126", "20")
    self.bid32_to_uint8_xint("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_xint("0", "[30937478]", "127", "20")
    self.bid32_to_uint8_xint("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_xint("0", "[30939B88]", "128", "20")
    self.bid32_to_uint8_xint("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_xint("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_xint("0", "[30A6FC78]", "255", "20")
    self.bid32_to_uint8_xint("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_xint("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_xint("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_xint("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_xint("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_xint("0", "[310003E7]", "0", "20")
    self.bid32_to_uint8_xint("0", "[32000005]", "0", "20")
    self.bid32_to_uint8_xint("0", "[3200000F]", "1", "20")
    self.bid32_to_uint8_xint("0", "[320004F1]", "126", "20")
    self.bid32_to_uint8_xint("0", "[320004FB]", "127", "20")
    self.bid32_to_uint8_xint("0", "[32000505]", "128", "20")
    self.bid32_to_uint8_xint("0", "[320009FB]", "255", "20")
    self.bid32_to_uint8_xint("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_xint("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_xint("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_xint("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_xint("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_xint("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_xint("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_xint("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_xint("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_xint("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_xint("0", "[6BD86F70]", "0", "20")
    self.bid32_to_uint8_xint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_xint("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_xint("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_xint("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_xint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .towardZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_xrnint() {
    self.bid32_to_uint8_xrnint("0", "254.5", "254", "20")
    self.bid32_to_uint8_xrnint("0", "255.5", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[2F4C4B40]", "0", "20")
    self.bid32_to_uint8_xrnint("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_xrnint("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint8_xrnint("0", "[30934D68]", "126", "20")
    self.bid32_to_uint8_xrnint("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_xrnint("0", "[30937478]", "128", "20")
    self.bid32_to_uint8_xrnint("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_xrnint("0", "[30939B88]", "128", "20")
    self.bid32_to_uint8_xrnint("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_xrnint("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_xrnint("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[310003E7]", "1", "20")
    self.bid32_to_uint8_xrnint("0", "[32000005]", "0", "20")
    self.bid32_to_uint8_xrnint("0", "[3200000F]", "2", "20")
    self.bid32_to_uint8_xrnint("0", "[320004F1]", "126", "20")
    self.bid32_to_uint8_xrnint("0", "[320004FB]", "128", "20")
    self.bid32_to_uint8_xrnint("0", "[32000505]", "128", "20")
    self.bid32_to_uint8_xrnint("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_xrnint("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_xrnint("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_xrnint("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_xrnint("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_xrnint("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint8_xrnint("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_xrnint("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_xrnint("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_xrnint(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .toNearestOrEven, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_to_uint8_xrninta() {
    self.bid32_to_uint8_xrninta("0", "254.5", "255", "20")
    self.bid32_to_uint8_xrninta("0", "255.5", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[2F4C4B40]", "1", "20")
    self.bid32_to_uint8_xrninta("0", "[2F8F4240]", "1", "00")
    self.bid32_to_uint8_xrninta("0", "[2F96E360]", "2", "20")
    self.bid32_to_uint8_xrninta("0", "[30934D68]", "127", "20")
    self.bid32_to_uint8_xrninta("0", "[309360F0]", "127", "00")
    self.bid32_to_uint8_xrninta("0", "[30937478]", "128", "20")
    self.bid32_to_uint8_xrninta("0", "[30938800]", "128", "00")
    self.bid32_to_uint8_xrninta("0", "[30939B88]", "129", "20")
    self.bid32_to_uint8_xrninta("0", "[3093AF10]", "129", "00")
    self.bid32_to_uint8_xrninta("0", "[30A6E8F0]", "255", "00")
    self.bid32_to_uint8_xrninta("0", "[30A6FC78]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[30A71000]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[30A72388]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[30A73710]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[30ADC6C0]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[30ADDA48]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[310003E7]", "1", "20")
    self.bid32_to_uint8_xrninta("0", "[32000005]", "1", "20")
    self.bid32_to_uint8_xrninta("0", "[3200000F]", "2", "20")
    self.bid32_to_uint8_xrninta("0", "[320004F1]", "127", "20")
    self.bid32_to_uint8_xrninta("0", "[320004FB]", "128", "20")
    self.bid32_to_uint8_xrninta("0", "[32000505]", "129", "20")
    self.bid32_to_uint8_xrninta("0", "[320009FB]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[32000A05]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[32000BBD]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[32800001]", "1", "00")
    self.bid32_to_uint8_xrninta("0", "[3280007F]", "127", "00")
    self.bid32_to_uint8_xrninta("0", "[32800080]", "128", "00")
    self.bid32_to_uint8_xrninta("0", "[32800081]", "129", "00")
    self.bid32_to_uint8_xrninta("0", "[328000FF]", "255", "00")
    self.bid32_to_uint8_xrninta("0", "[32800100]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[32800101]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[33800003]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[6BD86F70]", "1", "20")
    self.bid32_to_uint8_xrninta("0", "[6CB89680]", "0", "00")
    self.bid32_to_uint8_xrninta("0", "[78000000]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[7c000000]", "128", "01")
    self.bid32_to_uint8_xrninta("0", "[7e000000]", "128", "01")
  }

  private func bid32_to_uint8_xrninta(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseUInt8(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = ExceptionStatus()
    let result = UInt8(exactly: arg0, rounding: .toNearestOrAwayFromZero, status: &status)
    self.assertInt(result, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid_to_dpd32() {
    self.bid_to_dpd32("0", "[04000000]", "[00800000]", "00")
    self.bid_to_dpd32("0", "[0fff0000]", "[61f68c72]", "00")
    self.bid_to_dpd32("0", "[607fffff]", "[00300000]", "00")
    self.bid_to_dpd32("0", "[60989680]", "[00400000]", "00")
    self.bid_to_dpd32("0", "[69911d3e]", "[6cca4106]", "00")
    self.bid_to_dpd32("0", "[78000000]", "[78000000]", "00")
    self.bid_to_dpd32("0", "[7c000001]", "[7c000001]", "00")
    self.bid_to_dpd32("0", "[7c0be6ce]", "[7c0fe58e]", "00")
    self.bid_to_dpd32("0", "[7c0fffff]", "[7c000000]", "00")
    self.bid_to_dpd32("0", "[7c1f4240]", "[7c000000]", "00")
    self.bid_to_dpd32("0", "[f1644411]", "[f0bda0f7]", "00")
    self.bid_to_dpd32("0", "[fe000000]", "[fe000000]", "00")
    self.bid_to_dpd32("0", "[7c0f423f]", "[7c03fcff]", "00")
  }

  private func bid_to_dpd32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDenselyPackedDecimal32(_expected, file, line) else { return }

    let result = arg0.decimalEncoding
    self.assertInt(result, expected, file, line)
  }

  func test_bid_dpd_to_bid32() {
    self.bid_dpd_to_bid32("0", "[00000000]", "[00000000]", "00")
    self.bid_dpd_to_bid32("0", "[00000001]", "[00000001]", "00")
    self.bid_dpd_to_bid32("0", "[00000082]", "[00000066]", "00")
    self.bid_dpd_to_bid32("0", "[00000800]", "[000007d0]", "00")
    self.bid_dpd_to_bid32("0", "[00001357]", "[00001231]", "00")
    self.bid_dpd_to_bid32("0", "[00004103]", "[000027db]", "00")
    self.bid_dpd_to_bid32("0", "[00027848]", "[000f1b60]", "00")
    self.bid_dpd_to_bid32("0", "[00028e57]", "[0001e241]", "00")
    self.bid_dpd_to_bid32("0", "[00300000]", "[01800000]", "00")
    self.bid_dpd_to_bid32("0", "[00500000]", "[02800000]", "00")
    self.bid_dpd_to_bid32("0", "[00500001]", "[02800001]", "00")
    self.bid_dpd_to_bid32("0", "[0404d2e7]", "[0012d687]", "00")
    self.bid_dpd_to_bid32("0", "[08004000]", "[001eab90]", "00")
    self.bid_dpd_to_bid32("0", "1E-102", "[00000000]", "00")
    self.bid_dpd_to_bid32("0", "[22020000]", "[300186a0]", "00")
    self.bid_dpd_to_bid32("0", "[22040000]", "[30030d40]", "00")
    self.bid_dpd_to_bid32("0", "[22104000]", "[30802710]", "00")
    self.bid_dpd_to_bid32("0", "[22108000]", "[30804e20]", "00")
    self.bid_dpd_to_bid32("0", "[22200400]", "[310003e8]", "00")
    self.bid_dpd_to_bid32("0", "[22200800]", "[310007d0]", "00")
    self.bid_dpd_to_bid32("0", "[22300080]", "[31800064]", "00")
    self.bid_dpd_to_bid32("0", "[22300100]", "[318000c8]", "00")
    self.bid_dpd_to_bid32("0", "[22400010]", "[3200000a]", "00")
    self.bid_dpd_to_bid32("0", "[22400020]", "[32000014]", "00")
    self.bid_dpd_to_bid32("0", "[22500001]", "[32800001]", "00")
    self.bid_dpd_to_bid32("0", "[22500002]", "[32800002]", "00")
    self.bid_dpd_to_bid32("0", "[22500003]", "[32800003]", "00")
    self.bid_dpd_to_bid32("0", "[22500004]", "[32800004]", "00")
    self.bid_dpd_to_bid32("0", "[22500008]", "[32800008]", "00")
    self.bid_dpd_to_bid32("0", "[22500016]", "[32800010]", "00")
    self.bid_dpd_to_bid32("0", "[22500032]", "[32800020]", "00")
    self.bid_dpd_to_bid32("0", "[22500064]", "[32800040]", "00")
    self.bid_dpd_to_bid32("0", "[225000a8]", "[32800080]", "00")
    self.bid_dpd_to_bid32("0", "[22500156]", "[32800100]", "00")
    self.bid_dpd_to_bid32("0", "[22500292]", "[32800200]", "00")
    self.bid_dpd_to_bid32("0", "[22500424]", "[32800400]", "00")
    self.bid_dpd_to_bid32("0", "[22500848]", "[32800800]", "00")
    self.bid_dpd_to_bid32("0", "[2250107a]", "[32801000]", "00")
    self.bid_dpd_to_bid32("0", "[225020ba]", "[32802000]", "00")
    self.bid_dpd_to_bid32("0", "[225059ca]", "[32804000]", "00")
    self.bid_dpd_to_bid32("0", "[2250cbe8]", "[32808000]", "00")
    self.bid_dpd_to_bid32("0", "[225196b6]", "[32810000]", "00")
    self.bid_dpd_to_bid32("0", "[2252c472]", "[32820000]", "00")
    self.bid_dpd_to_bid32("0", "[225588c4]", "[32840000]", "00")
    self.bid_dpd_to_bid32("0", "[225a914e]", "[32880000]", "00")
    self.bid_dpd_to_bid32("0", "[25f00000]", "[2f8f4240]", "00")
    self.bid_dpd_to_bid32("0", "[265122f6]", "[32900000]", "00")
    self.bid_dpd_to_bid32("0", "[266ddfa2]", "[3319999a]", "00")
    self.bid_dpd_to_bid32("0", "[267708f7]", "[33947ae1]", "00")
    self.bid_dpd_to_bid32("0", "[29f00000]", "[2f9e8480]", "00")
    self.bid_dpd_to_bid32("0", "[2a51ecd2]", "[32a00000]", "00")
    self.bid_dpd_to_bid32("0", "[2a7d29d5]", "[33a8f5c3]", "00")
    self.bid_dpd_to_bid32("0", "[2e675643]", "[33333333]", "00")
    self.bid_dpd_to_bid32("0", "[32536984]", "[32c00000]", "00")
    self.bid_dpd_to_bid32("0", "[3a6e430e]", "[33666666]", "00")
    self.bid_dpd_to_bid32("0", "[43e00000]", "[5f000000]", "00")
    self.bid_dpd_to_bid32("0", "[43e00001]", "[5f000001]", "00")
    self.bid_dpd_to_bid32("0", "[43f00000]", "[5f800000]", "00")
    self.bid_dpd_to_bid32("0", "[43f00001]", "[5f800001]", "00")
    self.bid_dpd_to_bid32("0", "[47e4d2e7]", "[5f12d687]", "00")
    self.bid_dpd_to_bid32("0", "[47f00001]", "[5f8f4241]", "00")
    self.bid_dpd_to_bid32("0", "[47f4d2e7]", "[5f92d687]", "00")
    self.bid_dpd_to_bid32("0", "[6403fcff]", "[6018967f]", "00")
    self.bid_dpd_to_bid32("0", "[66c33a07]", "[658c3437]", "00")
    self.bid_dpd_to_bid32("0", "[6a573b08]", "[6ca00000]", "00")
    self.bid_dpd_to_bid32("0", "[77f209c5]", "[77eae409]", "00")
    self.bid_dpd_to_bid32("0", "[77f3fcfe]", "[77f8967e]", "00")
    self.bid_dpd_to_bid32("0", "[77f3fcff]", "[77f8967f]", "00")
    self.bid_dpd_to_bid32("0", "[78000000]", "[78000000]", "00")
    self.bid_dpd_to_bid32("0", "[7c000000]", "[7c000000]", "00")
    self.bid_dpd_to_bid32("0", "[7c000001]", "[7c000001]", "00")
    self.bid_dpd_to_bid32("0", "[7c00107a]", "[7c001000]", "00")
    self.bid_dpd_to_bid32("0", "[7e000000]", "[7e000000]", "00")
    self.bid_dpd_to_bid32("0", "[7e000001]", "[7e000001]", "00")
    self.bid_dpd_to_bid32("0", "[7e000156]", "[7e000100]", "00")
    self.bid_dpd_to_bid32("0", "[80000000]", "[80000000]", "00")
    self.bid_dpd_to_bid32("0", "[80000001]", "[80000001]", "00")
    self.bid_dpd_to_bid32("0", "[80000800]", "[800007d0]", "00")
    self.bid_dpd_to_bid32("0", "[80004103]", "[800027db]", "00")
    self.bid_dpd_to_bid32("0", "[80100100]", "[808000c8]", "00")
    self.bid_dpd_to_bid32("0", "[80200020]", "[81000014]", "00")
    self.bid_dpd_to_bid32("0", "[80300002]", "[81800002]", "00")
    self.bid_dpd_to_bid32("0", "[c3800000]", "[dc000000]", "00")
    self.bid_dpd_to_bid32("0", "[c7f00001]", "[df8f4241]", "00")
    self.bid_dpd_to_bid32("0", "[c7f4d2e7]", "[df92d687]", "00")
    self.bid_dpd_to_bid32("0", "[f218d263]", "[f420b31f]", "00")
    self.bid_dpd_to_bid32("0", "[f64034bb]", "[f4958de9]", "00")
    self.bid_dpd_to_bid32("0", "[f7f3fcfe]", "[f7f8967e]", "00")
    self.bid_dpd_to_bid32("0", "[f7f3fcff]", "[f7f8967f]", "00")
    self.bid_dpd_to_bid32("0", "[f8000000]", "[f8000000]", "00")
    self.bid_dpd_to_bid32("0", "[fc000000]", "[fc000000]", "00")
    self.bid_dpd_to_bid32("0", "[fc000001]", "[fc000001]", "00")
    self.bid_dpd_to_bid32("0", "[fc00107a]", "[fc001000]", "00")
    self.bid_dpd_to_bid32("0", "[fe000000]", "[fe000000]", "00")
    self.bid_dpd_to_bid32("0", "[fe000001]", "[fe000001]", "00")
    self.bid_dpd_to_bid32("0", "[fe000156]", "[fe000100]", "00")
  }

  private func bid_dpd_to_bid32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDenselyPackedDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    let result = Decimal32(decimalEncoding: arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid32_radix() {
    self.bid32_radix("0", "[00000000]", "10", "00")
    self.bid32_radix("0", "1.0", "10", "00")
  }

  private func bid32_radix(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }

    // Dummy use for 'arg0', so that the compiler does not complain.
    _ = arg0

    let result = Decimal32.radix
    self.assertInt(result, Int(expected), file, line)
  }

  func test_bid32_quantum() {
    self.bid32_quantum("0", "[35803039]", "[35800001]", "00")
    self.bid32_quantum("0", "[B5803039]", "[35800001]", "00")
    self.bid32_quantum("0", "[2D803039]", "[2D800001]", "00")
    self.bid32_quantum("0", "[AD803039]", "[2D800001]", "00")
    self.bid32_quantum("0", "[30003039]", "[30000001]", "00")
    self.bid32_quantum("0", "[B0003039]", "[30000001]", "00")
    self.bid32_quantum("0", "[3201E23A]", "[32000001]", "00")
    self.bid32_quantum("0", "[5F8F4240]", "[5F800001]", "00")
    self.bid32_quantum("0", "[DF8F4240]", "[5F800001]", "00")
    self.bid32_quantum("0", "[32800000]", "[32800001]", "00")
    self.bid32_quantum("0", "[B2800000]", "[32800001]", "00")
    self.bid32_quantum("0", "[00000001]", "[00000001]", "00")
    self.bid32_quantum("0", "[80000001]", "[00000001]", "00")
    self.bid32_quantum("0", "[00000000]", "[00000001]", "00")
    self.bid32_quantum("0", "[78000000]", "[78000000]", "00")
  }

  private func bid32_quantum(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }

    var status = ExceptionStatus()
    let result = arg0._quantum(status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }
}
