// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class IntelFromIntTests: XCTestCase, IntelMixin {

  func test_bid32_from_int32() {
    self.bid32_from_int32("0", "0", "[32800000]", "00")
    self.bid32_from_int32("0", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("0", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("0", "1", "[32800001]", "00")
    self.bid32_from_int32("0", "-1", "[b2800001]", "00")
    self.bid32_from_int32("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("0", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("0", "32767", "[32807fff]", "00")
    self.bid32_from_int32("0", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("0", "32768", "[32808000]", "00")
    self.bid32_from_int32("0", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("0", "32769", "[32808001]", "00")
    self.bid32_from_int32("0", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("0", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("0", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("0", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("0", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("0", "65536", "[32810000]", "00")
    self.bid32_from_int32("0", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("0", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("0", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("0", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("1", "0", "[32800000]", "00")
    self.bid32_from_int32("1", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("1", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("1", "1", "[32800001]", "00")
    self.bid32_from_int32("1", "-1", "[b2800001]", "00")
    self.bid32_from_int32("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int32("1", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("1", "32767", "[32807fff]", "00")
    self.bid32_from_int32("1", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("1", "32768", "[32808000]", "00")
    self.bid32_from_int32("1", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("1", "32769", "[32808001]", "00")
    self.bid32_from_int32("1", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("1", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("1", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("1", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("1", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("1", "65536", "[32810000]", "00")
    self.bid32_from_int32("1", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("1", "693127475", "[33e9c34a]", "20")
    self.bid32_from_int32("1", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("1", "999999980", "[6cf8967f]", "20")
    self.bid32_from_int32("2", "0", "[32800000]", "00")
    self.bid32_from_int32("2", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("2", "11111111", "[3310f448]", "20")
    self.bid32_from_int32("2", "1", "[32800001]", "00")
    self.bid32_from_int32("2", "-1", "[b2800001]", "00")
    self.bid32_from_int32("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("2", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int32("2", "32767", "[32807fff]", "00")
    self.bid32_from_int32("2", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("2", "32768", "[32808000]", "00")
    self.bid32_from_int32("2", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("2", "32769", "[32808001]", "00")
    self.bid32_from_int32("2", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("2", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("2", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("2", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("2", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("2", "65536", "[32810000]", "00")
    self.bid32_from_int32("2", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("2", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("2", "-937230081", "[ecef028c]", "20")
    self.bid32_from_int32("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("2", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("3", "0", "[32800000]", "00")
    self.bid32_from_int32("3", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("3", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("3", "1", "[32800001]", "00")
    self.bid32_from_int32("3", "-1", "[b2800001]", "00")
    self.bid32_from_int32("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int32("3", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int32("3", "32767", "[32807fff]", "00")
    self.bid32_from_int32("3", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("3", "32768", "[32808000]", "00")
    self.bid32_from_int32("3", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("3", "32769", "[32808001]", "00")
    self.bid32_from_int32("3", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("3", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("3", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("3", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("3", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("3", "65536", "[32810000]", "00")
    self.bid32_from_int32("3", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("3", "693127475", "[33e9c34a]", "20")
    self.bid32_from_int32("3", "-937230081", "[ecef028c]", "20")
    self.bid32_from_int32("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("3", "999999980", "[6cf8967f]", "20")
    self.bid32_from_int32("4", "0", "[32800000]", "00")
    self.bid32_from_int32("4", "100000000", "[338f4240]", "00")
    self.bid32_from_int32("4", "11111111", "[3310f447]", "20")
    self.bid32_from_int32("4", "1", "[32800001]", "00")
    self.bid32_from_int32("4", "-1", "[b2800001]", "00")
    self.bid32_from_int32("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int32("4", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int32("4", "32767", "[32807fff]", "00")
    self.bid32_from_int32("4", "-32767", "[b2807fff]", "00")
    self.bid32_from_int32("4", "32768", "[32808000]", "00")
    self.bid32_from_int32("4", "-32768", "[b2808000]", "00")
    self.bid32_from_int32("4", "32769", "[32808001]", "00")
    self.bid32_from_int32("4", "-32769", "[b2808001]", "00")
    self.bid32_from_int32("4", "65534", "[3280fffe]", "00")
    self.bid32_from_int32("4", "-65534", "[b280fffe]", "00")
    self.bid32_from_int32("4", "65535", "[3280ffff]", "00")
    self.bid32_from_int32("4", "-65535", "[b280ffff]", "00")
    self.bid32_from_int32("4", "65536", "[32810000]", "00")
    self.bid32_from_int32("4", "-65536", "[b2810000]", "00")
    self.bid32_from_int32("4", "693127475", "[33e9c34b]", "20")
    self.bid32_from_int32("4", "-937230081", "[ecef028d]", "20")
    self.bid32_from_int32("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int32("4", "999999980", "[340f4240]", "20")
    self.bid32_from_int32("0", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("1", "999999950", "[6cf8967f]", "20")
    self.bid32_from_int32("2", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("3", "999999950", "[6cf8967f]", "20")
    self.bid32_from_int32("4", "999999950", "[340f4240]", "20")
    self.bid32_from_int32("0", "-999999950", "[b40f4240]", "20")
    self.bid32_from_int32("1", "-999999950", "[b40f4240]", "20")
    self.bid32_from_int32("2", "-999999950", "[ecf8967f]", "20")
    self.bid32_from_int32("3", "-999999950", "[ecf8967f]", "20")
    self.bid32_from_int32("4", "-999999950", "[b40f4240]", "20")
  }

  private func bid32_from_int32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_int64() {
    self.bid32_from_int64("0", "0", "[32800000]", "00")
    self.bid32_from_int64("0", "10000000000000000", "[378f4240]", "00")
    self.bid32_from_int64("0", "1000000000000000", "[370f4240]", "00")
    self.bid32_from_int64("0", "100000000000000", "[368f4240]", "00")
    self.bid32_from_int64("0", "10000000000000", "[360f4240]", "00")
    self.bid32_from_int64("0", "1000000000000", "[358f4240]", "00")
    self.bid32_from_int64("0", "100000000000", "[350f4240]", "00")
    self.bid32_from_int64("0", "10000000000", "[348f4240]", "00")
    self.bid32_from_int64("0", "100000000", "[338f4240]", "00")
    self.bid32_from_int64("0", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("0", "1", "[32800001]", "00")
    self.bid32_from_int64("0", "-134217729", "[b3947ae1]", "20")
    self.bid32_from_int64("0", "-17592722915393", "[b61ad828]", "20")
    self.bid32_from_int64("0", "-1", "[b2800001]", "00")
    self.bid32_from_int64("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("0", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("0", "-22523495699198977", "[b7a25e3e]", "20")
    self.bid32_from_int64("0", "32767", "[32807fff]", "00")
    self.bid32_from_int64("0", "-32767", "[b2807fff]", "00")
    self.bid32_from_int64("0", "32768", "[32808000]", "00")
    self.bid32_from_int64("0", "-32768", "[b2808000]", "00")
    self.bid32_from_int64("0", "32769", "[32808001]", "00")
    self.bid32_from_int64("0", "-32769", "[b2808001]", "00")
    self.bid32_from_int64("0", "34368127232", "[34b4710d]", "20")
    self.bid32_from_int64("0", "362540080113918042", "[383751b9]", "20")
    self.bid32_from_int64("0", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("0", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("0", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("0", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("0", "-4398205899137", "[b5c31c7e]", "20")
    self.bid32_from_int64("0", "-4503599628435553", "[b744b830]", "20")
    self.bid32_from_int64("0", "-493149287878913", "[b6cb3fa5]", "20")
    self.bid32_from_int64("0", "-549755814017", "[b553e2d6]", "20")
    self.bid32_from_int64("0", "65534", "[3280fffe]", "00")
    self.bid32_from_int64("0", "-65534", "[b280fffe]", "00")
    self.bid32_from_int64("0", "65535", "[3280ffff]", "00")
    self.bid32_from_int64("0", "-65535", "[b280ffff]", "00")
    self.bid32_from_int64("0", "65536", "[32810000]", "00")
    self.bid32_from_int64("0", "-65536", "[b2810000]", "00")
    self.bid32_from_int64("0", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("0", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("0", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("0", "-9223372036854775807", "[ee2cbccc]", "20")
    self.bid32_from_int64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("1", "0", "[32800000]", "00")
    self.bid32_from_int64("1", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("1", "1", "[32800001]", "00")
    self.bid32_from_int64("1", "-1", "[b2800001]", "00")
    self.bid32_from_int64("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int64("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_int64("1", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("1", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("1", "-4294967295", "[b4418938]", "20")
    self.bid32_from_int64("1", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("1", "-4294967297", "[b4418938]", "20")
    self.bid32_from_int64("1", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("1", "-9223372036854775806", "[ee2cbccd]", "20")
    self.bid32_from_int64("1", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("2", "0", "[32800000]", "00")
    self.bid32_from_int64("2", "11111111", "[3310f448]", "20")
    self.bid32_from_int64("2", "1", "[32800001]", "00")
    self.bid32_from_int64("2", "-1", "[b2800001]", "00")
    self.bid32_from_int64("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("2", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int64("2", "4294967295", "[34418938]", "20")
    self.bid32_from_int64("2", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("2", "4294967297", "[34418938]", "20")
    self.bid32_from_int64("2", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("2", "9223372036854775806", "[6e2cbccd]", "20")
    self.bid32_from_int64("2", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("2", "9223372036854775807", "[6e2cbccd]", "20")
    self.bid32_from_int64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("3", "0", "[32800000]", "00")
    self.bid32_from_int64("3", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("3", "1", "[32800001]", "00")
    self.bid32_from_int64("3", "-1", "[b2800001]", "00")
    self.bid32_from_int64("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_int64("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_int64("3", "-2147483648", "[b420c49b]", "20")
    self.bid32_from_int64("3", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("3", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("3", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("3", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("3", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("3", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("3", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("4", "0", "[32800000]", "00")
    self.bid32_from_int64("4", "11111111", "[3310f447]", "20")
    self.bid32_from_int64("4", "1", "[32800001]", "00")
    self.bid32_from_int64("4", "-1", "[b2800001]", "00")
    self.bid32_from_int64("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_int64("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_int64("4", "-2147483648", "[b420c49c]", "20")
    self.bid32_from_int64("4", "4294967295", "[34418937]", "20")
    self.bid32_from_int64("4", "-4294967295", "[b4418937]", "20")
    self.bid32_from_int64("4", "4294967297", "[34418937]", "20")
    self.bid32_from_int64("4", "-4294967297", "[b4418937]", "20")
    self.bid32_from_int64("4", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_int64("4", "-9223372036854775806", "[ee2cbccc]", "20")
    self.bid32_from_int64("4", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_int64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("0", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("0", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("2", "10000001", "[330f4241]", "20")
    self.bid32_from_int64("2", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("4", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("4", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("3", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("3", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_int64("1", "10000001", "[330f4240]", "20")
    self.bid32_from_int64("1", "10000000", "[330f4240]", "00")
    self.bid32_from_int64("1", "9999999", "[6cb8967f]", "00")
  }

  private func bid32_from_int64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_uint32() {
    self.bid32_from_uint32("0", "0", "[32800000]", "00")
    self.bid32_from_uint32("0", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("0", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("0", "1", "[32800001]", "00")
    self.bid32_from_uint32("0", "-1", "[34418937]", "20")
    self.bid32_from_uint32("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("0", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("0", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("0", "32768", "[32808000]", "00")
    self.bid32_from_uint32("0", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("0", "32769", "[32808001]", "00")
    self.bid32_from_uint32("0", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("0", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("0", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("0", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("0", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("0", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("0", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("0", "65536", "[32810000]", "00")
    self.bid32_from_uint32("0", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("0", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("0", "999999980", "[340f4240]", "20")
    self.bid32_from_uint32("1", "0", "[32800000]", "00")
    self.bid32_from_uint32("1", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("1", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("1", "1", "[32800001]", "00")
    self.bid32_from_uint32("1", "-1", "[34418937]", "20")
    self.bid32_from_uint32("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint32("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint32("1", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("1", "-32767", "[34418916]", "20")
    self.bid32_from_uint32("1", "32768", "[32808000]", "00")
    self.bid32_from_uint32("1", "-32768", "[34418916]", "20")
    self.bid32_from_uint32("1", "32769", "[32808001]", "00")
    self.bid32_from_uint32("1", "-32769", "[34418916]", "20")
    self.bid32_from_uint32("1", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("1", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("1", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("1", "-65534", "[344188f5]", "20")
    self.bid32_from_uint32("1", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("1", "-65535", "[344188f5]", "20")
    self.bid32_from_uint32("1", "65536", "[32810000]", "00")
    self.bid32_from_uint32("1", "-65536", "[344188f5]", "20")
    self.bid32_from_uint32("1", "986328055", "[6cf68070]", "20")
    self.bid32_from_uint32("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("1", "999999980", "[6cf8967f]", "20")
    self.bid32_from_uint32("2", "0", "[32800000]", "00")
    self.bid32_from_uint32("2", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("2", "11111111", "[3310f448]", "20")
    self.bid32_from_uint32("2", "1", "[32800001]", "00")
    self.bid32_from_uint32("2", "-1", "[34418938]", "20")
    self.bid32_from_uint32("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("2", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("2", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("2", "32768", "[32808000]", "00")
    self.bid32_from_uint32("2", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("2", "32769", "[32808001]", "00")
    self.bid32_from_uint32("2", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("2", "4294967295", "[34418938]", "20")
    self.bid32_from_uint32("2", "467012619", "[33c742af]", "20")
    self.bid32_from_uint32("2", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("2", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("2", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("2", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("2", "65536", "[32810000]", "00")
    self.bid32_from_uint32("2", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("2", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("2", "999999980", "[340f4240]", "20")
    self.bid32_from_uint32("3", "0", "[32800000]", "00")
    self.bid32_from_uint32("3", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("3", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("3", "1", "[32800001]", "00")
    self.bid32_from_uint32("3", "-1", "[34418937]", "20")
    self.bid32_from_uint32("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint32("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint32("3", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("3", "-32767", "[34418916]", "20")
    self.bid32_from_uint32("3", "32768", "[32808000]", "00")
    self.bid32_from_uint32("3", "-32768", "[34418916]", "20")
    self.bid32_from_uint32("3", "32769", "[32808001]", "00")
    self.bid32_from_uint32("3", "-32769", "[34418916]", "20")
    self.bid32_from_uint32("3", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("3", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("3", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("3", "-65534", "[344188f5]", "20")
    self.bid32_from_uint32("3", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("3", "-65535", "[344188f5]", "20")
    self.bid32_from_uint32("3", "65536", "[32810000]", "00")
    self.bid32_from_uint32("3", "-65536", "[344188f5]", "20")
    self.bid32_from_uint32("3", "986328055", "[6cf68070]", "20")
    self.bid32_from_uint32("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("3", "999999980", "[6cf8967f]", "20")
    self.bid32_from_uint32("4", "0", "[32800000]", "00")
    self.bid32_from_uint32("4", "100000000", "[338f4240]", "00")
    self.bid32_from_uint32("4", "11111111", "[3310f447]", "20")
    self.bid32_from_uint32("4", "1", "[32800001]", "00")
    self.bid32_from_uint32("4", "-1", "[34418937]", "20")
    self.bid32_from_uint32("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint32("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint32("4", "32767", "[32807fff]", "00")
    self.bid32_from_uint32("4", "-32767", "[34418917]", "20")
    self.bid32_from_uint32("4", "32768", "[32808000]", "00")
    self.bid32_from_uint32("4", "-32768", "[34418917]", "20")
    self.bid32_from_uint32("4", "32769", "[32808001]", "00")
    self.bid32_from_uint32("4", "-32769", "[34418917]", "20")
    self.bid32_from_uint32("4", "4294967295", "[34418937]", "20")
    self.bid32_from_uint32("4", "467012619", "[33c742ae]", "20")
    self.bid32_from_uint32("4", "65534", "[3280fffe]", "00")
    self.bid32_from_uint32("4", "-65534", "[344188f6]", "20")
    self.bid32_from_uint32("4", "65535", "[3280ffff]", "00")
    self.bid32_from_uint32("4", "-65535", "[344188f6]", "20")
    self.bid32_from_uint32("4", "65536", "[32810000]", "00")
    self.bid32_from_uint32("4", "-65536", "[344188f6]", "20")
    self.bid32_from_uint32("4", "986328055", "[6cf68071]", "20")
    self.bid32_from_uint32("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint32("4", "999999980", "[340f4240]", "20")
  }

  private func bid32_from_uint32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_from_uint64() {
    self.bid32_from_uint64("0", "0", "[32800000]", "00")
    self.bid32_from_uint64("0", "10000000000000000", "[378f4240]", "00")
    self.bid32_from_uint64("0", "1000000000000000", "[370f4240]", "00")
    self.bid32_from_uint64("0", "100000000000000", "[368f4240]", "00")
    self.bid32_from_uint64("0", "10000000000000", "[360f4240]", "00")
    self.bid32_from_uint64("0", "1000000000000", "[358f4240]", "00")
    self.bid32_from_uint64("0", "100000000000", "[350f4240]", "00")
    self.bid32_from_uint64("0", "10000000000", "[348f4240]", "00")
    self.bid32_from_uint64("0", "100000000", "[338f4240]", "00")
    self.bid32_from_uint64("0", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("0", "1125917090906112", "[37112e1d]", "20")
    self.bid32_from_uint64("0", "1", "[32800001]", "00")
    self.bid32_from_uint64("0", "-1", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "14285512277852680", "[3795cc47]", "20")
    self.bid32_from_uint64("0", "167505177871812998", "[38198f2c]", "20")
    self.bid32_from_uint64("0", "17179869184", "[349a36e3]", "20")
    self.bid32_from_uint64("0", "17592186044416", "[361ad7f3]", "20")
    self.bid32_from_uint64("0", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744073709551614", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("0", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("0", "2203855273985", "[35a1a0cf]", "20")
    self.bid32_from_uint64("0", "32767", "[32807fff]", "00")
    self.bid32_from_uint64("0", "-32767", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "32768", "[32808000]", "00")
    self.bid32_from_uint64("0", "-32768", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "32769", "[32808001]", "00")
    self.bid32_from_uint64("0", "-32769", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("0", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("0", "566935687204", "[355681ed]", "20")
    self.bid32_from_uint64("0", "586045133422592", "[36d96c63]", "20")
    self.bid32_from_uint64("0", "65534", "[3280fffe]", "00")
    self.bid32_from_uint64("0", "-65534", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "65535", "[3280ffff]", "00")
    self.bid32_from_uint64("0", "-65535", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "65536", "[32810000]", "00")
    self.bid32_from_uint64("0", "-65536", "[391c25c2]", "20")
    self.bid32_from_uint64("0", "805308424", "[33fae15c]", "20")
    self.bid32_from_uint64("0", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775808", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775808", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "-9223372036854775809", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775809", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("0", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("1", "0", "[32800000]", "00")
    self.bid32_from_uint64("1", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("1", "1", "[32800001]", "00")
    self.bid32_from_uint64("1", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("1", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint64("1", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint64("1", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("1", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("1", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("1", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("2", "0", "[32800000]", "00")
    self.bid32_from_uint64("2", "11111111", "[3310f448]", "20")
    self.bid32_from_uint64("2", "1", "[32800001]", "00")
    self.bid32_from_uint64("2", "18446744069414584319", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744069414584321", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744071562067968", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "18446744073709551615", "[391c25c3]", "20")
    self.bid32_from_uint64("2", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("2", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("2", "4294967295", "[34418938]", "20")
    self.bid32_from_uint64("2", "4294967297", "[34418938]", "20")
    self.bid32_from_uint64("2", "9223372036854775806", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9223372036854775807", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9223372036854775810", "[6e2cbccd]", "20")
    self.bid32_from_uint64("2", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("3", "0", "[32800000]", "00")
    self.bid32_from_uint64("3", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("3", "1", "[32800001]", "00")
    self.bid32_from_uint64("3", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("3", "2147483647", "[3420c49b]", "20")
    self.bid32_from_uint64("3", "2147483648", "[3420c49b]", "20")
    self.bid32_from_uint64("3", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("3", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("3", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("3", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("4", "0", "[32800000]", "00")
    self.bid32_from_uint64("4", "11111111", "[3310f447]", "20")
    self.bid32_from_uint64("4", "1", "[32800001]", "00")
    self.bid32_from_uint64("4", "18446744069414584319", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744069414584321", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744071562067968", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "18446744073709551615", "[391c25c2]", "20")
    self.bid32_from_uint64("4", "2147483647", "[3420c49c]", "20")
    self.bid32_from_uint64("4", "2147483648", "[3420c49c]", "20")
    self.bid32_from_uint64("4", "4294967295", "[34418937]", "20")
    self.bid32_from_uint64("4", "4294967297", "[34418937]", "20")
    self.bid32_from_uint64("4", "9223372036854775806", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9223372036854775807", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9223372036854775810", "[6e2cbccc]", "20")
    self.bid32_from_uint64("4", "9999999", "[6cb8967f]", "00")
    self.bid32_from_uint64("2", "9999999325122695203", "[390f4240]", "20")
    self.bid32_from_uint64("0", "9999999999978258726", "[390f4240]", "20")
    self.bid32_from_uint64("1", "9999999999978258726", "[6e38967f]", "20")
  }

  private func bid32_from_uint64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_from_int32() {
    self.bid64_from_int32("0", "1151048260", "[31c00000449b9a44]", "00")
    self.bid64_from_int32("0", "1238620169", "[31c0000049d3d809]", "00")
    self.bid64_from_int32("0", "1300695084", "[31c000004d87082c]", "00")
    self.bid64_from_int32("0", "-1321821308", "[b1c000004ec9647c]", "00")
    self.bid64_from_int32("0", "-1409558545", "[b1c0000054042811]", "00")
    self.bid64_from_int32("0", "-1411393610", "[b1c000005420284a]", "00")
    self.bid64_from_int32("0", "-1558551822", "[b1c000005ce59d0e]", "00")
    self.bid64_from_int32("0", "-1680014258", "[b1c000006422fbb2]", "00")
    self.bid64_from_int32("0", "1850397233", "[31c000006e4ad231]", "00")
    self.bid64_from_int32("0", "1961604583", "[31c0000074ebb5e7]", "00")
    self.bid64_from_int32("0", "1965388277", "[31c00000752571f5]", "00")
    self.bid64_from_int32("0", "1983979873", "[31c0000076412161]", "00")
    self.bid64_from_int32("0", "2042218777", "[31c0000079b9c919]", "00")
    self.bid64_from_int32("0", "-2132132449", "[b1c000007f15c261]", "00")
    self.bid64_from_int32("0", "-647085063", "[b1c000002691bc07]", "00")
    self.bid64_from_int32("0", "665889169", "[31c0000027b0a991]", "00")
    self.bid64_from_int32("0", "753240669", "[31c000002ce58a5d]", "00")
    self.bid64_from_int32("0", "-765857262", "[b1c000002da60dee]", "00")
    self.bid64_from_int32("0", "-768244481", "[b1c000002dca7b01]", "00")
    self.bid64_from_int32("0", "988813101", "[31c000003af0172d]", "00")
  }

  private func bid64_from_int32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_from_int64() {
    self.bid64_from_int64("0", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("0", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("0", "-17891329", "[b1c0000001110001]", "00")
    self.bid64_from_int64("0", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("0", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("0", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("0", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("0", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("0", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("0", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("0", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("0", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("0", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("0", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("0", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("0", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("0", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("0", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("0", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("0", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("0", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("0", "9781575579355265", "[6c72c04a89c04881]", "00")
    self.bid64_from_int64("1", "1139264871891773575", "[32240c27c5fe833d]", "20")
    self.bid64_from_int64("1", "-1750062212783916257", "[b22637ac1c871f2d]", "20")
    self.bid64_from_int64("1", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("1", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("1", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("1", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("1", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("1", "-5681820659447707127", "[b2342f95f615779c]", "20")
    self.bid64_from_int64("1", "589782372181576380", "[3214f40a17e2fed3]", "20")
    self.bid64_from_int64("1", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("1", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("1", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("1", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("1", "6987444851531894805", "[3238d30b48436076]", "20")
    self.bid64_from_int64("1", "-7058028164498851412", "[b239133d3d8f45a4]", "20")
    self.bid64_from_int64("1", "-791485443906179333", "[b21c1e84a74a0922]", "20")
    self.bid64_from_int64("1", "-7999593679867525011", "[b23c6b968ba2ce86]", "20")
    self.bid64_from_int64("1", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("1", "8840994672450821792", "[323f68d67ae99d05]", "20")
    self.bid64_from_int64("1", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("2", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("2", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("2", "2097835747362605220", "[322773f87284c72e]", "20")
    self.bid64_from_int64("2", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("2", "-3699397591305768705", "[b22d24951f500e28]", "20")
    self.bid64_from_int64("2", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("2", "5456652339267465168", "[323362cbe058478a]", "20")
    self.bid64_from_int64("2", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("2", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("2", "-6247827353969653838", "[b236325daa0d23f5]", "20")
    self.bid64_from_int64("2", "-6251581962144061921", "[b23635c7da23493d]", "20")
    self.bid64_from_int64("2", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("2", "63716561664156733", "[31f6a2fcce6e1d3a]", "20")
    self.bid64_from_int64("2", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("2", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("2", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("2", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("2", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("2", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("2", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("3", "1139264871891773575", "[32240c27c5fe833d]", "20")
    self.bid64_from_int64("3", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("3", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("3", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("3", "-3699397591305768705", "[b22d24951f500e28]", "20")
    self.bid64_from_int64("3", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("3", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("3", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("3", "589782372181576380", "[3214f40a17e2fed3]", "20")
    self.bid64_from_int64("3", "-6247827353969653838", "[b236325daa0d23f5]", "20")
    self.bid64_from_int64("3", "-6251581962144061921", "[b23635c7da23493d]", "20")
    self.bid64_from_int64("3", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("3", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("3", "6987444851531894805", "[3238d30b48436076]", "20")
    self.bid64_from_int64("3", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("3", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("3", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("3", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("3", "8840994672450821792", "[323f68d67ae99d05]", "20")
    self.bid64_from_int64("3", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("4", "1139264871891773575", "[32240c27c5fe833e]", "20")
    self.bid64_from_int64("4", "-1750062212783916257", "[b22637ac1c871f2c]", "20")
    self.bid64_from_int64("4", "2097835747362605220", "[322773f87284c72d]", "20")
    self.bid64_from_int64("4", "239600704763147600", "[32088327dcf41274]", "00")
    self.bid64_from_int64("4", "-3699397591305768705", "[b22d24951f500e29]", "20")
    self.bid64_from_int64("4", "-4021596677842024000", "[b22e499ef169a468]", "00")
    self.bid64_from_int64("4", "5456652339267465168", "[323362cbe0584789]", "20")
    self.bid64_from_int64("4", "-5681820659447707127", "[b2342f95f615779b]", "20")
    self.bid64_from_int64("4", "589782372181576380", "[3214f40a17e2fed4]", "20")
    self.bid64_from_int64("4", "-6247827353969653838", "[b236325daa0d23f6]", "20")
    self.bid64_from_int64("4", "-6251581962144061921", "[b23635c7da23493e]", "20")
    self.bid64_from_int64("4", "-6277401661671197000", "[b2364d437828071d]", "00")
    self.bid64_from_int64("4", "63716561664156733", "[31f6a2fcce6e1d39]", "20")
    self.bid64_from_int64("4", "6987444851531894805", "[3238d30b48436077]", "20")
    self.bid64_from_int64("4", "-7058028164498851412", "[b239133d3d8f45a3]", "20")
    self.bid64_from_int64("4", "-791485443906179333", "[b21c1e84a74a0921]", "20")
    self.bid64_from_int64("4", "-7999593679867525011", "[b23c6b968ba2ce85]", "20")
    self.bid64_from_int64("4", "875842350099016200", "[321f1dbd6191a6d2]", "00")
    self.bid64_from_int64("4", "8840994672450821792", "[323f68d67ae99d06]", "20")
    self.bid64_from_int64("4", "931846679491469800", "[6c811b189f29838a]", "00")
    self.bid64_from_int64("0", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("0", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("0", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("0", "-99999999999999995", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("1", "999999999999999999", "[6c8386f26fc0ffff]", "20")
    self.bid64_from_int64("1", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_int64("1", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("1", "-99999999999999995", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("2", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("2", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("2", "-99999999999999999", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("2", "-99999999999999995", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "999999999999999999", "[6c8386f26fc0ffff]", "20")
    self.bid64_from_int64("3", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "-99999999999999999", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("3", "-99999999999999995", "[ec7b86f26fc0ffff]", "20")
    self.bid64_from_int64("4", "999999999999999999", "[32238d7ea4c68000]", "20")
    self.bid64_from_int64("4", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_int64("4", "-99999999999999999", "[b2038d7ea4c68000]", "20")
    self.bid64_from_int64("4", "-99999999999999995", "[b2038d7ea4c68000]", "20")
  }

  private func bid64_from_int64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_from_uint32() {
    self.bid64_from_uint32("0", "1043759789", "[31c000003e3682ad]", "00")
    self.bid64_from_uint32("0", "1358431605", "[31c0000050f80575]", "00")
    self.bid64_from_uint32("0", "1444948445", "[31c00000562029dd]", "00")
    self.bid64_from_uint32("0", "1547363995", "[31c000005c3ae69b]", "00")
    self.bid64_from_uint32("0", "1589394791", "[31c000005ebc3d67]", "00")
    self.bid64_from_uint32("0", "2145346476", "[31c000007fdf63ac]", "00")
    self.bid64_from_uint32("0", "2157129534", "[31c0000080932f3e]", "00")
    self.bid64_from_uint32("0", "2209767582", "[31c0000083b6609e]", "00")
    self.bid64_from_uint32("0", "2231149582", "[31c0000084fca40e]", "00")
    self.bid64_from_uint32("0", "2333504895", "[31c000008b16757f]", "00")
    self.bid64_from_uint32("0", "3016223950", "[31c00000b3c7ecce]", "00")
    self.bid64_from_uint32("0", "3285489315", "[31c00000c3d496a3]", "00")
    self.bid64_from_uint32("0", "3481845618", "[31c00000cf88bf72]", "00")
    self.bid64_from_uint32("0", "3543999599", "[31c00000d33d246f]", "00")
    self.bid64_from_uint32("0", "3773691030", "[31c00000e0edf496]", "00")
    self.bid64_from_uint32("0", "546176994", "[31c00000208dffe2]", "00")
    self.bid64_from_uint32("0", "637658463", "[31c000002601e55f]", "00")
    self.bid64_from_uint32("0", "651472848", "[31c0000026d4afd0]", "00")
    self.bid64_from_uint32("0", "694329569", "[31c000002962a0e1]", "00")
    self.bid64_from_uint32("0", "876367805", "[31c00000343c4fbd]", "00")
  }

  private func bid64_from_uint32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseUInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }

    let result = Decimal64(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid64_from_uint64() {
    self.bid64_from_uint64("0", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("0", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("0", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("0", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("0", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("0", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("0", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("0", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("0", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("0", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("0", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("0", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("0", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("0", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("0", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("0", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("0", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("0", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("0", "9007199254740994", "[6c70000000000002]", "00")
    self.bid64_from_uint64("0", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("0", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("1", "10789262222447919566", "[3243d54716373bb7]", "20")
    self.bid64_from_uint64("1", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("1", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("1", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("1", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("1", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("1", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("1", "3019588970190590771", "[322aba4cd7ef96fe]", "20")
    self.bid64_from_uint64("1", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("1", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("1", "4399244053147070808", "[322fa116d3116dbe]", "20")
    self.bid64_from_uint64("1", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("1", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("1", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("1", "6204429330282677880", "[32360ae54643f8b5]", "20")
    self.bid64_from_uint64("1", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("1", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("1", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("1", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("1", "9830691346977087921", "[6c8aecf631a2113f]", "20")
    self.bid64_from_uint64("2", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("2", "11490364541146872629", "[3244150ae5ae7580]", "20")
    self.bid64_from_uint64("2", "12066744217364604752", "[32444976c844640d]", "20")
    self.bid64_from_uint64("2", "14506243576798722737", "[32452755cd8ac301]", "20")
    self.bid64_from_uint64("2", "14775268902804503408", "[32453fcd8970f603]", "20")
    self.bid64_from_uint64("2", "18152794317206311497", "[324672fcadb21eb8]", "20")
    self.bid64_from_uint64("2", "2209388159661393197", "[3227d96d446d7552]", "20")
    self.bid64_from_uint64("2", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("2", "3099099504327532098", "[322b029d55143b6d]", "20")
    self.bid64_from_uint64("2", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("2", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("2", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("2", "5039469199127399108", "[3231e75edb787368]", "20")
    self.bid64_from_uint64("2", "519118078830965726", "[32127159f6da1e9a]", "20")
    self.bid64_from_uint64("2", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("2", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("2", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("2", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("2", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("2", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("3", "10789262222447919566", "[3243d54716373bb7]", "20")
    self.bid64_from_uint64("3", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("3", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("3", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("3", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("3", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("3", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("3", "3019588970190590771", "[322aba4cd7ef96fe]", "20")
    self.bid64_from_uint64("3", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("3", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("3", "4399244053147070808", "[322fa116d3116dbe]", "20")
    self.bid64_from_uint64("3", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("3", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("3", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("3", "6204429330282677880", "[32360ae54643f8b5]", "20")
    self.bid64_from_uint64("3", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("3", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("3", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("3", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("3", "9830691346977087921", "[6c8aecf631a2113f]", "20")
    self.bid64_from_uint64("4", "10789262222447919566", "[3243d54716373bb8]", "20")
    self.bid64_from_uint64("4", "11490364541146872629", "[3244150ae5ae757f]", "20")
    self.bid64_from_uint64("4", "12066744217364604752", "[32444976c844640c]", "20")
    self.bid64_from_uint64("4", "14506243576798722737", "[32452755cd8ac300]", "20")
    self.bid64_from_uint64("4", "14775268902804503408", "[32453fcd8970f602]", "20")
    self.bid64_from_uint64("4", "18152794317206311497", "[324672fcadb21eb7]", "20")
    self.bid64_from_uint64("4", "2209388159661393197", "[3227d96d446d7551]", "20")
    self.bid64_from_uint64("4", "3019588970190590771", "[322aba4cd7ef96ff]", "20")
    self.bid64_from_uint64("4", "3099099504327532098", "[322b029d55143b6c]", "20")
    self.bid64_from_uint64("4", "318054556378635000", "[320b4cb078857c6e]", "00")
    self.bid64_from_uint64("4", "4399244053147070808", "[322fa116d3116dbf]", "20")
    self.bid64_from_uint64("4", "4417719154392039", "[31cfb1e464ea3be7]", "00")
    self.bid64_from_uint64("4", "5039469199127399108", "[3231e75edb787367]", "20")
    self.bid64_from_uint64("4", "519118078830965726", "[32127159f6da1e99]", "20")
    self.bid64_from_uint64("4", "6204429330282677880", "[32360ae54643f8b6]", "20")
    self.bid64_from_uint64("4", "631528707223501400", "[32166fb85a985e06]", "00")
    self.bid64_from_uint64("4", "81786902633381280", "[31fd0e79b7dfcc90]", "00")
    self.bid64_from_uint64("4", "833178641504860600", "[321d99b7319d079e]", "00")
    self.bid64_from_uint64("4", "9279938340154311000", "[6c88f80e044d6bc7]", "00")
    self.bid64_from_uint64("4", "9830691346977087921", "[6c8aecf631a21140]", "20")
    self.bid64_from_uint64("0", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("0", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_uint64("1", "9999999999999999999", "[6c8b86f26fc0ffff]", "20")
    self.bid64_from_uint64("1", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_uint64("2", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("2", "99999999999999995", "[32038d7ea4c68000]", "20")
    self.bid64_from_uint64("3", "9999999999999999999", "[6c8b86f26fc0ffff]", "20")
    self.bid64_from_uint64("3", "99999999999999995", "[6c7b86f26fc0ffff]", "20")
    self.bid64_from_uint64("4", "9999999999999999999", "[32438d7ea4c68000]", "20")
    self.bid64_from_uint64("4", "99999999999999995", "[32038d7ea4c68000]", "20")
  }

  private func bid64_from_uint64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseUInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(arg0, rounding: rounding, status: &status)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_from_int32() {
    self.bid128_from_int32("0", "-1250716900", "[b040000000000000000000004a8c6ce4]", "00")
    self.bid128_from_int32("0", "-1375453304", "[b0400000000000000000000051fbc078]", "00")
    self.bid128_from_int32("0", "1450740614", "[30400000000000000000000056788b86]", "00")
    self.bid128_from_int32("0", "-1834423832", "[b040000000000000000000006d571618]", "00")
    self.bid128_from_int32("0", "1930174213", "[304000000000000000000000730c1f05]", "00")
    self.bid128_from_int32("0", "1947153827", "[304000000000000000000000740f35a3]", "00")
    self.bid128_from_int32("0", "206409795", "[3040000000000000000000000c4d9043]", "00")
    self.bid128_from_int32("0", "2103044481", "[3040000000000000000000007d59e981]", "00")
    self.bid128_from_int32("0", "-244968231", "[b040000000000000000000000e99eb27]", "00")
    self.bid128_from_int32("0", "-328472007", "[b04000000000000000000000139415c7]", "00")
    self.bid128_from_int32("0", "-430827320", "[b0400000000000000000000019ade738]", "00")
    self.bid128_from_int32("0", "472411624", "[3040000000000000000000001c286de8]", "00")
    self.bid128_from_int32("0", "-503478515", "[b040000000000000000000001e0278f3]", "00")
    self.bid128_from_int32("0", "620564199", "[30400000000000000000000024fd0ee7]", "00")
    self.bid128_from_int32("0", "648685195", "[30400000000000000000000026aa268b]", "00")
    self.bid128_from_int32("0", "734426893", "[3040000000000000000000002bc6770d]", "00")
    self.bid128_from_int32("0", "774990435", "[3040000000000000000000002e316a63]", "00")
    self.bid128_from_int32("0", "797130594", "[3040000000000000000000002f833f62]", "00")
    self.bid128_from_int32("0", "-893748152", "[b04000000000000000000000354583b8]", "00")
    self.bid128_from_int32("0", "-958871488", "[b04000000000000000000000392737c0]", "00")
  }

  private func bid128_from_int32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = Decimal128(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid128_from_int64() {
    self.bid128_from_int64("0", "-1297714641311568497", "[b0400000000000001202689737331271]", "00")
    self.bid128_from_int64("0", "-1382533918512158604", "[b040000000000000132fbf461ed8978c]", "00")
    self.bid128_from_int64("0", "1991200058281483048", "[30400000000000001ba229e7369adb28]", "00")
    self.bid128_from_int64("0", "-1998782831704824207", "[b0400000000000001bbd1a653aea598f]", "00")
    self.bid128_from_int64("0", "2081344241858484150", "[30400000000000001ce26b8f7f4797b6]", "00")
    self.bid128_from_int64("0", "-3494168784785967941", "[b040000000000000307dc7ff326d0b45]", "00")
    self.bid128_from_int64("0", "-3623475514305027548", "[b04000000000000032492bc8427a1ddc]", "00")
    self.bid128_from_int64("0", "-3719337100671242603", "[b040000000000000339dbd631d70d16b]", "00")
    self.bid128_from_int64("0", "4134085355817711631", "[3040000000000000395f38ba50a8b80f]", "00")
    self.bid128_from_int64("0", "-4543384426972292615", "[b0400000000000003f0d58107fb9a607]", "00")
    self.bid128_from_int64("0", "-456313642285820771", "[b040000000000000065526d70a9c6b63]", "00")
    self.bid128_from_int64("0", "572333114425411975", "[304000000000000007f155ef6a850987]", "00")
    self.bid128_from_int64("0", "-5896812445967530814", "[b04000000000000051d5afad4cff3b3e]", "00")
    self.bid128_from_int64("0", "6084829525942336602", "[30400000000000005471a8370c99fc5a]", "00")
    self.bid128_from_int64("0", "6343298205297819548", "[30400000000000005807ec1c07263f9c]", "00")
    self.bid128_from_int64("0", "-640590259490231037", "[b04000000000000008e3d5726f7d92fd]", "00")
    self.bid128_from_int64("0", "7071067091834809443", "[304000000000000062217a0e4fc4ac63]", "00")
    self.bid128_from_int64("0", "7575924962073745274", "[30400000000000006923179d316b977a]", "00")
    self.bid128_from_int64("0", "-8534495841839544214", "[b04000000000000076709ec01de4f796]", "00")
    self.bid128_from_int64("0", "945634496444636363", "[30400000000000000d1f919077f01ccb]", "00")
  }

  private func bid128_from_int64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = Decimal128(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid128_from_uint32() {
    self.bid128_from_uint32("0", "103397952", "[3040000000000000000000000629ba40]", "00")
    self.bid128_from_uint32("0", "1330244968", "[3040000000000000000000004f49ed68]", "00")
    self.bid128_from_uint32("0", "147908358", "[30400000000000000000000008d0e706]", "00")
    self.bid128_from_uint32("0", "1557964421", "[3040000000000000000000005cdca685]", "00")
    self.bid128_from_uint32("0", "1701773569", "[304000000000000000000000656f0101]", "00")
    self.bid128_from_uint32("0", "1726400552", "[30400000000000000000000066e6c828]", "00")
    self.bid128_from_uint32("0", "1970394217", "[3040000000000000000000007571d469]", "00")
    self.bid128_from_uint32("0", "2069079581", "[3040000000000000000000007b53a61d]", "00")
    self.bid128_from_uint32("0", "2252194484", "[304000000000000000000000863dc2b4]", "00")
    self.bid128_from_uint32("0", "2302595981", "[304000000000000000000000893ed38d]", "00")
    self.bid128_from_uint32("0", "2670922056", "[3040000000000000000000009f330948]", "00")
    self.bid128_from_uint32("0", "2799702556", "[304000000000000000000000a6e0121c]", "00")
    self.bid128_from_uint32("0", "3112874904", "[304000000000000000000000b98ab398]", "00")
    self.bid128_from_uint32("0", "3346272456", "[304000000000000000000000c77410c8]", "00")
    self.bid128_from_uint32("0", "3493448917", "[304000000000000000000000d039ccd5]", "00")
    self.bid128_from_uint32("0", "3526470664", "[304000000000000000000000d231ac08]", "00")
    self.bid128_from_uint32("0", "3688739202", "[304000000000000000000000dbddb182]", "00")
    self.bid128_from_uint32("0", "3965430364", "[304000000000000000000000ec5baa5c]", "00")
    self.bid128_from_uint32("0", "4081525952", "[304000000000000000000000f34724c0]", "00")
    self.bid128_from_uint32("0", "898117571", "[30400000000000000000000035882fc3]", "00")
  }

  private func bid128_from_uint32(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseUInt32(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = Decimal128(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }

  func test_bid128_from_uint64() {
    self.bid128_from_uint64("0", "12838043691698676900", "[3040000000000000b229e4b7fea4e4a4]", "00")
    self.bid128_from_uint64("0", "13039381436817401260", "[3040000000000000b4f53054c852e5ac]", "00")
    self.bid128_from_uint64("0", "14329515802341157305", "[3040000000000000c6dcaab381e429b9]", "00")
    self.bid128_from_uint64("0", "14891321118899701533", "[3040000000000000cea899a8f84a071d]", "00")
    self.bid128_from_uint64("0", "15299397707630953249", "[3040000000000000d4526127c8c4c321]", "00")
    self.bid128_from_uint64("0", "155043678304746152", "[30400000000000000226d3676a063aa8]", "00")
    self.bid128_from_uint64("0", "15813025721173857557", "[3040000000000000db73271cc6aed515]", "00")
    self.bid128_from_uint64("0", "15951128221084643628", "[3040000000000000dd5dca9ab875712c]", "00")
    self.bid128_from_uint64("0", "16512022100427752653", "[3040000000000000e5267c9dab6544cd]", "00")
    self.bid128_from_uint64("0", "17242795393441160067", "[3040000000000000ef4ab70dd8cd5b83]", "00")
    self.bid128_from_uint64("0", "17470592975898584298", "[3040000000000000f27403bf97dea4ea]", "00")
    self.bid128_from_uint64("0", "18144984012892654914", "[3040000000000000fbcfeed2cf9bcd42]", "00")
    self.bid128_from_uint64("0", "2714021962226553302", "[304000000000000025aa24985b1f51d6]", "00")
    self.bid128_from_uint64("0", "2858886672715936018", "[304000000000000027acce482454f112]", "00")
    self.bid128_from_uint64("0", "2973717257055240449", "[30400000000000002944c417013a0101]", "00")
    self.bid128_from_uint64("0", "3783918067584438023", "[304000000000000034832d6f358d8f07]", "00")
    self.bid128_from_uint64("0", "6135131516986689308", "[304000000000000055245d9c004b871c]", "00")
    self.bid128_from_uint64("0", "6826231342173745096", "[30400000000000005ebba53d20e76fc8]", "00")
    self.bid128_from_uint64("0", "8530537025811641231", "[304000000000000076628e3a6ed1f38f]", "00")
    self.bid128_from_uint64("0", "9069128140613606892", "[30400000000000007ddc03fe5bc5ddec]", "00")
  }

  private func bid128_from_uint64(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseUInt64(_arg0, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }

    let result = Decimal128(arg0)
    self.assertEqual(result, expected, .fuzzyStatus, file, line)
  }
}
