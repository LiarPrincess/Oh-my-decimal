// =============================================================================
// Automatically generated. DO NOT EDIT!
// To regenerate: make gen
// =============================================================================

import XCTest
@testable import Decimal

class IntelLogScaleTests: XCTestCase, IntelMixin {

  func test_bid32_frexp() {
    self.bid32_frexp("0", "[78000000]", "0", "[78000000]", "00")
    self.bid32_frexp("0", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_frexp("0", "[f8000000]", "0", "[f8000000]", "00")
    self.bid32_frexp("0", "[fc000000]", "0", "[fc000000]", "00")
    self.bid32_frexp("0", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("1", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("2", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[00000001]", "-100", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[03000001]", "-94", "[32000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[77F8967F]", "97", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[80000001]", "-100", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[83000001]", "-94", "[B2000001]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[EBD8967F]", "0", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("3", "[F7F8967F]", "97", "[EBD8967F]", "00", ulp: "0.0000000000")
    self.bid32_frexp("0", "[00000000]", "0", "[00000000]", "00")
    self.bid32_frexp("0", "[7e000000]", "0", "[7c000000]", "00")
    self.bid32_frexp("0", "[80000000]", "0", "[80000000]", "00")
    self.bid32_frexp("0", "[fe000000]", "0", "[fc000000]", "00")
    self.bid32_frexp("0", "[0401c880]", "-87", "[2f81c880]", "00")
    self.bid32_frexp("0", "[0401c880]", "-87", "[2f81c880]", "00")
    self.bid32_frexp("0", "[7c8f423f]", "0", "[7c8f423f]", "00")
    self.bid32_frexp("0", "[7c8f4240]", "0", "[7c8f4240]", "00")
    self.bid32_frexp("0", "[7c8f4241]", "0", "[7c8f4241]", "00")
    self.bid32_frexp("0", "[607fffff]", "0", "[01800000]", "00")
    self.bid32_frexp("0", "[f71fffff]", "0", "[dc000000]", "00")
    self.bid32_frexp("0", "[f420b31f]", "67", "[ebc0b31f]", "00")
    self.bid32_frexp("0", "[658c3437]", "-50", "[6bcc3437]", "00")
  }

  private func bid32_frexp(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let exponent = arg0.exponent(status: &status)
    let significand = arg0.significand
    let intel = self.toIntel_frexp(arg0, exponent: exponent, significand: significand)

    // 'arg1' is the expected exponent
    self.assertInt(intel.exponent, arg1, file, line, "Exponent")
    self.assertEqual(intel.significand, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Significand")

    if arg0._isFinite && !arg0.isZero {
      // We have to exclude 0, because it does not guarantee exponent preservation
      // ('0.exponent' returns 'Int.min').
      // Rounding should not matter
      let restored = Decimal32(sign: arg0.sign, exponent: exponent, significand: significand, rounding: .towardZero)
      self.assertEqual(restored, arg0, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Decimal32(sign:exponent:significand:)")
    }

    // 'frexp' does not signal any exceptions
    status = DecimalStatus()
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_ilogb() {
    self.bid32_ilogb("0", "[00000001]", "-101", "00")
    self.bid32_ilogb("0", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[00080001]", "-96", "00")
    self.bid32_ilogb("0", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "-1.0", "0", "00")
    self.bid32_ilogb("0", "1.0", "0", "00")
    self.bid32_ilogb("0", "-1.0e-96", "-96", "00")
    self.bid32_ilogb("0", "1.0e-96", "-96", "00")
    self.bid32_ilogb("0", "[6098967f]", "-91", "00")
    self.bid32_ilogb("0", "[60989680]", "-2147483648", "01")
    self.bid32_ilogb("0", "[609896ff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[78000000]", "2147483647", "01")
    self.bid32_ilogb("0", "[78801000]", "2147483647", "01")
    self.bid32_ilogb("0", "[7c000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c000001]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f423f]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f4240]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8f4241]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7c8ffeff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e000100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e100000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e100100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8f423f]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8f4240]", "-2147483648", "01")
    self.bid32_ilogb("0", "[7e8ffeff]", "-2147483648", "01")
    self.bid32_ilogb("0", "[80000001]", "-101", "00")
    self.bid32_ilogb("0", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "-9.999999e-95", "-95", "00")
    self.bid32_ilogb("0", "9.999999e-95", "-95", "00")
    self.bid32_ilogb("0", "-9.999999e96", "96", "00")
    self.bid32_ilogb("0", "9.999999e96", "96", "00")
    self.bid32_ilogb("0", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[f8000000]", "2147483647", "01")
    self.bid32_ilogb("0", "[f8801000]", "2147483647", "01")
    self.bid32_ilogb("0", "[fc000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc000001]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc100000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fc100100]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fe000000]", "-2147483648", "01")
    self.bid32_ilogb("0", "[fe000100]", "-2147483648", "01")
    self.bid32_ilogb("1", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("1", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("2", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[00000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[03000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[6BD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[77F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[80000001]", "-101", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[83000001]", "-95", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[EBD8967F]", "-1", "00", ulp: "0.0000000000")
    self.bid32_ilogb("3", "[F7F8967F]", "96", "00", ulp: "0.0000000000")
    self.bid32_ilogb("0", "[00000000]", "-2147483648", "01", ulp: "0.0000000000")
  }

  private func bid32_ilogb(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    assert(ulp?.isZero ?? true) // 'ulp' does not make sense in this test
    let result = arg0.exponent(status: &status)
    let resultIntel = self.toIntel_logB(arg0, result: result)
    self.assertInt(resultIntel, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_scalbln() {
    self.bid32_scalbln("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("0", "[78000000]", "0", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "0", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "-1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "-1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[78000000]", "1", "[78000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7c000000]", "0", "[7c000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7c000000]", "0", "[7c000000]", "00", longIntSize: "00")
    self.bid32_scalbln("0", "[7e000000]", "0", "[7c000000]", "01", longIntSize: "01")
    self.bid32_scalbln("0", "[7e000000]", "0", "[7c000000]", "01", longIntSize: "01")
    self.bid32_scalbln("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid32_scalbln("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid32_scalbln("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid32_scalbln("0", "[6BD8967F]", "9223372036854775807", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("0", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("1", "[6BD8967F]", "9223372036854775807", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("1", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid32_scalbln("2", "[6BD8967F]", "9223372036854775807", "[78000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("2", "[6BD8967F]", "-9223372036854775808", "[00000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid32_scalbln("3", "[6BD8967F]", "9223372036854775807", "[77F8967F]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid32_scalbln("3", "[6BD8967F]", "-9223372036854775808", "[00000000]", "30", ulp: "0.0000000000", longIntSize: "30")
  }

  private func bid32_scalbln(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    longIntSize _longIntSize: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }
    guard let longIntSize = self.parseLongIntSize(_longIntSize, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(sign: .plus, exponent: arg1, significand: arg0, rounding: rounding, status: &status)
    _ = longIntSize // Never used; silence compiler warning
    let resultIntel = self.toIntel_scaleB(arg0, arg1, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid32_scalbn() {
    self.bid32_scalbn("0", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("0", "[00000001]", "1.0", "[00800001]", "00")
    self.bid32_scalbn("0", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("0", "[00080001]", "1.0", "[00880001]", "00")
    self.bid32_scalbn("0", "1.0", "[00000001]", "[3280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[00080001]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "-1.0", "[3180000a]", "00")
    self.bid32_scalbn("0", "1.0", "1.0", "[3280000a]", "00")
    self.bid32_scalbn("0", "-1.0", "1.0", "[b280000a]", "00")
    self.bid32_scalbn("0", "1.0", "-1.0e-96", "[3180000a]", "00")
    self.bid32_scalbn("0", "1.0", "1.0e-96", "[3280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[6098967f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[60989680]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c000000]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c8f423f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7c8f4240]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e100000]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e100100]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e8f423f]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[7e8f4240]", "[78000000]", "28")
    self.bid32_scalbn("0", "1.0", "[80000001]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "-9.999999e-95", "[2d80000a]", "00")
    self.bid32_scalbn("0", "1.0", "9.999999e-95", "[3680000a]", "00")
    self.bid32_scalbn("0", "1.0", "-9.999999e96", "[2d80000a]", "00")
    self.bid32_scalbn("0", "1.0", "9.999999e96", "[3680000a]", "00")
    self.bid32_scalbn("0", "1.0e-96", "1.0", "[0280000a]", "00")
    self.bid32_scalbn("0", "-1.0e-96", "1.0", "[8280000a]", "00")
    self.bid32_scalbn("0", "1.0", "[fc100000]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "[fc100100]", "[00000000]", "30")
    self.bid32_scalbn("0", "1.0", "[fe000000]", "[00000000]", "30")
    self.bid32_scalbn("0", "1E+89", "2", "[5f80000a]", "00")
    self.bid32_scalbn("0", "[6098967f]", "1.0", "[60b8967f]", "00")
    self.bid32_scalbn("0", "[60989680]", "1.0", "[02800000]", "00")
    self.bid32_scalbn("0", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000")
    self.bid32_scalbn("0", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("0", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("0", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "1.0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f423f]", "1.0", "[7c0f423f]", "00")
    self.bid32_scalbn("0", "[7c8f423f]", "[7e100000]", "[7c0f423f]", "00")
    self.bid32_scalbn("0", "[7c8f4240]", "1.0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("0", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e100000]", "1.0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7e100100]", "1.0", "[7c000100]", "01")
    self.bid32_scalbn("0", "[7e8f423f]", "1.0", "[7c0f423f]", "01")
    self.bid32_scalbn("0", "[7e8f4240]", "1.0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "[80000001]", "1.0", "[80800001]", "00")
    self.bid32_scalbn("0", "9.999999e-95", "1.0", "[6038967f]", "00")
    self.bid32_scalbn("0", "-9.999999e-95", "1.0", "[e038967f]", "00")
    self.bid32_scalbn("0", "9.999999e96", "1.0", "[78000000]", "28")
    self.bid32_scalbn("0", "-9.999999e96", "1.0", "[f8000000]", "28")
    self.bid32_scalbn("0", "[a0020002]", "128", "[df940014]", "00")
    self.bid32_scalbn("0", "[fc100000]", "1.0", "[fc000000]", "00")
    self.bid32_scalbn("0", "[fc100100]", "1.0", "[fc000100]", "00")
    self.bid32_scalbn("0", "[fe000000]", "1.0", "[fc000000]", "01")
    self.bid32_scalbn("1", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("1", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000")
    self.bid32_scalbn("1", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("1", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("1", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("1", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("1", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[00000001]", "-1", "[00000001]", "30", ulp: "-.9000000000")
    self.bid32_scalbn("2", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000")
    self.bid32_scalbn("2", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[6BD8967F]", "2147483647", "[78000000]", "28", ulp: "0.00000")
    self.bid32_scalbn("2", "[6BD8967F]", "-2147483648", "[00000001]", "30", ulp: "-1.000000000")
    self.bid32_scalbn("2", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[77F8967F]", "1", "[78000000]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("2", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("2", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("2", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("2", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[00000001]", "0", "[00000001]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[00000001]", "-1", "[00000000]", "30", ulp: ".1000000000")
    self.bid32_scalbn("3", "[00000005]", "-1", "[00000000]", "30", ulp: ".5000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "0", "[6BD8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "-1", "[6BB8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "1", "[6BF8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[6BD8967F]", "2147483647", "[77F8967F]", "28", ulp: "0.00000")
    self.bid32_scalbn("3", "[6BD8967F]", "-2147483648", "[00000000]", "30", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[77F8967F]", "0", "[77F8967F]", "00", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[77F8967F]", "1", "[77F8967F]", "28", ulp: "0.0000000000")
    self.bid32_scalbn("3", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("3", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("3", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("3", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[00000005]", "-1", "[00000001]", "30", ulp: "-.500000000")
    self.bid32_scalbn("4", "[78000000]", "0", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78000000]", "1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "0", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "12328804", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "-1", "[78000000]", "00")
    self.bid32_scalbn("4", "[78a00000]", "1", "[78000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "0", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c000000]", "1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "0", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "12328804", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "-1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7c8f4241]", "1", "[7c000000]", "00")
    self.bid32_scalbn("4", "[7e000000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7e000000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7ea00000]", "1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "0", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "12328804", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "-1", "[7c000000]", "01")
    self.bid32_scalbn("4", "[7effffff]", "1", "[7c000000]", "01")
    self.bid32_scalbn("0", "0.0e10", "-50", "[1e000000]", "00")
  }

  private func bid32_scalbn(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal32(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal32(sign: .plus, exponent: Int(arg1), significand: arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_scaleB(arg0, Int(arg1), result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_frexp() {
    self.bid64_frexp("0", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_frexp("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_frexp("0", "[f800000000000000]", "0", "[f800000000000000]", "00")
    self.bid64_frexp("0", "[fc00000000000000]", "0", "[fc00000000000000]", "00")
    self.bid64_frexp("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[EBF386F26FC0FFFF]", "0", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[0000000000000000]", "0", "[0000000000000000]", "00")
    self.bid64_frexp("0", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[7e00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_frexp("0", "[8000000000000000]", "0", "[8000000000000000]", "00")
    self.bid64_frexp("0", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[fe00000000000000]", "0", "[fc00000000000000]", "00")
    self.bid64_frexp("1", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("1", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("2", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[0000000000000001]", "-397", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[01E0000000000001]", "-382", "[31A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[77FB86F26FC0FFFF]", "385", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[8000000000000001]", "-397", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[81E0000000000001]", "-382", "[B1A0000000000001]", "00", ulp: "0.0000000000")
    self.bid64_frexp("3", "[F7FB86F26FC0FFFF]", "385", "[EBF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_frexp("0", "[002000a008200080]", "-385", "[304000a008200080]", "00")
    self.bid64_frexp("0", "[618f00fe4935c48a]", "0", "[0620000000000000]", "00")
    self.bid64_frexp("0", "[2383cd3f15c1076a]", "-98", "[2fc3cd3f15c1076a]", "00")
    self.bid64_frexp("0", "[002000a008200080]", "-385", "[304000a008200080]", "00")
    self.bid64_frexp("0", "[618f00fe4935c48a]", "0", "[0620000000000000]", "00")
  }

  private func bid64_frexp(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let exponent = arg0.exponent(status: &status)
    let significand = arg0.significand
    let intel = self.toIntel_frexp(arg0, exponent: exponent, significand: significand)

    // 'arg1' is the expected exponent
    self.assertInt(intel.exponent, arg1, file, line, "Exponent")
    self.assertEqual(intel.significand, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Significand")

    if arg0._isFinite && !arg0.isZero {
      // We have to exclude 0, because it does not guarantee exponent preservation
      // ('0.exponent' returns 'Int.min').
      // Rounding should not matter
      let restored = Decimal64(sign: arg0.sign, exponent: exponent, significand: significand, rounding: .towardZero)
      self.assertEqual(restored, arg0, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Decimal64(sign:exponent:significand:)")
    }

    // 'frexp' does not signal any exceptions
    status = DecimalStatus()
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_ilogb() {
    self.bid64_ilogb("0", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[05c0000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "-0", "[80000000]", "01")
    self.bid64_ilogb("0", "0", "[80000000]", "01")
    self.bid64_ilogb("0", "[1200000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[3580000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[3a60000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[4000190410201c00]", "[0007f]", "00")
    self.bid64_ilogb("0", "[5860000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[69dbb75d7734cd9e]", "-2147483648", "01")
    self.bid64_ilogb("0", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[7800000000000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[7810000100000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[7c00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7c00000000000001]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7e00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7ef0000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[7effffffffefffff]", "-2147483648", "01")
    self.bid64_ilogb("0", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[877f265d6129acc4]", "[FFFFFEBC]", "00")
    self.bid64_ilogb("0", "[8e60000000000000]", "[80000000]", "01")
    self.bid64_ilogb("0", "[a8b7e5186aa06c67]", "[FFFFFFC6]", "00")
    self.bid64_ilogb("0", "[b54b05813dfa685d]", "[002b]", "00")
    self.bid64_ilogb("0", "[ba337e6a6a0ab070]", "[0052]", "00")
    self.bid64_ilogb("0", "[d14062208c339e33]", "266", "00")
    self.bid64_ilogb("0", "[e003b75d7734cd9e]", "-2147483648", "01")
    self.bid64_ilogb("0", "[e6b63ababd5d04d2]", "[80000000]", "01")
    self.bid64_ilogb("0", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("0", "[f800000000000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[f810000100000000]", "2147483647", "01")
    self.bid64_ilogb("0", "[fbedefba9d5c7fdd]", "[7fffffff]", "01")
    self.bid64_ilogb("0", "[fc00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fc00000000000001]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fde7ff7ffdffbff9]", "[80000000]", "01")
    self.bid64_ilogb("0", "[fe00000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[fef0000000000000]", "-2147483648", "01")
    self.bid64_ilogb("0", "[feffffffffefffff]", "-2147483648", "01")
    self.bid64_ilogb("0", "-Infinity", "[7fffffff]", "01")
    self.bid64_ilogb("0", "QNaN", "[80000000]", "01")
    self.bid64_ilogb("0", "SNaN", "[80000000]", "01")
    self.bid64_ilogb("1", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("1", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("2", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[0000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[0000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[01E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[6BF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[77FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[8000000000000001]", "-398", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[81E0000000000001]", "-383", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[EBF386F26FC0FFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid64_ilogb("3", "[F7FB86F26FC0FFFF]", "384", "00", ulp: "0.0000000000")
  }

  private func bid64_ilogb(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    assert(ulp?.isZero ?? true) // 'ulp' does not make sense in this test
    let result = arg0.exponent(status: &status)
    let resultIntel = self.toIntel_logB(arg0, result: result)
    self.assertInt(resultIntel, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_scalbln() {
    self.bid64_scalbln("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("0", "[7800000000000000]", "0", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "0", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "-1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "-1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7800000000000000]", "1", "[7800000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00", longIntSize: "00")
    self.bid64_scalbln("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01", longIntSize: "01")
    self.bid64_scalbln("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01", longIntSize: "01")
    self.bid64_scalbln("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid64_scalbln("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "9223372036854775807", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("0", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "9223372036854775807", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("1", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "9223372036854775807", "[7800000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("2", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "9223372036854775807", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid64_scalbln("3", "[6BF386F26FC0FFFF]", "-9223372036854775808", "[0000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
  }

  private func bid64_scalbln(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    longIntSize _longIntSize: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }
    guard let longIntSize = self.parseLongIntSize(_longIntSize, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(sign: .plus, exponent: arg1, significand: arg0, rounding: rounding, status: &status)
    _ = longIntSize // Never used; silence compiler warning
    let resultIntel = self.toIntel_scaleB(arg0, arg1, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid64_scalbn() {
    self.bid64_scalbn("0", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("0", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("0", "[0000004280001000]", "-1", "[00000006a6666800]", "00")
    self.bid64_scalbn("0", "[0001000000000000]", "768", "[5fea000000000000]", "00")
    self.bid64_scalbn("0", "[0010b00010108004]", "-6", "[0000000117f84557]", "30")
    self.bid64_scalbn("0", "0", "0", "[31c0000000000000]", "00")
    self.bid64_scalbn("0", "-0", "0", "[b1c0000000000000]", "00")
    self.bid64_scalbn("0", "[00be3e41a7d69e11]", "1", "[00de3e41a7d69e11]", "00")
    self.bid64_scalbn("0", "0", "-1", "[31a0000000000000]", "00")
    self.bid64_scalbn("0", "0", "1", "[31e0000000000000]", "00")
    self.bid64_scalbn("0", "0.1", "-382", "[01e0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "-382", "[81e0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "-383", "[01c0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "383", "[5fe009184e72a000]", "00")
    self.bid64_scalbn("0", "-0.1", "-383", "[81c0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "383", "[dfe009184e72a000]", "00")
    self.bid64_scalbn("0", "0.1", "-384", "[01a0000000000001]", "00")
    self.bid64_scalbn("0", "0.1", "384", "[5fe05af3107a4000]", "00")
    self.bid64_scalbn("0", "-0.1", "-384", "[81a0000000000001]", "00")
    self.bid64_scalbn("0", "-0.1", "384", "[dfe05af3107a4000]", "00")
    self.bid64_scalbn("0", "0.1", "385", "[5fe38d7ea4c68000]", "00")
    self.bid64_scalbn("0", "-0.1", "385", "[dfe38d7ea4c68000]", "00")
    self.bid64_scalbn("0", "-0", "-1", "[b1a0000000000000]", "00")
    self.bid64_scalbn("0", "-0", "1", "[b1e0000000000000]", "00")
    self.bid64_scalbn("0", "[0200940c0a114000]", "-2", "[01c0940c0a114000]", "00")
    self.bid64_scalbn("0", "[0e17000000000000]", "2", "[0e57000000000000]", "00")
    self.bid64_scalbn("0", "[10002403080400c0]", "640", "[5fe1681e50280780]", "00")
    self.bid64_scalbn("0", "[168004250b068840]", "24047", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[1c40400019043020]", "201392160", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[2000842084014008]", "-1141906699", "[0000000000000000]", "30")
    self.bid64_scalbn("0", "[2c2d0133540b49f4]", "335544833", "[7800000000000000]", "28")
    self.bid64_scalbn("0", "[2ec61b056786554d]", "3", "[2f261b056786554d]", "00")
    self.bid64_scalbn("0", "[45cf7777611b47c5]", "4", "[464f7777611b47c5]", "00")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000")
    self.bid64_scalbn("0", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("0", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "[801bc107f3b6cbf5]", "-1", "[8002c680cb924798]", "30")
    self.bid64_scalbn("0", "[9c85d9a5a3dfada5]", "36", "[a105d9a5a3dfada5]", "00")
    self.bid64_scalbn("0", "[a720000000000000]", "5", "[a7c0000000000000]", "00")
    self.bid64_scalbn("0", "[ac3f9361f3311903]", "6", "[acff9361f3311903]", "00")
    self.bid64_scalbn("0", "[b67af9fd533fabff]", "0", "[b67af9fd533fabff]", "00")
    self.bid64_scalbn("0", "[bb56f5d503636a0c]", "7", "[bc36f5d503636a0c]", "00")
    self.bid64_scalbn("0", "[bbe6809560fc8bbe]", "8", "[bce6809560fc8bbe]", "00")
    self.bid64_scalbn("0", "[c6457c02fc84a38a]", "9", "[c7657c02fc84a38a]", "00")
    self.bid64_scalbn("0", "[dbff63dd3bfebef7]", "21520", "[f800000000000000]", "28")
    self.bid64_scalbn("0", "[e53804fdedf68481]", "10", "[e58804fdedf68481]", "00")
    self.bid64_scalbn("0", "[ea5e5fde262f578d]", "1048592", "[dfe0000000000000]", "00")
    self.bid64_scalbn("0", "[eea50bcafe743fea]", "18100", "[dfe0000000000000]", "00")
    self.bid64_scalbn("0", "[f5ac66ed9e697678]", "-4", "[d620000000000000]", "00")
    self.bid64_scalbn("0", "[fbffefde9fbfffbf]", "-3", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "[fd3c49edeff968d2]", "-1238194967", "[fc0049edeff968d2]", "00")
    self.bid64_scalbn("0", "[fdc106235688bc22]", "-6148", "[fc0106235688bc22]", "00")
    self.bid64_scalbn("0", "Infinity", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "0", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "Infinity", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "Infinity", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "-1", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "-Infinity", "1", "[f800000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "QNaN", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("0", "SNaN", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "SNaN", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "SNaN", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("1", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000")
    self.bid64_scalbn("1", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("1", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("1", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("1", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[0000000000000001]", "-1", "[0000000000000001]", "30", ulp: "-.9000000000")
    self.bid64_scalbn("2", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "2147483647", "[7800000000000000]", "28", ulp: "0.00000")
    self.bid64_scalbn("2", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000001]", "30", ulp: "-1.000000000")
    self.bid64_scalbn("2", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[77FB86F26FC0FFFF]", "1", "[7800000000000000]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("2", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("2", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("2", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[0000000000000001]", "0", "[0000000000000001]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[0000000000000001]", "-1", "[0000000000000000]", "30", ulp: ".1000000000")
    self.bid64_scalbn("3", "[0000000000000005]", "-1", "[0000000000000000]", "30", ulp: ".5000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "0", "[6BF386F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "-1", "[6BEB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "1", "[6BFB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "2147483647", "[77FB86F26FC0FFFF]", "28", ulp: "0.00000")
    self.bid64_scalbn("3", "[6BF386F26FC0FFFF]", "-2147483648", "[0000000000000000]", "30", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[77FB86F26FC0FFFF]", "0", "[77FB86F26FC0FFFF]", "00", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[77FB86F26FC0FFFF]", "1", "[77FB86F26FC0FFFF]", "28", ulp: "0.0000000000")
    self.bid64_scalbn("3", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("3", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("3", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[0000000000000005]", "-1", "[0000000000000001]", "30", ulp: "-.500000000")
    self.bid64_scalbn("4", "[7800000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7800000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "0", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "12325632", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "-1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[78f0000000000000]", "1", "[7800000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "0", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "12325632", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "-1", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7c00000000000000]", "1", "[7c00000000000000]", "00")
    self.bid64_scalbn("4", "[7e00000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7e00000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7ef0000000000000]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "0", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "12325632", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "-1", "[7c00000000000000]", "01")
    self.bid64_scalbn("4", "[7effffffffefffff]", "1", "[7c00000000000000]", "01")
    self.bid64_scalbn("0", "0.0e10", "-50", "[2ca0000000000000]", "00")
  }

  private func bid64_scalbn(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal64(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal64(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal64(sign: .plus, exponent: Int(arg1), significand: arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_scaleB(arg0, Int(arg1), result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_frexp() {
    self.bid128_frexp("0", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[f8000000000000000000000000000000]", "0", "[f8000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[fc000000000000000000000000000000]", "0", "[fc000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[00000000000000000000000000000001]", "-6175", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[00420000000000000000000000000001]", "-6142", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[80000000000000000000000000000001]", "-6175", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[80420000000000000000000000000001]", "-6142", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[00000000000000000000000000000001]", "-6175", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[00420000000000000000000000000001]", "-6142", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[80000000000000000000000000000001]", "-6175", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[80420000000000000000000000000001]", "-6142", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("1", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[00000000000000000000000000000001]", "-6175", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[00420000000000000000000000000001]", "-6142", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[80000000000000000000000000000001]", "-6175", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[80420000000000000000000000000001]", "-6142", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("2", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[00000000000000000000000000000001]", "-6175", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[00420000000000000000000000000001]", "-6142", "[303E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[80000000000000000000000000000001]", "-6175", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[80420000000000000000000000000001]", "-6142", "[B03E0000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("3", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6145", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_frexp("0", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[fe000000000000000000000000000000]", "0", "[fc000000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[481432060a2e154f,d148002010000018]", "3084", "[2ffc32060a2e154fd148002010000018]", "00")
    self.bid128_frexp("0", "[68d8f80c42c232ff,c59ac8aa0a9a9cf1]", "0", "[23620000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[0000000000000000,08004a4900205082]", "-6158", "[301c00000000000008004a4900205082]", "00")
    self.bid128_frexp("0", "[481432060a2e154f,d148002010000018]", "3084", "[2ffc32060a2e154fd148002010000018]", "00")
    self.bid128_frexp("0", "[68d8f80c42c232ff,c59ac8aa0a9a9cf1]", "0", "[23620000000000000000000000000000]", "00")
    self.bid128_frexp("0", "[0000000000000000,08004a4900205082]", "-6158", "[301c00000000000008004a4900205082]", "00")
    self.bid128_frexp("0", "[3040000000000000,0000000000000001]", "1", "[303e0000000000000000000000000001]", "00")
  }

  private func bid128_frexp(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let exponent = arg0.exponent(status: &status)
    let significand = arg0.significand
    let intel = self.toIntel_frexp(arg0, exponent: exponent, significand: significand)

    // 'arg1' is the expected exponent
    self.assertInt(intel.exponent, arg1, file, line, "Exponent")
    self.assertEqual(intel.significand, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Significand")

    if arg0._isFinite && !arg0.isZero {
      // We have to exclude 0, because it does not guarantee exponent preservation
      // ('0.exponent' returns 'Int.min').
      // Rounding should not matter
      let restored = Decimal128(sign: arg0.sign, exponent: exponent, significand: significand, rounding: .towardZero)
      self.assertEqual(restored, arg0, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line, "Decimal128(sign:exponent:significand:)")
    }

    // 'frexp' does not signal any exceptions
    status = DecimalStatus()
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_ilogb() {
    self.bid128_ilogb("0", "[00000000000000000000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[00000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[0001ed09bead87c0378d8e62ffffffff]", "-6143", "00")
    self.bid128_ilogb("0", "[0001ed09bead87c0378d8e64ffffffff]", "-2147483648", "01")
    self.bid128_ilogb("0", "[00420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[0492000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "-0", "[80000000]", "01")
    self.bid128_ilogb("0", "0", "[80000000]", "01")
    self.bid128_ilogb("0", "[15ae000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "[1a38000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "[2fd0000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[4024471a24b9c094,eb33e24e51e6e393]", "[0000813]", "00")
    self.bid128_ilogb("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[6003b75d7734cd9e1234567890123456]", "-2147483648", "01")
    self.bid128_ilogb("0", "[69dbb75d7734cd9e1234567890123456]", "-2147483648", "01")
    self.bid128_ilogb("0", "[78000000000000000000000000000000]", "2147483647", "01")
    self.bid128_ilogb("0", "[7800000000000000,0000000000000000]", "[7fffffff]", "01")
    self.bid128_ilogb("0", "[78000001000000000000000000000000]", "2147483647", "01")
    self.bid128_ilogb("0", "[7c000000000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7c000001000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7c003fffffffffff38c15b08ffffffff]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7c003fffffffffff38c15b0affffffff]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7cff3fffffffefffffffffffffffffff]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7e000000000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7e003fffffffefffffffffffffffffff]", "-2147483648", "01")
    self.bid128_ilogb("0", "[7ef00000000000000000000000000001]", "-2147483648", "01")
    self.bid128_ilogb("0", "[80000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[80420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[86211d476ec3ab4d,e58a9dd24de85615]", "[FFFFEB11]", "00")
    self.bid128_ilogb("0", "[9fbfff2ffbffef5e,80e117d6820566eb]", "[80000000]", "01")
    self.bid128_ilogb("0", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[bb37c0485fa81f15,3392bf3090a40397]", "[0059c]", "00")
    self.bid128_ilogb("0", "[c992000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "[d5ab94f9589fa6cc,7008a05cc89061b5]", "[0012d6]", "00")
    self.bid128_ilogb("0", "[dc2e000000000000,0000000000000000]", "[80000000]", "01")
    self.bid128_ilogb("0", "[dcca37edb647a616,cafcb0077b828448]", "[0001666]", "00")
    self.bid128_ilogb("0", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("0", "[e003b75d7734cd9e1234567890123456]", "-2147483648", "01")
    self.bid128_ilogb("0", "[e9dbb75d7734cd9e1234567890123456]", "-2147483648", "01")
    self.bid128_ilogb("0", "[f4c89c03d9863bc3,4e53a7c4bb2d8399]", "-2147483648", "01")
    self.bid128_ilogb("0", "[f8000000000000000000000000000000]", "2147483647", "01")
    self.bid128_ilogb("0", "[f8000001000000000000000000000000]", "2147483647", "01")
    self.bid128_ilogb("0", "[fbff3fff6f997ffe,8680117040495b03]", "[7fffffff]", "01")
    self.bid128_ilogb("0", "[fc000000000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[fc000001000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[fe000000000000000000000000000000]", "-2147483648", "01")
    self.bid128_ilogb("0", "[fef00000000000000000000000000001]", "-2147483648", "01")
    self.bid128_ilogb("0", "[ffffffffffffffff,2c9a250808583608]", "[80000000]", "01")
    self.bid128_ilogb("0", "-Infinity", "[7fffffff]", "01")
    self.bid128_ilogb("0", "Infinity", "[7fffffff]", "01")
    self.bid128_ilogb("1", "[00000000000000000000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[00000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[00420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[80000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[80420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("1", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[00000000000000000000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[00000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[00420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[80000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[80420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("2", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[00000000000000000000000000000000]", "-2147483648", "01", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[00000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[00420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[80000000000000000000000000000001]", "-6176", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[80420000000000000000000000000001]", "-6143", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[AFFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "00", ulp: "0.0000000000")
    self.bid128_ilogb("3", "[DFFFED09BEAD87C0378D8E63FFFFFFFF]", "6144", "00", ulp: "0.0000000000")
  }

  private func bid128_ilogb(
    _ _rounding: String,
    _ _arg0: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let expected = self.parseInt32(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    assert(ulp?.isZero ?? true) // 'ulp' does not make sense in this test
    let result = arg0.exponent(status: &status)
    let resultIntel = self.toIntel_logB(arg0, result: result)
    self.assertInt(resultIntel, expected, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_scalbln() {
    self.bid128_scalbln("0", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01", longIntSize: "01")
    self.bid128_scalbln("0", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01", longIntSize: "01")
    self.bid128_scalbln("1", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("2", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid128_scalbln("2", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.9000000000", longIntSize: "30")
    self.bid128_scalbln("2", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid128_scalbln("2", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid128_scalbln("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("3", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000", longIntSize: "00")
    self.bid128_scalbln("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000", longIntSize: "28")
    self.bid128_scalbln("4", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid128_scalbln("4", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000", longIntSize: "30")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "9223372036854775807", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-9223372036854775808", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("0", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00", longIntSize: "00")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "9223372036854775807", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-9223372036854775808", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "9223372036854775807", "[78000000000000000000000000000000]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-9223372036854775808", "[00000000000000000000000000000001]", "30", ulp: "-1.000000000", longIntSize: "30")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "9223372036854775807", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000", longIntSize: "28")
    self.bid128_scalbln("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-9223372036854775808", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000", longIntSize: "30")
  }

  private func bid128_scalbln(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    longIntSize _longIntSize: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }
    guard let longIntSize = self.parseLongIntSize(_longIntSize, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal128(sign: .plus, exponent: arg1, significand: arg0, rounding: rounding, status: &status)
    _ = longIntSize // Never used; silence compiler warning
    let resultIntel = self.toIntel_scaleB(arg0, arg1, result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }

  func test_bid128_scalbn() {
    self.bid128_scalbn("0", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00000000000000000000000000000000]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00000000000000000000000000000000]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00000000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000")
    self.bid128_scalbn("0", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000")
    self.bid128_scalbn("0", "[0000000000200100,e182301364080782]", "12288", "[5ffe000001400a08cf15e0c1e8504b14]", "00")
    self.bid128_scalbn("0", "[000000028a080400,8002020024000000]", "-9", "[000000000000000ae7dcfc24a9355432]", "30")
    self.bid128_scalbn("0", "[0000010080430040,ffffeffffefdffff]", "12288", "[5ffe0a05029e0289ffff5ffff5ebfff6]", "00")
    self.bid128_scalbn("0", "[0000020800082090,030240316cee002b]", "-1", "[000000340000d00e66b36cd1be17ccd1]", "30")
    self.bid128_scalbn("0", "[0000200254078246,91f4f05931970480]", "-1", "[000003336ecd8d070e987e6f51c24d40]", "00")
    self.bid128_scalbn("0", "[0001020004108020,dbdfbfffbffceefd]", "-1", "[000019cccd34d99ce2c993332ccc7e4c]", "30")
    self.bid128_scalbn("0", "[0001ed09bead87c0378d8e64ffffffff]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[0001ed09bead87c0378d8e64ffffffff]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[0001ed09bead87c0378d8e64ffffffff]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[0001ed09bead87c0378d8e64ffffffff]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[0008400000000844,77fd35f51eecefe5]", "-33", "[000000000000000000000000000032b5]", "30")
    self.bid128_scalbn("0", "0", "0", "[30400000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[003e0000000000000000000000000000]", "0", "[003e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[003e0000000000000000000000000000]", "-1", "[003c0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[003e0000000000000000000000000000]", "1", "[00400000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[003e0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[0042000880060802,0c1c1242400c0800]", "-2", "[003e0008800608020c1c1242400c0800]", "00")
    self.bid128_scalbn("0", "[00840000000000000000000000000000]", "0", "[00840000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00840000000000000000000000000000]", "-1", "[00820000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00840000000000000000000000000000]", "1", "[00860000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[00840000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-0", "0", "[b0400000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "0", "-1", "[303e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "0", "1", "[30420000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-0", "-1", "[b03e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-0", "1", "[b0420000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "0.9", "-6142", "[00420000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "-0.9", "-6142", "[80420000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "0.9", "-6143", "[00400000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "0.9", "6143", "[5ffe046ff5af2138c51ba45a80000000]", "00")
    self.bid128_scalbn("0", "-0.9", "-6143", "[80400000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "-0.9", "6143", "[dffe046ff5af2138c51ba45a80000000]", "00")
    self.bid128_scalbn("0", "0.9", "-6144", "[003e0000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "0.9", "6144", "[5ffe2c5f98d74c37b3146b8900000000]", "00")
    self.bid128_scalbn("0", "-0.9", "-6144", "[803e0000000000000000000000000009]", "00")
    self.bid128_scalbn("0", "-0.9", "6144", "[dffe2c5f98d74c37b3146b8900000000]", "00")
    self.bid128_scalbn("0", "0.9", "6145", "[5fffbbbbf868fa2cfecc335a00000000]", "00")
    self.bid128_scalbn("0", "-0.9", "6145", "[dfffbbbbf868fa2cfecc335a00000000]", "00")
    self.bid128_scalbn("0", "[13550b41aa4c2e9e,f231457a40faf6d8]", "1", "[13570b41aa4c2e9ef231457a40faf6d8]", "00")
    self.bid128_scalbn("0", "[2d240000000000000000000000000000]", "0", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d240000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d240000000000000000000000000000]", "-1", "[2d220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d240000000000000000000000000000]", "1", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d260000000000000000000000000000]", "0", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d260000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d260000000000000000000000000000]", "-1", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2d260000000000000000000000000000]", "1", "[2d280000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2ecb3d459012b202,f6b1e4f48fe58388]", "2", "[2ecf3d459012b202f6b1e4f48fe58388]", "00")
    self.bid128_scalbn("0", "[2ffc0000000000000000000000000000]", "0", "[2ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2ffc0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2ffc0000000000000000000000000000]", "-1", "[2ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2ffc0000000000000000000000000000]", "1", "[2ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000")
    self.bid128_scalbn("0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[30200000000000000000000000000000]", "0", "[30200000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[30200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[30200000000000000000000000000000]", "-1", "[301e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[30200000000000000000000000000000]", "1", "[30220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33200000000000000000000000000000]", "0", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33200000000000000000000000000000]", "-1", "[331e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33200000000000000000000000000000]", "1", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33220000000000000000000000000000]", "0", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33220000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33220000000000000000000000000000]", "-1", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[33220000000000000000000000000000]", "1", "[33240000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[4f779f771e5fffaa,edf7aceef9df5ff7]", "-2145631211", "[00000000000000000000000000000000]", "30")
    self.bid128_scalbn("0", "[5ffa0000000000000000000000000000]", "0", "[5ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[5ffa0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[5ffa0000000000000000000000000000]", "-1", "[5ff80000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[5ffa0000000000000000000000000000]", "1", "[5ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000")
    self.bid128_scalbn("0", "[6003b75d7734cd9e1234567890123456]", "0", "[000e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[6003b75d7734cd9e1234567890123456]", "-1", "[000c0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[6003b75d7734cd9e1234567890123456]", "1", "[00100000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[6003b75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[6391054cd8a752b2,04d6af0f04a61d9a]", "-16393", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[69dbb75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[717fc712e3bbadf2,96bf11120cc8c450]", "1903172", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000000000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000001000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000001000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000001000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[78000001000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000001000000000000000000000000]", "0", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000001000000000000000000000000]", "12336256", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000001000000000000000000000000]", "-1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7c000001000000000000000000000000]", "1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7cd6fc74f7789725,0100881028204800]", "-4", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e003fffffffefffffffffffffffffff]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e003fffffffefffffffffffffffffff]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e003fffffffefffffffffffffffffff]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7e003fffffffefffffffffffffffffff]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "[7ef00000000000000000000000000001]", "0", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("0", "[7ef00000000000000000000000000001]", "12336256", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("0", "[7ef00000000000000000000000000001]", "-1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("0", "[7ef00000000000000000000000000001]", "1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("0", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[80000000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[80000000000000000000000000000000]", "-1", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[80000000000000000000000000000000]", "1", "[80020000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[80d2a758cbb72db8,3c0e29333b2efd9c]", "3", "[80d8a758cbb72db83c0e29333b2efd9c]", "00")
    self.bid128_scalbn("0", "[858c4e0a5a309c7d,edfd4c77f5d9c834]", "4", "[85944e0a5a309c7dedfd4c77f5d9c834]", "00")
    self.bid128_scalbn("0", "[8ac4a5b732a274fc,40e4b26944e0497f]", "5", "[8acea5b732a274fc40e4b26944e0497f]", "00")
    self.bid128_scalbn("0", "[9020020000028104,9e997b9ecdb7cbf9]", "122330526", "[f8000000000000000000000000000000]", "28")
    self.bid128_scalbn("0", "[94b9588fa6ccd5a3,a25c6a9031747040]", "1024", "[9cb9588fa6ccd5a3a25c6a9031747040]", "00")
    self.bid128_scalbn("0", "[96121006972502c3,0000000000000000]", "31510", "[f8000000000000000000000000000000]", "28")
    self.bid128_scalbn("0", "[ab0cd0d34b2dc8d6,feacbb4bef0e29ae]", "6", "[ab18d0d34b2dc8d6feacbb4bef0e29ae]", "00")
    self.bid128_scalbn("0", "[ad240000000000000000000000000000]", "0", "[ad240000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad240000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad240000000000000000000000000000]", "-1", "[ad220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad240000000000000000000000000000]", "1", "[ad260000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad3e0000000000000000000000000000]", "0", "[ad3e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad3e0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad3e0000000000000000000000000000]", "-1", "[ad3c0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ad3e0000000000000000000000000000]", "1", "[ad400000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b0200000000000000000000000000000]", "0", "[b0200000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b0200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b0200000000000000000000000000000]", "-1", "[b01e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b0200000000000000000000000000000]", "1", "[b0220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b2fcd8c588549ea4,fd444665ac926911]", "-2113", "[a27ad8c588549ea4fd444665ac926911]", "00")
    self.bid128_scalbn("0", "[b3200000000000000000000000000000]", "0", "[b3200000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b3200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b3200000000000000000000000000000]", "-1", "[b31e0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b3200000000000000000000000000000]", "1", "[b3220000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[b3d315add1ca40a2,684e604fcabb441b]", "7", "[b3e115add1ca40a2684e604fcabb441b]", "00")
    self.bid128_scalbn("0", "[b8639436278b64df,d2855c810025a646]", "8", "[b8739436278b64dfd2855c810025a646]", "00")
    self.bid128_scalbn("0", "[bb26000000000000,0000000000000000]", "9", "[bb380000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[deffffffffbfff7f,fcfbffdd4f8fbfe3]", "289410051", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[dffe0000000000000000000000000000]", "0", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[dffe0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[dffe0000000000000000000000000000]", "-1", "[dffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[dffe0000000000000000000000000000]", "1", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[e9e5febd78263143,0000000004000000]", "-3", "[a7900000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[fc00000000000000,0000000000000000]", "10", "[fc000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "[ffb7cbffdfa5fef7,f7aff9ffb37fdbff]", "134480896", "[fc000bffdfa5fef7f7aff9ffb37fdbff]", "01")
    self.bid128_scalbn("0", "[fffff7fbefffe7ff,975f0be6ccd6a23f]", "-2", "[fc000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "Infinity", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-Infinity", "0", "[f8000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "Infinity", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "Infinity", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-Infinity", "-1", "[f8000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "-Infinity", "1", "[f8000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "QNaN", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "QNaN", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "QNaN", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("0", "SNaN", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "SNaN", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("0", "SNaN", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00000000000000000000000000000000]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00000000000000000000000000000000]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00000000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000")
    self.bid128_scalbn("1", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000")
    self.bid128_scalbn("1", "[0001ed09bead87c0378d8e64ffffffff]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[0001ed09bead87c0378d8e64ffffffff]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[0001ed09bead87c0378d8e64ffffffff]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[0001ed09bead87c0378d8e64ffffffff]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[003e0000000000000000000000000000]", "0", "[003e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[003e0000000000000000000000000000]", "-1", "[003c0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[003e0000000000000000000000000000]", "1", "[00400000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[003e0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00840000000000000000000000000000]", "0", "[00840000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00840000000000000000000000000000]", "-1", "[00820000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00840000000000000000000000000000]", "1", "[00860000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[00840000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d240000000000000000000000000000]", "0", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d240000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d240000000000000000000000000000]", "-1", "[2d220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d240000000000000000000000000000]", "1", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d260000000000000000000000000000]", "0", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d260000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d260000000000000000000000000000]", "-1", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2d260000000000000000000000000000]", "1", "[2d280000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2ffc0000000000000000000000000000]", "0", "[2ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2ffc0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2ffc0000000000000000000000000000]", "-1", "[2ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2ffc0000000000000000000000000000]", "1", "[2ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000")
    self.bid128_scalbn("1", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[30200000000000000000000000000000]", "0", "[30200000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[30200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[30200000000000000000000000000000]", "-1", "[301e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[30200000000000000000000000000000]", "1", "[30220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33200000000000000000000000000000]", "0", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33200000000000000000000000000000]", "-1", "[331e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33200000000000000000000000000000]", "1", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33220000000000000000000000000000]", "0", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33220000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33220000000000000000000000000000]", "-1", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[33220000000000000000000000000000]", "1", "[33240000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[5ffa0000000000000000000000000000]", "0", "[5ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[5ffa0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[5ffa0000000000000000000000000000]", "-1", "[5ff80000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[5ffa0000000000000000000000000000]", "1", "[5ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000")
    self.bid128_scalbn("1", "[6003b75d7734cd9e1234567890123456]", "0", "[000e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[6003b75d7734cd9e1234567890123456]", "-1", "[000c0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[6003b75d7734cd9e1234567890123456]", "1", "[00100000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[6003b75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[69dbb75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000000000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000001000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000001000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000001000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[78000001000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000001000000000000000000000000]", "0", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000001000000000000000000000000]", "12336256", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000001000000000000000000000000]", "-1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7c000001000000000000000000000000]", "1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e003fffffffefffffffffffffffffff]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e003fffffffefffffffffffffffffff]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e003fffffffefffffffffffffffffff]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7e003fffffffefffffffffffffffffff]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("1", "[7ef00000000000000000000000000001]", "0", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("1", "[7ef00000000000000000000000000001]", "12336256", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("1", "[7ef00000000000000000000000000001]", "-1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("1", "[7ef00000000000000000000000000001]", "1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("1", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[80000000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[80000000000000000000000000000000]", "-1", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[80000000000000000000000000000000]", "1", "[80020000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad240000000000000000000000000000]", "0", "[ad240000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad240000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad240000000000000000000000000000]", "-1", "[ad220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad240000000000000000000000000000]", "1", "[ad260000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad3e0000000000000000000000000000]", "0", "[ad3e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad3e0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad3e0000000000000000000000000000]", "-1", "[ad3c0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[ad3e0000000000000000000000000000]", "1", "[ad400000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b0200000000000000000000000000000]", "0", "[b0200000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b0200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b0200000000000000000000000000000]", "-1", "[b01e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b0200000000000000000000000000000]", "1", "[b0220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b3200000000000000000000000000000]", "0", "[b3200000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b3200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b3200000000000000000000000000000]", "-1", "[b31e0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[b3200000000000000000000000000000]", "1", "[b3220000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[dffe0000000000000000000000000000]", "0", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[dffe0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[dffe0000000000000000000000000000]", "-1", "[dffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("1", "[dffe0000000000000000000000000000]", "1", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00000000000000000000000000000000]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00000000000000000000000000000000]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00000000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.9000000000")
    self.bid128_scalbn("2", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000")
    self.bid128_scalbn("2", "[0001ed09bead87c0378d8e64ffffffff]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[0001ed09bead87c0378d8e64ffffffff]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[0001ed09bead87c0378d8e64ffffffff]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[0001ed09bead87c0378d8e64ffffffff]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[003e0000000000000000000000000000]", "0", "[003e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[003e0000000000000000000000000000]", "-1", "[003c0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[003e0000000000000000000000000000]", "1", "[00400000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[003e0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00840000000000000000000000000000]", "0", "[00840000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00840000000000000000000000000000]", "-1", "[00820000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00840000000000000000000000000000]", "1", "[00860000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[00840000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d240000000000000000000000000000]", "0", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d240000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d240000000000000000000000000000]", "-1", "[2d220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d240000000000000000000000000000]", "1", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d260000000000000000000000000000]", "0", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d260000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d260000000000000000000000000000]", "-1", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2d260000000000000000000000000000]", "1", "[2d280000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2ffc0000000000000000000000000000]", "0", "[2ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2ffc0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2ffc0000000000000000000000000000]", "-1", "[2ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2ffc0000000000000000000000000000]", "1", "[2ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[78000000000000000000000000000000]", "28", ulp: "0.00000")
    self.bid128_scalbn("2", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000001]", "30", ulp: "-1.000000000")
    self.bid128_scalbn("2", "[30200000000000000000000000000000]", "0", "[30200000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[30200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[30200000000000000000000000000000]", "-1", "[301e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[30200000000000000000000000000000]", "1", "[30220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33200000000000000000000000000000]", "0", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33200000000000000000000000000000]", "-1", "[331e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33200000000000000000000000000000]", "1", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33220000000000000000000000000000]", "0", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33220000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33220000000000000000000000000000]", "-1", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[33220000000000000000000000000000]", "1", "[33240000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[5ffa0000000000000000000000000000]", "0", "[5ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[5ffa0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[5ffa0000000000000000000000000000]", "-1", "[5ff80000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[5ffa0000000000000000000000000000]", "1", "[5ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[78000000000000000000000000000000]", "28", ulp: "0.0000000000")
    self.bid128_scalbn("2", "[6003b75d7734cd9e1234567890123456]", "0", "[000e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[6003b75d7734cd9e1234567890123456]", "-1", "[000c0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[6003b75d7734cd9e1234567890123456]", "1", "[00100000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[6003b75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[69dbb75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000000000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000001000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000001000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000001000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[78000001000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000001000000000000000000000000]", "0", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000001000000000000000000000000]", "12336256", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000001000000000000000000000000]", "-1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7c000001000000000000000000000000]", "1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e003fffffffefffffffffffffffffff]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e003fffffffefffffffffffffffffff]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e003fffffffefffffffffffffffffff]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7e003fffffffefffffffffffffffffff]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("2", "[7ef00000000000000000000000000001]", "0", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("2", "[7ef00000000000000000000000000001]", "12336256", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("2", "[7ef00000000000000000000000000001]", "-1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("2", "[7ef00000000000000000000000000001]", "1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("2", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[80000000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[80000000000000000000000000000000]", "-1", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[80000000000000000000000000000000]", "1", "[80020000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad240000000000000000000000000000]", "0", "[ad240000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad240000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad240000000000000000000000000000]", "-1", "[ad220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad240000000000000000000000000000]", "1", "[ad260000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad3e0000000000000000000000000000]", "0", "[ad3e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad3e0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad3e0000000000000000000000000000]", "-1", "[ad3c0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[ad3e0000000000000000000000000000]", "1", "[ad400000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b0200000000000000000000000000000]", "0", "[b0200000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b0200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b0200000000000000000000000000000]", "-1", "[b01e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b0200000000000000000000000000000]", "1", "[b0220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b3200000000000000000000000000000]", "0", "[b3200000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b3200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b3200000000000000000000000000000]", "-1", "[b31e0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[b3200000000000000000000000000000]", "1", "[b3220000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[dffe0000000000000000000000000000]", "0", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[dffe0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[dffe0000000000000000000000000000]", "-1", "[dffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("2", "[dffe0000000000000000000000000000]", "1", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00000000000000000000000000000000]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00000000000000000000000000000000]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00000000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00000000000000000000000000000001]", "0", "[00000000000000000000000000000001]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[00000000000000000000000000000001]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".1000000000")
    self.bid128_scalbn("3", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000000]", "30", ulp: ".5000000000")
    self.bid128_scalbn("3", "[0001ed09bead87c0378d8e64ffffffff]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[0001ed09bead87c0378d8e64ffffffff]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[0001ed09bead87c0378d8e64ffffffff]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[0001ed09bead87c0378d8e64ffffffff]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[003e0000000000000000000000000000]", "0", "[003e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[003e0000000000000000000000000000]", "-1", "[003c0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[003e0000000000000000000000000000]", "1", "[00400000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[003e0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00840000000000000000000000000000]", "0", "[00840000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00840000000000000000000000000000]", "-1", "[00820000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00840000000000000000000000000000]", "1", "[00860000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[00840000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d240000000000000000000000000000]", "0", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d240000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d240000000000000000000000000000]", "-1", "[2d220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d240000000000000000000000000000]", "1", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d260000000000000000000000000000]", "0", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d260000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d260000000000000000000000000000]", "-1", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2d260000000000000000000000000000]", "1", "[2d280000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2ffc0000000000000000000000000000]", "0", "[2ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2ffc0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2ffc0000000000000000000000000000]", "-1", "[2ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2ffc0000000000000000000000000000]", "1", "[2ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "0", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-1", "[2FFBED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "1", "[2FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "2147483647", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.00000")
    self.bid128_scalbn("3", "[2FFDED09BEAD87C0378D8E63FFFFFFFF]", "-2147483648", "[00000000000000000000000000000000]", "30", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[30200000000000000000000000000000]", "0", "[30200000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[30200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[30200000000000000000000000000000]", "-1", "[301e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[30200000000000000000000000000000]", "1", "[30220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33200000000000000000000000000000]", "0", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33200000000000000000000000000000]", "-1", "[331e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33200000000000000000000000000000]", "1", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33220000000000000000000000000000]", "0", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33220000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33220000000000000000000000000000]", "-1", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[33220000000000000000000000000000]", "1", "[33240000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[5ffa0000000000000000000000000000]", "0", "[5ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[5ffa0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[5ffa0000000000000000000000000000]", "-1", "[5ff80000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[5ffa0000000000000000000000000000]", "1", "[5ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "0", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "00", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "1", "[5FFFED09BEAD87C0378D8E63FFFFFFFF]", "28", ulp: "0.0000000000")
    self.bid128_scalbn("3", "[6003b75d7734cd9e1234567890123456]", "0", "[000e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[6003b75d7734cd9e1234567890123456]", "-1", "[000c0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[6003b75d7734cd9e1234567890123456]", "1", "[00100000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[6003b75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[69dbb75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000000000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000001000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000001000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000001000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[78000001000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000001000000000000000000000000]", "0", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000001000000000000000000000000]", "12336256", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000001000000000000000000000000]", "-1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7c000001000000000000000000000000]", "1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e003fffffffefffffffffffffffffff]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e003fffffffefffffffffffffffffff]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e003fffffffefffffffffffffffffff]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7e003fffffffefffffffffffffffffff]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("3", "[7ef00000000000000000000000000001]", "0", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("3", "[7ef00000000000000000000000000001]", "12336256", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("3", "[7ef00000000000000000000000000001]", "-1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("3", "[7ef00000000000000000000000000001]", "1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("3", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[80000000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[80000000000000000000000000000000]", "-1", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[80000000000000000000000000000000]", "1", "[80020000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad240000000000000000000000000000]", "0", "[ad240000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad240000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad240000000000000000000000000000]", "-1", "[ad220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad240000000000000000000000000000]", "1", "[ad260000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad3e0000000000000000000000000000]", "0", "[ad3e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad3e0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad3e0000000000000000000000000000]", "-1", "[ad3c0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[ad3e0000000000000000000000000000]", "1", "[ad400000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b0200000000000000000000000000000]", "0", "[b0200000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b0200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b0200000000000000000000000000000]", "-1", "[b01e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b0200000000000000000000000000000]", "1", "[b0220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b3200000000000000000000000000000]", "0", "[b3200000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b3200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b3200000000000000000000000000000]", "-1", "[b31e0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[b3200000000000000000000000000000]", "1", "[b3220000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[dffe0000000000000000000000000000]", "0", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[dffe0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[dffe0000000000000000000000000000]", "-1", "[dffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("3", "[dffe0000000000000000000000000000]", "1", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00000000000000000000000000000000]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00000000000000000000000000000000]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00000000000000000000000000000000]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00000000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00000000000000000000000000000005]", "-1", "[00000000000000000000000000000001]", "30", ulp: "-.500000000")
    self.bid128_scalbn("4", "[0001ed09bead87c0378d8e64ffffffff]", "0", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[0001ed09bead87c0378d8e64ffffffff]", "-1", "[00000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[0001ed09bead87c0378d8e64ffffffff]", "1", "[00020000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[0001ed09bead87c0378d8e64ffffffff]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[003e0000000000000000000000000000]", "0", "[003e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[003e0000000000000000000000000000]", "-1", "[003c0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[003e0000000000000000000000000000]", "1", "[00400000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[003e0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00840000000000000000000000000000]", "0", "[00840000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00840000000000000000000000000000]", "-1", "[00820000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00840000000000000000000000000000]", "1", "[00860000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[00840000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d240000000000000000000000000000]", "0", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d240000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d240000000000000000000000000000]", "-1", "[2d220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d240000000000000000000000000000]", "1", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d260000000000000000000000000000]", "0", "[2d260000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d260000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d260000000000000000000000000000]", "-1", "[2d240000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2d260000000000000000000000000000]", "1", "[2d280000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2ffc0000000000000000000000000000]", "0", "[2ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2ffc0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2ffc0000000000000000000000000000]", "-1", "[2ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[2ffc0000000000000000000000000000]", "1", "[2ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[30200000000000000000000000000000]", "0", "[30200000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[30200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[30200000000000000000000000000000]", "-1", "[301e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[30200000000000000000000000000000]", "1", "[30220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33200000000000000000000000000000]", "0", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33200000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33200000000000000000000000000000]", "-1", "[331e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33200000000000000000000000000000]", "1", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33220000000000000000000000000000]", "0", "[33220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33220000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33220000000000000000000000000000]", "-1", "[33200000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[33220000000000000000000000000000]", "1", "[33240000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[5ffa0000000000000000000000000000]", "0", "[5ffa0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[5ffa0000000000000000000000000000]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[5ffa0000000000000000000000000000]", "-1", "[5ff80000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[5ffa0000000000000000000000000000]", "1", "[5ffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[6003b75d7734cd9e1234567890123456]", "0", "[000e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[6003b75d7734cd9e1234567890123456]", "-1", "[000c0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[6003b75d7734cd9e1234567890123456]", "1", "[00100000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[6003b75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[69dbb75d7734cd9e1234567890123456]", "0", "[276e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[69dbb75d7734cd9e1234567890123456]", "12336256", "[5ffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[69dbb75d7734cd9e1234567890123456]", "-1", "[276c0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[69dbb75d7734cd9e1234567890123456]", "1", "[27700000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000000000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000000000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000000000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000000000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000001000000000000000000000000]", "0", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000001000000000000000000000000]", "12336256", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000001000000000000000000000000]", "-1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[78000001000000000000000000000000]", "1", "[78000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000001000000000000000000000000]", "0", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000001000000000000000000000000]", "12336256", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000001000000000000000000000000]", "-1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7c000001000000000000000000000000]", "1", "[7c000001000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[7e000000000000000000000000000000]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e000000000000000000000000000000]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e000000000000000000000000000000]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e000000000000000000000000000000]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e003fffffffefffffffffffffffffff]", "0", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e003fffffffefffffffffffffffffff]", "12336256", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e003fffffffefffffffffffffffffff]", "-1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7e003fffffffefffffffffffffffffff]", "1", "[7c000000000000000000000000000000]", "01")
    self.bid128_scalbn("4", "[7ef00000000000000000000000000001]", "0", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("4", "[7ef00000000000000000000000000001]", "12336256", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("4", "[7ef00000000000000000000000000001]", "-1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("4", "[7ef00000000000000000000000000001]", "1", "[7c000000000000000000000000000001]", "01")
    self.bid128_scalbn("4", "[80000000000000000000000000000000]", "0", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[80000000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[80000000000000000000000000000000]", "-1", "[80000000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[80000000000000000000000000000000]", "1", "[80020000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad240000000000000000000000000000]", "0", "[ad240000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad240000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad240000000000000000000000000000]", "-1", "[ad220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad240000000000000000000000000000]", "1", "[ad260000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad3e0000000000000000000000000000]", "0", "[ad3e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad3e0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad3e0000000000000000000000000000]", "-1", "[ad3c0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[ad3e0000000000000000000000000000]", "1", "[ad400000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b0200000000000000000000000000000]", "0", "[b0200000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b0200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b0200000000000000000000000000000]", "-1", "[b01e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b0200000000000000000000000000000]", "1", "[b0220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b3200000000000000000000000000000]", "0", "[b3200000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b3200000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b3200000000000000000000000000000]", "-1", "[b31e0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[b3200000000000000000000000000000]", "1", "[b3220000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[dffe0000000000000000000000000000]", "0", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[dffe0000000000000000000000000000]", "12336256", "[dffe0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[dffe0000000000000000000000000000]", "-1", "[dffc0000000000000000000000000000]", "00")
    self.bid128_scalbn("4", "[dffe0000000000000000000000000000]", "1", "[dffe0000000000000000000000000000]", "00")
  }

  private func bid128_scalbn(
    _ _rounding: String,
    _ _arg0: String,
    _ _arg1: String,
    _ _expected: String,
    _ _expectedStatus: String,
    ulp _ulp: String? = nil,
    file: StaticString = #file,
    line: UInt = #line
  ) {
    guard let rounding = self.parseRounding(_rounding, file, line) else { return }
    guard let arg0 = self.parseDecimal128(_arg0, file, line) else { return }
    guard let arg1 = self.parseInt32(_arg1, file, line) else { return }
    guard let expected = self.parseDecimal128(_expected, file, line) else { return }
    guard let expectedStatus = self.parseStatus(_expectedStatus, file, line) else { return }
    guard let ulp = self.parseUlp(_ulp, file, line) else { return }

    var status = DecimalStatus()
    let result = Decimal128(sign: .plus, exponent: Int(arg1), significand: arg0, rounding: rounding, status: &status)
    let resultIntel = self.toIntel_scaleB(arg0, Int(arg1), result: result, status: &status)
    self.assertEqual(resultIntel, expected, .fuzzyStatus, ulp: ulp, rounding: rounding, file, line)
    self.assertStatus(status, expectedStatus, .fuzzyStatus, file, line)
  }
}
